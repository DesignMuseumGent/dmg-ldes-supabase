{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,uDAA+C;AAE/C,2CAMuB;AAEvB,iDAA4C;AAE5C,gDAA8B;AAC9B,qDAAmC;AACnC,mDAAiC;AAEjC,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAE,CAAC;AAE7B,8CAA8C;AAC9C,MAAM,UAAU,GAAG,IAAI,uBAAU,EAAE,CAAC;AACpC,UAAU,CAAC,eAAe,CACxB,IAAI,2BAAiB,EAAE,EACvB,2BAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EACjD,CAAC,QAAQ,CAAC,CAAC,CAAC;AACd,UAAU,CAAC,eAAe,CACxB,IAAI,4BAAkB,EAAE,EACxB,CAAC,4BAAkB,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EACnD,CAAC,SAAS,CAAC,CAAC,CAAC;AACf,UAAU,CAAC,eAAe,CACxB,IAAI,iCAAuB,EAAE,EAC7B,iCAAuB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EACvD,CAAC,QAAQ,CAAC,CAAC,CAAC;AACd,UAAU,CAAC,eAAe,CACxB,IAAI,kCAAwB,EAAE,EAC9B,kCAAwB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EACxD,CAAC,QAAQ,CAAC,CAAC,CAAC;AACd,UAAU,CAAC,eAAe,CACxB,IAAI,yBAAe,EAAE,EACrB,yBAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAC/C,CAAC,QAAQ,CAAC,CAAC,CAAC;AAEd;;;;;GAKG;AACH,SAAgB,OAAO,CAAC,OAAoB,EAAE,QAAkB;IAC9D,OAAO,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAC/C,CAAC;AAFD,0BAEC;AAED;;;;;GAKG;AACH,SAAgB,KAAK,CAAC,KAAU,EAAE,OAAyC;IACzE,gEAAgE;IAChE,IAAI,OAAO,IAAI,WAAW,IAAI,OAAO,EAAE;QACrC,OAAO,GAAG,EAAE,WAAW,EAAE,OAAO,EAAE,CAAC;KACpC;IAED,2BAA2B;IAC3B,OAAO,GAAmB,OAAO,IAAI,EAAE,CAAC;IACxC,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;QACnC,OAAO,CAAC,WAAW,GAAG,EAAE,CAAC;KAC1B;IAED,OAAO,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AAC1C,CAAC;AAbD,sBAaC;AAED;;;;;;;GAOG;AACH,SAAgB,UAAU,CAAC,IAAc,EAAE,QAAkB;IAC3D,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE;QAC/B,OAAO,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;KAChC;IACD,OAAO,IAAI,CAAC,KAAK,CAAC;AACpB,CAAC;AALD,gCAKC;AAED;;GAEG;AACH,SAAgB,wBAAwB;IACtC,OAAO,UAAU,CAAC,wBAAwB,EAAE,CAAC;AAC/C,CAAC;AAFD,4DAEC;AAED;;GAEG;AACH,SAAgB,gCAAgC;IAC9C,OAAO,UAAU,CAAC,gCAAgC,EAAE,CAAC;AACvD,CAAC;AAFD,4EAEC","sourcesContent":["import { DataFactory } from \"rdf-data-factory\";\nimport * as RDF from \"rdf-js\";\nimport {\n  TypeHandlerBoolean,\n  TypeHandlerDate,\n  TypeHandlerNumberDouble,\n  TypeHandlerNumberInteger,\n  TypeHandlerString,\n} from \"./lib/handler\";\nimport {IToRdfOptions} from \"./lib/ITypeHandler\";\nimport {Translator} from \"./lib/Translator\";\n\nexport * from \"./lib/handler\";\nexport * from \"./lib/ITypeHandler\";\nexport * from \"./lib/Translator\";\n\nconst DF = new DataFactory();\n\n// Construct translator with built-in handlers\nconst translator = new Translator();\ntranslator.registerHandler(\n  new TypeHandlerString(),\n  TypeHandlerString.TYPES.map(t => DF.namedNode(t)),\n  ['string']);\ntranslator.registerHandler(\n  new TypeHandlerBoolean(),\n  [TypeHandlerBoolean.TYPE].map(t => DF.namedNode(t)),\n  ['boolean']);\ntranslator.registerHandler(\n  new TypeHandlerNumberDouble(),\n  TypeHandlerNumberDouble.TYPES.map(t => DF.namedNode(t)),\n  ['number']);\ntranslator.registerHandler(\n  new TypeHandlerNumberInteger(),\n  TypeHandlerNumberInteger.TYPES.map(t => DF.namedNode(t)),\n  ['number']);\ntranslator.registerHandler(\n  new TypeHandlerDate(),\n  TypeHandlerDate.TYPES.map(t => DF.namedNode(t)),\n  ['object']);\n\n/**\n * Convert the given RDF literal to an JavaScript primitive.\n * @param {Literal} literal An RDF literal value.\n * @param {boolean} validate If the literal value should be validated against the datatype.\n * @return {any} A JavaScript primitive value.\n */\nexport function fromRdf(literal: RDF.Literal, validate?: boolean): any {\n  return translator.fromRdf(literal, validate);\n}\n\n/**\n * Convert the given JavaScript primitive to an RDF literal.\n * @param value A JavaScript primitive value.\n * @param options Options for RDF conversion. May also be a data factory.\n * @return {Literal} An RDF literal value.\n */\nexport function toRdf(value: any, options?: IToRdfOptions | RDF.DataFactory): RDF.Literal {\n  // Backwards-compatibility to accept data factory as option arg.\n  if (options && 'namedNode' in options) {\n    options = { dataFactory: options };\n  }\n\n  // Set default data factory\n  options = <IToRdfOptions> options || {};\n  if (options && !options.dataFactory) {\n    options.dataFactory = DF;\n  }\n\n  return translator.toRdf(value, options);\n}\n\n/**\n * Get the raw value of the given term.\n * If it is a literal, {@link fromRdf} will be called.\n * Otherwise {@link .value} will be returned.\n * @param {Term} term Any RDF term.\n * @param {boolean} validate If the literal value should be validated against the datatype.\n * @return {any} A JavaScript primitive value.\n */\nexport function getTermRaw(term: RDF.Term, validate?: boolean): any {\n  if (term.termType === 'Literal') {\n    return fromRdf(term, validate);\n  }\n  return term.value;\n}\n\n/**\n * @return {NamedNode[]} An array of all supported RDF datatypes.\n */\nexport function getSupportedRdfDatatypes(): RDF.NamedNode[] {\n  return translator.getSupportedRdfDatatypes();\n}\n\n/**\n * @return {string[]} An array of all supported JavaScript types.\n */\nexport function getSupportedJavaScriptPrimitives(): string[] {\n  return translator.getSupportedJavaScriptPrimitives();\n}\n"]}