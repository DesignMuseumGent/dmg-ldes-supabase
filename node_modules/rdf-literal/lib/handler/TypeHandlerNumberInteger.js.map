{"version":3,"file":"TypeHandlerNumberInteger.js","sourceRoot":"","sources":["TypeHandlerNumberInteger.ts"],"names":[],"mappings":";;;AAEA,8CAAyC;AAEzC;;GAEG;AACH,MAAa,wBAAwB;IAoB5B,OAAO,CAAC,OAAoB,EAAE,QAAkB;QACrD,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC3C,IAAI,QAAQ,EAAE;YACZ,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACpD,uBAAU,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;aAC1C;YACD,sBAAsB;SACvB;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,KAAK,CAAC,KAAU,EAAE,EAAE,QAAQ,EAAE,WAAW,EAAiB;QAC/D,OAAO,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,QAAQ;eAC7C,CAAC,KAAK,IAAI,wBAAwB,CAAC,OAAO,IAAI,KAAK,IAAI,wBAAwB,CAAC,OAAO;gBACxF,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC1D,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnE,CAAC;;AApCH,4DAsCC;AApCwB,8BAAK,GAAa;IACvC,0CAA0C;IAC1C,uCAAuC;IACvC,sCAAsC;IACtC,uCAAuC;IACvC,wCAAwC;IACxC,kDAAkD;IAClD,qDAAqD;IACrD,qDAAqD;IACrD,kDAAkD;IAClD,+CAA+C;IAC/C,8CAA8C;IAC9C,+CAA+C;IAC/C,gDAAgD;CACjD,CAAC;AACqB,gCAAO,GAAW,UAAU,CAAC;AAC7B,gCAAO,GAAW,CAAC,UAAU,CAAC","sourcesContent":["import * as RDF from \"@rdfjs/types\";\nimport {IToRdfOptions, ITypeHandler} from \"../ITypeHandler\";\nimport {Translator} from \"../Translator\";\n\n/**\n * Translates integer numbers.\n */\nexport class TypeHandlerNumberInteger implements ITypeHandler {\n\n  public static readonly TYPES: string[] = [\n    'http://www.w3.org/2001/XMLSchema#integer',\n    'http://www.w3.org/2001/XMLSchema#long',\n    'http://www.w3.org/2001/XMLSchema#int',\n    'http://www.w3.org/2001/XMLSchema#byte',\n    'http://www.w3.org/2001/XMLSchema#short',\n    'http://www.w3.org/2001/XMLSchema#negativeInteger',\n    'http://www.w3.org/2001/XMLSchema#nonNegativeInteger',\n    'http://www.w3.org/2001/XMLSchema#nonPositiveInteger',\n    'http://www.w3.org/2001/XMLSchema#positiveInteger',\n    'http://www.w3.org/2001/XMLSchema#unsignedByte',\n    'http://www.w3.org/2001/XMLSchema#unsignedInt',\n    'http://www.w3.org/2001/XMLSchema#unsignedLong',\n    'http://www.w3.org/2001/XMLSchema#unsignedShort',\n  ];\n  public static readonly MAX_INT: number = 2147483647;\n  public static readonly MIN_INT: number = -2147483648;\n\n  public fromRdf(literal: RDF.Literal, validate?: boolean): any {\n    const parsed = parseInt(literal.value, 10);\n    if (validate) {\n      if (isNaN(parsed) || literal.value.indexOf('.') >= 0) {\n        Translator.incorrectRdfDataType(literal);\n      }\n      // TODO: validate more\n    }\n    return parsed;\n  }\n\n  public toRdf(value: any, { datatype, dataFactory }: IToRdfOptions): RDF.Literal {\n    return dataFactory.literal(String(value), datatype\n      || (value <= TypeHandlerNumberInteger.MAX_INT && value >= TypeHandlerNumberInteger.MIN_INT\n        ? dataFactory.namedNode(TypeHandlerNumberInteger.TYPES[0])\n        : dataFactory.namedNode(TypeHandlerNumberInteger.TYPES[1])));\n  }\n\n}\n"]}