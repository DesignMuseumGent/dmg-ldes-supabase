{"version":3,"file":"TypeHandlerDate.js","sourceRoot":"","sources":["TypeHandlerDate.ts"],"names":[],"mappings":";;;AAEA,8CAAyC;AAEzC;;GAEG;AACH,MAAa,eAAe;IAmBnB,OAAO,CAAC,OAAoB,EAAE,QAAkB;QACrD,IAAI,QAAQ,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,eAAe;aACjD,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;YAChF,uBAAU,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;SAC1C;QACD,QAAQ,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE;YAChC,KAAK,uCAAuC;gBAC1C,OAAO,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;YACrD,KAAK,4CAA4C;gBAC/C,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC/C,OAAO,IAAI,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YACzF,KAAK,wCAAwC;gBAC3C,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC;YAC5C,KAAK,6CAA6C;gBAChD,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;YACzC;gBACE,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAChC;IACH,CAAC;IAEM,KAAK,CAAC,KAAU,EAAE,EAAE,QAAQ,EAAE,WAAW,EAAiB;QAC/D,QAAQ,GAAG,QAAQ,IAAI,WAAW,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAEvE,qBAAqB;QACrB,IAAI,CAAC,CAAC,KAAK,YAAY,IAAI,CAAC,EAAE;YAC5B,OAAO,IAAI,CAAC;SACb;QACD,MAAM,IAAI,GAAgB,KAAK,CAAC;QAEhC,IAAI,WAAW,CAAC;QAChB,QAAQ,QAAQ,CAAC,KAAK,EAAE;YACxB,KAAK,uCAAuC;gBAC1C,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;gBACxC,MAAM;YACR,KAAK,4CAA4C;gBAC/C,WAAW,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;gBACjE,MAAM;YACR,KAAK,wCAAwC;gBAC3C,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;gBAC5C,MAAM;YACR,KAAK,6CAA6C;gBAChD,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;gBACrE,MAAM;YACR,KAAK,uCAAuC;gBAC1C,WAAW,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBACrD,MAAM;YACR;gBACE,WAAW,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;SAClC;QACD,OAAO,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IACpD,CAAC;;AArEH,0CAuEC;AArEwB,qBAAK,GAAa;IACvC,2CAA2C;IAC3C,uCAAuC;IACvC,uCAAuC;IACvC,4CAA4C;IAC5C,wCAAwC;IACxC,6CAA6C;CAC9C,CAAC;AACsB,0BAAU,GAA6B;IAC7D,IAAI,EAAE,kCAAkC;IACxC,QAAQ,EAAE,wHAAwH;IAClI,IAAI,EAAE,UAAU;IAChB,SAAS,EAAE,qBAAqB;IAChC,KAAK,EAAE,UAAU;IACjB,UAAU,EAAE,qBAAqB;CAClC,CAAC","sourcesContent":["import * as RDF from \"@rdfjs/types\";\nimport {IToRdfOptions, ITypeHandler} from \"../ITypeHandler\";\nimport {Translator} from \"../Translator\";\n\n/**\n * Translates dates.\n */\nexport class TypeHandlerDate implements ITypeHandler {\n\n  public static readonly TYPES: string[] = [\n    'http://www.w3.org/2001/XMLSchema#dateTime',\n    'http://www.w3.org/2001/XMLSchema#date',\n    'http://www.w3.org/2001/XMLSchema#gDay',\n    'http://www.w3.org/2001/XMLSchema#gMonthDay',\n    'http://www.w3.org/2001/XMLSchema#gYear',\n    'http://www.w3.org/2001/XMLSchema#gYearMonth',\n  ];\n  private static readonly VALIDATORS: {[type: string]: RegExp} = {\n    date: /^[0-9]+-[0-9][0-9]-[0-9][0-9]Z?$/,\n    dateTime: /^[0-9]+-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9](\\.[0-9][0-9][0-9])?((Z?)|([\\+-][0-9][0-9]:[0-9][0-9]))$/,\n    gDay: /^[0-9]+$/,\n    gMonthDay: /^[0-9]+-[0-9][0-9]$/,\n    gYear: /^[0-9]+$/,\n    gYearMonth: /^[0-9]+-[0-9][0-9]$/,\n  };\n\n  public fromRdf(literal: RDF.Literal, validate?: boolean): any {\n    if (validate && !literal.value.match(TypeHandlerDate\n      .VALIDATORS[literal.datatype.value.substr(33, literal.datatype.value.length)])) {\n      Translator.incorrectRdfDataType(literal);\n    }\n    switch (literal.datatype.value) {\n    case 'http://www.w3.org/2001/XMLSchema#gDay':\n      return new Date(0, 0, parseInt(literal.value, 10));\n    case 'http://www.w3.org/2001/XMLSchema#gMonthDay':\n      const partsMonthDay = literal.value.split('-');\n      return new Date(0, parseInt(partsMonthDay[0], 10) - 1, parseInt(partsMonthDay[1], 10));\n    case 'http://www.w3.org/2001/XMLSchema#gYear':\n      return new Date(literal.value + '-01-01');\n    case 'http://www.w3.org/2001/XMLSchema#gYearMonth':\n      return new Date(literal.value + '-01');\n    default:\n      return new Date(literal.value);\n    }\n  }\n\n  public toRdf(value: any, { datatype, dataFactory }: IToRdfOptions): RDF.Literal {\n    datatype = datatype || dataFactory.namedNode(TypeHandlerDate.TYPES[0]);\n\n    // Assume date values\n    if (!(value instanceof Date)) {\n      return null;\n    }\n    const date: Date = <Date> value;\n\n    let valueString;\n    switch (datatype.value) {\n    case 'http://www.w3.org/2001/XMLSchema#gDay':\n      valueString = String(date.getUTCDate());\n      break;\n    case 'http://www.w3.org/2001/XMLSchema#gMonthDay':\n      valueString = (date.getUTCMonth() + 1) + '-' + date.getUTCDate();\n      break;\n    case 'http://www.w3.org/2001/XMLSchema#gYear':\n      valueString = String(date.getUTCFullYear());\n      break;\n    case 'http://www.w3.org/2001/XMLSchema#gYearMonth':\n      valueString = date.getUTCFullYear() + '-' + (date.getUTCMonth() + 1);\n      break;\n    case 'http://www.w3.org/2001/XMLSchema#date':\n      valueString = date.toISOString().replace(/T.*$/, '');\n      break;\n    default:\n      valueString = date.toISOString();\n    }\n    return dataFactory.literal(valueString, datatype);\n  }\n\n}\n"]}