{"version":3,"file":"TypeHandlerBoolean.js","sourceRoot":"","sources":["TypeHandlerBoolean.ts"],"names":[],"mappings":";;;AAEA,8CAAyC;AAEzC;;GAEG;AACH,MAAa,kBAAkB;IAItB,OAAO,CAAC,OAAoB,EAAE,QAAkB;QACrD,QAAQ,OAAO,CAAC,KAAK,EAAE;YACvB,KAAK,MAAM;gBACT,OAAO,IAAI,CAAC;YACd,KAAK,OAAO;gBACV,OAAO,KAAK,CAAC;YACf,KAAK,GAAG;gBACN,OAAO,IAAI,CAAC;YACd,KAAK,GAAG;gBACN,OAAO,KAAK,CAAC;SACd;QACD,IAAI,QAAQ,EAAE;YACZ,uBAAU,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;SAC1C;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,KAAK,CAAC,KAAU,EAAE,EAAE,QAAQ,EAAE,WAAW,EAAiB;QAC/D,OAAO,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EACjD,QAAQ,IAAI,WAAW,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;IAChE,CAAC;;AAxBH,gDA0BC;AAxBwB,uBAAI,GAAW,0CAA0C,CAAC","sourcesContent":["import * as RDF from \"@rdfjs/types\";\nimport {IToRdfOptions, ITypeHandler} from \"../ITypeHandler\";\nimport {Translator} from \"../Translator\";\n\n/**\n * Translates booleans.\n */\nexport class TypeHandlerBoolean implements ITypeHandler {\n\n  public static readonly TYPE: string = 'http://www.w3.org/2001/XMLSchema#boolean';\n\n  public fromRdf(literal: RDF.Literal, validate?: boolean): any {\n    switch (literal.value) {\n    case 'true':\n      return true;\n    case 'false':\n      return false;\n    case '1':\n      return true;\n    case '0':\n      return false;\n    }\n    if (validate) {\n      Translator.incorrectRdfDataType(literal);\n    }\n    return false;\n  }\n\n  public toRdf(value: any, { datatype, dataFactory }: IToRdfOptions): RDF.Literal {\n    return dataFactory.literal(value ? 'true' : 'false',\n      datatype || dataFactory.namedNode(TypeHandlerBoolean.TYPE));\n  }\n\n}\n"]}