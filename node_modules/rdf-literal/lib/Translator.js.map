{"version":3,"file":"Translator.js","sourceRoot":"","sources":["Translator.ts"],"names":[],"mappings":";;;AAGA;;GAEG;AACH,MAAa,UAAU;IAMrB;QACE,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;QAChC,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC1B,CAAC;IAEM,MAAM,CAAC,oBAAoB,CAAC,OAAoB;QACrD,MAAM,IAAI,KAAK,CAAC,eAAe,OAAO,CAAC,QAAQ,CAAC,KAAK,YAAY,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;IACrF,CAAC;IAEM,eAAe,CAAC,OAAqB,EAAE,YAA6B,EAAE,mBAA6B;QACxG,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;YACtC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC7C,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;SACnD;QACD,KAAK,MAAM,kBAAkB,IAAI,mBAAmB,EAAE;YACpD,IAAI,qBAAqB,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;YACnE,IAAI,CAAC,qBAAqB,EAAE;gBAC1B,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,GAAG,qBAAqB,GAAG,EAAE,CAAC;aACrE;YACD,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACrC;IACH,CAAC;IAEM,OAAO,CAAC,OAAoB,EAAE,QAAkB;QACrD,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC7D,IAAI,OAAO,EAAE;YACX,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;SAC3C;aAAM;YACL,OAAO,OAAO,CAAC,KAAK,CAAC;SACtB;IACH,CAAC;IAEM,KAAK,CAAC,KAAU,EAAE,OAAuB;QAC9C,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,KAAK,CAAC,CAAC;QAClD,IAAI,QAAQ,EAAE;YACZ,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;gBAC9B,MAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBAC1C,IAAI,GAAG,EAAE;oBACP,OAAO,GAAG,CAAC;iBACZ;aACF;SACF;QACD,MAAM,IAAI,KAAK,CAAC,8BAA8B,KAAK,GAAG,CAAC,CAAC;IAC1D,CAAC;IAED;;OAEG;IACI,wBAAwB;QAC7B,OAAO,IAAI,CAAC,qBAAqB,CAAC;IACpC,CAAC;IAED;;OAEG;IACI,gCAAgC;QACrC,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACzC,CAAC;CAEF;AAlED,gCAkEC","sourcesContent":["import * as RDF from \"@rdfjs/types\";\nimport {IToRdfOptions, ITypeHandler} from \"./ITypeHandler\";\n\n/**\n * Translates between an RDF literal and a JavaScript primitive.\n */\nexport class Translator implements ITypeHandler {\n\n  private readonly supportedRdfDatatypes: RDF.NamedNode[];\n  private readonly fromRdfHandlers: {[rdfDatatype: string]: ITypeHandler};\n  private readonly toRdfHandlers: {[javaScriptType: string]: ITypeHandler[]};\n\n  constructor() {\n    this.supportedRdfDatatypes = [];\n    this.fromRdfHandlers = {};\n    this.toRdfHandlers = {};\n  }\n\n  public static incorrectRdfDataType(literal: RDF.Literal) {\n    throw new Error(`Invalid RDF ${literal.datatype.value} value: '${literal.value}'`);\n  }\n\n  public registerHandler(handler: ITypeHandler, rdfDatatypes: RDF.NamedNode[], javaScriptDataTypes: string[]) {\n    for (const rdfDatatype of rdfDatatypes) {\n      this.supportedRdfDatatypes.push(rdfDatatype);\n      this.fromRdfHandlers[rdfDatatype.value] = handler;\n    }\n    for (const javaScriptDataType of javaScriptDataTypes) {\n      let existingToRdfHandlers = this.toRdfHandlers[javaScriptDataType];\n      if (!existingToRdfHandlers) {\n        this.toRdfHandlers[javaScriptDataType] = existingToRdfHandlers = [];\n      }\n      existingToRdfHandlers.push(handler);\n    }\n  }\n\n  public fromRdf(literal: RDF.Literal, validate?: boolean): any {\n    const handler = this.fromRdfHandlers[literal.datatype.value];\n    if (handler) {\n      return handler.fromRdf(literal, validate);\n    } else {\n      return literal.value;\n    }\n  }\n\n  public toRdf(value: any, options?: IToRdfOptions): RDF.Literal {\n    const handlers = this.toRdfHandlers[typeof value];\n    if (handlers) {\n      for (const handler of handlers) {\n        const ret = handler.toRdf(value, options);\n        if (ret) {\n          return ret;\n        }\n      }\n    }\n    throw new Error(`Invalid JavaScript value: '${value}'`);\n  }\n\n  /**\n   * @return {NamedNode[]} An array of all supported RDF datatypes.\n   */\n  public getSupportedRdfDatatypes(): RDF.NamedNode[] {\n    return this.supportedRdfDatatypes;\n  }\n\n  /**\n   * @return {string[]} An array of all supported JavaScript types.\n   */\n  public getSupportedJavaScriptPrimitives(): string[] {\n    return Object.keys(this.toRdfHandlers);\n  }\n\n}\n"]}