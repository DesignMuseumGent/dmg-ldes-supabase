{"version":3,"file":"ITypeHandler.js","sourceRoot":"","sources":["ITypeHandler.ts"],"names":[],"mappings":"","sourcesContent":["import * as RDF from \"@rdfjs/types\";\n\n/**\n * A type handler translates between an RDF literal and a JavaScript primitive.\n *\n * {@link fromRdf} should always be the reverse operation of {@link toRdf}.\n * I.e., `fromRdf(toRdf(val)) === val)`.\n * However, the other direction should not necessarily apply,\n * as there is a loss of information in {@link fromRdf},\n * so `toRdf(fromRdf(val)).equals(val)` will not always be true.\n */\nexport interface ITypeHandler {\n\n  /**\n   * Convert the given RDF literal to an JavaScript primitive.\n   * @param {Literal} literal An RDF literal value.\n   * @param {boolean} validate If the literal value should be validated against the datatype.\n   * @return {any} A JavaScript primitive value.\n   */\n  fromRdf(literal: RDF.Literal, validate?: boolean): any;\n\n  /**\n   * Convert the given JavaScript primitive to an RDF literal.\n   * @param value A JavaScript primitive value.\n   * @param options Options for RDF conversion.\n   * @return {Literal} An RDF literal value.\n   */\n  toRdf(value: any, options?: IToRdfOptions): RDF.Literal;\n\n}\n\nexport interface IToRdfOptions {\n  /**\n   * An optional datatype to enforce.\n   */\n  datatype?: RDF.NamedNode;\n  /**\n   * The data factory to create terms with.\n   */\n  dataFactory?: RDF.DataFactory;\n}\n"]}