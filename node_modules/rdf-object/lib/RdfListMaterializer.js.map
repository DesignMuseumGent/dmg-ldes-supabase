{"version":3,"file":"RdfListMaterializer.js","sourceRoot":"","sources":["RdfListMaterializer.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport { stringToTerm, termToString } from 'rdf-string';\n\nconst DF = new DataFactory();\n\n/**\n * A helper class for converting RDF lists to JavaScript RDF term term lists\n */\nexport class RdfListMaterializer {\n  public static readonly RDF_FIRST: RDF.NamedNode = DF.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first');\n  public static readonly RDF_REST: RDF.NamedNode = DF.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#rest');\n  public static readonly RDF_NIL: RDF.NamedNode = DF.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil');\n\n  private readonly chains: Record<string, { first: RDF.Term; rest: RDF.Term }> = {};\n\n  protected static addChain(chains: Record<string, { first: RDF.Term; rest: RDF.Term }>, subject: RDF.Term,\n    object: RDF.Term, type: 'first' | 'rest'): void {\n    const hash: string = termToString(subject);\n    if (!chains[hash]) {\n      chains[hash] = <{ first: RDF.Term; rest: RDF.Term }> {};\n    }\n    chains[hash][type] = object;\n  }\n\n  protected static materializeChain(root: RDF.Term, chains: Record<string, { first: RDF.Term; rest: RDF.Term }>,\n    array?: RDF.Term[]): RDF.Term[] | undefined {\n    if (!array) {\n      array = [];\n    }\n\n    const hash: string = termToString(root);\n    const chain = chains[hash];\n    if (chain && chain.first && chain.rest) {\n      array.push(chain.first);\n      if (!chain.rest.equals(RdfListMaterializer.RDF_NIL)) {\n        return RdfListMaterializer.materializeChain(chain.rest, chains, array);\n      }\n      return array;\n    }\n  }\n\n  /**\n   * Import the given RDF stream.\n   * @param {Stream} stream An RDF stream.\n   * @return {Promise<void>} A promise that resolves once the stream has ended.\n   * @template Q The type of quad, defaults to RDF.Quad.\n   */\n  public import<Q extends RDF.BaseQuad = RDF.Quad>(stream: RDF.Stream<Q>): Promise<void> {\n    return new Promise((resolve, reject) => {\n      stream.on('data', (quad: Q) => {\n        if (quad.predicate.equals(RdfListMaterializer.RDF_FIRST)) {\n          RdfListMaterializer.addChain(this.chains, quad.subject, quad.object, 'first');\n        } else if (quad.predicate.equals(RdfListMaterializer.RDF_REST)) {\n          RdfListMaterializer.addChain(this.chains, quad.subject, quad.object, 'rest');\n        }\n      });\n      stream.on('error', reject);\n      stream.on('end', resolve);\n    });\n  }\n\n  /**\n   * Get the list identified by the given starting term.\n   * @param {Term} root A root RDF term that identifies an RDF list.\n   * @return {Term[]} A list of terms, or undefined if the given root is not a list.\n   */\n  public getList(root: RDF.Term): RDF.Term[] | undefined {\n    return RdfListMaterializer.materializeChain(root, this.chains);\n  }\n\n  /**\n   * @return {Term[]} All available list roots.\n   */\n  public getRoots(): RDF.Term[] {\n    return Object.keys(this.chains)\n      .filter(key => this.chains[key].first && this.chains[key].rest)\n      .map(key => stringToTerm(key));\n  }\n}\n"]}