{"version":3,"file":"SingularPropertyHandler.js","sourceRoot":"","sources":["SingularPropertyHandler.ts"],"names":[],"mappings":";;;AAAA;;;;GAIG;AACH,MAAa,uBAAuB;IAC3B,GAAG,CAAC,MAA2B,EAAE,WAA4B;QAClE,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;IACzC,CAAC;IAEM,GAAG,CAAC,MAA2B,EAAE,WAA4B;QAClE,MAAM,KAAK,GAAG,MAAM,CAAU,WAAW,CAAC,CAAC;QAC3C,OAAO,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC1D,CAAC;IAEM,GAAG,CAAC,MAA2B,EAAE,WAA4B,EAAE,KAAU;QAC9E,MAAM,CAAU,WAAW,CAAC,GAAG,CAAE,KAAK,CAAE,CAAC;QACzC,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,OAAO,CAAC,MAA2B;QACxC,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;IAClE,CAAC;IAEM,cAAc,CAAC,MAA2B,EAAE,WAA4B;QAC7E,MAAM,CAAU,WAAW,CAAC,GAAG,EAAE,CAAC;QAClC,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAvBD,0DAuBC","sourcesContent":["/**\n * A proxy handler for exposing array-valued hashes\n * as hashes with singular values.\n * This proxy will always take the first element of array values.\n */\nexport class SingularPropertyHandler<T> implements ProxyHandler<Record<string, T[]>> {\n  public has(target: Record<string, T[]>, propertyKey: string | symbol): boolean {\n    return !!this.get(target, propertyKey);\n  }\n\n  public get(target: Record<string, T[]>, propertyKey: string | symbol): T | undefined {\n    const value = target[<string> propertyKey];\n    return value && value.length > 0 ? value[0] : undefined;\n  }\n\n  public set(target: Record<string, T[]>, propertyKey: string | symbol, value: any): boolean {\n    target[<string> propertyKey] = [ value ];\n    return true;\n  }\n\n  public ownKeys(target: Record<string, T[]>): (string | symbol)[] {\n    return Object.keys(target).filter(key => this.has(target, key));\n  }\n\n  public deleteProperty(target: Record<string, T[]>, propertyKey: string | symbol): boolean {\n    target[<string> propertyKey] = [];\n    return true;\n  }\n}\n"]}