{"version":3,"file":"ShortcutPropertyHandler.js","sourceRoot":"","sources":["ShortcutPropertyHandler.ts"],"names":[],"mappings":";;;AAEA;;;GAGG;AACH,MAAa,uBAAuB;IAGlC,YAAmB,OAAgC;QACjD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,GAAG,CAAC,MAA2B,EAAE,WAA4B;QAClE,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;IAClD,CAAC;IAEM,GAAG,CAAC,MAA2B,EAAE,WAA4B;QAClE,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;QAC1E,IAAI,CAAC,GAAG,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,sDAAsD,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;SAC1G;QACD,IAAI,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,EAAE;YACpB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;SAClB;QACD,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC;IAEM,GAAG,CAAC,MAA2B,EAAE,WAA4B,EAAE,KAAU;QAC9E,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;QAC1E,IAAI,CAAC,GAAG,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,sDAAsD,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;SAC1G;QACD,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,OAAO,CAAC,MAA2B;QACxC,OAAkB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;aAClC,GAAG,CAAC,CAAC,GAAW,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;aACxD,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;IACjD,CAAC;IAEO,YAAY,CAAC,WAA4B;QAC/C,OAAO,OAAO,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC7E,CAAC;CACF;AAxCD,0DAwCC","sourcesContent":["import type { JsonLdContextNormalized } from 'jsonld-context-parser';\n\n/**\n * A proxy handler for exposing a URI-to-? map to shortcut-to-? map\n * based on a JSON-LD context.\n */\nexport class ShortcutPropertyHandler<T> implements ProxyHandler<Record<string, T[]>> {\n  private readonly context: JsonLdContextNormalized;\n\n  public constructor(context: JsonLdContextNormalized) {\n    this.context = context;\n  }\n\n  public has(target: Record<string, T[]>, propertyKey: string | symbol): boolean {\n    return this.get(target, propertyKey).length > 0;\n  }\n\n  public get(target: Record<string, T[]>, propertyKey: string | symbol): T[] {\n    const iri = this.context.expandTerm(this.toTermString(propertyKey), true);\n    if (!iri) {\n      throw new Error(`Illegal property getting for disabled context key '${this.toTermString(propertyKey)}'`);\n    }\n    if (!(iri in target)) {\n      target[iri] = [];\n    }\n    return target[iri];\n  }\n\n  public set(target: Record<string, T[]>, propertyKey: string | symbol, value: any): boolean {\n    const iri = this.context.expandTerm(this.toTermString(propertyKey), true);\n    if (!iri) {\n      throw new Error(`Illegal property setting for disabled context key '${this.toTermString(propertyKey)}'`);\n    }\n    target[iri] = value;\n    return true;\n  }\n\n  public ownKeys(target: Record<string, T[]>): (string | symbol)[] {\n    return <string[]> Object.keys(target)\n      .map((key: string) => this.context.expandTerm(key, true))\n      .filter(key => key && this.has(target, key));\n  }\n\n  private toTermString(propertyKey: string | symbol): string {\n    return typeof propertyKey === 'string' ? propertyKey : String(propertyKey);\n  }\n}\n"]}