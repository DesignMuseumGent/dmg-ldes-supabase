var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { sparql } from '@tpluscode/rdf-string';
import { sh } from '@tpluscode/rdf-ns-builders';
import { assertWellFormedPath } from "./path.js";

function sequence(left, operator, index) {
  var leftWrapped = left.length > 1 && left.sequence !== true ? sparql(_templateObject || (_templateObject = _taggedTemplateLiteral(["(", ")"])), left.path) : left.path;
  return right => {
    if (index === 0) {
      return right;
    }

    var rightWrapped = right.length > 1 && right.sequence !== true ? sparql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["(", ")"])), right.path) : right.path;
    return {
      path: sparql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["", "", "", ""])), leftWrapped, operator, rightWrapped),
      length: 2,
      sequence: left.sequence && right.sequence
    };
  };
}

function traverse(propertyPath, path) {
  var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  assertWellFormedPath(path);
  var list = path.list();

  if (list) {
    var segments = [...list];

    if (segments.length === 1) {
      throw new Error('SHACL Property Path list must have at least 2 elements');
    }

    return segments.reduce(traverse, propertyPath);
  }

  var next = sequence(propertyPath, '/', index);

  if (path.term.termType === 'BlankNode') {
    if (path.out(sh.inversePath).term) {
      var inverse = traverse(propertyPath, path.out(sh.inversePath));

      if (inverse.length > 1) {
        return next({
          path: sparql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["^(", ")"])), inverse.path),
          length: 1
        });
      }

      return next({
        path: sparql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["^", ""])), inverse.path),
        length: 1
      });
    }

    if (path.out(sh.alternativePath).term) {
      var _list = path.out(sh.alternativePath).list();

      if (!_list) {
        throw new Error('Object of sh:alternativePath must be an RDF List');
      }

      var [first, ...rest] = [..._list].map(alt => {
        var altElement = traverse(propertyPath, alt);

        if (altElement.length > 1) {
          return {
            path: sparql(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["(", ")"])), altElement.path),
            length: 1
          };
        }

        return altElement;
      });

      if (rest.length) {
        return next({
          path: sparql(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["", ""])), rest.reduce((alt, next) => sparql(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["", "|", ""])), alt, next.path), first.path)),
          length: rest.length + 1
        });
      }

      throw new Error('sh:alternativePath must have at least two elements');
    }

    if (path.out(sh.zeroOrMorePath).term) {
      var inner = traverse(propertyPath, path.out(sh.zeroOrMorePath));

      if (inner.length > 1) {
        return next({
          path: sparql(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["(", ")*"])), inner.path),
          length: 1
        });
      }

      return next({
        path: sparql(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["", "*"])), inner.path),
        length: 1
      });
    }

    if (path.out(sh.oneOrMorePath).term) {
      var _inner = traverse(propertyPath, path.out(sh.oneOrMorePath));

      if (_inner.length > 1) {
        return next({
          path: sparql(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["(", ")+"])), _inner.path),
          length: 1
        });
      }

      return next({
        path: sparql(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["", "+"])), _inner.path),
        length: 1
      });
    }

    if (path.out(sh.zeroOrOnePath).term) {
      var _inner2 = traverse(propertyPath, path.out(sh.zeroOrOnePath));

      if (_inner2.length > 1) {
        return next({
          path: sparql(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["(", ")?"])), _inner2.path),
          length: 1
        });
      }

      return next({
        path: sparql(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["", "?"])), _inner2.path),
        length: 1
      });
    }

    throw new Error("Unrecognized property path ".concat(path.value));
  }

  return next({
    path: sparql(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["", ""])), path.term),
    length: 1,
    sequence: true
  });
}
/**
 * Creates a SPARQL template string which represents a SHACL path as Property Path
 *
 * @param path SHACL Property Path
 */


export function toSparql(path) {
  if ('termType' in path) {
    return sparql(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["", ""])), path);
  }

  return traverse({
    path: sparql(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral([""]))),
    length: 0
  }, path).path;
}
/**
 * Splits a Sequence Path and returns an array of SPARQL template results.
 * If the path is not a Sequence Path, returns an array with a single element
 *
 * @param path SHACL Property Path
 */

toSparql.sequence = path => {
  assertWellFormedPath(path);
  var list = path.list();

  if (list) {
    return [...list].map(toSparql);
  }

  return [toSparql(path)];
};