{"version":3,"file":"graphql-to-sparql.js","sourceRoot":"","sources":["graphql-to-sparql.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,yBAAyB;AACzB,qCAAsC;AACtC,qDAAyC;AACzC,gDAA2C;AAE3C,MAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;IAC9C,OAAO,CAAC,MAAM,CAAC,KAAK,CAClB,mDAAmD;QACnD,2CAA2C;QAC3C,kFAAkF;QAClF,mCAAmC;QACnC,2CAA2C;QAC3C,2BAA2B;QAC3B,uCAAuC,CACxC,CAAC;IACF,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CACjB;AAED,sDAAsD;AACtD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtG,MAAM,KAAK,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAExF,SAAe,GAAG;;QAChB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAA,0BAAQ,EAAC,MAAM,IAAI,qBAAS,EAAE,CAAC,sBAAsB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IACtG,CAAC;CAAA;AACD,GAAG,EAAE,CAAC","sourcesContent":["#!/usr/bin/env node\n\nimport * as fs from 'fs';\nimport minimist = require('minimist');\nimport {toSparql} from \"sparqlalgebrajs\";\nimport {Converter} from \"../lib/Converter\";\n\nconst args = minimist(process.argv.slice(2));\nif (args._.length !== 2 || args.h || args.help) {\n  process.stderr.write(\n    'usage: graphql-to-sparql [--help] context query\\n' +\n    '  context should be a JSON object, e.g.\\n' +\n    '      { \"hero\": \"http://example.org/hero\", \"name\": \"http://example.org/name\" }\\n' +\n    '    or the path to such a query\\n' +\n    '  query should be a GraphQL query, e.g.\\n' +\n    '      { hero { name } }\\n' +\n    '    or the path to such a JSON file\\n',\n  );\n  process.exit(1);\n}\n\n// allow both files as direct JSON objects for context\nconst context = JSON.parse(fs.existsSync(args._[0]) ? fs.readFileSync(args._[0], 'utf8') : args._[0]);\nconst query = fs.existsSync(args._[1]) ? fs.readFileSync(args._[1], 'utf8') : args._[1];\n\nasync function run() {\n  process.stdout.write(toSparql(await new Converter().graphqlToSparqlAlgebra(query, context)) + '\\n');\n}\nrun();\n"]}