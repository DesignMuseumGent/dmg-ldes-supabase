{"version":3,"file":"DirectiveNodeHandlerSkip.js","sourceRoot":"","sources":["DirectiveNodeHandlerSkip.ts"],"names":[],"mappings":";;;AAGA,+EAIuC;AAEvC;;GAEG;AACH,MAAa,wBAAyB,SAAQ,yDAA2B;IAEvE,YAAY,IAAU,EAAE,QAA0B;QAChD,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IAChC,CAAC;IAEM,MAAM,CAAC,gBAAmC,EAAE,cAA+B;QAChF,MAAM,GAAG,GAAG,IAAI,CAAC,4BAA4B,CAAC,gBAAgB,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QAC1F,IAAI,GAAG,CAAC,QAAQ,KAAK,SAAS,IAAI,GAAG,CAAC,KAAK,KAAK,MAAM,EAAE;YACtD,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;SACzB;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;CACF;AAbD,4DAaC","sourcesContent":["import {IConvertContext} from \"../../IConvertContext\";\nimport {IConvertSettings} from \"../../IConvertSettings\";\nimport {Util} from \"../../Util\";\nimport {\n  DirectiveNodeHandlerAdapter,\n  IDirectiveContext,\n  IDirectiveNodeHandlerOutput\n} from \"./DirectiveNodeHandlerAdapter\";\n\n/**\n * A handler for skip directives.\n */\nexport class DirectiveNodeHandlerSkip extends DirectiveNodeHandlerAdapter {\n\n  constructor(util: Util, settings: IConvertSettings) {\n    super('skip', util, settings);\n  }\n\n  public handle(directiveContext: IDirectiveContext, convertContext: IConvertContext): IDirectiveNodeHandlerOutput {\n    const val = this.getDirectiveConditionalValue(directiveContext.directive, convertContext);\n    if (val.termType === 'Literal' && val.value === 'true') {\n      return { ignore: true };\n    }\n    return {};\n  }\n}\n"]}