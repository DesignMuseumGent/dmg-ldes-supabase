{"version":3,"file":"DirectiveNodeHandlerOptional.js","sourceRoot":"","sources":["DirectiveNodeHandlerOptional.ts"],"names":[],"mappings":";;;AAGA,+EAIuC;AAEvC;;GAEG;AACH,MAAa,4BAA6B,SAAQ,yDAA2B;IAE3E,YAAY,IAAU,EAAE,QAA0B;QAChD,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC;IAEM,MAAM,CAAC,gBAAmC,EAAE,cAA+B;QAChF,OAAO;YACL,kBAAkB,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAC1E,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAAE,CAAC,EACxC,SAAS,CACV;SACF,CAAC;IACJ,CAAC;CACF;AAdD,oEAcC","sourcesContent":["import {IConvertContext} from \"../../IConvertContext\";\nimport {IConvertSettings} from \"../../IConvertSettings\";\nimport {Util} from \"../../Util\";\nimport {\n  DirectiveNodeHandlerAdapter,\n  IDirectiveContext,\n  IDirectiveNodeHandlerOutput\n} from \"./DirectiveNodeHandlerAdapter\";\n\n/**\n * A handler for optional directives.\n */\nexport class DirectiveNodeHandlerOptional extends DirectiveNodeHandlerAdapter {\n\n  constructor(util: Util, settings: IConvertSettings) {\n    super('optional', util, settings);\n  }\n\n  public handle(directiveContext: IDirectiveContext, convertContext: IConvertContext): IDirectiveNodeHandlerOutput {\n    return {\n      operationOverrider: (operation) => this.util.operationFactory.createLeftJoin(\n        this.util.operationFactory.createBgp([]),\n        operation,\n      ),\n    };\n  }\n}\n"]}