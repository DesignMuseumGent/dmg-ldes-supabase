{"version":3,"file":"NodeValueHandlerObject.js","sourceRoot":"","sources":["NodeValueHandlerObject.ts"],"names":[],"mappings":";;;AAKA,uEAA2F;AAE3F;;GAEG;AACH,MAAa,sBAAuB,SAAQ,iDAAwC;IAElF,YAAY,IAAU,EAAE,QAA0B;QAChD,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IACvC,CAAC;IAEM,MAAM,CAAC,SAA0B,EAAE,SAAiB,EAC7C,cAA+B;QAC3C,qGAAqG;QACrG,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC;QAClD,IAAI,uBAAuB,GAAsB,EAAE,CAAC;QACpD,KAAK,MAAM,KAAK,IAAI,SAAS,CAAC,MAAM,EAAE;YACpC,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;YACnF,KAAK,MAAM,IAAI,IAAI,QAAQ,CAAC,KAAK,EAAE;gBACjC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CACtD,OAAO,EAAE,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,cAAc,CAAC,KAAK,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;aAC7E;YACD,IAAI,QAAQ,CAAC,iBAAiB,EAAE;gBAC9B,uBAAuB,GAAG,uBAAuB,CAAC,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;aACtF;SACF;QACD,OAAO,EAAE,KAAK,EAAE,CAAE,OAAO,CAAE,EAAE,iBAAiB,EAAE,uBAAuB,EAAE,CAAC;IAC5E,CAAC;CAEF;AAxBD,wDAwBC","sourcesContent":["import {ObjectValueNode} from \"graphql/language\";\nimport {Algebra} from \"sparqlalgebrajs\";\nimport {IConvertContext} from \"../../IConvertContext\";\nimport {IConvertSettings} from \"../../IConvertSettings\";\nimport {Util} from \"../../Util\";\nimport {IValueNodeHandlerOutput, NodeValueHandlerAdapter} from \"./NodeValueHandlerAdapter\";\n\n/**\n * Converts GraphQL objects to triple patterns by converting keys to predicates and values to objects.\n */\nexport class NodeValueHandlerObject extends NodeValueHandlerAdapter<ObjectValueNode> {\n\n  constructor(util: Util, settings: IConvertSettings) {\n    super('ObjectValue', util, settings);\n  }\n\n  public handle(valueNode: ObjectValueNode, fieldName: string,\n                convertContext: IConvertContext): IValueNodeHandlerOutput {\n    // Convert object keys to predicates and values to objects, and link them both with a new blank node.\n    const subject = this.util.dataFactory.blankNode();\n    let auxiliaryObjectPatterns: Algebra.Pattern[] = [];\n    for (const field of valueNode.fields) {\n      const subValue = this.util.handleNodeValue(field.value, fieldName, convertContext);\n      for (const term of subValue.terms) {\n        auxiliaryObjectPatterns.push(this.util.createQuadPattern(\n          subject, field.name, term, convertContext.graph, convertContext.context));\n      }\n      if (subValue.auxiliaryPatterns) {\n        auxiliaryObjectPatterns = auxiliaryObjectPatterns.concat(subValue.auxiliaryPatterns);\n      }\n    }\n    return { terms: [ subject ], auxiliaryPatterns: auxiliaryObjectPatterns };\n  }\n\n}\n"]}