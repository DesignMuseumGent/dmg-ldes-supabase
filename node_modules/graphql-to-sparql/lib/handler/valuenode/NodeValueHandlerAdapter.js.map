{"version":3,"file":"NodeValueHandlerAdapter.js","sourceRoot":"","sources":["NodeValueHandlerAdapter.ts"],"names":[],"mappings":";;;AAOA;;GAEG;AACH,MAAsB,uBAAuB;IAO3C,YAAY,UAAqB,EAAE,IAAU,EAAE,QAA0B;QACvE,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;CAUF;AArBD,0DAqBC","sourcesContent":["import {ValueNode} from \"graphql\";\nimport * as RDF from \"@rdfjs/types\";\nimport {Algebra} from \"sparqlalgebrajs\";\nimport {IConvertContext} from \"../../IConvertContext\";\nimport {IConvertSettings} from \"../../IConvertSettings\";\nimport {Util} from \"../../Util\";\n\n/**\n * A handler for converting GraphQL value nodes to terms and patterns.\n */\nexport abstract class NodeValueHandlerAdapter<T extends ValueNode> {\n\n  public readonly targetKind: string;\n\n  protected readonly util: Util;\n  protected readonly settings: IConvertSettings;\n\n  constructor(targetKind: T['kind'], util: Util, settings: IConvertSettings) {\n    this.targetKind = targetKind;\n    this.util = util;\n    this.settings = settings;\n  }\n\n  /**\n   * Get the terms and patterns for the given value node.\n   * @param {T} valueNode A GraphQL node.\n   * @param {string} fieldName The name of the field or argument in which the value was encapsulated.\n   * @param {IConvertContext} convertContext A conversion context.\n   * @return {IValueNodeHandlerOutput} The RDF terms and patterns.\n   */\n  public abstract handle(valueNode: T, fieldName: string, convertContext: IConvertContext): IValueNodeHandlerOutput;\n}\n\n/**\n * The output of converting a value node to an RDF term.\n */\nexport interface IValueNodeHandlerOutput {\n  /**\n   * The resulting RDF terms.\n   */\n  terms: RDF.Term[];\n  /**\n   * An optional array of patterns that are dependencies of the resulting term(s).\n   */\n  auxiliaryPatterns?: Algebra.Pattern[];\n}\n"]}