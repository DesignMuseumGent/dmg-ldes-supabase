{"version":3,"file":"NodeValueHandlerVariable.js","sourceRoot":"","sources":["NodeValueHandlerVariable.ts"],"names":[],"mappings":";;;AAKA,uEAA2F;AAE3F;;GAEG;AACH,MAAa,wBAAyB,SAAQ,iDAAqC;IAEjF,YAAY,IAAU,EAAE,QAA0B;QAChD,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC;IAEM,MAAM,CAAC,SAAuB,EAAE,SAAiB,EAC1C,cAA+B;QAC3C,MAAM,EAAE,GAAW,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;QACxC,MAAM,KAAK,GAAc,cAAc,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;QAC1D,MAAM,IAAI,GAAG,cAAc,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;QAElD,wBAAwB;QACxB,IAAI,CAAC,KAAK,EAAE;YACV,IAAI,CAAC,cAAc,CAAC,sBAAsB,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;gBACvE,MAAM,IAAI,KAAK,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;aAC9C;iBAAM;gBACL,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAS,CAAC,EAAE,CAAC,CAAC;gBACrD,IAAI,cAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE;oBACxE,cAAc,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBACjD;gBACD,OAAO,EAAE,KAAK,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;aAC9B;SACF;QAED,sDAAsD;QACtD,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,wCAAwC,EAAE,EAAE,CAAC,CAAC;SAC/D;QAED,IAAI,IAAI,EAAE;YACR,iBAAiB;YACjB,IAAI,IAAI,CAAC,IAAI,EAAE;gBACb,+CAA+C;gBAC/C,IAAI,KAAK,CAAC,IAAI,KAAK,WAAW,EAAE;oBAC9B,MAAM,IAAI,KAAK,CAAC,4BAA4B,KAAK,CAAC,IAAI,QAAQ,EAAE,EAAE,CAAC,CAAC;iBACrE;gBACD,6BAA6B;gBAC7B,IAAI,IAAI,CAAC,IAAI,EAAE;oBACb,MAAM,SAAS,GAAkC,KAAK,CAAC;oBACvD,KAAK,MAAM,CAAC,IAAI,SAAS,CAAC,MAAM,EAAE;wBAChC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,EAAE;4BACxB,MAAM,IAAI,KAAK,CAAC,YAAY,IAAI,CAAC,IAAI,aAAa,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,CAAC,CAAC;yBACvE;qBACF;iBACF;aACF;iBAAM,IAAI,IAAI,CAAC,IAAI,EAAE;gBACpB,sCAAsC;gBACtC;;mBAEG;aACJ;SACF;QAED,OAAO,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;IACrE,CAAC;CAEF;AAzDD,4DAyDC","sourcesContent":["import {ListValueNode, ValueNode} from \"graphql/language\";\nimport {VariableNode} from \"graphql/language/ast\";\nimport {IConvertContext} from \"../../IConvertContext\";\nimport {IConvertSettings} from \"../../IConvertSettings\";\nimport {Util} from \"../../Util\";\nimport {IValueNodeHandlerOutput, NodeValueHandlerAdapter} from \"./NodeValueHandlerAdapter\";\n\n/**\n * Converts GraphQL variables to terms based on the contents of the variablesDict.\n */\nexport class NodeValueHandlerVariable extends NodeValueHandlerAdapter<VariableNode> {\n\n  constructor(util: Util, settings: IConvertSettings) {\n    super('Variable', util, settings);\n  }\n\n  public handle(valueNode: VariableNode, fieldName: string,\n                convertContext: IConvertContext): IValueNodeHandlerOutput {\n    const id: string = valueNode.name.value;\n    const value: ValueNode = convertContext.variablesDict[id];\n    const meta = convertContext.variablesMetaDict[id];\n\n    // Handle missing values\n    if (!value) {\n      if (!convertContext.ignoreUnknownVariables && (!meta || meta.mandatory)) {\n        throw new Error(`Undefined variable: ${id}`);\n      } else {\n        const variable = this.util.dataFactory.variable!(id);\n        if (convertContext.terminalVariables.map((v) => v.value).indexOf(id) < 0) {\n          convertContext.terminalVariables.push(variable);\n        }\n        return { terms: [variable] };\n      }\n    }\n\n    // Don't allow variables that refer to other variables\n    if (value.kind === 'Variable') {\n      throw new Error(`Variable refers to another variable: ${id}`);\n    }\n\n    if (meta) {\n      // Check the type\n      if (meta.list) {\n        // If we expect a list, check if we got a list.\n        if (value.kind !== 'ListValue') {\n          throw new Error(`Expected a list, but got ${value.kind} for ${id}`);\n        }\n        // Check the type in the list\n        if (meta.type) {\n          const listValue: ListValueNode = <ListValueNode> value;\n          for (const v of listValue.values) {\n            if (v.kind !== meta.type) {\n              throw new Error(`Expected ${meta.type}, but got ${v.kind} for ${id}`);\n            }\n          }\n        }\n      } else if (meta.type) {\n        // This is allowed to be different (?)\n        /*if (value.kind !== meta.type) {\n          throw new Error(`Expected ${meta.type}, but got ${value.kind} for ${id}`);\n        }*/\n      }\n    }\n\n    return this.util.handleNodeValue(value, fieldName, convertContext);\n  }\n\n}\n"]}