{"version":3,"file":"NodeValueHandlerString.js","sourceRoot":"","sources":["NodeValueHandlerString.ts"],"names":[],"mappings":";;;AAKA,uEAA2F;AAE3F;;GAEG;AACH,MAAa,sBAAuB,SAAQ,iDAAwC;IAElF,YAAY,IAAU,EAAE,QAA0B;QAChD,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IACvC,CAAC;IAEM,MAAM,CAAC,SAA0B,EAAE,SAAiB,EAC7C,cAA+B;QAC3C,MAAM,YAAY,GAAQ,cAAc,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,CAAC;QAC5E,IAAI,QAA4B,CAAC;QACjC,IAAI,QAAmC,CAAC;QACxC,IAAI,YAAY,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;YACpD,IAAI,YAAY,CAAC,WAAW,CAAC,EAAE;gBAC7B,QAAQ,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC;aACtC;iBAAM,IAAI,YAAY,CAAC,OAAO,CAAC,EAAE;gBAChC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;aACnE;SACF;QACD,OAAO,EAAE,KAAK,EAAE,CAAE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAoB,SAAU,CAAC,KAAK,EAAE,QAAQ,IAAI,QAAQ,CAAC,CAAE,EAAE,CAAC;IACjH,CAAC;CAEF;AArBD,wDAqBC","sourcesContent":["import {StringValueNode} from \"graphql/language\";\nimport * as RDF from \"@rdfjs/types\";\nimport {IConvertContext} from \"../../IConvertContext\";\nimport {IConvertSettings} from \"../../IConvertSettings\";\nimport {Util} from \"../../Util\";\nimport {IValueNodeHandlerOutput, NodeValueHandlerAdapter} from \"./NodeValueHandlerAdapter\";\n\n/**\n * Converts GraphQL strings to RDF string terms, which can have a custom language or datatype.\n */\nexport class NodeValueHandlerString extends NodeValueHandlerAdapter<StringValueNode> {\n\n  constructor(util: Util, settings: IConvertSettings) {\n    super('StringValue', util, settings);\n  }\n\n  public handle(valueNode: StringValueNode, fieldName: string,\n                convertContext: IConvertContext): IValueNodeHandlerOutput {\n    const contextEntry: any = convertContext.context.getContextRaw()[fieldName];\n    let language: string | undefined;\n    let datatype: RDF.NamedNode | undefined;\n    if (contextEntry && typeof contextEntry !== 'string') {\n      if (contextEntry['@language']) {\n        language = contextEntry['@language'];\n      } else if (contextEntry['@type']) {\n        datatype = this.util.dataFactory.namedNode(contextEntry['@type']);\n      }\n    }\n    return { terms: [ this.util.dataFactory.literal((<StringValueNode> valueNode).value, language || datatype) ] };\n  }\n\n}\n"]}