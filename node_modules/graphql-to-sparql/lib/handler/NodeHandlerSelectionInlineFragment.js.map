{"version":3,"file":"NodeHandlerSelectionInlineFragment.js","sourceRoot":"","sources":["NodeHandlerSelectionInlineFragment.ts"],"names":[],"mappings":";;;AAKA,+EAA0E;AAE1E;;GAEG;AACH,MAAa,kCAAmC,SAAQ,yDAA+C;IAErG,YAAY,IAAU,EAAE,QAA0B;QAChD,KAAK,CAAC,gBAAgB,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAEM,MAAM,CAAC,kBAAsC,EAAE,cAA+B;QACnF,6EAA6E;QAC7E,MAAM,SAAS,GAAc;YAC3B,KAAK,EAAE,SAAS;YAChB,SAAS,EAAE,SAAS;YACpB,UAAU,EAAE,kBAAkB,CAAC,UAAU;YACzC,IAAI,EAAE,OAAO;YACb,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,cAAc,CAAC,OAAO,CAAC,KAAK,EAAE;YAC3D,YAAY,EAAE,kBAAkB,CAAC,YAAY;SAC9C,CAAC;QACF,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,aAAa;YACxD,CAAC,CAAC,CAAE,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,OAAO,EAAE,kBAAkB,CAAC,aAAa,EAAE,cAAc,CAAC,CAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAChH,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAC9C,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAAE,CAAC,EACxC,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,SAAS,EAAE,KAAK,EAAE,iBAAiB,CAAC,CAC3E,CAAC;IACJ,CAAC;CAEF;AAxBD,gFAwBC","sourcesContent":["import {FieldNode, InlineFragmentNode} from \"graphql/language\";\nimport {Algebra} from \"sparqlalgebrajs\";\nimport {IConvertContext} from \"../IConvertContext\";\nimport {IConvertSettings} from \"../IConvertSettings\";\nimport {Util} from \"../Util\";\nimport {NodeHandlerSelectionAdapter} from \"./NodeHandlerSelectionAdapter\";\n\n/**\n * Converts GraphQL inline fragment to one or more quad patterns with a given type within an optional.\n */\nexport class NodeHandlerSelectionInlineFragment extends NodeHandlerSelectionAdapter<InlineFragmentNode> {\n\n  constructor(util: Util, settings: IConvertSettings) {\n    super('InlineFragment', util, settings);\n  }\n\n  public handle(inlineFragmentNode: InlineFragmentNode, convertContext: IConvertContext): Algebra.Operation {\n    // Wrap in an OPTIONAL, as this pattern should only apply if the type applies\n    const fieldNode: FieldNode = {\n      alias: undefined,\n      arguments: undefined,\n      directives: inlineFragmentNode.directives,\n      kind: 'Field',\n      name: { kind: 'Name', value: convertContext.subject.value },\n      selectionSet: inlineFragmentNode.selectionSet,\n    };\n    const auxiliaryPatterns = inlineFragmentNode.typeCondition\n      ? [ this.util.newTypePattern(convertContext.subject, inlineFragmentNode.typeCondition, convertContext) ] : [];\n    return this.util.operationFactory.createLeftJoin(\n      this.util.operationFactory.createBgp([]),\n      this.fieldToOperation(convertContext, fieldNode, false, auxiliaryPatterns),\n    );\n  }\n\n}\n"]}