{"version":3,"file":"NodeHandlerDefinitionFragment.js","sourceRoot":"","sources":["NodeHandlerDefinitionFragment.ts"],"names":[],"mappings":";;;AAKA,iFAA4E;AAE5E;;;GAGG;AACH,MAAa,6BAA8B,SAAQ,2DAAoD;IAErG,YAAY,IAAU,EAAE,QAA0B;QAChD,KAAK,CAAC,oBAAoB,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC9C,CAAC;IAEM,MAAM,CAAC,mBAA2C,EAAE,cAA+B;QACxF,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;IACvG,CAAC;CAEF;AAVD,sEAUC","sourcesContent":["import {FragmentDefinitionNode} from \"graphql/language\";\nimport {Algebra} from \"sparqlalgebrajs\";\nimport {IConvertContext} from \"../IConvertContext\";\nimport {IConvertSettings} from \"../IConvertSettings\";\nimport {Util} from \"../Util\";\nimport {NodeHandlerDefinitionAdapter} from \"./NodeHandlerDefinitionAdapter\";\n\n/**\n * Errors if fragment definitions are found,\n * as these should have been processed away earlier.\n */\nexport class NodeHandlerDefinitionFragment extends NodeHandlerDefinitionAdapter<FragmentDefinitionNode> {\n\n  constructor(util: Util, settings: IConvertSettings) {\n    super('FragmentDefinition', util, settings);\n  }\n\n  public handle(operationDefinition: FragmentDefinitionNode, convertContext: IConvertContext): Algebra.Operation {\n    throw new Error('Illegal state: fragment definitions must be indexed and removed before processing');\n  }\n\n}\n"]}