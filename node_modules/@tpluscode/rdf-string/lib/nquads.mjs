import { SerializationStrategy, TemplateResult } from "./TemplateResult.mjs";
import * as ntriples from "./syntax/ntriples.mjs";
export class NQuadsStrategy extends SerializationStrategy {
  evaluateDataset(dataset, options) {
    const [first, ...rest] = dataset;
    let firstQuadString = {
      value: '',
      prefixes: []
    };

    if (first) {
      firstQuadString = this.evaluateQuad(first, options);
    }

    return rest.reduce((result, quad) => {
      const nextQuad = this.evaluateQuad(quad, options);
      return {
        value: `${result.value}\n${nextQuad.value}`,
        prefixes: result.prefixes
      };
    }, firstQuadString);
  }

  evaluateQuad(quad, options) {
    const subject = this.evaluateTerm(quad.subject, options);
    const predicate = this.evaluateTerm(quad.predicate, options);
    const object = this.evaluateTerm(quad.object, options);
    const graph = this.evaluateTerm(quad.graph, options);
    return {
      value: `${subject.value} ${predicate.value} ${object.value} ${graph.value} .`,
      prefixes: []
    };
  }

  evaluateLiteral(term) {
    return {
      value: ntriples.literal(term),
      prefixes: []
    };
  }

  evaluateNamedNode(term) {
    return {
      value: ntriples.namedNode(term),
      prefixes: []
    };
  }

  evaluateBlankNode(term) {
    return {
      value: ntriples.blankNode(term),
      prefixes: []
    };
  }

  evaluateVariable() {
    throw new Error('N-Quads cannot serialize variables');
  }

  getFinalString(result) {
    return result;
  }

}
export const nquads = (strings, ...values) => new TemplateResult({
  strings,
  values,
  tag: nquads,
  strategy: new NQuadsStrategy(),
  defaultOptions: {
    sortGraphs: false
  }
});