import { BlankNode, DatasetCore, Literal, NamedNode, Quad, Term } from 'rdf-js';
import { Value } from './value';
import { PartialString, SerializationStrategy, TemplateResult } from './TemplateResult';
interface NQuadsOptions {
    sortGraphs: boolean;
}
export declare type NQuadsTemplateResult = TemplateResult<NQuadsOptions>;
export declare type NQuadsValue<T extends Term = Term> = Value<NQuadsTemplateResult, T>;
export declare class NQuadsStrategy<TOptions extends NQuadsOptions = NQuadsOptions> extends SerializationStrategy<TOptions> {
    evaluateDataset(dataset: DatasetCore, options: TOptions): PartialString;
    evaluateQuad(quad: Quad, options: TOptions): PartialString;
    evaluateLiteral(term: Literal): PartialString;
    evaluateNamedNode(term: NamedNode): PartialString;
    evaluateBlankNode(term: BlankNode): PartialString;
    evaluateVariable(): PartialString;
    getFinalString(result: string): string;
}
export declare const nquads: (strings: TemplateStringsArray, ...values: Value<TemplateResult<NQuadsOptions>, NamedNode | Literal | BlankNode>[]) => TemplateResult<NQuadsOptions>;
export {};
//# sourceMappingURL=nquads.d.ts.map