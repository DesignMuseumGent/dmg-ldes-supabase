"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nquads = exports.NQuadsStrategy = void 0;
const TemplateResult_1 = require("./TemplateResult");
const ntriples = __importStar(require("./syntax/ntriples"));
class NQuadsStrategy extends TemplateResult_1.SerializationStrategy {
    evaluateDataset(dataset, options) {
        const [first, ...rest] = dataset;
        let firstQuadString = { value: '', prefixes: [] };
        if (first) {
            firstQuadString = this.evaluateQuad(first, options);
        }
        return rest.reduce((result, quad) => {
            const nextQuad = this.evaluateQuad(quad, options);
            return {
                value: `${result.value}\n${nextQuad.value}`,
                prefixes: result.prefixes,
            };
        }, firstQuadString);
    }
    evaluateQuad(quad, options) {
        const subject = this.evaluateTerm(quad.subject, options);
        const predicate = this.evaluateTerm(quad.predicate, options);
        const object = this.evaluateTerm(quad.object, options);
        const graph = this.evaluateTerm(quad.graph, options);
        return {
            value: `${subject.value} ${predicate.value} ${object.value} ${graph.value} .`,
            prefixes: [],
        };
    }
    evaluateLiteral(term) {
        return {
            value: ntriples.literal(term),
            prefixes: [],
        };
    }
    evaluateNamedNode(term) {
        return {
            value: ntriples.namedNode(term),
            prefixes: [],
        };
    }
    evaluateBlankNode(term) {
        return {
            value: ntriples.blankNode(term),
            prefixes: [],
        };
    }
    evaluateVariable() {
        throw new Error('N-Quads cannot serialize variables');
    }
    getFinalString(result) {
        return result;
    }
}
exports.NQuadsStrategy = NQuadsStrategy;
exports.nquads = (strings, ...values) => new TemplateResult_1.TemplateResult({
    strings,
    values,
    tag: exports.nquads,
    strategy: new NQuadsStrategy(),
    defaultOptions: {
        sortGraphs: false,
    },
});
