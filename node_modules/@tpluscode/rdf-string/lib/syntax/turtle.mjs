import { shrink } from '@zazuko/rdf-vocabularies/shrink';
import { mapBuilders } from "../prefixes.mjs";
import * as ntriples from "./ntriples.mjs";
import xsd from "./xsd.mjs";
export function blankNode(term) {
  return ntriples.blankNode(term);
}
export function namedNode(term, {
  base = '',
  prefixes = {}
}) {
  const baseStr = typeof base === 'string' ? base : base.value;
  const baseRegex = new RegExp('^' + baseStr);
  const shrunk = shrink(term.value, mapBuilders(prefixes));

  if (shrunk) {
    return {
      value: shrunk,
      prefixes: [shrunk.split(':')[0]]
    };
  }

  return {
    value: `<${term.value.replace(baseRegex, '')}>`,
    prefixes: []
  };
}

function isBuiltInType(datatype) {
  return datatype.equals(xsd.integer) || datatype.equals(xsd.boolean) || datatype.equals(xsd.decimal);
}

export function literal(term, {
  base = '',
  prefixes = {}
}) {
  if (!term.language && term.datatype) {
    if (isBuiltInType(term.datatype)) {
      return {
        value: term.value,
        prefixes: []
      };
    }

    if (!term.datatype.equals(xsd.string)) {
      const datatypeResult = namedNode(term.datatype, {
        base,
        prefixes
      });
      return {
        value: `${ntriples.literalValue(term)}^^${datatypeResult.value}`,
        prefixes: datatypeResult.prefixes
      };
    }
  }

  return {
    value: ntriples.literal(term),
    prefixes: []
  };
}