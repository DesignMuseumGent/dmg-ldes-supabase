"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.literal = exports.namedNode = exports.blankNode = void 0;
const shrink_1 = require("@zazuko/rdf-vocabularies/shrink");
const prefixes_1 = require("../prefixes");
const ntriples = __importStar(require("./ntriples"));
const xsd_1 = __importDefault(require("./xsd"));
function blankNode(term) {
    return ntriples.blankNode(term);
}
exports.blankNode = blankNode;
function namedNode(term, { base = '', prefixes = {} }) {
    const baseStr = (typeof base === 'string') ? base : base.value;
    const baseRegex = new RegExp('^' + baseStr);
    const shrunk = shrink_1.shrink(term.value, prefixes_1.mapBuilders(prefixes));
    if (shrunk) {
        return {
            value: shrunk,
            prefixes: [
                shrunk.split(':')[0],
            ],
        };
    }
    return {
        value: `<${term.value.replace(baseRegex, '')}>`,
        prefixes: [],
    };
}
exports.namedNode = namedNode;
function isBuiltInType(datatype) {
    return datatype.equals(xsd_1.default.integer) || datatype.equals(xsd_1.default.boolean) || datatype.equals(xsd_1.default.decimal);
}
function literal(term, { base = '', prefixes = {} }) {
    if (!term.language && term.datatype) {
        if (isBuiltInType(term.datatype)) {
            return {
                value: term.value,
                prefixes: [],
            };
        }
        if (!term.datatype.equals(xsd_1.default.string)) {
            const datatypeResult = namedNode(term.datatype, { base, prefixes });
            return {
                value: `${ntriples.literalValue(term)}^^${datatypeResult.value}`,
                prefixes: datatypeResult.prefixes,
            };
        }
    }
    return {
        value: ntriples.literal(term),
        prefixes: [],
    };
}
exports.literal = literal;
