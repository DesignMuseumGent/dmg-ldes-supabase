"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.literal = exports.literalValue = exports.namedNode = exports.blankNode = void 0;
const xsd_1 = __importDefault(require("./xsd"));
const echarRegEx = new RegExp('["\\\\\n\r]'); // eslint-disable-line no-control-regex, prefer-regex-literals
const echarRegExAll = new RegExp('["\\\\\n\r]', 'g'); // eslint-disable-line no-control-regex, prefer-regex-literals
const echarReplacement = {
    '"': '\\"',
    '\\': '\\\\',
    '\n': '\\n',
    '\r': '\\r',
};
function echarReplacer(char) {
    return echarReplacement[char];
}
function escapeValue(value) {
    if (echarRegEx.test(value)) {
        return value.replace(echarRegExAll, echarReplacer);
    }
    return value;
}
function blankNode(term) {
    return `_:${term.value}`;
}
exports.blankNode = blankNode;
function namedNode(term) {
    return `<${term.value}>`;
}
exports.namedNode = namedNode;
function literalValue(term) {
    return `"${escapeValue(term.value)}"`;
}
exports.literalValue = literalValue;
function literal(term) {
    const value = literalValue(term);
    if (term.language) {
        return `${value}@${term.language}`;
    }
    if (term.datatype && !term.datatype.equals(xsd_1.default.string)) {
        return `${value}^^${namedNode(term.datatype)}`;
    }
    return value;
}
exports.literal = literal;
