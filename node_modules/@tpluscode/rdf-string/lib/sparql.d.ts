/// <reference types="rdfjs__namespace" />
import { BlankNode, DatasetCore, Literal, NamedNode, Quad, Term, Variable } from 'rdf-js';
import type { NamespaceBuilder } from '@rdfjs/namespace';
import { Value } from './value';
import { PartialString, SerializationStrategy, TemplateResult } from './TemplateResult';
interface SparqlOptions {
    base?: string;
    prologue: boolean;
    prefixes?: Record<string, string | NamespaceBuilder>;
}
export declare type SparqlTemplateResult = TemplateResult<SparqlOptions>;
export declare type SparqlValue<T extends Term = Term> = Value<SparqlTemplateResult, T>;
export declare class SparqlStrategy extends SerializationStrategy<SparqlOptions> {
    evaluateLiteral(term: Literal, options: SparqlOptions): PartialString;
    evaluateNamedNode(term: NamedNode, options: SparqlOptions): PartialString;
    evaluateBlankNode(term: BlankNode): PartialString;
    evaluateVariable(term: Variable): PartialString;
    getFinalString(result: string, prefixes: Iterable<string>, options: SparqlOptions): string;
    evaluateDataset(dataset: DatasetCore, options: SparqlOptions): PartialString;
    evaluateQuad(quad: Quad, options: SparqlOptions): PartialString;
    private __evaluateTripleArray;
}
export declare const sparql: (strings: TemplateStringsArray, ...values: SparqlValue[]) => TemplateResult<SparqlOptions>;
export {};
//# sourceMappingURL=sparql.d.ts.map