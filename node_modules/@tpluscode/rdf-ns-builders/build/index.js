"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const path_1 = require("path");
const ts_morph_1 = require("ts-morph");
const prefix_1 = require("./prefix");
const modules_1 = require("./modules");
const project = new ts_morph_1.Project();
async function build({ outDir, vocabsPackage }) {
    const packagePath = vocabsPackage.startsWith('.') ? (0, path_1.resolve)(process.cwd(), vocabsPackage) : vocabsPackage;
    const rdfVocabularies = await Promise.resolve().then(() => __importStar(require(packagePath)));
    const promises = Object.entries(rdfVocabularies.prefixes).map(([prefix, namespace]) => {
        const sourceFile = project.createSourceFile((0, path_1.resolve)(outDir, 'vocabularies', `${prefix}.ts`), undefined, { overwrite: true });
        return (0, prefix_1.createPrefixFile)(sourceFile, prefix, namespace, rdfVocabularies);
    });
    await Promise.all(promises);
    const defaultModule = project.createSourceFile((0, path_1.resolve)(outDir, 'index.ts'), undefined, { overwrite: true });
    (0, modules_1.createDefaultModule)(defaultModule, rdfVocabularies.prefixes);
    const looseModule = project.createSourceFile((0, path_1.resolve)(outDir, 'loose.ts'), undefined, { overwrite: true });
    (0, modules_1.createLooseModule)(looseModule, rdfVocabularies.prefixes);
    await project.save();
}
exports.build = build;
