import { resolve } from 'path';
import { Project } from 'ts-morph';
import { createPrefixFile } from "./prefix.mjs";
import { createDefaultModule, createLooseModule } from "./modules.mjs";
const project = new Project();
export async function build({
  outDir,
  vocabsPackage
}) {
  const packagePath = vocabsPackage.startsWith('.') ? resolve(process.cwd(), vocabsPackage) : vocabsPackage;
  const rdfVocabularies = await import(packagePath);
  const promises = Object.entries(rdfVocabularies.prefixes).map(([prefix, namespace]) => {
    const sourceFile = project.createSourceFile(resolve(outDir, 'vocabularies', `${prefix}.ts`), undefined, {
      overwrite: true
    });
    return createPrefixFile(sourceFile, prefix, namespace, rdfVocabularies);
  });
  await Promise.all(promises);
  const defaultModule = project.createSourceFile(resolve(outDir, 'index.ts'), undefined, {
    overwrite: true
  });
  createDefaultModule(defaultModule, rdfVocabularies.prefixes);
  const looseModule = project.createSourceFile(resolve(outDir, 'loose.ts'), undefined, {
    overwrite: true
  });
  createLooseModule(looseModule, rdfVocabularies.prefixes);
  await project.save();
}