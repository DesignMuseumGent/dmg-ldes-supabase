{"version":3,"file":"fetch-sparql-endpoint.js","sourceRoot":"","sources":["fetch-sparql-endpoint.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport {readFileSync} from \"fs\";\nimport minimist = require(\"minimist\");\nimport {quadToStringQuad, termToString} from \"rdf-string\";\nimport {SparqlEndpointFetcher} from \"../index\";\n\n// tslint:disable-next-line:no-var-requires\nconst n3 = require('n3');\n\nprocess.argv.splice(0, 2);\nconst args = minimist(process.argv);\nif (args._.length === 0 || args._.length > 2 || args.h || args.help) {\n\n  // Print command usage\n  process.stderr.write(`fetch-sparql-endpoint Sends a query to a SPARQL endpoint\n\nUsage:\n  fetch-sparql-endpoint https://dbpedia.org/sparql [-q] 'SELECT * WHERE { ?s ?p ?o } 100'\n  fetch-sparql-endpoint https://dbpedia.org/sparql -f query.sparql\n  cat query.sparql | fetch-sparql-endpoint https://dbpedia.org/sparql\n\nOptions:\n  -q            evaluate the given SPARQL query string\n  -f            evaluate the SPARQL query in the given file\n  -g            send query via HTTP GET instead of POST\n  --help        print this help message\n`);\n  process.exit(1);\n}\n\nasync function getQuery(): Promise<string> {\n  if (args._.length > 1) {\n    return args._[1];\n  } else if (args.q) {\n    return args.q;\n  } else if (args.f) {\n    return readFileSync(args.f, { encoding: 'utf8' });\n  } else {\n    // tslint:disable-next-line:no-var-requires\n    return await require('stream-to-string')(process.stdin);\n  }\n}\n\nconst endpoint = args._[0];\n\ngetQuery().then((query) => {\n  const fetcher = new SparqlEndpointFetcher({\n    method: args.g ? 'GET' : 'POST',\n  });\n  const queryType = fetcher.getQueryType(query);\n  switch (queryType) {\n  case 'SELECT':\n    querySelect(fetcher, query);\n    break;\n  case 'ASK':\n    queryAsk(fetcher, query);\n    break;\n  case 'CONSTRUCT':\n    queryConstruct(fetcher, query);\n    break;\n  case 'UNKNOWN':\n    if (fetcher.getUpdateTypes(query) !== 'UNKNOWN') {\n      update(fetcher, query);\n    }\n    break;\n  }\n});\n\nfunction querySelect(fetcher: SparqlEndpointFetcher, query: string) {\n  fetcher.fetchBindings(endpoint, query)\n    .then((bindingsStream) => {\n      bindingsStream.on('data', (bindings) => {\n        for (const variable of Object.keys(bindings)) {\n          bindings[variable] = termToString(bindings[variable]);\n        }\n        process.stdout.write(JSON.stringify(bindings) + '\\n');\n      });\n      bindingsStream.on('error', (error) => process.stderr.write(error.toString()));\n    })\n    .catch((error) => {\n      process.stderr.write(error.message + '\\n');\n      process.exit(1);\n    });\n}\n\nfunction queryAsk(fetcher: SparqlEndpointFetcher, query: string) {\n  fetcher.fetchAsk(endpoint, query)\n    .then((answer) => {\n      process.stdout.write(answer + '\\n');\n    })\n    .catch((error) => {\n      process.stderr.write(error.message + '\\n');\n      process.exit(1);\n    });\n}\n\nfunction queryConstruct(fetcher: SparqlEndpointFetcher, query: string) {\n  fetcher.fetchTriples(endpoint, query)\n    .then((tripleStream) => {\n      (<any> tripleStream)\n        .on('error', (error: Error) => process.stderr.write(error.toString()))\n        .pipe(new n3.StreamWriter(SparqlEndpointFetcher.CONTENTTYPE_TURTLE))\n        .pipe(process.stdout);\n    })\n    .catch((error) => {\n      process.stderr.write(error.message + '\\n');\n      process.exit(1);\n    });\n}\n\nfunction update(fetcher: SparqlEndpointFetcher, query: string) {\n  fetcher.fetchUpdate(endpoint, query)\n    .then(() => {\n      process.stdout.write('OK\\n');\n    })\n    .catch((error) => {\n      process.stderr.write(error.message + '\\n');\n      process.exit(1);\n    });\n}\n"]}