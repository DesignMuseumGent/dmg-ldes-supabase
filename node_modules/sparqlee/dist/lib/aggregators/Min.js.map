{"version":3,"file":"Min.js","sourceRoot":"","sources":["../../../lib/aggregators/Min.ts"],"names":[],"mappings":";;;AACA,qDAAkD;AAKlD,MAAa,GAAI,SAAQ,+BAA6B;IAC7C,IAAI,CAAC,KAAe;QACzB,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAC3C,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IAC9C,CAAC;IAEM,GAAG,CAAC,KAAoB,EAAE,IAAc;QAC7C,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC,YAAY,EAAE;YACxC,OAAO;gBACL,YAAY,EAAE,SAAS,CAAC,KAAK;gBAC7B,IAAI;aACL,CAAC;SACH;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,MAAM,CAAC,KAAoB;QAChC,OAAO,KAAK,CAAC,IAAI,CAAC;IACpB,CAAC;CACF;AApBD,kBAoBC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { BaseAggregator } from './BaseAggregator';\n\ninterface IExtremeState {\n  extremeValue: number; term: RDF.Term;\n}\nexport class Min extends BaseAggregator<IExtremeState> {\n  public init(start: RDF.Term): IExtremeState {\n    const { value } = this.extractValue(start);\n    return { extremeValue: value, term: start };\n  }\n\n  public put(state: IExtremeState, term: RDF.Term): IExtremeState {\n    const extracted = this.extractValue(term);\n    if (extracted.value < state.extremeValue) {\n      return {\n        extremeValue: extracted.value,\n        term,\n      };\n    }\n    return state;\n  }\n\n  public result(state: IExtremeState): RDF.Term {\n    return state.term;\n  }\n}\n"]}