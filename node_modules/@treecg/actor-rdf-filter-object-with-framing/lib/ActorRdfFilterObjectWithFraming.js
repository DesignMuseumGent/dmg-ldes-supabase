"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorRdfFilterObjectWithFraming = void 0;
const bus_rdf_filter_object_1 = require("@treecg/bus-rdf-filter-object");
/**
 * An RDF Filter Object actor that extracts quads related to a specific object using JSON-LD framing.
 */
class ActorRdfFilterObjectWithFraming extends bus_rdf_filter_object_1.ActorRdfFilterObject {
    constructor(args) {
        super(args);
    }
    async test(action) {
        return true; // TODO implement
    }
    async run(action) {
        // We apply a JSON-LD frame on the quad stream to filter on a certain object
        let result = new Map();
        let frames = [];
        for (let objectURI of action.objectURIs) {
            const frame = {
                "@id": objectURI
            };
            frames.push(frame);
        }
        // Retrieve JSON-LD of object
        //let test = await f.quadStreamToString(action.data);
        const frameMapping = (await this.mediatorRdfFrame.mediate({ context: action.context, data: action.data, frames: frames })).data;
        for (let framedObject of frameMapping.values()) {
            // Convert back into RDF Stream
            const objectURI = framedObject['@id'];
            let framedObjectAsStream = require('streamify-string')(JSON.stringify(framedObject));
            const filteredDataStream = (await this.mediatorRdfParseHandle.mediate({ context: action.context, handle: { context: action.context, data: framedObjectAsStream, metadata: { baseIRI: '' } }, handleMediaType: "application/ld+json" })).handle.data;
            result.set(objectURI, filteredDataStream);
        }
        return {
            data: result
        };
    }
}
exports.ActorRdfFilterObjectWithFraming = ActorRdfFilterObjectWithFraming;
//# sourceMappingURL=ActorRdfFilterObjectWithFraming.js.map