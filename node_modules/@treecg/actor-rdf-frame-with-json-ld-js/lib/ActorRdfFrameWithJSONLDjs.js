"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorRdfFrameWithJSONLDjs = void 0;
const bus_rdf_frame_1 = require("@treecg/bus-rdf-frame");
const jsonld = require("jsonld");
const stringifyStream = require('stream-to-string');
/**
 * A comunica RDF Frame Actor that creates a JSON-LD object from a quad stream using framing and compaction
 */
class ActorRdfFrameWithJSONLDjs extends bus_rdf_frame_1.ActorRdfFrame {
    constructor(args) {
        super(args);
    }
    async test(action) {
        return true; // TODO implement
    }
    async run(action) {
        // @ts-ignore
        const obj = JSON.parse(await stringifyStream((await this.mediatorRdfSerializeHandle.mediate({ context: action.context, handle: { quadStream: action.data, context: action.context }, handleMediaType: "application/ld+json" })).handle.data));
        let result = new Map();
        for (let frame of action.frames) {
            // Frame the JSON-LD object
            const framed = await jsonld.frame(obj, frame);
            // Fetch JSON-LD context for compaction
            const context = (action.jsonLdContext ? action.jsonLdContext : { "@context": {} });
            const compacted = await jsonld.compact(framed, context);
            //const output : IActorRdfFrameOutput = {
            //  data: compacted
            //}
            result.set(frame, compacted);
        }
        return {
            data: result
        };
    }
}
exports.ActorRdfFrameWithJSONLDjs = ActorRdfFrameWithJSONLDjs;
//# sourceMappingURL=ActorRdfFrameWithJSONLDjs.js.map