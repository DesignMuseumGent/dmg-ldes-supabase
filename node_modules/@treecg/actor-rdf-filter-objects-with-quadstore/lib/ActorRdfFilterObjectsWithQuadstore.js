"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorRdfFilterObjectsWithQuadstore = void 0;
const bus_rdf_filter_object_1 = require("@treecg/bus-rdf-filter-object");
const f = require("@dexagod/rdf-retrieval");
const rdf_store_stream_1 = require("rdf-store-stream");
/**
 * An RDF Filter Object actor that extracts quads related to a specific object using a quadstore.
 */
class ActorRdfFilterObjectsWithQuadstore extends bus_rdf_filter_object_1.ActorRdfFilterObject {
    constructor(args) {
        super(args);
    }
    async test(action) {
        return true; // TODO implement
    }
    async run(action) {
        const results = new Map();
        const store = (await (0, rdf_store_stream_1.storeStream)(action.data));
        for (let id of action.objectURIs) {
            const quads = this.retrieveMember(store, id);
            const quadStream = await f.quadArrayToQuadStream(quads);
            results.set(id, quadStream);
        }
        return {
            data: results
        };
    }
    retrieveMember(store, id) {
        const ids = [];
        function retrieveId(id) {
            if (ids.indexOf(id) !== -1)
                return [];
            ids.push(id);
            let quads = store.getQuads(id, null, null, null) || [];
            for (let quad of quads) {
                quads = quads.concat(retrieveId(quad.object.id));
            }
            return quads;
        }
        return retrieveId(id);
    }
}
exports.ActorRdfFilterObjectsWithQuadstore = ActorRdfFilterObjectsWithQuadstore;
//# sourceMappingURL=ActorRdfFilterObjectsWithQuadstore.js.map