import { ActorInit, IActionInit, IActorInitArgs, IActorOutputInit } from "@comunica/bus-init";
import { IActorTest } from "@comunica/core";
import { MediatorRdfMetadataExtract } from '@comunica/bus-rdf-metadata-extract';
import { MediatorRdfParseHandle } from "@comunica/bus-rdf-parse";
import { MediatorRdfFilterObject } from "@treecg/bus-rdf-filter-object";
import { MediatorRdfFrame } from "@treecg/bus-rdf-frame";
import { EventStream, IEventStreamArgs, State } from "./EventStream";
import { MediatorRdfSerializeHandle } from "@comunica/bus-rdf-serialize";
export declare class LDESClient extends ActorInit implements ILDESClientArgs {
    static readonly HELP_MESSAGE = "actor-init-ldes-client syncs event streams\n  Usage:\n    actor-init-ldes-client --pollingInterval 5000 https://lodi.ilabt.imec.be/coghent/industriemuseum/objecten\n\n  Options:\n    --pollingInterval            Number of milliseconds before refetching uncacheable fragments (e.g., 5000)\n    --mimeType                   the MIME type of the output (application/ld+json or text/turtle)\n    --context                    path to a file with the JSON-LD context you want to use when MIME type is application/ld+json (e.g., ./context.jsonld)\n    --requestHeadersPath         path to a file with the HTTP request headers you want to use (e.g., ./headers.json)\n    --disableSynchronization     whether to disable synchronization or not (by default set to \"false\", syncing is enabled). Value can be set to \"true\" or \"false\"\n    --disablePolling             DEPRECATED: use disableSynchronization\n    --disableFraming             whether to disable JSON-LD framing when mimeType is application/ld+json or when representation is 'Object' (by default set to \"false\"). Value can be set to \"true\" or \"false\"\n    --fromTime                   datetime to prune relations that have a lower datetime value (e.g., 2020-01-01T00:00:00)\n    --emitMemberOnce             whether to emit a member only once, because collection contains immutable version objects. Value can be set to \"true\" or \"false\"\n    --dereferenceMembers         whether to dereference members, because the collection pages do not contain all information. Value can be set to \"true\" or \"false\", defaults to \"false\"\n    --requestsPerMinute          How many requests per minutes may be sent to the same host\n    --loggingLevel               The detail level of logging; useful for debugging problems. (default: info)\n    --processedURIsCount         The maximum number of processed URIs that remain in the cache. (default: 10000)\n    --help                       print this help message\n  ";
    readonly mediatorRdfMetadataExtractTree: MediatorRdfMetadataExtract;
    readonly mediatorRdfParseHandle: MediatorRdfParseHandle;
    readonly mediatorRdfFilterObject: MediatorRdfFilterObject;
    readonly mediatorRdfFrame: MediatorRdfFrame;
    readonly mediatorRdfSerializeHandle: MediatorRdfSerializeHandle;
    pollingInterval: number;
    mimeType: string;
    representation: string;
    jsonLdContextPath?: string;
    jsonLdContextString?: string;
    requestHeadersPath?: string;
    requestHeadersString?: string;
    emitMemberOnce: boolean;
    fromTime?: Date;
    disablePolling?: boolean;
    disableSynchronization: boolean;
    disableFraming: boolean;
    dereferenceMembers: boolean;
    requestsPerMinute?: number;
    loggingLevel: string;
    processedURIsCount: number;
    constructor(args: ILDESClientArgs);
    test(action: IActionInit): Promise<IActorTest>;
    run(action: IActionInit): Promise<IActorOutputInit>;
    createReadStream(url: string, options: IEventStreamArgs, state?: State | null): EventStream;
}
export interface ILDESClientArgs extends IActorInitArgs {
    mediatorRdfMetadataExtractTree: MediatorRdfMetadataExtract;
    mediatorRdfParseHandle: MediatorRdfParseHandle;
    mediatorRdfFilterObject: MediatorRdfFilterObject;
    mediatorRdfFrame: MediatorRdfFrame;
    mediatorRdfSerializeHandle: MediatorRdfSerializeHandle;
    pollingInterval: number;
    mimeType: string;
    jsonLdContextPath?: string;
    jsonLdContextString?: string;
    requestHeadersPath?: string;
    requestHeadersString?: string;
    emitMemberOnce: boolean;
    disablePolling?: boolean;
    disableSynchronization: boolean;
    disableFraming?: boolean;
    loggingLevel?: string;
    processedURIsCount?: number;
    dereferenceMembers: boolean;
    fromTime?: Date;
    requestsPerMinute?: number;
}
