"use strict";
exports.__esModule = true;
exports.LoggerBrowser = void 0;
var log = require("loglevel");
var prefix = require("loglevel-plugin-prefix");
var LoggerBrowser = /** @class */ (function () {
    function LoggerBrowser(loggable, level) {
        var label = typeof loggable === 'string' ? loggable : loggable.constructor.name;
        level = level && isLogLevel(level) ? level : 'info';
        log.setDefaultLevel('info');
        if (level && isLogLevel(level)) {
            log.setLevel(level);
        }
        prefix.reg(log);
        prefix.apply(log, {
            template: '%t [%n] %l:',
            levelFormatter: function (level) {
                return level;
            },
            nameFormatter: function (name) {
                return name || 'global';
            },
            timestampFormatter: function (date) {
                return date.toISOString();
            }
        });
        this.logger = log.getLogger(label);
    }
    LoggerBrowser.prototype.error = function (message) {
        this.logger.error(message);
    };
    LoggerBrowser.prototype.warn = function (message) {
        this.logger.warn(message);
    };
    LoggerBrowser.prototype.info = function (message) {
        this.logger.info(message);
    };
    LoggerBrowser.prototype.debug = function (message) {
        this.logger.debug(message);
    };
    LoggerBrowser.prototype.trace = function (message) {
        this.logger.trace(message);
    };
    return LoggerBrowser;
}());
exports.LoggerBrowser = LoggerBrowser;
function isLogLevel(value) {
    value = value.toUpperCase();
    return Object.keys(log.levels).includes(value);
}
