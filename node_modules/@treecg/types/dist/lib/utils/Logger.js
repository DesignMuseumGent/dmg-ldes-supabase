"use strict";
exports.__esModule = true;
exports.isLogLevel = exports.Logger = exports.getLogger = void 0;
var winston_1 = require("winston");
/**
 * Logger to be used in the bucketizers
 */
var getLogger = function (name) {
    return new Logger(name, 'info');
};
exports.getLogger = getLogger;
var Logger = /** @class */ (function () {
    function Logger(loggable, level) {
        var label = typeof loggable === 'string' ? loggable : loggable.constructor.name;
        level = level && isLogLevel(level.toLowerCase()) ? level.toLowerCase() : 'info';
        this.logger = (0, winston_1.createLogger)({
            level: level,
            format: winston_1.format.combine(winston_1.format.colorize(), winston_1.format.label({ label: label }), winston_1.format.timestamp(), winston_1.format.printf(function (_a) {
                var levelInner = _a.level, message = _a.message, labelInner = _a.label, timestamp = _a.timestamp;
                return "".concat(timestamp, " [").concat(labelInner, "] ").concat(levelInner, ": ").concat(message);
            })),
            transports: [new winston_1.transports.Console()]
        });
    }
    Logger.prototype.log = function (level, message) {
        this.logger.log(level, message);
    };
    Logger.prototype.error = function (message) {
        this.log('error', message);
    };
    Logger.prototype.warn = function (message) {
        this.log('warn', message);
    };
    Logger.prototype.info = function (message) {
        this.log('info', message);
    };
    Logger.prototype.verbose = function (message) {
        this.log('verbose', message);
    };
    Logger.prototype.debug = function (message) {
        this.log('debug', message);
    };
    Logger.prototype.silly = function (message) {
        this.log('silly', message);
    };
    return Logger;
}());
exports.Logger = Logger;
var logLevels = ['error', 'warn', 'info', 'verbose', 'debug', 'silly'];
function isLogLevel(value) {
    return logLevels.includes(value);
}
exports.isLogLevel = isLogLevel;
