"use strict";
exports.__esModule = true;
exports.Bucketizer = void 0;
var clownface_shacl_path_1 = require("clownface-shacl-path");
var rdf_data_factory_1 = require("rdf-data-factory");
var RelationParameters_1 = require("./RelationParameters");
var dataset = require('@rdfjs/dataset').dataset;
var clownface = require('clownface');
var N3 = require('n3');
var Logger_1 = require("./utils/Logger");
var Bucketizer = /** @class */ (function () {
    function Bucketizer(bucketizerOptions) {
        var _this = this;
        this.setPropertyPathQuads = function (propertyPath) { return new Promise(function (resolve, reject) {
            var fullPath = "_:b0 <https://w3id.org/tree#path> ".concat(propertyPath, " .");
            var parser = new N3.Parser();
            parser.parse(fullPath, function (error, quad, prefixes) {
                if (error) {
                    reject(error.stack);
                }
                if (quad) {
                    _this.propertyPathQuads.push(quad);
                }
                else {
                    resolve();
                }
            });
        }); };
        /**
         * Adds extra triples to the array of quads indicating
         * the buckets in which the version object must be placed
         */
        this.bucketize = function (quads, memberId) {
            var propertyPathObjects = _this.extractPropertyPathObject(quads, memberId);
            if (propertyPathObjects.length <= 0) {
                _this.logger.warn("No matches found for property path \"".concat(_this.bucketizerOptions.propertyPath, "\" in member \"").concat(memberId, "\". Applying fallback."));
                var bucketTriple = _this.fallback(memberId);
                quads.push(bucketTriple);
                return;
            }
            var bucketTriples = [];
            try {
                var buckets = _this.createBuckets(propertyPathObjects);
                bucketTriples.push.apply(bucketTriples, buckets.map(function (bucket) { return _this.createBucketTriple(bucket, memberId); }));
            }
            catch (error) {
                _this.logger.error("Error while creating the buckets for member ".concat(memberId, ". Applying fallback."));
                _this.logger.info(error);
                bucketTriples.push(_this.fallback(memberId));
            }
            quads.push.apply(quads, bucketTriples);
        };
        /**
         * Returns the RDF Term that matches the property path and will be used to create a bucket triple
         * @param memberQuads an array of quads representing a member
         * @param memberId identifier of the member
         * @returns an RDF Term
         */
        this.extractPropertyPathObject = function (memberQuads, memberId) {
            var entryBlankNode = _this.getEntryBlanknode().object;
            var data = clownface({ dataset: dataset(memberQuads) }).namedNode(memberId);
            var path = clownface({ dataset: dataset(_this.propertyPathQuads) }).blankNode(entryBlankNode);
            return (0, clownface_shacl_path_1.findNodes)(data, path).terms;
        };
        this.createBucketTriple = function (bucket, memberId) { return _this.factory.quad(_this.factory.namedNode(memberId), _this.factory.namedNode(_this.getBucketProperty()), _this.factory.literal(bucket, _this.factory.namedNode('http://www.w3.org/2001/XMLSchema#string'))); };
        this.getEntryBlanknode = function () {
            return _this.propertyPathQuads.find(function (quad) { return quad.predicate.value === 'https://w3id.org/tree#path'; });
        };
        this.getBucketHypermediaControlsMap = function () { return _this.bucketHypermediaControlsMap; };
        this.getHypermediaControls = function (bucket) { return _this.bucketHypermediaControlsMap.get(bucket); };
        this.addHypermediaControls = function (bucket, controls) {
            _this.bucketHypermediaControlsMap.set(bucket, controls);
        };
        this.getPropertyPathQuads = function () { return _this.propertyPathQuads; };
        this.fallback = function (memberId) {
            var pageSize = _this.bucketizerOptions.pageSize;
            if (pageSize && _this.bucketlessPageMemberCounter === pageSize) {
                _this.bucketlessPageNumber++;
                _this.bucketlessPageMemberCounter = 0;
            }
            var rootHypermediaControls = _this.getHypermediaControls(_this.bucketizerOptions.root);
            if (!rootHypermediaControls || !rootHypermediaControls.some(function (parameter) { return parameter.nodeId === "bucketless-".concat(_this.bucketlessPageNumber); })) {
                var relationParameters = {
                    nodeId: "bucketless-".concat(_this.bucketlessPageNumber),
                    type: RelationParameters_1.RelationType.Relation
                };
                _this.addHypermediaControls("".concat(_this.bucketizerOptions.root), [relationParameters]);
            }
            _this.bucketlessPageMemberCounter++;
            return _this.createBucketTriple("bucketless-".concat(_this.bucketlessPageNumber), memberId);
        };
        this.factory = new rdf_data_factory_1.DataFactory();
        this.bucketHypermediaControlsMap = new Map();
        this.propertyPathQuads = [];
        this.bucketlessPageNumber = 0;
        this.bucketlessPageMemberCounter = 0;
        this.bucketizerOptions = bucketizerOptions;
        this.bucketizerOptions.root = this.bucketizerOptions.root || 'root';
        this.logger = (0, Logger_1.getLogger)('Bucketizer');
    }
    Bucketizer.prototype.getBucketProperty = function () {
        return this.bucketizerOptions.bucketProperty || "http://w3id.org/ldes#bucket";
    };
    Bucketizer.prototype.getRoot = function () {
        return this.bucketizerOptions.root || 'root';
    };
    Bucketizer.prototype.exportState = function () {
        return {
            hypermediaControls: Array.from(this.bucketHypermediaControlsMap.entries()),
            propertyPathQuads: this.propertyPathQuads,
            bucketizerOptions: this.bucketizerOptions,
            bucketlessPageNumber: this.bucketlessPageNumber,
            bucketlessPageMemberCounter: this.bucketlessPageMemberCounter
        };
    };
    Bucketizer.prototype.importState = function (state) {
        this.bucketHypermediaControlsMap = new Map(state.hypermediaControls);
        this.propertyPathQuads = state.propertyPathQuads;
        this.bucketizerOptions = state.bucketizerOptions;
        this.bucketlessPageNumber = state.bucketlessPageNumber;
        this.bucketlessPageMemberCounter = state.bucketlessPageMemberCounter;
    };
    return Bucketizer;
}());
exports.Bucketizer = Bucketizer;
