{"version":3,"file":"ActorQueryOperationReducedHash.js","sourceRoot":"","sources":["ActorQueryOperationReducedHash.ts"],"names":[],"mappings":";;;AAEA,uEAAsG;AAKtG,iCAAkC;AAElC;;GAEG;AACH,MAAa,8BAA+B,SAAQ,sDAAiD;IAInG,YAAmB,IAAyC;QAC1D,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,SAA0B,EAAE,OAAuB;QAC5E,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAA0B,EAAE,OAAuB;QAC3E,MAAM,MAAM,GAAkC,yCAAmB,CAAC,eAAe,CAC/E,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CACnF,CAAC;QACF,MAAM,cAAc,GAAmB,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;QACvG,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,cAAc;YACd,QAAQ,EAAE,MAAM,CAAC,QAAQ;SAC1B,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,aAAa,CAAC,OAAuB;QAChD,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,EAAE,mBAAmB,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;QACzG,MAAM,MAAM,GAAG,IAAI,GAAG,CAAkB,EAAE,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QACjE,OAAO,CAAC,QAAkB,EAAE,EAAE;YAC5B,MAAM,IAAI,GAAW,YAAY,CAAC,QAAQ,CAAC,CAAC;YAC5C,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACpB,OAAO,KAAK,CAAC;aACd;YACD,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACvB,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;IACJ,CAAC;CACF;AA1CD,wEA0CC","sourcesContent":["import type { MediatorHashBindings } from '@comunica/bus-hash-bindings';\nimport type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperation, ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport type { IActorTest } from '@comunica/core';\nimport type {\n  Bindings, BindingsStream, IActionContext, IQueryOperationResult, IQueryOperationResultBindings,\n} from '@comunica/types';\nimport LRU = require('lru-cache');\nimport type { Algebra } from 'sparqlalgebrajs';\n/**\n * A comunica Reduced Hash Query Operation Actor.\n */\nexport class ActorQueryOperationReducedHash extends ActorQueryOperationTypedMediated<Algebra.Reduced> {\n  public readonly mediatorHashBindings: MediatorHashBindings;\n  public readonly cacheSize: number;\n\n  public constructor(args: IActorQueryOperationReducedHashArgs) {\n    super(args, 'reduced');\n  }\n\n  public async testOperation(operation: Algebra.Reduced, context: IActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(operation: Algebra.Reduced, context: IActionContext): Promise<IQueryOperationResult> {\n    const output: IQueryOperationResultBindings = ActorQueryOperation.getSafeBindings(\n      await this.mediatorQueryOperation.mediate({ operation: operation.input, context }),\n    );\n    const bindingsStream: BindingsStream = output.bindingsStream.filter(await this.newHashFilter(context));\n    return {\n      type: 'bindings',\n      bindingsStream,\n      metadata: output.metadata,\n    };\n  }\n\n  /**\n   * Create a new distinct filter function.\n   * This will maintain an internal hash datastructure so that every bindings object only returns true once.\n   * @param context The action context.\n   * @return {(bindings: Bindings) => boolean} A distinct filter for bindings.\n   */\n  public async newHashFilter(context: IActionContext): Promise<(bindings: Bindings) => boolean> {\n    const { hashFunction } = await this.mediatorHashBindings.mediate({ allowHashCollisions: true, context });\n    const hashes = new LRU<string, boolean>({ max: this.cacheSize });\n    return (bindings: Bindings) => {\n      const hash: string = hashFunction(bindings);\n      if (hashes.has(hash)) {\n        return false;\n      }\n      hashes.set(hash, true);\n      return true;\n    };\n  }\n}\n\nexport interface IActorQueryOperationReducedHashArgs extends IActorQueryOperationTypedMediatedArgs {\n  mediatorHashBindings: MediatorHashBindings;\n  /**\n   * @range {integer}\n   * @default {100}\n   */\n  cacheSize: number;\n}\n"]}