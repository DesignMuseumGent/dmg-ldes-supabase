{"version":3,"file":"ActorRdfResolveHypermediaSparql.js","sourceRoot":"","sources":["ActorRdfResolveHypermediaSparql.ts"],"names":[],"mappings":";;;AAGA,qFAAiF;AACjF,uDAAoD;AAEpD;;GAEG;AACH,MAAa,+BAAgC,SAAQ,sDAAyB;IAK5E,YAAmB,IAA0C;QAC3D,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,MAAmC;QAC3D,IAAI,CAAC,MAAM,CAAC,eAAe,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa;YAC3D,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE;YAC1D,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,0EAA0E,CAAC,CAAC;SAC/G;QACD,OAAO,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAmC;QAClD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,gCAAgC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;QAC3E,MAAM,MAAM,GAAG,IAAI,iCAAe,CAChC,MAAM,CAAC,QAAQ,CAAC,aAAa,IAAI,MAAM,CAAC,GAAG,EAC3C,MAAM,CAAC,OAAO,EACd,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,OAAO,EAAE,MAAM,EAAE,CAAC;IACpB,CAAC;CACF;AA3BD,0EA2BC","sourcesContent":["import type { MediatorHttp } from '@comunica/bus-http';\nimport type { IActionRdfResolveHypermedia, IActorRdfResolveHypermediaOutput,\n  IActorRdfResolveHypermediaTest, IActorRdfResolveHypermediaArgs } from '@comunica/bus-rdf-resolve-hypermedia';\nimport { ActorRdfResolveHypermedia } from '@comunica/bus-rdf-resolve-hypermedia';\nimport { RdfSourceSparql } from './RdfSourceSparql';\n\n/**\n * A comunica SPARQL RDF Resolve Hypermedia Actor.\n */\nexport class ActorRdfResolveHypermediaSparql extends ActorRdfResolveHypermedia {\n  public readonly mediatorHttp: MediatorHttp;\n  public readonly checkUrlSuffix: boolean;\n  public readonly forceHttpGet: boolean;\n\n  public constructor(args: IActorRdfResolveHypermediaSparqlArgs) {\n    super(args, 'sparql');\n  }\n\n  public async testMetadata(action: IActionRdfResolveHypermedia): Promise<IActorRdfResolveHypermediaTest> {\n    if (!action.forceSourceType && !action.metadata.sparqlService &&\n      !(this.checkUrlSuffix && action.url.endsWith('/sparql'))) {\n      throw new Error(`Actor ${this.name} could not detect a SPARQL service description or URL ending on /sparql.`);\n    }\n    return { filterFactor: 1 };\n  }\n\n  public async run(action: IActionRdfResolveHypermedia): Promise<IActorRdfResolveHypermediaOutput> {\n    this.logInfo(action.context, `Identified as sparql source: ${action.url}`);\n    const source = new RdfSourceSparql(\n      action.metadata.sparqlService || action.url,\n      action.context,\n      this.mediatorHttp,\n      this.forceHttpGet,\n    );\n    return { source };\n  }\n}\n\nexport interface IActorRdfResolveHypermediaSparqlArgs extends IActorRdfResolveHypermediaArgs {\n  /**\n   * The HTTP mediator\n   */\n  mediatorHttp: MediatorHttp;\n  /**\n   * If URLs ending with '/sparql' should also be considered SPARQL endpoints.\n   * @default {true}\n   */\n  checkUrlSuffix: boolean;\n  /**\n   * If queries should be sent via HTTP GET instead of POST\n   * @default {false}\n   */\n  forceHttpGet: boolean;\n}\n"]}