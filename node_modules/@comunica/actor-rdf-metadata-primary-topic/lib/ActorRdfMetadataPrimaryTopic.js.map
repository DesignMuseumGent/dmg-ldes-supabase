{"version":3,"file":"ActorRdfMetadataPrimaryTopic.js","sourceRoot":"","sources":["ActorRdfMetadataPrimaryTopic.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IActionRdfMetadata, IActorRdfMetadataArgs, IActorRdfMetadataOutput } from '@comunica/bus-rdf-metadata';\nimport { ActorRdfMetadata } from '@comunica/bus-rdf-metadata';\nimport type { IActorTest } from '@comunica/core';\nimport type * as RDF from '@rdfjs/types';\nimport { Readable } from 'readable-stream';\n\n/**\n * An RDF Metadata Actor that splits off the metadata based on the existence of a 'foaf:primaryTopic' link.\n * Only non-triple quad streams are supported.\n */\nexport class ActorRdfMetadataPrimaryTopic extends ActorRdfMetadata {\n  private readonly metadataToData: boolean;\n  private readonly dataToMetadataOnInvalidMetadataGraph: boolean;\n\n  public constructor(args: IActorRdfMetadataPrimaryTopicArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfMetadata): Promise<IActorTest> {\n    if (action.triples) {\n      throw new Error('This actor only supports non-triple quad streams.');\n    }\n    return true;\n  }\n\n  public async run(action: IActionRdfMetadata): Promise<IActorRdfMetadataOutput> {\n    const data: Readable = new Readable({ objectMode: true });\n    const metadata: Readable = new Readable({ objectMode: true });\n\n    // Delay attachment of listeners until the data or metadata stream is being read.\n    const attachListeners = (): void => {\n      // Attach listeners only once\n      data._read = metadata._read = () => {\n        // Do nothing\n      };\n\n      // Forward errors\n      action.quads.on('error', error => {\n        data.emit('error', error);\n        metadata.emit('error', error);\n      });\n\n      // First pass over data to categorize in graphs,\n      // and to detect the primaryTopic triple.\n      const graphs: Record<string, RDF.Quad[]> = {};\n      let endpointIdentifier: string | undefined;\n      const primaryTopics: Record<string, string> = {};\n      action.quads.on('data', quad => {\n        if (quad.predicate.value === 'http://rdfs.org/ns/void#subset' &&\n          quad.object.value === action.url) {\n          endpointIdentifier = quad.subject.value;\n        } else if (quad.predicate.value === 'http://xmlns.com/foaf/0.1/primaryTopic') {\n          primaryTopics[quad.object.value] = quad.subject.value;\n        }\n        let quads: RDF.Quad[] = graphs[quad.graph.value];\n        if (!quads) {\n          quads = graphs[quad.graph.value] = [];\n        }\n        quads.push(quad);\n      });\n\n      // When the stream has finished,\n      // determine the appropriate metadata graph,\n      // and emit all quads to the appropriate streams.\n      action.quads.on('end', () => {\n        const metadataGraph: string | undefined = endpointIdentifier ? primaryTopics[endpointIdentifier] : undefined;\n        for (const graphName in graphs) {\n          if (graphName === metadataGraph) {\n            for (const quad of graphs[graphName]) {\n              metadata.push(quad);\n            }\n            // Also emit metadata to data if requested\n            if (this.metadataToData) {\n              for (const quad of graphs[graphName]) {\n                data.push(quad);\n              }\n            }\n          } else {\n            for (const quad of graphs[graphName]) {\n              data.push(quad);\n            }\n            if (!metadataGraph && this.dataToMetadataOnInvalidMetadataGraph) {\n              for (const quad of graphs[graphName]) {\n                metadata.push(quad);\n              }\n            }\n          }\n        }\n        data.push(null);\n        metadata.push(null);\n      });\n    };\n    data._read = metadata._read = () => {\n      attachListeners();\n    };\n\n    return { data, metadata };\n  }\n}\n\nexport interface IActorRdfMetadataPrimaryTopicArgs extends IActorRdfMetadataArgs {\n  /**\n   * If detected metadata triples should also be emitted as data triples\n   * @default {false}\n   */\n  metadataToData: boolean;\n  /**\n   * If all data should also be seen as metadata when no metadata graph was detected\n   * @default {true}\n   */\n  dataToMetadataOnInvalidMetadataGraph: boolean;\n}\n"]}