{"version":3,"file":"ActorQueryResultSerializeSparqlJson.js","sourceRoot":"","sources":["ActorQueryResultSerializeSparqlJson.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IActionSparqlSerialize,\n  IActorQueryResultSerializeFixedMediaTypesArgs,\n  IActorQueryResultSerializeOutput } from '@comunica/bus-query-result-serialize';\nimport { ActorQueryResultSerializeFixedMediaTypes } from '@comunica/bus-query-result-serialize';\nimport type {\n  Bindings, IActionContext, IQueryOperationResultBindings,\n  IQueryOperationResultBoolean,\n} from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { Readable } from 'readable-stream';\nimport type { ActionObserverHttp } from './ActionObserverHttp';\n\n/**\n * A comunica sparql-results+xml Serialize Actor.\n */\nexport class ActorQueryResultSerializeSparqlJson extends ActorQueryResultSerializeFixedMediaTypes {\n  private readonly emitMetadata: boolean;\n  public readonly httpObserver: ActionObserverHttp;\n\n  /* eslint-disable max-len */\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"application/sparql-results+json\": 0.8\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"application/sparql-results+json\": \"http://www.w3.org/ns/formats/SPARQL_Results_JSON\"\n   *     }} mediaTypeFormats\n   *   \\ @defaultNested {true} emitMetadata\n   *   \\ @defaultNested {<default_observer> a <caqrssj:components/ActionObserverHttp.jsonld#ActionObserverHttp>} httpObserver\n   */\n  public constructor(args: IActorQueryResultSerializeSparqlJsonArgs) {\n    super(args);\n  }\n  /* eslint-enable max-len */\n\n  /**\n   * Converts an RDF term to its JSON representation.\n   * @param {RDF.Term} value An RDF term.\n   * @return {any} A JSON object.\n   */\n  public static bindingToJsonBindings(value: RDF.Term): any {\n    if (value.termType === 'Literal') {\n      const literal: RDF.Literal = value;\n      const jsonValue: any = { value: literal.value, type: 'literal' };\n      const { language } = literal;\n      const { datatype } = literal;\n      if (language) {\n        jsonValue['xml:lang'] = language;\n      } else if (datatype && datatype.value !== 'http://www.w3.org/2001/XMLSchema#string') {\n        jsonValue.datatype = datatype.value;\n      }\n      return jsonValue;\n    }\n    if (value.termType === 'BlankNode') {\n      return { value: value.value, type: 'bnode' };\n    }\n    return { value: value.value, type: 'uri' };\n  }\n\n  public async testHandleChecked(action: IActionSparqlSerialize, context: IActionContext): Promise<boolean> {\n    if (![ 'bindings', 'boolean' ].includes(action.type)) {\n      throw new Error('This actor can only handle bindings streams or booleans.');\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, mediaType: string | undefined, context: IActionContext):\n  Promise<IActorQueryResultSerializeOutput> {\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    // Write head\n    const head: any = {};\n    if (action.type === 'bindings') {\n      const metadata = await (<IQueryOperationResultBindings> action).metadata();\n      if (metadata.variables.length > 0) {\n        head.vars = metadata.variables.map(variable => variable.value);\n      }\n    }\n    data.push(`{\"head\": ${JSON.stringify(head)},\\n`);\n    let empty = true;\n\n    if (action.type === 'bindings') {\n      const resultStream: NodeJS.EventEmitter = (<IQueryOperationResultBindings> action).bindingsStream;\n\n      // Write bindings\n      resultStream.on('error', (error: Error) => {\n        data.emit('error', error);\n      });\n      resultStream.on('data', (bindings: Bindings) => {\n        if (empty) {\n          data.push('\"results\": { \"bindings\": [\\n');\n        } else {\n          data.push(',\\n');\n        }\n\n        // JSON SPARQL results spec does not allow unbound variables and blank node bindings\n        const bindingsJson = Object.fromEntries([ ...bindings ]\n          .map(([ key, value ]) => [ key.value, ActorQueryResultSerializeSparqlJson.bindingToJsonBindings(value) ]));\n        data.push(JSON.stringify(bindingsJson));\n        empty = false;\n      });\n\n      // Close streams\n      resultStream.on('end', () => {\n        // Push bindings header if empty\n        if (empty) {\n          data.push('\"results\": { \"bindings\": [\\n');\n        }\n\n        // End bindings array\n        data.push('\\n]}');\n\n        // Push metadata footer\n        if (this.emitMetadata) {\n          data.push(`,\\n\"metadata\": { \"httpRequests\": ${this.httpObserver.requests} }`);\n        }\n\n        // End stream\n        data.push('}\\n');\n        data.push(null);\n      });\n    } else {\n      try {\n        data.push(`\"boolean\":${await (<IQueryOperationResultBoolean> action).execute()}\\n}\\n`);\n        data.push(null);\n      } catch (error: unknown) {\n        data.once('newListener', () => data.emit('error', error));\n      }\n    }\n\n    return { data };\n  }\n}\n\nexport interface IActorQueryResultSerializeSparqlJsonArgs extends IActorQueryResultSerializeFixedMediaTypesArgs {\n  emitMetadata: boolean;\n  httpObserver: ActionObserverHttp;\n}\n"]}