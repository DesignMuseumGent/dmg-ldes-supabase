{"version":3,"file":"ActorRdfUpdateHypermediaPutLdp.js","sourceRoot":"","sources":["ActorRdfUpdateHypermediaPutLdp.ts"],"names":[],"mappings":";;;AAIA,mFAA+E;AAE/E,mEAAgE;AAEhE;;GAEG;AACH,MAAa,8BAA+B,SAAQ,oDAAwB;IAK1E,YAAmB,IAA0C;QAC3D,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,MAAkC;QAC1D,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE;YAChC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,gBAAgB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBAC1F,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,2DAA2D,CAAC,CAAC;aAChG;YACD,IAAI,MAAM,CAAC,MAAM,EAAE;gBACjB,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,8DAA8D,CAAC,CAAC;aACnG;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAkC;QACjD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,qCAAqC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;QAChF,OAAO;YACL,WAAW,EAAE,IAAI,6CAAqB,CACpC,MAAM,CAAC,GAAG,EACV,MAAM,CAAC,OAAO,EACd,MAAM,CAAC,QAAQ,CAAC,WAAW,IAAI,EAAE,EACjC,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,8BAA8B,EACnC,IAAI,CAAC,oBAAoB,CAC1B;SACF,CAAC;IACJ,CAAC;CACF;AAlCD,wEAkCC","sourcesContent":["import type { MediatorHttp } from '@comunica/bus-http';\nimport type { MediatorRdfSerializeHandle, MediatorRdfSerializeMediaTypes } from '@comunica/bus-rdf-serialize';\nimport type { IActionRdfUpdateHypermedia, IActorRdfUpdateHypermediaOutput,\n  IActorRdfUpdateHypermediaArgs } from '@comunica/bus-rdf-update-hypermedia';\nimport { ActorRdfUpdateHypermedia } from '@comunica/bus-rdf-update-hypermedia';\nimport type { IActorTest } from '@comunica/core';\nimport { QuadDestinationPutLdp } from './QuadDestinationPutLdp';\n\n/**\n * A comunica Post LDP RDF Update Hypermedia Actor.\n */\nexport class ActorRdfUpdateHypermediaPutLdp extends ActorRdfUpdateHypermedia {\n  public readonly mediatorHttp: MediatorHttp;\n  public readonly mediatorRdfSerializeMediatypes: MediatorRdfSerializeMediaTypes;\n  public readonly mediatorRdfSerialize: MediatorRdfSerializeHandle;\n\n  public constructor(args: IActorRdfUpdateHypermediaPostLdpArgs) {\n    super(args, 'putLdp');\n  }\n\n  public async testMetadata(action: IActionRdfUpdateHypermedia): Promise<IActorTest> {\n    if (!action.forceDestinationType) {\n      if (!action.metadata.allowHttpMethods || !action.metadata.allowHttpMethods.includes('PUT')) {\n        throw new Error(`Actor ${this.name} could not detect a destination with 'Allow: PUT' header.`);\n      }\n      if (action.exists) {\n        throw new Error(`Actor ${this.name} can only put on a destination that does not already exists.`);\n      }\n    }\n    return true;\n  }\n\n  public async run(action: IActionRdfUpdateHypermedia): Promise<IActorRdfUpdateHypermediaOutput> {\n    this.logInfo(action.context, `Identified as putLdp destination: ${action.url}`);\n    return {\n      destination: new QuadDestinationPutLdp(\n        action.url,\n        action.context,\n        action.metadata.putAccepted || [],\n        this.mediatorHttp,\n        this.mediatorRdfSerializeMediatypes,\n        this.mediatorRdfSerialize,\n      ),\n    };\n  }\n}\n\nexport interface IActorRdfUpdateHypermediaPostLdpArgs extends IActorRdfUpdateHypermediaArgs {\n  /**\n   * The HTTP mediator\n   */\n  mediatorHttp: MediatorHttp;\n  /**\n   * The RDF Serialize mediator for collecting media types\n   */\n  mediatorRdfSerializeMediatypes: MediatorRdfSerializeMediaTypes;\n  /**\n   * The RDF Serialize mediator for handling serialization\n   */\n  mediatorRdfSerialize: MediatorRdfSerializeHandle;\n}\n"]}