{"version":3,"file":"QuadDestinationPutLdp.js","sourceRoot":"","sources":["QuadDestinationPutLdp.ts"],"names":[],"mappings":";;;AACA,iDAA+C;AAG/C,yEAAsE;AAItE,6CAAsC;AAEtC;;GAEG;AACH,MAAa,qBAAqB;IAWhC,YACE,GAAW,EACX,OAAuB,EACvB,UAAoB,EACpB,YAA0B,EAC1B,8BAA8D,EAC9D,oBAA0C;QAE1C,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,8BAA8B,GAAG,8BAA8B,CAAC;QACrE,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;IACnD,CAAC;IAEM,MAAM,CAAC,KAA8B;QAC1C,OAAO,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,KAA8B;QAChD,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IACxE,CAAC;IAEM,KAAK,CAAC,oBAAoB,CAAC,IAAyB,EAAE,KAA8B;QACzF,yCAAyC;QACzC,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,8BAA8B,CAAC,OAAO,CACtE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,CAC5C,CAAC;QACF,MAAM,mBAAmB,GAAG,IAAI,CAAC,UAAU;aACxC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,IAAI,UAAU,CAAC,CAAC;QAChD,2CAA2C;QAC3C,MAAM,SAAS,GAAG,mBAAmB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAChD,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAE3F,kBAAkB;QAClB,MAAM,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAC,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;YAClE,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,MAAM,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE;YACpD,eAAe,EAAE,SAAS;SAC3B,CAAC,CAAC;QAEH,iCAAiC;QACjC,MAAM,OAAO,GAAY,IAAI,qBAAO,CAAC,EAAE,cAAc,EAAE,SAAS,EAAE,CAAC,CAAC;QACpE,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;YACnD,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,IAAI,EAAE;gBACJ,OAAO;gBACP,MAAM,EAAE,KAAK;gBACb,IAAI,EAAE,oBAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC;aAC1C;YACD,KAAK,EAAE,IAAI,CAAC,GAAG;SAChB,CAAC,CAAC;QAEH,MAAM,IAAA,2CAAoB,EAAC,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IACrD,CAAC;IAEM,KAAK,CAAC,YAAY,CACvB,MAA4D,EAC5D,gBAAyB,EACzB,UAAmB;QAEnB,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;IAC3E,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,MAAuB,EAAE,mBAA4B;QAC7E,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;IAC3E,CAAC;CACF;AAhFD,sDAgFC","sourcesContent":["import type { MediatorHttp } from '@comunica/bus-http';\nimport { ActorHttp } from '@comunica/bus-http';\nimport type { MediatorRdfSerialize, MediatorRdfSerializeMediaTypes } from '@comunica/bus-rdf-serialize';\nimport type { IQuadDestination } from '@comunica/bus-rdf-update-quads';\nimport { validateHttpResponse } from '@comunica/bus-rdf-update-quads';\nimport type { IActionContext } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport { Headers } from 'cross-fetch';\n\n/**\n * A quad destination that represents a resource that can be PUT.\n */\nexport class QuadDestinationPutLdp implements IQuadDestination {\n  private readonly url: string;\n  private readonly context: IActionContext;\n  private readonly mediaTypes: string[];\n\n  private readonly mediatorHttp: MediatorHttp;\n\n  public readonly mediatorRdfSerializeMediatypes: MediatorRdfSerializeMediaTypes;\n\n  private readonly mediatorRdfSerialize: MediatorRdfSerialize;\n\n  public constructor(\n    url: string,\n    context: IActionContext,\n    mediaTypes: string[],\n    mediatorHttp: MediatorHttp,\n    mediatorRdfSerializeMediatypes: MediatorRdfSerializeMediaTypes,\n    mediatorRdfSerialize: MediatorRdfSerialize,\n  ) {\n    this.url = url;\n    this.context = context;\n    this.mediaTypes = mediaTypes;\n    this.mediatorHttp = mediatorHttp;\n    this.mediatorRdfSerializeMediatypes = mediatorRdfSerializeMediatypes;\n    this.mediatorRdfSerialize = mediatorRdfSerialize;\n  }\n\n  public insert(quads: AsyncIterator<RDF.Quad>): Promise<void> {\n    return this.wrapRdfUpdateRequest('INSERT', quads);\n  }\n\n  public async delete(quads: AsyncIterator<RDF.Quad>): Promise<void> {\n    throw new Error(`Put-based LDP destinations don't support deletions`);\n  }\n\n  public async wrapRdfUpdateRequest(type: 'INSERT' | 'DELETE', quads: AsyncIterator<RDF.Quad>): Promise<void> {\n    // Determine media type for serialization\n    const { mediaTypes } = await this.mediatorRdfSerializeMediatypes.mediate(\n      { context: this.context, mediaTypes: true },\n    );\n    const availableMediaTypes = this.mediaTypes\n      .filter(mediaType => mediaType in mediaTypes);\n    // Fallback to our own preferred media type\n    const mediaType = availableMediaTypes.length > 0 ?\n      availableMediaTypes[0] :\n      Object.keys(mediaTypes).sort((typeA, typeB) => mediaTypes[typeB] - mediaTypes[typeA])[0];\n\n    // Serialize quads\n    const { handle: { data }} = await this.mediatorRdfSerialize.mediate({\n      context: this.context,\n      handle: { quadStream: quads, context: this.context },\n      handleMediaType: mediaType,\n    });\n\n    // Send data in (LDP) PUT request\n    const headers: Headers = new Headers({ 'content-type': mediaType });\n    const httpResponse = await this.mediatorHttp.mediate({\n      context: this.context,\n      init: {\n        headers,\n        method: 'PUT',\n        body: ActorHttp.toWebReadableStream(data),\n      },\n      input: this.url,\n    });\n\n    await validateHttpResponse(this.url, httpResponse);\n  }\n\n  public async deleteGraphs(\n    graphs: RDF.DefaultGraph | 'NAMED' | 'ALL' | RDF.NamedNode[],\n    requireExistence: boolean,\n    dropGraphs: boolean,\n  ): Promise<void> {\n    throw new Error(`Put-based LDP destinations don't support named graphs`);\n  }\n\n  public async createGraphs(graphs: RDF.NamedNode[], requireNonExistence: boolean): Promise<void> {\n    throw new Error(`Put-based LDP destinations don't support named graphs`);\n  }\n}\n"]}