{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":";;;AAAA,+DAA+D;AAI/D;;;GAGG;AACH,SAAgB,wBAAwB,CAAC,eAAiC;IACxE,OAAO,OAAO,eAAe,KAAK,QAAQ,IAAI,QAAQ,IAAI,eAAe,CAAC;AAC5E,CAAC;AAFD,4DAEC;AAED;;;GAGG;AACH,SAAgB,sBAAsB,CAAC,eAAiC;IACtE,IAAI,OAAO,eAAe,KAAK,QAAQ,EAAE;QACvC,OAAO,EAAE,CAAC;KACX;IACD,OAAO,QAAQ,IAAI,eAAe,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC;AAC3E,CAAC;AALD,wDAKC;AAED;;;GAGG;AACH,SAAgB,uBAAuB,CAAC,eAAiC;IACvE,OAAO,wBAAwB,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC;AAC7F,CAAC;AAFD,0DAEC;AAED;;;;GAIG;AACH,SAAgB,yBAAyB,CAAC,eAAiC,EAAE,OAAuB;IAClG,IAAI,OAAO,eAAe,KAAK,QAAQ,IAAI,QAAQ,IAAI,eAAe,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE;QAClG,OAAO,OAAO,CAAC;KAChB;IACD,OAAO,OAAO,CAAC,KAAK,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;AAChD,CAAC;AALD,8DAKC;AAED;;;;GAIG;AACH,SAAgB,qBAAqB,CAAC,OAAuB;IAC3D,OAAO,OAAO,CAAC,GAAG,CAAC,oCAAkB,CAAC,WAAW,CAAC,CAAC;AACrD,CAAC;AAFD,sDAEC;AAED;;;;GAIG;AACH,SAAgB,0BAA0B,CAAC,OAAuB;IAChE,IAAI,OAAO,CAAC,GAAG,CAAC,oCAAkB,CAAC,WAAW,CAAC,EAAE;QAC/C,mCAAmC;QACnC,OAAO,OAAO,CAAC,GAAG,CAAC,oCAAkB,CAAC,WAAW,CAAC,CAAC;KACpD;AACH,CAAC;AALD,gEAKC;AAED;;;;GAIG;AACH,SAAgB,wBAAwB,CAAC,WAA8B;IACrE,IAAI,WAAW,EAAE;QACf,IAAI,OAAO,GAAG,uBAAuB,CAAC,WAAW,CAAC,CAAC;QACnD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,4BAA4B;YAC5B,MAAM,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC1C,IAAI,YAAY,IAAI,CAAC,EAAE;gBACrB,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;aAC1C;YAED,OAAO,OAAO,CAAC;SAChB;KACF;AACH,CAAC;AAbD,4DAaC","sourcesContent":["import { KeysRdfUpdateQuads } from '@comunica/context-entries';\nimport type { IActionContext, IDataDestination } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\n\n/**\n * Check if the given data destination is a string or RDF store.\n * @param dataDestination A data destination.\n */\nexport function isDataDestinationRawType(dataDestination: IDataDestination): dataDestination is string | RDF.Store {\n  return typeof dataDestination === 'string' || 'remove' in dataDestination;\n}\n\n/**\n * Get the data destination type.\n * @param dataDestination A data destination.\n */\nexport function getDataDestinationType(dataDestination: IDataDestination): string | undefined {\n  if (typeof dataDestination === 'string') {\n    return '';\n  }\n  return 'remove' in dataDestination ? 'rdfjsStore' : dataDestination.type;\n}\n\n/**\n * Get the data destination value.\n * @param dataDestination A data destination.\n */\nexport function getDataDestinationValue(dataDestination: IDataDestination): string | RDF.Store {\n  return isDataDestinationRawType(dataDestination) ? dataDestination : dataDestination.value;\n}\n\n/**\n * Get the context of the given destination, merged with the given context.\n * @param dataDestination A data destination.\n * @param context A context to merge with.\n */\nexport function getDataDestinationContext(dataDestination: IDataDestination, context: IActionContext): IActionContext {\n  if (typeof dataDestination === 'string' || 'remove' in dataDestination || !dataDestination.context) {\n    return context;\n  }\n  return context.merge(dataDestination.context);\n}\n\n/**\n * Get the source destination from the given context.\n * @param {ActionContext} context An optional context.\n * @return {IDataDestination} The destination or undefined.\n */\nexport function getContextDestination(context: IActionContext): IDataDestination | undefined {\n  return context.get(KeysRdfUpdateQuads.destination);\n}\n\n/**\n * Get the single destination if the context contains just a single destination.\n * @param {ActionContext} context A context, can be null.\n * @return {IDataDestination} The single datadestination or undefined.\n */\nexport function getContextDestinationFirst(context: IActionContext): IDataDestination | undefined {\n  if (context.has(KeysRdfUpdateQuads.destination)) {\n    // If the single destination is set\n    return context.get(KeysRdfUpdateQuads.destination);\n  }\n}\n\n/**\n * Get the destination's raw URL value from the given context.\n * @param {IDataDestination} destination A destination.\n * @return {string} The URL or undefined.\n */\nexport function getContextDestinationUrl(destination?: IDataDestination): string | undefined {\n  if (destination) {\n    let fileUrl = getDataDestinationValue(destination);\n    if (typeof fileUrl === 'string') {\n      // Remove hashes from source\n      const hashPosition = fileUrl.indexOf('#');\n      if (hashPosition >= 0) {\n        fileUrl = fileUrl.slice(0, hashPosition);\n      }\n\n      return fileUrl;\n    }\n  }\n}\n"]}