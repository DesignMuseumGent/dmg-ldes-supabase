{"version":3,"file":"IQuadDestination.js","sourceRoot":"","sources":["IQuadDestination.ts"],"names":[],"mappings":";;;AAAA,iDAA+C;AAG/C,oDAAoD;AA0CpD;;;;GAIG;AACI,KAAK,UAAU,oBAAoB,CAAC,GAAW,EAAE,YAAsB;IAC5E,iCAAiC;IACjC,IAAI,YAAY,CAAC,MAAM,IAAI,GAAG,EAAE;QAC9B,6CAA6C;QAC7C,IAAI,UAAU,GAAG,gBAAgB,CAAC;QAClC,IAAI,YAAY,CAAC,IAAI,EAAE;YACrB,MAAM,cAAc,GAAG,oBAAS,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACnE,UAAU,GAAG,MAAM,eAAe,CAAC,cAAc,CAAC,CAAC;SACpD;QACD,MAAM,IAAI,KAAK,CAAC,oBAAoB,GAAG,iBAAiB,YAAY,CAAC,MAAM,OAAO,UAAU,EAAE,CAAC,CAAC;KACjG;IAED,2CAA2C;IAC3C,MAAM,YAAY,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC;AACpC,CAAC;AAdD,oDAcC","sourcesContent":["import { ActorHttp } from '@comunica/bus-http';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport * as stringifyStream from 'stream-to-string';\n\n/**\n * A quad destination.\n */\nexport interface IQuadDestination {\n  /**\n   * Insert the given quad stream into the destination.\n   * @param quads The quads to insert.\n   * @return {AsyncIterator<RDF.Quad>} The inserted quad stream.\n   */\n  insert: (quads: AsyncIterator<RDF.Quad>) => Promise<void>;\n  /**\n   * Delete the given quad stream from the destination.\n   * @param quads The quads to delete.\n   * @return {AsyncIterator<RDF.Quad>} The deleted quad stream.\n   */\n  delete: (quads: AsyncIterator<RDF.Quad>) => Promise<void>;\n  /**\n   * Graphs that should be deleted.\n   * @param graphs The graph(s) in which all triples must be removed.\n   * @param requireExistence If true, and any of the graphs does not exist, an error must be emitted.\n   *                         Should only be considered on destinations that record empty graphs.\n   * @param dropGraphs If the graphs themselves should also be dropped.\n   *                   Should not happen on the 'DEFAULT' graph.\n   *                   Should only be considered on destinations that record empty graphs.\n   */\n  deleteGraphs: (\n    graphs: RDF.DefaultGraph | 'NAMED' | 'ALL' | RDF.NamedNode[],\n    requireExistence: boolean,\n    dropGraphs: boolean,\n  ) => Promise<void>;\n  /**\n   * Create the given (empty) graphs.\n   * @param graphs The graph names to create.\n   * @param requireNonExistence If true, an error MUST be thrown when any of the graph already exists.\n   *                            For destinations that do not record empty graphs,\n   *                            this should only throw if at least one quad with the given quad already exists.\n   */\n  createGraphs: (graphs: RDF.NamedNode[], requireNonExistence: boolean) => Promise<void>;\n}\n\n/**\n * Check if the http response is valid, and throw an error if not.\n * @param url The original URL that was to be updated.\n * @param httpResponse The update response.\n */\nexport async function validateHttpResponse(url: string, httpResponse: Response): Promise<void> {\n  // Check if update was successful\n  if (httpResponse.status >= 400) {\n    // Consume the body, to avoid process to hang\n    let bodyString = 'empty response';\n    if (httpResponse.body) {\n      const responseStream = ActorHttp.toNodeReadable(httpResponse.body);\n      bodyString = await stringifyStream(responseStream);\n    }\n    throw new Error(`Could not update ${url} (HTTP status ${httpResponse.status}):\\n${bodyString}`);\n  }\n\n  // Close response body, as we don't need it\n  await httpResponse.body?.cancel();\n}\n"]}