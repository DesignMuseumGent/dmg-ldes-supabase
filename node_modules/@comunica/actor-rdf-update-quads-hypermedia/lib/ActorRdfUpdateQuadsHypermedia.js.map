{"version":3,"file":"ActorRdfUpdateQuadsHypermedia.js","sourceRoot":"","sources":["ActorRdfUpdateQuadsHypermedia.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IActorDereferenceRdfOutput, MediatorDereferenceRdf } from '@comunica/bus-dereference-rdf';\nimport type { ActorHttpInvalidateListenable, IActionHttpInvalidate } from '@comunica/bus-http-invalidate';\nimport type { IActorRdfMetadataOutput, MediatorRdfMetadata } from '@comunica/bus-rdf-metadata';\nimport type { MediatorRdfMetadataExtract } from '@comunica/bus-rdf-metadata-extract';\nimport type { MediatorRdfUpdateHypermedia } from '@comunica/bus-rdf-update-hypermedia';\nimport {\n  ActorRdfUpdateQuadsDestination, getContextDestination,\n  getContextDestinationUrl,\n  getDataDestinationType,\n} from '@comunica/bus-rdf-update-quads';\nimport type { IActionRdfUpdateQuads,\n  IQuadDestination, IActorRdfUpdateQuadsArgs } from '@comunica/bus-rdf-update-quads';\nimport type { IActorTest } from '@comunica/core';\nimport type { IActionContext, IDataDestination } from '@comunica/types';\nimport LRUCache = require('lru-cache');\n\n/**\n * A comunica Hypermedia RDF Update Quads Actor.\n */\nexport class ActorRdfUpdateQuadsHypermedia extends ActorRdfUpdateQuadsDestination {\n  public readonly mediatorDereferenceRdf: MediatorDereferenceRdf;\n  public readonly mediatorMetadata: MediatorRdfMetadata;\n  public readonly mediatorMetadataExtract: MediatorRdfMetadataExtract;\n  public readonly mediatorRdfUpdateHypermedia: MediatorRdfUpdateHypermedia;\n  public readonly cacheSize: number;\n  public readonly cache?: LRUCache<string, Promise<IQuadDestination>>;\n  public readonly httpInvalidator: ActorHttpInvalidateListenable;\n\n  public constructor(args: IActorRdfUpdateQuadsHypermediaArgs) {\n    super(args);\n    this.cache = this.cacheSize ? new LRUCache<string, any>({ max: this.cacheSize }) : undefined;\n    const cache = this.cache;\n    if (cache) {\n      this.httpInvalidator.addInvalidateListener(\n        ({ url }: IActionHttpInvalidate) => url ? cache.del(url) : cache.reset(),\n      );\n    }\n  }\n\n  public async test(action: IActionRdfUpdateQuads): Promise<IActorTest> {\n    const url = getContextDestinationUrl(getContextDestination(action.context));\n    if (!url) {\n      throw new Error(`Actor ${this.name} can only update quads against a single destination URL.`);\n    }\n    return true;\n  }\n\n  public getDestination(context: IActionContext): Promise<IQuadDestination> {\n    const dataDestination: IDataDestination = getContextDestination(context)!;\n    let url: string = getContextDestinationUrl(dataDestination)!;\n\n    // Try to read from cache\n    if (this.cache && this.cache.has(url)) {\n      return this.cache.get(url)!;\n    }\n\n    // Otherwise, call mediators\n    const ret = (async() => {\n      let metadata: Record<string, any>;\n      let exists: boolean;\n      try {\n        // Dereference destination URL\n        const dereferenceRdfOutput: IActorDereferenceRdfOutput = await this.mediatorDereferenceRdf\n          .mediate({ context, url, acceptErrors: true });\n        exists = dereferenceRdfOutput.exists;\n        url = dereferenceRdfOutput.url;\n\n        // Determine the metadata\n        const rdfMetadataOuput: IActorRdfMetadataOutput = await this.mediatorMetadata.mediate(\n          { context, url, quads: dereferenceRdfOutput.data, triples: dereferenceRdfOutput.metadata?.triples },\n        );\n        metadata = (await this.mediatorMetadataExtract.mediate({\n          context,\n          url,\n          metadata: rdfMetadataOuput.metadata,\n          headers: dereferenceRdfOutput.headers,\n          requestTime: dereferenceRdfOutput.requestTime,\n        })).metadata;\n      } catch {\n        metadata = {};\n        exists = false;\n      }\n\n      // Obtain destination\n      const { destination } = await this.mediatorRdfUpdateHypermedia.mediate({\n        context,\n        url,\n        metadata,\n        exists,\n        forceDestinationType: getDataDestinationType(dataDestination),\n      });\n      return destination;\n    })();\n    if (this.cache) {\n      this.cache.set(url, ret);\n    }\n    return ret;\n  }\n}\n\nexport interface IActorRdfUpdateQuadsHypermediaArgs extends IActorRdfUpdateQuadsArgs {\n  /**\n   * The maximum number of entries in the LRU cache, set to 0 to disable.\n   * @range {integer}\n   * @default {100}\n   */\n  cacheSize: number;\n  /* eslint-disable max-len */\n  /**\n   * An actor that listens to HTTP invalidation events\n   * @default {<default_invalidator> a <npmd:@comunica/bus-http-invalidate/^2.0.0/components/ActorHttpInvalidateListenable.jsonld#ActorHttpInvalidateListenable>}\n   */\n  httpInvalidator: ActorHttpInvalidateListenable;\n  /* eslint-enable max-len */\n  /**\n   * The RDF dereference mediator\n   */\n  mediatorDereferenceRdf: MediatorDereferenceRdf;\n  /**\n   * The metadata mediator\n   */\n  mediatorMetadata: MediatorRdfMetadata;\n  /**\n   * The metadata extract mediator\n   */\n  mediatorMetadataExtract: MediatorRdfMetadataExtract;\n  /**\n   * The hypermedia resolver\n   */\n  mediatorRdfUpdateHypermedia: MediatorRdfUpdateHypermedia;\n}\n"]}