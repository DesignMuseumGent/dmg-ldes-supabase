{"version":3,"file":"QueryEngineFactoryBase.js","sourceRoot":"","sources":["QueryEngineFactoryBase.ts"],"names":[],"mappings":";;;AACA,6CAAwD;AAIxD;;GAEG;AACH,MAAa,sBAAsB;IACjC;;;;OAIG;IACH,YACmB,cAAsB,EACtB,iBAAyB,EACzB,kBAA6D;QAF7D,mBAAc,GAAd,cAAc,CAAQ;QACtB,sBAAiB,GAAjB,iBAAiB,CAAQ;QACzB,uBAAkB,GAAlB,kBAAkB,CAA2C;IAC7E,CAAC;IAEJ;;;OAGG;IACI,KAAK,CAAC,MAAM,CAAC,UAAsC,EAAE;QAC1D,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;YAC3B,mEAAmE;YACnE,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;SAC9C;QACD,MAAM,iBAAiB,GAAW,OAAO,CAAC,UAAU,IAAI,IAAI,CAAC,iBAAiB,CAAC;QAC/E,MAAM,WAAW,GAAW,OAAO,CAAC,WAAW,IAAI,wCAAwC,CAAC;QAE5F,iFAAiF;QACjF,qDAAqD;QACrD,MAAM,iBAAiB,GAAW,OAAO,CAAC,iBAAiB,IAAI,6BAA6B,CAAC;QAE7F,yDAAyD;QACzD,MAAM,MAAM,GAAW,MAAM,IAAA,6BAAoB,EAAC,iBAAiB,EAAE,iBAAiB,EAAE,OAAO,CAAC,CAAC;QACjG,MAAM,cAAc,GAAwB,MAAM,CAAC,aAAa,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC,MAAM,CAAC;QACjG,OAAO,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;IACjD,CAAC;CACF;AAjCD,wDAiCC","sourcesContent":["import type { ISetupProperties, Runner } from '@comunica/runner';\nimport { instantiateComponent } from '@comunica/runner';\nimport type { ActorInitQueryBase } from './ActorInitQueryBase';\nimport type { QueryEngineBase } from './QueryEngineBase';\n\n/**\n * A factory that can create query engines dynamically based on a given config.\n */\nexport class QueryEngineFactoryBase<Q extends QueryEngineBase> {\n  /**\n   * @param moduleRootPath The path to the invoking module.\n   * @param defaultConfigPath The path to the config file.\n   * @param queryEngineWrapper Callback for wrapping a query init actor in a query engine.\n   */\n  public constructor(\n    private readonly moduleRootPath: string,\n    private readonly defaultConfigPath: string,\n    private readonly queryEngineWrapper: (actorInitQuery: ActorInitQueryBase) => Q,\n  ) {}\n\n  /**\n   * Create a new Comunica query engine.\n   * @param options Optional settings on how to instantiate the query engine.\n   */\n  public async create(options: IDynamicQueryEngineOptions = {}): Promise<Q> {\n    if (!options.mainModulePath) {\n      // This makes sure that our configuration is found by Components.js\n      options.mainModulePath = this.moduleRootPath;\n    }\n    const configResourceUrl: string = options.configPath ?? this.defaultConfigPath;\n    const instanceUri: string = options.instanceUri ?? 'urn:comunica:default:init/actors#query';\n\n    // Instantiate the main runner so that all other actors are instantiated as well,\n    // and find the SPARQL init actor with the given name\n    const runnerInstanceUri: string = options.runnerInstanceUri ?? 'urn:comunica:default:Runner';\n\n    // This needs to happen before any promise gets generated\n    const runner: Runner = await instantiateComponent(configResourceUrl, runnerInstanceUri, options);\n    const actorInitQuery = <ActorInitQueryBase> runner.collectActors({ engine: instanceUri }).engine;\n    return this.queryEngineWrapper(actorInitQuery);\n  }\n}\n\nexport interface IDynamicQueryEngineOptions extends ISetupProperties {\n  /**\n   * The path or URL to a Components.js config file.\n   */\n  configPath?: string;\n  /**\n   * A URI identifying the component to instantiate.\n   */\n  instanceUri?: string;\n  /**\n   * A URI identifying the runner component.\n   */\n  runnerInstanceUri?: string;\n}\n"]}