{"version":3,"file":"MemoryPhysicalQueryPlanLogger.js","sourceRoot":"","sources":["MemoryPhysicalQueryPlanLogger.ts"],"names":[],"mappings":";;;AAEA,2CAA0C;AAG1C;;GAEG;AACH,MAAa,6BAA6B;IAIxC;QACE,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;IAC5B,CAAC;IAEM,YAAY,CACjB,eAAuB,EACvB,gBAAoC,EACpC,IAAS,EACT,UAAe,EACf,KAAa,EACb,QAAa;QAEb,MAAM,QAAQ,GAAc;YAC1B,KAAK;YACL,eAAe;YACf,gBAAgB;YAChB,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,EAAE;YACZ,QAAQ;SACT,CAAC;QACF,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAE3C,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,UAAU,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,mEAAmE,CAAC,CAAC;aACtF;YACD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1B;aAAM;YACL,IAAI,CAAC,UAAU,EAAE;gBACf,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;aAC5D;YACD,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC/C,IAAI,CAAC,QAAQ,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;aAC/C;YACD,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACzB;IACH,CAAC;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACjE,CAAC;IAEO,cAAc,CAAC,IAAe;QACpC,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,eAAe;YAC7B,QAAQ,EAAE,IAAI,CAAC,gBAAgB;YAC/B,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC;YACxC,GAAG,IAAI,CAAC,QAAQ;YAChB,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;SACxG,CAAC;IACJ,CAAC;IAEO,kBAAkB,CAAC,OAAY;QACrC,IAAI,MAAM,IAAI,OAAO,EAAE;YACrB,MAAM,SAAS,GAAsB,OAAO,CAAC;YAC7C,0EAA0E;YAC1E,QAAQ,SAAS,CAAC,IAAI,EAAE;gBACtB,KAAK,SAAS;oBACZ,OAAO;wBACL,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;qBACtC,CAAC;gBACJ,KAAK,SAAS;oBACZ,OAAO;wBACL,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC;qBAC/D,CAAC;aACL;SACF;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAEO,YAAY,CAAC,IAAkB;QACrC,OAAO,GAAG,IAAA,yBAAY,EAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAA,yBAAY,EAAC,IAAI,CAAC,SAAS,CAAC,IAAI,IAAA,yBAAY,EAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAA,yBAAY,EAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC;IACrL,CAAC;CACF;AA9ED,sEA8EC","sourcesContent":["import type { IPhysicalQueryPlanLogger } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { termToString } from 'rdf-string';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A physical query plan logger that stores everything in memory.\n */\nexport class MemoryPhysicalQueryPlanLogger implements IPhysicalQueryPlanLogger {\n  private readonly children: Map<any, IPlanNode[]>;\n  private rootNode: IPlanNode | undefined;\n\n  public constructor() {\n    this.children = new Map();\n  }\n\n  public logOperation(\n    logicalOperator: string,\n    physicalOperator: string | undefined,\n    node: any,\n    parentNode: any,\n    actor: string,\n    metadata: any,\n  ): void {\n    const planNode: IPlanNode = {\n      actor,\n      logicalOperator,\n      physicalOperator,\n      rawNode: node,\n      children: [],\n      metadata,\n    };\n    this.children.set(node, planNode.children);\n\n    if (!this.rootNode) {\n      if (parentNode) {\n        throw new Error(`No root node has been set yet, while a parent is being referenced`);\n      }\n      this.rootNode = planNode;\n    } else {\n      if (!parentNode) {\n        throw new Error(`Detected more than one parent-less node`);\n      }\n      const children = this.children.get(parentNode);\n      if (!children) {\n        throw new Error(`Could not find parent node`);\n      }\n      children.push(planNode);\n    }\n  }\n\n  public toJson(): any {\n    return this.rootNode ? this.planNodeToJson(this.rootNode) : {};\n  }\n\n  private planNodeToJson(node: IPlanNode): any {\n    return {\n      logical: node.logicalOperator,\n      physical: node.physicalOperator,\n      ...this.getLogicalMetadata(node.rawNode),\n      ...node.metadata,\n      ...node.children.length > 0 ? { children: node.children.map(child => this.planNodeToJson(child)) } : {},\n    };\n  }\n\n  private getLogicalMetadata(rawNode: any): any {\n    if ('type' in rawNode) {\n      const operation: Algebra.Operation = rawNode;\n      // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n      switch (operation.type) {\n        case 'pattern':\n          return {\n            pattern: this.quadToString(operation),\n          };\n        case 'project':\n          return {\n            variables: operation.variables.map(variable => variable.value),\n          };\n      }\n    }\n    return {};\n  }\n\n  private quadToString(quad: RDF.BaseQuad): string {\n    return `${termToString(quad.subject)} ${termToString(quad.predicate)} ${termToString(quad.object)}${quad.graph.termType === 'DefaultGraph' ? '' : ` ${termToString(quad.graph)}`}`;\n  }\n}\n\ninterface IPlanNode {\n  actor: string;\n  logicalOperator: string;\n  physicalOperator?: string;\n  rawNode: any;\n  children: IPlanNode[];\n  metadata: any;\n}\n"]}