{"version":3,"file":"ActorInitQueryBase.js","sourceRoot":"","sources":["ActorInitQueryBase.ts"],"names":[],"mappings":";;;AAGA,iDAA+C;AAU/C;;GAEG;AACH,MAAa,kBACX,SAAQ,oBAAS;IAmBjB;;;;;;OAMG;IACH,YAAmB,IAA6B;QAC9C,sCAAsC;QACtC,IAAI,CAAC,6BAA6B,EAAE,OAAO,CAAC,kBAAkB,CAAC,EAAE;YAC/D,oFAAoF;YACpF,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE;gBACpG,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;aACvF;YACD,IAAI,CAAC,mBAAmB,GAAG,EAAE,GAAG,IAAI,CAAC,mBAAmB,EAAE,GAAG,kBAAkB,EAAE,CAAC;QACpF,CAAC,CAAC,CAAC;QACH,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAmB;QACnC,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAmB;QAClC,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;IAC1E,CAAC;CACF;AA9CD,gDA8CC","sourcesContent":["import type { MediatorContextPreprocess } from '@comunica/bus-context-preprocess';\nimport type { MediatorHttpInvalidate } from '@comunica/bus-http-invalidate';\nimport type { IActionInit, IActorInitArgs, IActorOutputInit } from '@comunica/bus-init';\nimport { ActorInit } from '@comunica/bus-init';\nimport type { MediatorOptimizeQueryOperation } from '@comunica/bus-optimize-query-operation';\nimport type { MediatorQueryOperation } from '@comunica/bus-query-operation';\nimport type { MediatorQueryParse } from '@comunica/bus-query-parse';\nimport type { MediatorQueryResultSerializeHandle,\n  MediatorQueryResultSerializeMediaTypes,\n  MediatorQueryResultSerializeMediaTypeFormats } from '@comunica/bus-query-result-serialize';\nimport type { IActorTest } from '@comunica/core';\nimport type { IQueryContextCommon, Logger } from '@comunica/types';\n\n/**\n * A browser-safe comunica Query Init Actor.\n */\nexport class ActorInitQueryBase<QueryContext extends IQueryContextCommon = IQueryContextCommon>\n  extends ActorInit implements IActorInitQueryBaseArgs<QueryContext> {\n  public readonly mediatorOptimizeQueryOperation: MediatorOptimizeQueryOperation;\n  public readonly mediatorQueryOperation: MediatorQueryOperation;\n  public readonly mediatorQueryParse: MediatorQueryParse;\n  public readonly mediatorQueryResultSerialize: MediatorQueryResultSerializeHandle;\n  public readonly mediatorQueryResultSerializeMediaTypeCombiner: MediatorQueryResultSerializeMediaTypes;\n  public readonly mediatorQueryResultSerializeMediaTypeFormatCombiner: MediatorQueryResultSerializeMediaTypeFormats;\n  public readonly mediatorContextPreprocess: MediatorContextPreprocess;\n  public readonly mediatorHttpInvalidate: MediatorHttpInvalidate;\n\n  public readonly logger: Logger;\n  public readonly queryString?: string;\n  public readonly defaultQueryInputFormat?: string;\n  public readonly context?: string;\n  public readonly contextKeyShortcuts: Record<string, string> & Partial<Record<keyof QueryContext, string>>;\n  /** Array of `contextKeyShortcuts` appended to `contextKeyShortcuts` during construction. */\n  public readonly contextKeyShortcutsExtensions?: (Record<string, string>\n  | Partial<Record<keyof Omit<QueryContext, keyof IQueryContextCommon>, string>>)[];\n\n  /**\n   * Create new ActorInitQueryBase object.\n   * @param args.contextKeyShortcutsExtensions Array of `contextKeyShortcuts` that are merged\n   *   with the `contextKeyShortcuts` field. This allows adding shortcuts to the defaults.\n   * @throws When duplicate keys are present in `args.contextKeyShortcuts`\n   *  and `args.contextKeyShortcutsExtensions`.\n   */\n  public constructor(args: IActorInitQueryBaseArgs) {\n    // Add additional contextKeyShortcuts.\n    args.contextKeyShortcutsExtensions?.forEach(extensionShortcuts => {\n      // Throw, if there are duplicate keys that are to be added to `contextKeyShortcuts`.\n      if (Object.keys(args.contextKeyShortcuts).some(key => Object.keys(extensionShortcuts).includes(key))) {\n        throw new Error('Duplicate keys found while adding `contextKeyShortcutsExtensions`.');\n      }\n      args.contextKeyShortcuts = { ...args.contextKeyShortcuts, ...extensionShortcuts };\n    });\n    super(args);\n  }\n\n  public async test(action: IActionInit): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionInit): Promise<IActorOutputInit> {\n    throw new Error('ActorInitSparql#run is not supported in the browser.');\n  }\n}\n\nexport interface IActorInitQueryBaseArgs<QueryContext extends IQueryContextCommon = IQueryContextCommon>\n  extends IActorInitArgs {\n  /**\n   * The query operation optimize mediator\n   */\n  mediatorOptimizeQueryOperation: MediatorOptimizeQueryOperation;\n  /**\n   * The query operation mediator\n   */\n  mediatorQueryOperation: MediatorQueryOperation;\n  /**\n   * The query parse mediator\n   */\n  mediatorQueryParse: MediatorQueryParse;\n  /**\n   * The query serialize mediator\n   */\n  mediatorQueryResultSerialize: MediatorQueryResultSerializeHandle;\n  /**\n   * The query serialize media type combinator\n   */\n  mediatorQueryResultSerializeMediaTypeCombiner: MediatorQueryResultSerializeMediaTypes;\n  /**\n   * The query serialize media type format combinator\n   */\n  mediatorQueryResultSerializeMediaTypeFormatCombiner: MediatorQueryResultSerializeMediaTypeFormats;\n  /**\n   * The context processing combinator\n   */\n  mediatorContextPreprocess: MediatorContextPreprocess;\n  /**\n   * The HTTP cache invalidation mediator\n   */\n  mediatorHttpInvalidate: MediatorHttpInvalidate;\n  /**\n   * The logger of this actor\n   * @default {a <npmd:@comunica/logger-void/^2.0.0/components/LoggerVoid.jsonld#LoggerVoid>}\n   */\n  logger: Logger;\n  /**\n   * A SPARQL query string\n   */\n  queryString?: string;\n  /**\n   * The default query input format\n   * @default {sparql}\n   */\n  defaultQueryInputFormat?: string;\n  /**\n   * A JSON string of a query operation context\n   */\n  context?: string;\n  /**\n   * A record of context shortcuts to full context keys (as defined in @comunica/context-entries).\n   * @range {json}\n   * @default {{\n   *   \"source\": \"@comunica/bus-rdf-resolve-quad-pattern:source\",\n   *   \"sources\": \"@comunica/bus-rdf-resolve-quad-pattern:sources\",\n   *   \"destination\": \"@comunica/bus-rdf-update-quads:destination\",\n   *   \"initialBindings\": \"@comunica/actor-init-query:initialBindings\",\n   *   \"queryFormat\": \"@comunica/actor-init-query:queryFormat\",\n   *   \"baseIRI\": \"@comunica/actor-init-query:baseIRI\",\n   *   \"log\": \"@comunica/core:log\",\n   *   \"datetime\": \"@comunica/actor-http-memento:datetime\",\n   *   \"queryTimestamp\": \"@comunica/actor-init-query:queryTimestamp\",\n   *   \"httpProxyHandler\": \"@comunica/actor-http-proxy:httpProxyHandler\",\n   *   \"lenient\": \"@comunica/actor-init-query:lenient\",\n   *   \"httpIncludeCredentials\": \"@comunica/bus-http:include-credentials\",\n   *   \"httpAuth\": \"@comunica/bus-http:auth\",\n   *   \"httpTimeout\": \"@comunica/bus-http:http-timeout\",\n   *   \"httpBodyTimeout\": \"@comunica/bus-http:http-body-timeout\",\n   *   \"httpRetryCount\": \"@comunica/bus-http:http-retry-count\",\n   *   \"httpRetryDelay\": \"@comunica/bus-http:http-retry-delay\",\n   *   \"httpRetryOnServerError\": \"@comunica/bus-http:http-retry-on-server-error\",\n   *   \"fetch\": \"@comunica/bus-http:fetch\",\n   *   \"recoverBrokenLinks\": \"@comunica/bus-http-wayback:recover-broken-links\",\n   *   \"readOnly\": \"@comunica/bus-query-operation:readOnly\",\n   *   \"extensionFunctions\": \"@comunica/actor-init-query:extensionFunctions\",\n   *   \"extensionFunctionCreator\": \"@comunica/actor-init-query:extensionFunctionCreator\",\n   *   \"functionArgumentsCache\": \"@comunica/actor-init-query:functionArgumentsCache\",\n   *   \"explain\": \"@comunica/actor-init-query:explain\",\n   *   \"unionDefaultGraph\": \"@comunica/bus-query-operation:unionDefaultGraph\",\n   *   \"localizeBlankNodes\": \"@comunica/actor-query-operation:localizeBlankNodes\"\n   * }}\n   */\n  contextKeyShortcuts: Record<string, string> | Partial<Record<keyof QueryContext, string>>;\n  /**\n   * An array of `contextKeyShortcuts` that are to be appended to the (default) `contextKeyShortcuts`\n   * (which are by default injected by component.js).\n   *\n   * The appending happens in the constructor call. Conflicting keys will cause an error.\n   * If you extend `ActorInitQueryBase` and want to add custom shortcuts, do so as follows:\n   * ```\n   * public constructor(args: IActorInitQueryBaseArgs<QueryContext>) {\n   *  if (!args.contextKeyShortcutsExtensions) {\n   *    args.contextKeyShortcutsExtensions = [];\n   *  }\n   *  args.contextKeyShortcutsExtensions.push(addedShortcuts);\n   *\n   *  super(args);\n   * }\n   * ```\n   */\n  contextKeyShortcutsExtensions?: (Record<string, string>\n  | Partial<Record<keyof Omit<QueryContext, keyof IQueryContextCommon>, string>>)[];\n}\n"]}