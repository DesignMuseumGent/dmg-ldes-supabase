{"version":3,"file":"CliArgsHandlerBase.js","sourceRoot":"","sources":["CliArgsHandlerBase.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable import/no-nodejs-modules */\nimport { exec } from 'child_process';\nimport { existsSync, readFileSync } from 'fs';\nimport * as OS from 'os';\nimport { KeysHttp, KeysInitQuery, KeysQueryOperation, KeysRdfUpdateQuads } from '@comunica/context-entries';\nimport { ActionContext } from '@comunica/core';\nimport { LoggerPretty } from '@comunica/logger-pretty';\nimport type { IActionContext, ICliArgsHandler } from '@comunica/types';\nimport type { Argv } from 'yargs';\n\n/**\n * Basic CLI arguments handler that handles common options.\n */\nexport class CliArgsHandlerBase implements ICliArgsHandler {\n  private readonly initialContext?: IActionContext;\n\n  public constructor(initialContext?: IActionContext) {\n    this.initialContext = initialContext;\n  }\n\n  public static getScriptOutput(command: string, fallback: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      exec(command, (error, stdout, stderr) => {\n        if (error) {\n          resolve(fallback);\n        }\n        resolve((stdout || stderr).trimEnd());\n      });\n    });\n  }\n\n  public static isDevelopmentEnvironment(): boolean {\n    return existsSync(`${__dirname}/../../test`);\n  }\n\n  /**\n   * Converts an URL like 'hypermedia@http://user:passwd@example.com to an IDataSource\n   * @param {string} sourceString An url with possibly a type and authorization.\n   * @return {[id: string]: any} An IDataSource which represents the sourceString.\n   */\n  public static getSourceObjectFromString(sourceString: string): Record<string, any> {\n    const source: Record<string, any> = {};\n    const mediaTypeRegex = /^([^:]*)@/u;\n    const mediaTypeMatches = mediaTypeRegex.exec(sourceString);\n    if (mediaTypeMatches) {\n      source.type = mediaTypeMatches[1];\n      sourceString = sourceString.slice((<number> source.type.length) + 1);\n    }\n    const authRegex = /\\/\\/(.*:.*)@/u;\n    const authMatches = authRegex.exec(sourceString);\n    if (authMatches) {\n      const credentials = authMatches[1];\n      source.context = new ActionContext({\n        [KeysHttp.auth.name]: decodeURIComponent(credentials),\n      });\n      sourceString = sourceString.slice(0, authMatches.index + 2) +\n        sourceString.slice(authMatches.index + credentials.length + 3);\n    }\n    source.value = sourceString;\n    return source;\n  }\n\n  public populateYargs(argumentsBuilder: Argv<any>): Argv<any> {\n    return argumentsBuilder\n      .command(\n        '$0 [sources...]',\n        'evaluates SPARQL queries',\n        () => {\n          // Do nothing\n        },\n        () => {\n          // Do nothing\n        },\n      )\n      .default('sources', [])\n      .hide('sources')\n      .wrap(160)\n      .version(false)\n      .options({\n        context: {\n          alias: 'c',\n          type: 'string',\n          describe: 'Use the given JSON context string or file (e.g., config.json)',\n        },\n        to: {\n          type: 'string',\n          describe: 'Destination for update queries',\n        },\n        baseIRI: {\n          alias: 'b',\n          type: 'string',\n          describe: 'base IRI for the query (e.g., http://example.org/)',\n        },\n        dateTime: {\n          alias: 'd',\n          type: 'string',\n          describe: 'Sets a datetime for querying Memento-enabled archives',\n        },\n        logLevel: {\n          alias: 'l',\n          type: 'string',\n          describe: 'Sets the log level (e.g., debug, info, warn, ...)',\n          default: 'warn',\n        },\n        lenient: {\n          type: 'boolean',\n          describe: 'If failing requests and parsing errors should be logged instead of causing a hard crash',\n        },\n        version: {\n          alias: 'v',\n          type: 'boolean',\n          describe: 'Prints version information',\n        },\n        showStackTrace: {\n          type: 'boolean',\n          describe: 'Prints the full stacktrace when errors are thrown',\n        },\n        httpTimeout: {\n          type: 'number',\n          describe: 'HTTP requests timeout in milliseconds',\n        },\n        httpBodyTimeout: {\n          type: 'boolean',\n          describe: 'Makes the HTTP timeout take into account the response body stream read',\n        },\n        httpRetryCount: {\n          type: 'number',\n          describe: 'The number of retries to perform on failed fetch requests',\n        },\n        httpRetryDelay: {\n          type: 'number',\n          describe: 'The number of milliseconds to wait between fetch retries',\n        },\n        httpRetryOnServerError: {\n          type: 'boolean',\n          describe: 'If fetch should be retried on 5xx server error responses, instead of being resolved.',\n        },\n        unionDefaultGraph: {\n          type: 'boolean',\n          describe: 'If the default graph should also contain the union of all named graphs',\n        },\n      })\n      .exitProcess(false)\n      .fail(false)\n      .help(false);\n  }\n\n  public async handleArgs(args: Record<string, any>, context: Record<string, any>): Promise<void> {\n    // Print version information\n    if (args.version) {\n      const comunicaVersion: string = require('../../package.json').version;\n      const dev: string = CliArgsHandlerBase.isDevelopmentEnvironment() ? '(dev)' : '';\n      const nodeVersion: string = process.version;\n      const npmVersion: string = await CliArgsHandlerBase.getScriptOutput('npm -v', '_NPM is unavailable_');\n      const yarnVersion: string = await CliArgsHandlerBase.getScriptOutput('yarn -v', '_Yarn is unavailable_');\n      const os = `${OS.platform()} (${OS.type()} ${OS.release()})`;\n\n      const message = `| software         | version\n| ---------------- | -------\n| Comunica Engine  | ${comunicaVersion} ${dev}\n| node             | ${nodeVersion}\n| npm              | ${npmVersion}\n| yarn             | ${yarnVersion}\n| Operating System | ${os}\n`;\n\n      return Promise.reject(new Error(message));\n    }\n\n    // Inherit default context options\n    if (this.initialContext) {\n      Object.assign(context, this.initialContext.toJS());\n    }\n\n    // Define context\n    if (args.context) {\n      Object.assign(context, JSON.parse(existsSync(args.context) ? readFileSync(args.c, 'utf8') : args.context));\n    } else if (args.sources[0]?.startsWith('{')) {\n      // For backwards compatibility inline JSON\n      Object.assign(context, JSON.parse(args.sources[0]));\n      args.sources.shift();\n    }\n\n    // Add sources to context\n    if (args.sources.length > 0) {\n      context.sources = context.sources || [];\n      args.sources.forEach((sourceValue: string) => {\n        const source = CliArgsHandlerBase.getSourceObjectFromString(sourceValue);\n        context.sources.push(source);\n      });\n    }\n\n    // Add destination to context\n    if (args.to) {\n      context[KeysRdfUpdateQuads.destination.name] = args.to;\n    }\n\n    // Set the logger\n    if (!context.log) {\n      context.log = new LoggerPretty({ level: args.logLevel });\n    }\n\n    // Define the base IRI\n    if (args.baseIRI) {\n      context[KeysInitQuery.baseIRI.name] = args.baseIRI;\n    }\n\n    // Define lenient-mode\n    if (args.lenient) {\n      context[KeysInitQuery.lenient.name] = true;\n    }\n\n    // Define HTTP timeout\n    if (args.httpTimeout) {\n      context[KeysHttp.httpTimeout.name] = args.httpTimeout;\n    }\n\n    // Define HTTP body timeout\n    if (args.httpBodyTimeout) {\n      if (!args.httpTimeout) {\n        throw new Error('The --httpBodyTimeout option requires the --httpTimeout option to be set');\n      }\n      context[KeysHttp.httpBodyTimeout.name] = args.httpBodyTimeout;\n    }\n\n    // Define HTTP retry count\n    if (args.httpRetryCount) {\n      context[KeysHttp.httpRetryCount.name] = args.httpRetryCount;\n    }\n\n    // Define HTTP delay between retries\n    if (args.httpRetryDelay) {\n      if (!args.httpRetryCount) {\n        throw new Error('The --httpRetryDelay option requires the --httpRetryCount option to be set');\n      }\n      context[KeysHttp.httpRetryDelay.name] = args.httpRetryDelay;\n    }\n\n    // Define HTTP retry on server error response\n    if (args.httpRetryOnServerError) {\n      if (!args.httpRetryCount) {\n        throw new Error('The --httpRetryOnServerError option requires the --httpRetryCount option to be set');\n      }\n      context[KeysHttp.httpRetryOnServerError.name] = args.httpRetryOnServerError;\n    }\n\n    // Define union default graph\n    if (args.unionDefaultGraph) {\n      context[KeysQueryOperation.unionDefaultGraph.name] = true;\n    }\n  }\n}\n/* eslint-enable import/no-nodejs-modules */\n\n"]}