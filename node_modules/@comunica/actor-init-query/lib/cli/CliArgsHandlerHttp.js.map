{"version":3,"file":"CliArgsHandlerHttp.js","sourceRoot":"","sources":["CliArgsHandlerHttp.ts"],"names":[],"mappings":";;;AAGA;;GAEG;AACH,MAAa,kBAAkB;IACtB,aAAa,CAAC,gBAA2B;QAC9C,OAAO,gBAAgB;aACpB,KAAK,CAAC,8BAA8B,CAAC;aACrC,OAAO,CAAC;YACP,CAAE,6CAA6C,EAAE,EAAE,CAAE;YACrD,CAAE,+EAA+E,EAAE,EAAE,CAAE;YACvF,CAAE,iGAAiG,EAAE,EAAE,CAAE;SAC1G,CAAC;aACD,OAAO,CAAC;YACP,IAAI,EAAE;gBACJ,KAAK,EAAE,GAAG;gBACV,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,qBAAqB;gBAC/B,OAAO,EAAE,IAAK;gBACd,KAAK,EAAE,sBAAsB;aAC9B;YACD,OAAO,EAAE;gBACP,KAAK,EAAE,GAAG;gBACV,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,0BAA0B;gBACpC,OAAO,EAAE,CAAC;gBACV,KAAK,EAAE,sBAAsB;aAC9B;YACD,OAAO,EAAE;gBACP,KAAK,EAAE,GAAG;gBACV,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,oCAAoC;gBAC9C,OAAO,EAAE,EAAE;gBACX,KAAK,EAAE,sBAAsB;aAC9B;YACD,MAAM,EAAE;gBACN,KAAK,EAAE,GAAG;gBACV,IAAI,EAAE,SAAS;gBACf,QAAQ,EAAE,kEAAkE;gBAC5E,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,sBAAsB;aAC9B;YACD,eAAe,EAAE;gBACf,KAAK,EAAE,GAAG;gBACV,IAAI,EAAE,SAAS;gBACf,QAAQ,EAAE,uDAAuD;gBACjE,OAAO,EAAE,KAAK;aACf;YACD,WAAW,EAAE;gBACX,IAAI,EAAE,SAAS;gBACf,QAAQ,EAAE,6CAA6C;gBACvD,OAAO,EAAE,KAAK;aACf;YACD,eAAe,EAAE;gBACf,IAAI,EAAE,SAAS;gBACf,QAAQ,EAAE,8DAA8D;gBACxE,OAAO,EAAE,KAAK;aACf;SACF,CAAC;aACD,KAAK,CAAC,IAAI,CAAC,EAAE;YACZ,IAAI,IAAI,CAAC,OAAO,EAAE;gBAChB,OAAO,IAAI,CAAC;aACb;YACD,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;gBACtE,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;aACzD;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,IAAyB,EAAE,OAA4B;QAC7E,aAAa;IACf,CAAC;CACF;AArED,gDAqEC","sourcesContent":["import type { ICliArgsHandler } from '@comunica/types';\nimport type { Argv } from 'yargs';\n\n/**\n * CLI arguments handler that handles options for HTTP servers.\n */\nexport class CliArgsHandlerHttp implements ICliArgsHandler {\n  public populateYargs(argumentsBuilder: Argv<any>): Argv<any> {\n    return argumentsBuilder\n      .usage('$0 exposes a SPARQL endpoint')\n      .example([\n        [ `$0 https://fragments.dbpedia.org/2016-04/en`, '' ],\n        [ `$0 https://fragments.dbpedia.org/2016-04/en https://query.wikidata.org/sparql`, '' ],\n        [ `$0 hypermedia@https://fragments.dbpedia.org/2016-04/en sparql@https://query.wikidata.org/sparql`, '' ],\n      ])\n      .options({\n        port: {\n          alias: 'p',\n          type: 'number',\n          describe: 'HTTP port to run on',\n          default: 3_000,\n          group: 'Recommended options:',\n        },\n        workers: {\n          alias: 'w',\n          type: 'number',\n          describe: 'Number of worker threads',\n          default: 1,\n          group: 'Recommended options:',\n        },\n        timeout: {\n          alias: 't',\n          type: 'number',\n          describe: 'Query execution timeout in seconds',\n          default: 60,\n          group: 'Recommended options:',\n        },\n        update: {\n          alias: 'u',\n          type: 'boolean',\n          describe: 'Enable update queries (otherwise, only read queries are enabled)',\n          default: false,\n          group: 'Recommended options:',\n        },\n        invalidateCache: {\n          alias: 'i',\n          type: 'boolean',\n          describe: 'Enable cache invalidation before each query execution',\n          default: false,\n        },\n        freshWorker: {\n          type: 'boolean',\n          describe: 'Kills the worker after each query execution',\n          default: false,\n        },\n        contextOverride: {\n          type: 'boolean',\n          describe: 'If the query context can be overridden through POST requests',\n          default: false,\n        },\n      })\n      .check(args => {\n        if (args.version) {\n          return true;\n        }\n        if (args.context ? args.sources.length > 0 : args.sources.length === 0) {\n          throw new Error('At least one source must be provided');\n        }\n        return true;\n      });\n  }\n\n  public async handleArgs(args: Record<string, any>, context: Record<string, any>): Promise<void> {\n    // Do nothing\n  }\n}\n"]}