{"version":3,"file":"ActorRdfResolveQuadPatternStringSource.js","sourceRoot":"","sources":["ActorRdfResolveQuadPatternStringSource.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IActionRdfParseHandle, MediatorRdfParseHandle } from '@comunica/bus-rdf-parse';\nimport { getContextSource, ActorRdfResolveQuadPattern } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type {\n  IActionRdfResolveQuadPattern, IActorRdfResolveQuadPatternArgs, IActorRdfResolveQuadPatternOutput,\n  MediatorRdfResolveQuadPattern,\n} from '@comunica/bus-rdf-resolve-quad-pattern';\nimport { KeysRdfResolveQuadPattern } from '@comunica/context-entries';\nimport type { IActorTest } from '@comunica/core';\nimport type { IActionContext, IDataSource, IDataSourceSerialized } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport * as LRUCache from 'lru-cache';\nimport { storeStream } from 'rdf-store-stream';\nimport { Readable } from 'readable-stream';\n\n/**\n * A comunica RDF Resolve Quad Pattern String Source RDF Resolve Quad Pattern Actor.\n */\nexport class ActorRdfResolveQuadPatternStringSource extends ActorRdfResolveQuadPattern\n  implements IActorRdfResolveQuadPatternStringSourceArgs {\n  public readonly cacheSize: number;\n  public readonly mediatorRdfParse: MediatorRdfParseHandle;\n  public readonly mediatorRdfResolveQuadPattern: MediatorRdfResolveQuadPattern;\n\n  public static readonly sourceType = 'stringSource';\n\n  private readonly cache?: LRUCache<IDataSource, Promise<RDF.Source>>;\n\n  public constructor(args: IActorRdfResolveQuadPatternStringSourceArgs) {\n    super(args);\n    this.cache = this.cacheSize ? new LRUCache<IDataSource, Promise<RDF.Source>>({ max: this.cacheSize }) : undefined;\n  }\n\n  public async test(action: IActionRdfResolveQuadPattern): Promise<IActorTest> {\n    const source = getContextSource(action.context);\n    if (!source) {\n      throw new Error(`Actor ${this.name} can only resolve quad pattern queries against a source.`);\n    }\n    if (!this.isStringSource(source.valueOf())) {\n      throw new Error(`Actor ${this.name} can only resolve stringSource quad pattern`);\n    }\n    return true;\n  }\n\n  public run(action: IActionRdfResolveQuadPattern): Promise<IActorRdfResolveQuadPatternOutput> {\n    const source = <IDataSourceSerialized>getContextSource(action.context)!;\n    // A source should only be parsed once (see getRdfSource comment), so if it has been parsed,\n    // that earlier result should be used. Note: if the object is identical value-wise, but is not\n    // the same exact object, it will get parsed again and saved in the cache as its own entry!\n    let rdfSourcePromise = this.cache?.get(source);\n    if (!rdfSourcePromise) {\n      rdfSourcePromise = this.getRdfSource(action.context, source);\n      if (this.cache) {\n        this.cache.set(source, rdfSourcePromise);\n      }\n    }\n    return new Promise((resolve, reject) => rdfSourcePromise!\n      .then(rdfSource => {\n        const resolveQuadAction: IActionRdfResolveQuadPattern = {\n          pattern: action.pattern,\n          context: action.context.set(KeysRdfResolveQuadPattern.source, {\n            value: rdfSource,\n            type: 'rdfjsSource',\n          }),\n        };\n        resolve(this.mediatorRdfResolveQuadPattern.mediate(resolveQuadAction));\n      }).catch(reject));\n  }\n\n  /**\n   * Parses the string data source through the RDF parse bus, returning the RDF source.\n   * Parsing a source with blank nodes may produce different identifiers for the same nodes\n   * on different parses, for example if the source gets parsed separately for each pattern\n   * in a query. Consequently, a single source should only be parsed once, and the parse result cached.\n   * @param context The run action context\n   * @param source The source from the run action context\n   * @returns Parsed RDF source that can be passed to quad pattern resolve mediator as an rdfjsSource\n   */\n  protected async getRdfSource(context: IActionContext, source: IDataSourceSerialized): Promise<RDF.Source> {\n    const textStream = new Readable({ objectMode: true });\n    /* istanbul ignore next */\n    textStream._read = () => {\n      // Do nothing\n    };\n    textStream.push(source.value);\n    textStream.push(null);\n\n    const parseAction: IActionRdfParseHandle = {\n      context,\n      handle: {\n        metadata: { baseIRI: source.baseIRI },\n        data: textStream,\n        context,\n      },\n      handleMediaType: source.mediaType,\n    };\n\n    const parseResult = await this.mediatorRdfParse.mediate(parseAction);\n    return await storeStream(parseResult.handle.data);\n  }\n\n  private isStringSource(datasource: any): datasource is IDataSourceSerialized {\n    if (!('type' in datasource)) {\n      if (!(typeof datasource.value === 'string')) {\n        return false;\n      }\n      return 'mediaType' in datasource;\n    }\n    return datasource.type === ActorRdfResolveQuadPatternStringSource.sourceType;\n  }\n}\n\nexport interface IActorRdfResolveQuadPatternStringSourceArgs extends IActorRdfResolveQuadPatternArgs {\n  /**\n   * The maximum number of parsed stores in the LRU cache, set to 0 to disable.\n   * @range {integer}\n   * @default {100}\n   */\n  cacheSize: number;\n  /**\n   * The quad pattern parser mediator.\n   */\n  mediatorRdfParse: MediatorRdfParseHandle;\n  /**\n   * The rdf resolve quad pattern mediator.\n   */\n  mediatorRdfResolveQuadPattern: MediatorRdfResolveQuadPattern;\n}\n"]}