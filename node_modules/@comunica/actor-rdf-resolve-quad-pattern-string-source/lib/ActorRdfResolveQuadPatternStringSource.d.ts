import type { MediatorRdfParseHandle } from '@comunica/bus-rdf-parse';
import { ActorRdfResolveQuadPattern } from '@comunica/bus-rdf-resolve-quad-pattern';
import type { IActionRdfResolveQuadPattern, IActorRdfResolveQuadPatternArgs, IActorRdfResolveQuadPatternOutput, MediatorRdfResolveQuadPattern } from '@comunica/bus-rdf-resolve-quad-pattern';
import type { IActorTest } from '@comunica/core';
import type { IActionContext, IDataSourceSerialized } from '@comunica/types';
import type * as RDF from '@rdfjs/types';
/**
 * A comunica RDF Resolve Quad Pattern String Source RDF Resolve Quad Pattern Actor.
 */
export declare class ActorRdfResolveQuadPatternStringSource extends ActorRdfResolveQuadPattern implements IActorRdfResolveQuadPatternStringSourceArgs {
    readonly cacheSize: number;
    readonly mediatorRdfParse: MediatorRdfParseHandle;
    readonly mediatorRdfResolveQuadPattern: MediatorRdfResolveQuadPattern;
    static readonly sourceType = "stringSource";
    private readonly cache?;
    constructor(args: IActorRdfResolveQuadPatternStringSourceArgs);
    test(action: IActionRdfResolveQuadPattern): Promise<IActorTest>;
    run(action: IActionRdfResolveQuadPattern): Promise<IActorRdfResolveQuadPatternOutput>;
    /**
     * Parses the string data source through the RDF parse bus, returning the RDF source.
     * Parsing a source with blank nodes may produce different identifiers for the same nodes
     * on different parses, for example if the source gets parsed separately for each pattern
     * in a query. Consequently, a single source should only be parsed once, and the parse result cached.
     * @param context The run action context
     * @param source The source from the run action context
     * @returns Parsed RDF source that can be passed to quad pattern resolve mediator as an rdfjsSource
     */
    protected getRdfSource(context: IActionContext, source: IDataSourceSerialized): Promise<RDF.Source>;
    private isStringSource;
}
export interface IActorRdfResolveQuadPatternStringSourceArgs extends IActorRdfResolveQuadPatternArgs {
    /**
     * The maximum number of parsed stores in the LRU cache, set to 0 to disable.
     * @range {integer}
     * @default {100}
     */
    cacheSize: number;
    /**
     * The quad pattern parser mediator.
     */
    mediatorRdfParse: MediatorRdfParseHandle;
    /**
     * The rdf resolve quad pattern mediator.
     */
    mediatorRdfResolveQuadPattern: MediatorRdfResolveQuadPattern;
}
