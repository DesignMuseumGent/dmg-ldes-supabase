{"version":3,"file":"PathVariableObjectIterator.js","sourceRoot":"","sources":["PathVariableObjectIterator.ts"],"names":[],"mappings":"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","sourcesContent":["import type { MediatorQueryOperation } from '@comunica/bus-query-operation';\nimport { ActorQueryOperation } from '@comunica/bus-query-operation';\nimport type { IActionContext } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport { BufferedIterator } from 'asynciterator';\nimport { DataFactory } from 'rdf-data-factory';\nimport { termToString } from 'rdf-string';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport { Factory } from 'sparqlalgebrajs';\n\nconst DF = new DataFactory();\nconst FACTORY = new Factory();\n\n/**\n * An iterator that implements the multi-length property path operation (* and +)\n * for a fixed subject and predicate, and a variable object.\n */\nexport class PathVariableObjectIterator extends BufferedIterator<RDF.Term> {\n  private readonly termHashes: Map<string, RDF.Term> = new Map();\n  private readonly runningOperations: AsyncIterator<RDF.Term>[] = [];\n  private readonly pendingOperations: { variable: RDF.Variable; operation: Algebra.Path }[] = [];\n\n  public constructor(\n    private readonly subject: RDF.Term,\n    private readonly predicate: Algebra.PropertyPathSymbol,\n    private readonly graph: RDF.Term,\n    private readonly context: IActionContext,\n    private readonly mediatorQueryOperation: MediatorQueryOperation,\n    emitFirstSubject: boolean,\n    private readonly maxRunningOperations = 16,\n  ) {\n    // The autoStart flag must be true to kickstart metadata collection\n    super({ autoStart: true });\n\n    // Push the subject as starting point\n    this._push(this.subject, emitFirstSubject);\n  }\n\n  protected _end(destroy?: boolean): void {\n    // Close all running iterators\n    for (const it of this.runningOperations) {\n      it.destroy();\n    }\n\n    super._end(destroy);\n  }\n\n  protected _push(item: RDF.Term, pushAsResult = true): void {\n    let termString;\n    if (pushAsResult) {\n      // Don't push if this subject was already found\n      termString = termToString(item);\n      if (this.termHashes.has(termString)) {\n        return;\n      }\n    }\n\n    // Add a pending path operation for this item\n    const variable = DF.variable('b');\n    this.pendingOperations.push({\n      variable,\n      operation: FACTORY.createPath(item, this.predicate, variable, this.graph),\n    });\n\n    // Otherwise, push the subject\n    if (termString) {\n      this.termHashes.set(termString, item);\n      super._push(item);\n    }\n  }\n\n  protected _read(count: number, done: () => void): void {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias,consistent-this\n    const self = this;\n    (async function() {\n      // Open as many operations as possible\n      while (self.runningOperations.length < self.maxRunningOperations) {\n        if (self.pendingOperations.length === 0) {\n          break;\n        }\n\n        const pendingOperation = self.pendingOperations.pop()!;\n        const results = ActorQueryOperation.getSafeBindings(\n          await self.mediatorQueryOperation.mediate({ operation: pendingOperation.operation, context: self.context }),\n        );\n        const runningOperation = results.bindingsStream.transform<RDF.Term>({\n          autoStart: false,\n          transform(bindings, next, push) {\n            const newTerm: RDF.Term = bindings.get(pendingOperation.variable)!;\n            push(newTerm);\n            next();\n          },\n        });\n        if (!runningOperation.done) {\n          self.runningOperations.push(runningOperation);\n          runningOperation.on('error', error => self.destroy(error));\n          runningOperation.on('readable', () => {\n            self.readable = true;\n            self._fillBufferAsync();\n          });\n          runningOperation.on('end', () => {\n            self.runningOperations.splice(self.runningOperations.indexOf(runningOperation), 1);\n            self.readable = true;\n            self._fillBufferAsync();\n          });\n        }\n\n        self.setProperty('metadata', results.metadata);\n      }\n\n      // Try to read `count` items (based on UnionIterator)\n      let lastCount = 0;\n      let item: RDF.Term | null;\n      // eslint-disable-next-line no-cond-assign\n      while (lastCount !== (lastCount = count)) {\n        // Prioritize the operations that have been added first\n        for (let i = 0; i < self.runningOperations.length && count > 0; i++) {\n          // eslint-disable-next-line no-cond-assign\n          if ((item = self.runningOperations[i].read()) !== null) {\n            count--;\n            self._push(item);\n          }\n        }\n      }\n\n      // Close if everything has been read\n      if (self.runningOperations.length === 0 && self.pendingOperations.length === 0) {\n        self.close();\n      }\n    })().then(() => {\n      done();\n    }, error => this.destroy(error));\n  }\n}\n"]}