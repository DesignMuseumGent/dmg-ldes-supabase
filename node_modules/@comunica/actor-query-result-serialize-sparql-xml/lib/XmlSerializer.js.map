{"version":3,"file":"XmlSerializer.js","sourceRoot":"","sources":["XmlSerializer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * A very simple XML serializer\n */\nexport class XmlSerializer {\n  private readonly push: (data: string) => void;\n\n  private readonly stack: string[] = [];\n\n  public constructor(push: (data: string) => void) {\n    this.push = push;\n    this.push(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n`);\n  }\n\n  /**\n     *\n     * @param name should be a valid XML tag name\n     * @param attributes keys should be valid attribute names\n     */\n  public open(name: string, attributes?: Record<string, string>): void {\n    this.push(`${this.identation() + this.formatTag(name, attributes, 'open')}\\n`);\n    this.stack.push(name);\n  }\n\n  public close(): void {\n    const name = this.stack.pop();\n    if (name === undefined) {\n      throw new Error('There is no tag left to close');\n    }\n    this.push(`${this.identation() + this.formatTag(name, {}, 'close')}\\n`);\n  }\n\n  public add(node: IXmlNode): void {\n    this.push(this.serializeNode(node));\n  }\n\n  private serializeNode(node: IXmlNode): string {\n    if (node.children === undefined) {\n      return `${this.identation() + this.formatTag(node.name, node.attributes, 'self-closing')}\\n`;\n    }\n    if (typeof node.children === 'string') {\n      return `${this.identation() + this.formatTag(node.name, node.attributes, 'open') + this.escape(node.children) + this.formatTag(node.name, {}, 'close')}\\n`;\n    }\n    const parts = [];\n    parts.push(`${this.identation() + this.formatTag(node.name, node.attributes, 'open')}\\n`);\n    this.stack.push(node.name);\n    for (const child of node.children) {\n      parts.push(this.serializeNode(child));\n    }\n    this.stack.pop();\n    parts.push(`${this.identation() + this.formatTag(node.name, {}, 'close')}\\n`);\n    return parts.join('');\n  }\n\n  private identation(): string {\n    return this.stack.map(_ => '  ').join('');\n  }\n\n  private formatTag(\n    name: string, attributes: Record<string, string> | undefined, state: 'open' | 'close' | 'self-closing',\n  ): string {\n    return `<${state === 'close' ? '/' : ''}${name}${Object.entries(attributes || {}).map(attr => ` ${attr[0]}=\"${this.escape(attr[1])}\"`)}${state === 'self-closing' ? '/' : ''}>`;\n  }\n\n  private escape(text: string): string {\n    return text.replace(/[\"&'<>]/gu, (char: '\"' | '&' | '\\'' | '<' | '>') => {\n      switch (char) {\n        case '<': return '&lt;';\n        case '>': return '&gt;';\n        case '&': return '&amp;';\n        case '\\'': return '&apos;';\n        case '\"': return '&quot;';\n      }\n    });\n  }\n}\n\nexport interface IXmlNode {\n  name: string;\n  attributes?: Record<string, string>;\n  children?: (IXmlNode[]) | string;\n}\n"]}