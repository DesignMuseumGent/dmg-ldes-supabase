{"version":3,"file":"ActorQueryResultSerializeSparqlXml.js","sourceRoot":"","sources":["ActorQueryResultSerializeSparqlXml.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IActionSparqlSerialize,\n  IActorQueryResultSerializeFixedMediaTypesArgs,\n  IActorQueryResultSerializeOutput } from '@comunica/bus-query-result-serialize';\nimport { ActorQueryResultSerializeFixedMediaTypes } from '@comunica/bus-query-result-serialize';\nimport type {\n  Bindings, IActionContext, IQueryOperationResultBindings,\n  IQueryOperationResultBoolean,\n} from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { Readable } from 'readable-stream';\nimport { XmlSerializer, type IXmlNode } from './XmlSerializer';\n\n/**\n * A comunica sparql-results+xml Serialize Actor.\n */\nexport class ActorQueryResultSerializeSparqlXml extends ActorQueryResultSerializeFixedMediaTypes {\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"application/sparql-results+xml\": 0.8\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"application/sparql-results+xml\": \"http://www.w3.org/ns/formats/SPARQL_Results_XML\"\n   *     }} mediaTypeFormats\n   */\n  public constructor(args: IActorQueryResultSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  /**\n   * Converts an RDF term to its object-based XML representation.\n   * @param {RDF.Term} value An RDF term.\n   * @param {string} key A variable name, '?' must be included as a prefix.\n   * @return {IXmlNode} An object-based XML tag.\n   */\n  public static bindingToXmlBindings(value: RDF.Term, key: RDF.Variable): IXmlNode {\n    return { name: 'binding', attributes: { name: key.value }, children: [ this.valueToXmlValue(value) ]};\n  }\n\n  public static valueToXmlValue(value: RDF.Term): IXmlNode {\n    let attributes;\n    switch (value.termType) {\n      case 'Literal':\n        if (value.language) {\n          attributes = { 'xml:lang': value.language };\n        } else if (value.datatype && value.datatype.value !== 'http://www.w3.org/2001/XMLSchema#string') {\n          attributes = { datatype: value.datatype.value };\n        } else {\n          attributes = {};\n        }\n        return { name: 'literal', attributes, children: value.value };\n      case 'BlankNode':\n        return { name: 'bnode', children: value.value };\n      default:\n        return { name: 'uri', children: value.value };\n    }\n  }\n\n  public async testHandleChecked(action: IActionSparqlSerialize, context: IActionContext): Promise<boolean> {\n    if (![ 'bindings', 'boolean' ].includes(action.type)) {\n      throw new Error('This actor can only handle bindings streams or booleans.');\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, mediaType: string, context: IActionContext):\n  Promise<IActorQueryResultSerializeOutput> {\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    // Write head\n    const serializer = new XmlSerializer(chunk => data.push(chunk));\n    serializer.open('sparql', { xmlns: 'http://www.w3.org/2005/sparql-results#' });\n    const metadata = await (<IQueryOperationResultBindings> action).metadata();\n    serializer.add({\n      name: 'head',\n      children: metadata.variables.map(variable => ({ name: 'variable', attributes: { name: variable.value }})),\n    });\n    if (action.type === 'bindings') {\n      serializer.open('results');\n      const resultStream: NodeJS.EventEmitter = (<IQueryOperationResultBindings> action).bindingsStream;\n\n      // Write bindings\n      resultStream.on('error', (error: Error) => {\n        data.emit('error', error);\n      });\n      resultStream.on('data', (bindings: Bindings) => {\n        // XML SPARQL results spec does not allow unbound variables and blank node bindings\n        serializer.add({ name: 'result',\n          children: [ ...bindings ]\n            .map(([ key, value ]) => ActorQueryResultSerializeSparqlXml.bindingToXmlBindings(value, key)) });\n      });\n\n      // Close streams\n      resultStream.on('end', () => {\n        serializer.close();\n        serializer.close();\n        setTimeout(() => data.push(null));\n      });\n    } else {\n      try {\n        const result = await (<IQueryOperationResultBoolean> action).execute();\n        serializer.add({ name: 'boolean', children: result.toString() });\n        serializer.close();\n        setTimeout(() => data.push(null));\n      } catch (error: unknown) {\n        setTimeout(() => data.emit('error', error));\n      }\n    }\n\n    return { data };\n  }\n}\n"]}