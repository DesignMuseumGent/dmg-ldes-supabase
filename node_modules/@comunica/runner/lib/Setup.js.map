{"version":3,"file":"Setup.js","sourceRoot":"","sources":["Setup.ts"],"names":[],"mappings":";;;AACA,+CAAiD;AAWjD;;;;;GAKG;AAEH;;;;;;;GAOG;AACI,KAAK,UAAU,oBAAoB,CAAC,iBAAyB,EAAE,WAAmB,EACvF,UAA6B;IAC7B,4BAA4B;IAC5B,IAAI,CAAC,UAAU,EAAE;QACf,UAAU,GAAG,EAAE,CAAC;KACjB;IACD,MAAM,gBAAgB,GAA0C,EAAE,cAAc,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE,GAAG,UAAU,EAAE,CAAC;IAEjH,oCAAoC;IACpC,MAAM,OAAO,GAAG,MAAM,gCAAiB,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;IAChE,MAAM,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;IACzD,OAAO,MAAM,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;AAChD,CAAC;AAZD,oDAYC;AAED;;;;;;;;;GASG;AACI,KAAK,UAAU,GAAG,CAAC,iBAAyB,EAAE,MAAmB,EAAE,SAAkB,EAC1F,UAA6B;IAC7B,IAAI,CAAC,SAAS,EAAE;QACd,SAAS,GAAG,6BAA6B,CAAC;KAC3C;IAED,MAAM,MAAM,GAAW,MAAM,oBAAoB,CAAC,iBAAiB,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;IAC5F,MAAM,MAAM,CAAC,UAAU,EAAE,CAAC;IAC1B,IAAI,MAA0B,CAAC;IAC/B,IAAI;QACF,MAAM,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;KACnC;IAAC,OAAO,KAAc,EAAE;QACvB,MAAM,MAAM,CAAC,YAAY,EAAE,CAAC;QAC5B,MAAM,KAAK,CAAC;KACb;IACD,MAAM,MAAM,CAAC,YAAY,EAAE,CAAC;IAC5B,OAAO,MAAM,CAAC;AAChB,CAAC;AAjBD,kBAiBC","sourcesContent":["import type { IActionInit, IActorOutputInit } from '@comunica/bus-init';\nimport { ComponentsManager } from 'componentsjs';\nimport type {\n  IComponentsManagerBuilderOptions,\n  IConstructionStrategy,\n  ComponentRegistry,\n  ConfigRegistry,\n  IModuleState,\n  LogLevel,\n} from 'componentsjs';\nimport type { Runner } from './Runner';\n\n/**\n * Helper functions to setup instances from a given comunica config file.\n * This config file must be understandable by the Components.js framework.\n *\n * @link https://www.npmjs.com/package/lsd-components\n */\n\n/**\n * Instantiate the given component.\n *\n * @param {string} configResourceUrl    The URL or local path to a Components.js config file.\n * @param {string} instanceUri          A URI identifying the component to instantiate.\n * @param {ISetupProperties} properties Properties to pass to the Components.js manager.\n * @return {Promise<any>}               A promise that resolves to the instance.\n */\nexport async function instantiateComponent(configResourceUrl: string, instanceUri: string,\n  properties?: ISetupProperties): Promise<any> {\n  // Handle optional arguments\n  if (!properties) {\n    properties = {};\n  }\n  const propertiesActual: IComponentsManagerBuilderOptions<any> = { mainModulePath: process.cwd(), ...properties };\n\n  // Instantiate the given config file\n  const manager = await ComponentsManager.build(propertiesActual);\n  await manager.configRegistry.register(configResourceUrl);\n  return await manager.instantiate(instanceUri);\n}\n\n/**\n * Run the given config file.\n * This will initialize the runner, and deinitialize it once it has finished\n *\n * @param {string} configResourceUrl    The URL or local path to a Components.js config file.\n * @param {any[]} action                The action to pass to the runner.\n * @param {string} runnerUri            An optional URI identifying the runner.\n * @param {ISetupProperties} properties Properties to pass to the Components.js loader.\n * @return {Promise<any>}               A promise that resolves when the runner has been initialized.\n */\nexport async function run(configResourceUrl: string, action: IActionInit, runnerUri?: string,\n  properties?: ISetupProperties): Promise<any> {\n  if (!runnerUri) {\n    runnerUri = 'urn:comunica:default:Runner';\n  }\n\n  const runner: Runner = await instantiateComponent(configResourceUrl, runnerUri, properties);\n  await runner.initialize();\n  let output: IActorOutputInit[];\n  try {\n    output = await runner.run(action);\n  } catch (error: unknown) {\n    await runner.deinitialize();\n    throw error;\n  }\n  await runner.deinitialize();\n  return output;\n}\n\n/**\n * A copy of {@link IComponentsManagerBuilderOptions}, with all fields optional.\n */\nexport interface ISetupProperties {\n  /**\n   * Absolute path to the package root from which module resolution should start.\n   */\n  mainModulePath?: string;\n\n  /**\n   * Callback for registering components and modules.\n   * Defaults to an invocation of {@link ComponentRegistry.registerAvailableModules}.\n   * @param registry A registry that accept component and module registrations.\n   */\n  moduleLoader?: (registry: ComponentRegistry) => Promise<void>;\n  /**\n   * Callback for registering configurations.\n   * Defaults to no config registrations.\n   * @param registry A registry that accepts configuration registrations.\n   */\n  configLoader?: (registry: ConfigRegistry) => Promise<void>;\n  /**\n   * A strategy for constructing instances.\n   * Defaults to {@link ConstructionStrategyCommonJs}.\n   */\n  constructionStrategy?: IConstructionStrategy<any>;\n  /**\n   * If the error state should be dumped into `componentsjs-error-state.json`\n   * after failed instantiations.\n   * Defaults to `false`.\n   */\n  dumpErrorState?: boolean;\n  /**\n   * The logging level.\n   * Defaults to `'warn'`.\n   */\n  logLevel?: LogLevel;\n  /**\n   * The module state.\n   * Defaults to a newly created instances on the {@link mainModulePath}.\n   */\n  moduleState?: IModuleState;\n}\n"]}