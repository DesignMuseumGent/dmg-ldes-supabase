{"version":3,"file":"ActorQueryOperationExtend.js","sourceRoot":"","sources":["ActorQueryOperationExtend.ts"],"names":[],"mappings":";;;AAAA,iEAA8D;AAE9D,uEAEuC;AAIvC,uCAA6D;AAE7D;;;;GAIG;AACH,MAAa,yBAA0B,SAAQ,sDAAgD;IAC7F,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,SAAyB,EAAE,OAAuB;QAC3E,+CAA+C;QAC/C,MAAM,CAAC,GAAG,OAAO,CAAC,IAAI,yBAAc,CAAC,SAAS,CAAC,UAAU,EACvD,yCAAmB,CAAC,yBAAyB,CAAC,OAAO,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;QACxF,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAyB,EAAE,OAAuB;QAE1E,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,SAAS,CAAC;QAElD,MAAM,MAAM,GAAkC,yCAAmB,CAAC,eAAe,CAC/E,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CACzE,CAAC;QAEF,MAAM,MAAM,GAAG,EAAE,GAAG,yCAAmB,CAAC,yBAAyB,CAAC,OAAO,EAAE,IAAI,CAAC,sBAAsB,CAAC,EAAE,CAAC;QAC1G,MAAM,SAAS,GAAG,IAAI,yBAAc,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAEzD,6EAA6E;QAC7E,MAAM,SAAS,GAAG,KAAK,EAAC,QAAkB,EAAE,IAAS,EAAE,IAAsC,EAAiB,EAAE;YAC9G,IAAI;gBACF,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBAClD,4DAA4D;gBAC5D,4BAA4B;gBAC5B,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;gBAChD,IAAI,CAAC,QAAQ,CAAC,CAAC;aAChB;YAAC,OAAO,KAAc,EAAE;gBACvB,IAAI,IAAA,4BAAiB,EAAS,KAAK,CAAC,EAAE;oBACpC,8DAA8D;oBAC9D,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACf,wBAAwB;oBACxB,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,wDAAwD,IAAA,mCAAgB,EAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;iBAC9G;qBAAM;oBACL,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;iBACrC;aACF;YACD,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;QAEF,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,SAAS,CAAW,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;QAClG,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,cAAc;YACd,KAAK,CAAC,QAAQ;gBACZ,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,QAAQ,EAAE,CAAC;gBAC/C,OAAO,EAAE,GAAG,cAAc,EAAE,SAAS,EAAE,CAAE,GAAG,cAAc,CAAC,SAAS,EAAE,QAAQ,CAAE,EAAC,CAAC;YACpF,CAAC;SACF,CAAC;IACJ,CAAC;CACF;AAtDD,8DAsDC","sourcesContent":["import { bindingsToString } from '@comunica/bindings-factory';\nimport type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation, ActorQueryOperationTypedMediated,\n} from '@comunica/bus-query-operation';\nimport type { IActorTest } from '@comunica/core';\nimport type { Bindings, IActionContext, IQueryOperationResult, IQueryOperationResultBindings } from '@comunica/types';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport { AsyncEvaluator, isExpressionError } from 'sparqlee';\n\n/**\n * A comunica Extend Query Operation Actor.\n *\n * See https://www.w3.org/TR/sparql11-query/#sparqlAlgebra;\n */\nexport class ActorQueryOperationExtend extends ActorQueryOperationTypedMediated<Algebra.Extend> {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'extend');\n  }\n\n  public async testOperation(operation: Algebra.Extend, context: IActionContext): Promise<IActorTest> {\n    // Will throw error for unsupported opperations\n    const _ = Boolean(new AsyncEvaluator(operation.expression,\n      ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation)));\n    return true;\n  }\n\n  public async runOperation(operation: Algebra.Extend, context: IActionContext):\n  Promise<IQueryOperationResult> {\n    const { expression, input, variable } = operation;\n\n    const output: IQueryOperationResultBindings = ActorQueryOperation.getSafeBindings(\n      await this.mediatorQueryOperation.mediate({ operation: input, context }),\n    );\n\n    const config = { ...ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation) };\n    const evaluator = new AsyncEvaluator(expression, config);\n\n    // Transform the stream by extending each Bindings with the expression result\n    const transform = async(bindings: Bindings, next: any, push: (pusbBindings: Bindings) => void): Promise<void> => {\n      try {\n        const result = await evaluator.evaluate(bindings);\n        // Extend operation is undefined when the key already exists\n        // We just override it here.\n        const extended = bindings.set(variable, result);\n        push(extended);\n      } catch (error: unknown) {\n        if (isExpressionError(<Error> error)) {\n          // Errors silently don't actually extend according to the spec\n          push(bindings);\n          // But let's warn anyway\n          this.logWarn(context, `Expression error for extend operation with bindings '${bindingsToString(bindings)}'`);\n        } else {\n          bindingsStream.emit('error', error);\n        }\n      }\n      next();\n    };\n\n    const bindingsStream = output.bindingsStream.transform<Bindings>({ autoStart: false, transform });\n    return {\n      type: 'bindings',\n      bindingsStream,\n      async metadata() {\n        const outputMetadata = await output.metadata();\n        return { ...outputMetadata, variables: [ ...outputMetadata.variables, variable ]};\n      },\n    };\n  }\n}\n"]}