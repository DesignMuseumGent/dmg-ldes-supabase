{"version":3,"file":"ActorQueryOperationClear.js","sourceRoot":"","sources":["ActorQueryOperationClear.ts"],"names":[],"mappings":";;;AACA,uEAAsG;AAOtG,uDAA+C;AAG/C,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAE,CAAC;AAE7B;;;GAGG;AACH,MAAa,wBAAyB,SAAQ,sDAA+C;IAG3F,YAAmB,IAAmC;QACpD,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,SAAwB,EAAE,OAAuB;QAC1E,yCAAmB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAwB,EAAE,OAAuB;QAEzE,+BAA+B;QAC/B,IAAI,MAA4D,CAAC;QACjE,IAAI,SAAS,CAAC,MAAM,KAAK,SAAS,EAAE;YAClC,MAAM,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC;SAC5B;aAAM,IAAI,OAAO,SAAS,CAAC,MAAM,KAAK,QAAQ,EAAE;YAC/C,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;SAC3B;aAAM;YACL,MAAM,GAAG,CAAE,SAAS,CAAC,MAAM,CAAE,CAAC;SAC/B;QACD,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;YACzD,YAAY,EAAE;gBACZ,MAAM;gBACN,gBAAgB,EAAE,CAAC,SAAS,CAAC,MAAM;gBACnC,UAAU,EAAE,KAAK;aAClB;YACD,OAAO;SACR,CAAC,CAAC;QAEH,OAAO;YACL,IAAI,EAAE,MAAM;YACZ,OAAO;SACR,CAAC;IACJ,CAAC;CACF;AArCD,4DAqCC","sourcesContent":["import type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperation, ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport type {\n  MediatorRdfUpdateQuads,\n} from '@comunica/bus-rdf-update-quads';\nimport type { IActorTest } from '@comunica/core';\nimport type { IActionContext, IQueryOperationResult } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport type { Algebra } from 'sparqlalgebrajs';\n\nconst DF = new DataFactory();\n\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor\n * that handles SPARQL clear operations.\n */\nexport class ActorQueryOperationClear extends ActorQueryOperationTypedMediated<Algebra.Clear> {\n  public readonly mediatorUpdateQuads: MediatorRdfUpdateQuads;\n\n  public constructor(args: IActorQueryOperationClearArgs) {\n    super(args, 'clear');\n  }\n\n  public async testOperation(operation: Algebra.Clear, context: IActionContext): Promise<IActorTest> {\n    ActorQueryOperation.throwOnReadOnly(context);\n    return true;\n  }\n\n  public async runOperation(operation: Algebra.Clear, context: IActionContext):\n  Promise<IQueryOperationResult> {\n    // Delegate to update-quads bus\n    let graphs: RDF.DefaultGraph | 'NAMED' | 'ALL' | RDF.NamedNode[];\n    if (operation.source === 'DEFAULT') {\n      graphs = DF.defaultGraph();\n    } else if (typeof operation.source === 'string') {\n      graphs = operation.source;\n    } else {\n      graphs = [ operation.source ];\n    }\n    const { execute } = await this.mediatorUpdateQuads.mediate({\n      deleteGraphs: {\n        graphs,\n        requireExistence: !operation.silent,\n        dropGraphs: false,\n      },\n      context,\n    });\n\n    return {\n      type: 'void',\n      execute,\n    };\n  }\n}\n\nexport interface IActorQueryOperationClearArgs extends IActorQueryOperationTypedMediatedArgs {\n  /**\n   * The RDF Update Quads mediator\n   */\n  mediatorUpdateQuads: MediatorRdfUpdateQuads;\n}\n"]}