{"version":3,"file":"ActorQueryResultSerializeSparqlCsv.js","sourceRoot":"","sources":["ActorQueryResultSerializeSparqlCsv.ts"],"names":[],"mappings":";;;AAEA,qFAE8C;AAG9C,qDAA2C;AAE3C;;GAEG;AACH,MAAa,kCAAmC,SAAQ,qEAAwC;IAC9F;;;;;;;;OAQG;IACH,YAAmB,IAAmD;QACpE,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,oBAAoB,CAAC,KAAgB;QACjD,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,EAAE,CAAC;SACX;QAED,IAAI,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC;QAE9B,IAAI,KAAK,CAAC,QAAQ,KAAK,SAAS,EAAE;YAChC,uFAAuF;YACvF,WAAW,GAAG,GAAG,WAAW,EAAE,CAAC;SAChC;aAAM,IAAI,KAAK,CAAC,QAAQ,KAAK,WAAW,EAAE;YACzC,WAAW,GAAG,KAAK,WAAW,EAAE,CAAC;SAClC;aAAM;YACL,WAAW,GAAG,IAAI,WAAW,GAAG,CAAC;SAClC;QAED,uEAAuE;QACvE,IAAI,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YACjC,yEAAyE;YACzE,WAAW,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC;SACvD;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,MAA8B,EAAE,OAAuB;QACpF,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;SACjE;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAA8B,EAAE,SAA6B,EAAE,OAAuB;QAE3G,MAAM,cAAc,GAAmC,MAAM,CAAC;QAE9D,MAAM,IAAI,GAAG,IAAI,0BAAQ,EAAE,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE;YAChB,aAAa;QACf,CAAC,CAAC;QAEF,aAAa;QACb,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,QAAQ,EAAE,CAAC;QACjD,IAAI,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAEjF,iBAAiB;QACjB,cAAc,CAAC,cAAc,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAY,EAAE,EAAE;YACzD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QACH,cAAc,CAAC,cAAc,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,QAAkB,EAAE,EAAE;YAC9D,IAAI,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,SAAS;iBAC5B,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,kCAAkC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;iBACtF,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;QACH,cAAc,CAAC,cAAc,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;YAC3C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;QAEH,OAAO,EAAE,IAAI,EAAE,CAAC;IAClB,CAAC;CACF;AA/ED,gFA+EC","sourcesContent":["import type { IActionSparqlSerialize, IActorQueryResultSerializeFixedMediaTypesArgs,\n  IActorQueryResultSerializeOutput } from '@comunica/bus-query-result-serialize';\nimport {\n  ActorQueryResultSerializeFixedMediaTypes,\n} from '@comunica/bus-query-result-serialize';\nimport type { Bindings, IActionContext, IQueryOperationResultBindings } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { Readable } from 'readable-stream';\n\n/**\n * A comunica SPARQL CSV Query Result Serialize Actor.\n */\nexport class ActorQueryResultSerializeSparqlCsv extends ActorQueryResultSerializeFixedMediaTypes {\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"text/csv\": 0.75\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"text/csv\": \"http://www.w3.org/ns/formats/SPARQL_Results_CSV\"\n   *     }} mediaTypeFormats\n   */\n  public constructor(args: IActorQueryResultSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  /**\n   * Converts an RDF term to its CSV representation.\n   * @param {RDF.Term} value An RDF term.\n   * @return {string} A string representation of the given value.\n   */\n  public static bindingToCsvBindings(value?: RDF.Term): string {\n    if (!value) {\n      return '';\n    }\n\n    let stringValue = value.value;\n\n    if (value.termType === 'Literal') {\n      // This is a lossy representation, since language and datatype are not encoded in here.\n      stringValue = `${stringValue}`;\n    } else if (value.termType === 'BlankNode') {\n      stringValue = `_:${stringValue}`;\n    } else {\n      stringValue = `<${stringValue}>`;\n    }\n\n    // If a value contains certain characters, put it between double quotes\n    if (/[\",\\n\\r]/u.test(stringValue)) {\n      // Within quote strings, \" is written using a pair of quotation marks \"\".\n      stringValue = `\"${stringValue.replace(/\"/ug, '\"\"')}\"`;\n    }\n\n    return stringValue;\n  }\n\n  public async testHandleChecked(action: IActionSparqlSerialize, context: IActionContext): Promise<boolean> {\n    if (action.type !== 'bindings') {\n      throw new Error('This actor can only handle bindings streams.');\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, mediaType: string | undefined, context: IActionContext):\n  Promise<IActorQueryResultSerializeOutput> {\n    const bindingsAction = <IQueryOperationResultBindings> action;\n\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    // Write head\n    const metadata = await bindingsAction.metadata();\n    data.push(`${metadata.variables.map(variable => variable.value).join(',')}\\r\\n`);\n\n    // Write bindings\n    bindingsAction.bindingsStream.on('error', (error: Error) => {\n      data.emit('error', error);\n    });\n    bindingsAction.bindingsStream.on('data', (bindings: Bindings) => {\n      data.push(`${metadata.variables\n        .map(key => ActorQueryResultSerializeSparqlCsv.bindingToCsvBindings(bindings.get(key)))\n        .join(',')}\\r\\n`);\n    });\n    bindingsAction.bindingsStream.on('end', () => {\n      data.push(null);\n    });\n\n    return { data };\n  }\n}\n"]}