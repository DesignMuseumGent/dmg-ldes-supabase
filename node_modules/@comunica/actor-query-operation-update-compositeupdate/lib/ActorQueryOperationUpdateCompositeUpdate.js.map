{"version":3,"file":"ActorQueryOperationUpdateCompositeUpdate.js","sourceRoot":"","sources":["ActorQueryOperationUpdateCompositeUpdate.ts"],"names":[],"mappings":";;;AACA,uEAGuC;AAKvC;;GAEG;AACH,MAAa,wCACX,SAAQ,sDAAyD;IACjE,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,aAAa,CACxB,SAAkC,EAClC,OAAuB;QAEvB,yCAAmB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,iBAA0C,EAAE,OAAuB;QAE3F,MAAM,OAAO,GAAG,GAAkB,EAAE,CAAC,CAAC,KAAK,IAAkB,EAAE;YAC7D,wCAAwC;YACxC,KAAK,MAAM,SAAS,IAAI,iBAAiB,CAAC,OAAO,EAAE;gBACjD,MAAM,SAAS,GAAG,yCAAmB;qBAClC,WAAW,CAAC,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClF,MAAM,SAAS,CAAC,OAAO,EAAE,CAAC;aAC3B;QACH,CAAC,CAAC,EAAE,CAAC;QAEL,OAAO;YACL,IAAI,EAAE,MAAM;YACZ,OAAO;SACR,CAAC;IACJ,CAAC;CACF;AA9BD,4FA8BC","sourcesContent":["import type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n  ActorQueryOperationTypedMediated,\n} from '@comunica/bus-query-operation';\nimport type { IActorTest } from '@comunica/core';\nimport type { IActionContext, IQueryOperationResult } from '@comunica/types';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Update CompositeUpdate Query Operation Actor.\n */\nexport class ActorQueryOperationUpdateCompositeUpdate\n  extends ActorQueryOperationTypedMediated<Algebra.CompositeUpdate> {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'compositeupdate');\n  }\n\n  public async testOperation(\n    operation: Algebra.CompositeUpdate,\n    context: IActionContext,\n  ): Promise<IActorTest> {\n    ActorQueryOperation.throwOnReadOnly(context);\n    return true;\n  }\n\n  public async runOperation(operationOriginal: Algebra.CompositeUpdate, context: IActionContext):\n  Promise<IQueryOperationResult> {\n    const execute = (): Promise<void> => (async(): Promise<void> => {\n      // Execute update operations in sequence\n      for (const operation of operationOriginal.updates) {\n        const subResult = ActorQueryOperation\n          .getSafeVoid(await this.mediatorQueryOperation.mediate({ operation, context }));\n        await subResult.execute();\n      }\n    })();\n\n    return {\n      type: 'void',\n      execute,\n    };\n  }\n}\n"]}