{"version":3,"file":"BlankNodeScoped.js","sourceRoot":"","sources":["BlankNodeScoped.ts"],"names":[],"mappings":";;;AAEA;;GAEG;AACH,MAAa,eAAe;IAU1B,YAAmB,KAAa,EAAE,UAAyB;QAT3C,aAAQ,GAAgB,WAAW,CAAC;QAUlD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAEM,MAAM,CAAC,KAAkC;QAC9C,gDAAgD;QAChD,OAAO,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,KAAK,WAAW,IAAI,KAAK,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC;IACjF,CAAC;CACF;AAnBD,0CAmBC","sourcesContent":["import type * as RDF from '@rdfjs/types';\n\n/**\n * A blank node that is scoped to a certain source.\n */\nexport class BlankNodeScoped implements RDF.BlankNode {\n  public readonly termType: 'BlankNode' = 'BlankNode';\n  public readonly value: string;\n  /**\n   * This value can be obtained by consumers in query results,\n   * so that this can be passed into another query as an IRI,\n   * in order to obtain more results relating to this (blank) node.\n   */\n  public readonly skolemized: RDF.NamedNode;\n\n  public constructor(value: string, skolemized: RDF.NamedNode) {\n    this.value = value;\n    this.skolemized = skolemized;\n  }\n\n  public equals(other: RDF.Term | null | undefined): boolean {\n    // eslint-disable-next-line no-implicit-coercion\n    return !!other && other.termType === 'BlankNode' && other.value === this.value;\n  }\n}\n"]}