{"version":3,"file":"ActorRdfJoinNone.js","sourceRoot":"","sources":["ActorRdfJoinNone.ts"],"names":[],"mappings":";;;AAAA,iEAA6D;AAE7D,yDAAsD;AAEtD,iDAA8C;AAE9C,MAAM,EAAE,GAAG,IAAI,kCAAe,EAAE,CAAC;AAEjC;;GAEG;AACH,MAAa,gBAAiB,SAAQ,2BAAY;IAChD,YAAmB,IAAuB;QACxC,KAAK,CAAC,IAAI,EAAE;YACV,WAAW,EAAE,OAAO;YACpB,YAAY,EAAE,MAAM;YACpB,YAAY,EAAE,CAAC;SAChB,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAsB;QACtC,uCAAuC;QACvC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,6BAA6B,CAAC,CAAC;SAClE;QACD,OAAO,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC1C,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,MAAsB;QAC9C,OAAO;YACL,MAAM,EAAE;gBACN,cAAc,EAAE,IAAI,6BAAa,CAAC,CAAE,EAAE,CAAC,QAAQ,EAAE,CAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;gBAC1E,QAAQ,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;oBAC9B,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE;oBACxC,gBAAgB,EAAE,KAAK;oBACvB,SAAS,EAAE,EAAE;iBACd,CAAC;gBACF,IAAI,EAAE,UAAU;aACjB;SACF,CAAC;IACJ,CAAC;IAES,KAAK,CAAC,mBAAmB;QACjC,OAAO;YACL,UAAU,EAAE,CAAC;YACb,cAAc,EAAE,CAAC;YACjB,aAAa,EAAE,CAAC;YAChB,WAAW,EAAE,CAAC;SACf,CAAC;IACJ,CAAC;CACF;AAvCD,4CAuCC","sourcesContent":["import { BindingsFactory } from '@comunica/bindings-factory';\nimport type { IActionRdfJoin, IActorRdfJoinOutputInner, IActorRdfJoinArgs } from '@comunica/bus-rdf-join';\nimport { ActorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { IMediatorTypeJoinCoefficients } from '@comunica/mediatortype-join-coefficients';\nimport { ArrayIterator } from 'asynciterator';\n\nconst BF = new BindingsFactory();\n\n/**\n * A comunica None RDF Join Actor.\n */\nexport class ActorRdfJoinNone extends ActorRdfJoin {\n  public constructor(args: IActorRdfJoinArgs) {\n    super(args, {\n      logicalType: 'inner',\n      physicalName: 'none',\n      limitEntries: 0,\n    });\n  }\n\n  public async test(action: IActionRdfJoin): Promise<IMediatorTypeJoinCoefficients> {\n    // Allow joining of one or zero streams\n    if (action.entries.length > 0) {\n      throw new Error(`Actor ${this.name} can only join zero entries`);\n    }\n    return await this.getJoinCoefficients();\n  }\n\n  protected async getOutput(action: IActionRdfJoin): Promise<IActorRdfJoinOutputInner> {\n    return {\n      result: {\n        bindingsStream: new ArrayIterator([ BF.bindings() ], { autoStart: false }),\n        metadata: () => Promise.resolve({\n          cardinality: { type: 'exact', value: 1 },\n          canContainUndefs: false,\n          variables: [],\n        }),\n        type: 'bindings',\n      },\n    };\n  }\n\n  protected async getJoinCoefficients(): Promise<IMediatorTypeJoinCoefficients> {\n    return {\n      iterations: 0,\n      persistedItems: 0,\n      blockingItems: 0,\n      requestTime: 0,\n    };\n  }\n}\n"]}