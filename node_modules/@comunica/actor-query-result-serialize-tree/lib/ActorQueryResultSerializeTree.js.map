{"version":3,"file":"ActorQueryResultSerializeTree.js","sourceRoot":"","sources":["ActorQueryResultSerializeTree.ts"],"names":[],"mappings":";;;AAGA,qFAAgG;AAChG,+DAA0D;AAC1D,yCAA+C;AAG/C,qDAA2C;AAE3C,2DAA+C;AAE/C;;GAEG;AACH,MAAa,6BAA8B,SAAQ,qEAAwC;IAEzF;;;;OAIG;IACH,YAAmB,IAAmD;QACpE,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,uBAAuB,CAAC,cAA8B,EAClE,OAAyD,EACzD,iBAAsC;QACtC,MAAM,aAAa,GAAmB,oBAAa,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QACjF,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,aAAa,GAA+B,EAAE,CAAC;YACrD,MAAM,SAAS,GAAc,IAAI,8BAAS,CAAC,iBAAiB,CAAC,CAAC;YAE9D,MAAM,MAAM,GAAY;gBACtB,oBAAoB,EAAE,aAAa,CAAC,GAAG,CAAC,+BAAa,CAAC,2BAA2B,CAAC,IAAI,EAAE;aACzF,CAAC;YAEF,cAAc,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YACnC,cAAc,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,QAAsB,EAAE,EAAE;gBACnD,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAE,GAAG,QAAQ,CAAE;qBAClD,GAAG,CAAC,CAAC,CAAE,GAAG,EAAE,KAAK,CAAE,EAAE,EAAE,CAAC,CAAE,GAAG,CAAC,KAAK,EAAE,KAAK,CAAE,CAAC,CAAC,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;YACH,cAAc,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBAC5B,OAAO,CAAC,SAAS,CAAC,cAAc,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,CAAC;YAC3D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,MAA8B;QAC3D,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;SACjE;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAA8B,EAAE,SAAiB;QACtE,MAAM,IAAI,GAAG,IAAI,0BAAQ,EAAE,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE;YAChB,aAAa;QACf,CAAC,CAAC;QAEF,MAAM,YAAY,GAAoD,MAAO,CAAC,cAAc,CAAC;QAC7F,YAAY,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QAC7D,6BAA6B,CAAC,uBAAuB,CAAC,YAAY,EAAE,MAAM,CAAC,OAAO,EAAE,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAAC;aACjH,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC;aACD,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QAE7C,OAAO,EAAE,IAAI,EAAE,CAAC;IAClB,CAAC;CACF;AAjED,sEAiEC","sourcesContent":["import type { IActionSparqlSerialize,\n  IActorQueryResultSerializeFixedMediaTypesArgs,\n  IActorQueryResultSerializeOutput } from '@comunica/bus-query-result-serialize';\nimport { ActorQueryResultSerializeFixedMediaTypes } from '@comunica/bus-query-result-serialize';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport { ActionContext } from '@comunica/core';\nimport type { IQueryOperationResultBindings, BindingsStream, IActionContext } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { Readable } from 'readable-stream';\nimport type { IConverterSettings, ISchema } from 'sparqljson-to-tree';\nimport { Converter } from 'sparqljson-to-tree';\n\n/**\n * A comunica Tree Query Result Serialize Actor.\n */\nexport class ActorQueryResultSerializeTree extends ActorQueryResultSerializeFixedMediaTypes\n  implements IActorQueryResultSerializeFixedMediaTypesArgs {\n  /**\n   * @param args -\n   *   \\ @defaultNested {{ \"tree\": 0.5 }} mediaTypePriorities\n   *   \\ @defaultNested {{ \"tree\": \"https://comunica.linkeddatafragments.org/#results_tree\" }} mediaTypeFormats\n   */\n  public constructor(args: IActorQueryResultSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  /**\n   *\n   * @param {BindingsStream} bindingsStream\n   * @param context\n   * @param {IConverterSettings} converterSettings\n   * @return {Promise<string>}\n   */\n  public static bindingsStreamToGraphQl(bindingsStream: BindingsStream,\n    context: IActionContext | Record<string, any> | undefined,\n    converterSettings?: IConverterSettings): Promise<any> {\n    const actionContext: IActionContext = ActionContext.ensureActionContext(context);\n    return new Promise((resolve, reject) => {\n      const bindingsArray: Record<string, RDF.Term>[] = [];\n      const converter: Converter = new Converter(converterSettings);\n\n      const schema: ISchema = {\n        singularizeVariables: actionContext.get(KeysInitQuery.graphqlSingularizeVariables) || {},\n      };\n\n      bindingsStream.on('error', reject);\n      bindingsStream.on('data', (bindings: RDF.Bindings) => {\n        bindingsArray.push(Object.fromEntries([ ...bindings ]\n          .map(([ key, value ]) => [ key.value, value ])));\n      });\n      bindingsStream.on('end', () => {\n        resolve(converter.bindingsToTree(bindingsArray, schema));\n      });\n    });\n  }\n\n  public async testHandleChecked(action: IActionSparqlSerialize): Promise<boolean> {\n    if (action.type !== 'bindings') {\n      throw new Error('This actor can only handle bindings streams.');\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, mediaType: string): Promise<IActorQueryResultSerializeOutput> {\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    const resultStream: BindingsStream = (<IQueryOperationResultBindings> action).bindingsStream;\n    resultStream.on('error', error => data.emit('error', error));\n    ActorQueryResultSerializeTree.bindingsStreamToGraphQl(resultStream, action.context, { materializeRdfJsTerms: true })\n      .then((result: any) => {\n        data.push(JSON.stringify(result, null, '  '));\n        data.push(null);\n      })\n      .catch(error => data.emit('error', error));\n\n    return { data };\n  }\n}\n"]}