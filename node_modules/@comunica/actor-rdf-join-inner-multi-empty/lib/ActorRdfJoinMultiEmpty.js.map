{"version":3,"file":"ActorRdfJoinMultiEmpty.js","sourceRoot":"","sources":["ActorRdfJoinMultiEmpty.ts"],"names":[],"mappings":";;;AACA,yDAAsD;AAGtD,iDAA8C;AAE9C;;GAEG;AACH,MAAa,sBAAuB,SAAQ,2BAAY;IACtD,YAAmB,IAAuB;QACxC,KAAK,CAAC,IAAI,EAAE;YACV,WAAW,EAAE,OAAO;YACpB,YAAY,EAAE,aAAa;SAC5B,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAsB;QACtC,IAAI,CAAC,MAAM,2BAAY,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aAClD,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,2BAAY,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE;YACrE,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,oDAAoD,CAAC,CAAC;SACzF;QACD,OAAO,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,MAAsB;QAC9C,oBAAoB;QACpB,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,OAAO,EAAE;YAClC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;SACrC;QAED,OAAO;YACL,MAAM,EAAE;gBACN,cAAc,EAAE,IAAI,6BAAa,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;gBAC3D,QAAQ,EAAE,KAAK,IAAG,EAAE,CAAC,CAAC;oBACpB,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE;oBACxC,gBAAgB,EAAE,KAAK;oBACvB,SAAS,EAAE,2BAAY,CAAC,aAAa,CAAC,MAAM,2BAAY,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;iBACvF,CAAC;gBACF,IAAI,EAAE,UAAU;aACjB;SACF,CAAC;IACJ,CAAC;IAES,KAAK,CAAC,mBAAmB,CACjC,MAAsB,EACtB,SAA6B;QAE7B,OAAO;YACL,UAAU,EAAE,CAAC;YACb,cAAc,EAAE,CAAC;YACjB,aAAa,EAAE,CAAC;YAChB,WAAW,EAAE,CAAC;SACf,CAAC;IACJ,CAAC;CACF;AA9CD,wDA8CC","sourcesContent":["import type { IActionRdfJoin, IActorRdfJoinOutputInner, IActorRdfJoinArgs } from '@comunica/bus-rdf-join';\nimport { ActorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { IMediatorTypeJoinCoefficients } from '@comunica/mediatortype-join-coefficients';\nimport type { MetadataBindings } from '@comunica/types';\nimport { ArrayIterator } from 'asynciterator';\n\n/**\n * A comunica Multi Empty RDF Join Actor.\n */\nexport class ActorRdfJoinMultiEmpty extends ActorRdfJoin {\n  public constructor(args: IActorRdfJoinArgs) {\n    super(args, {\n      logicalType: 'inner',\n      physicalName: 'multi-empty',\n    });\n  }\n\n  public async test(action: IActionRdfJoin): Promise<IMediatorTypeJoinCoefficients> {\n    if ((await ActorRdfJoin.getMetadatas(action.entries))\n      .every(metadata => ActorRdfJoin.getCardinality(metadata).value > 0)) {\n      throw new Error(`Actor ${this.name} can only join entries where at least one is empty`);\n    }\n    return super.test(action);\n  }\n\n  protected async getOutput(action: IActionRdfJoin): Promise<IActorRdfJoinOutputInner> {\n    // Close all entries\n    for (const entry of action.entries) {\n      entry.output.bindingsStream.close();\n    }\n\n    return {\n      result: {\n        bindingsStream: new ArrayIterator([], { autoStart: false }),\n        metadata: async() => ({\n          cardinality: { type: 'exact', value: 0 },\n          canContainUndefs: false,\n          variables: ActorRdfJoin.joinVariables(await ActorRdfJoin.getMetadatas(action.entries)),\n        }),\n        type: 'bindings',\n      },\n    };\n  }\n\n  protected async getJoinCoefficients(\n    action: IActionRdfJoin,\n    metadatas: MetadataBindings[],\n  ): Promise<IMediatorTypeJoinCoefficients> {\n    return {\n      iterations: 0,\n      persistedItems: 0,\n      blockingItems: 0,\n      requestTime: 0,\n    };\n  }\n}\n"]}