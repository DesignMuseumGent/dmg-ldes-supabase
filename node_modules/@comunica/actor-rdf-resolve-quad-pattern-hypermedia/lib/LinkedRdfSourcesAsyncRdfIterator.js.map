{"version":3,"file":"LinkedRdfSourcesAsyncRdfIterator.js","sourceRoot":"","sources":["LinkedRdfSourcesAsyncRdfIterator.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILink } from '@comunica/bus-rdf-resolve-hypermedia-links';\nimport type { ILinkQueue } from '@comunica/bus-rdf-resolve-hypermedia-links-queue';\nimport type { IQuadSource } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport { BufferedIterator } from 'asynciterator';\nimport LRUCache = require('lru-cache');\n\nexport abstract class LinkedRdfSourcesAsyncRdfIterator extends BufferedIterator<RDF.Quad> implements RDF.Stream {\n  public sourcesState?: ISourcesState;\n\n  protected readonly subject: RDF.Term;\n  protected readonly predicate: RDF.Term;\n  protected readonly object: RDF.Term;\n  protected readonly graph: RDF.Term;\n  protected nextSource: ISourceState | undefined;\n\n  private readonly cacheSize: number;\n  protected readonly firstUrl: string;\n  private readonly maxIterators: number;\n\n  private started = false;\n  private readonly currentIterators: AsyncIterator<RDF.Quad>[];\n  private iteratorsPendingCreation: number;\n\n  public constructor(cacheSize: number, subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term,\n    firstUrl: string, maxIterators: number) {\n    super({ autoStart: true });\n    this.cacheSize = cacheSize;\n    this.subject = subject;\n    this.predicate = predicate;\n    this.object = object;\n    this.graph = graph;\n    this.firstUrl = firstUrl;\n    this.maxIterators = maxIterators;\n\n    if (this.maxIterators <= 0) {\n      throw new Error(`LinkedRdfSourcesAsyncRdfIterator.maxIterators must be larger than zero, but got ${this.maxIterators}`);\n    }\n\n    this.currentIterators = [];\n    this.iteratorsPendingCreation = 0;\n  }\n\n  protected _end(destroy?: boolean): void {\n    // Close all running iterators\n    for (const it of this.currentIterators) {\n      it.destroy();\n    }\n\n    super._end(destroy);\n  }\n\n  /**\n   * Get the internal link queue.\n   * The returned instance must always be the same.\n   */\n  public abstract getLinkQueue(): Promise<ILinkQueue>;\n\n  /**\n   * This method can optionally called after constructing an instance\n   * for allowing the sources state to be cached.\n   *\n   * When calling without args, then the default logic will be followed to determine the sources state.\n   * When calling with an arg, then the given sources state will be set instead of following the default logic.\n   *\n   * After calling this method, the `sourcesState` field can be retrieved and optionally cached.\n   *\n   * This sources state also contains a hash of all handled datasets that will be copied upon first use.\n   *\n   * @param {ISourcesState} sourcesState An optional sources state.\n   */\n  public setSourcesState(sourcesState?: ISourcesState): void {\n    if (sourcesState) {\n      this.sourcesState = sourcesState;\n    } else {\n      this.sourcesState = {\n        sources: new LRUCache<string, Promise<ISourceState>>({ max: this.cacheSize }),\n      };\n      // Ignore the response, we just want the promise to be cached\n      this.getSourceCached({ url: this.firstUrl }, {})\n        .catch(error => this.destroy(error));\n    }\n  }\n\n  /**\n   * Determine the links to be followed from the current source given its metadata.\n   * @param metadata The metadata of a source.\n   */\n  protected abstract getSourceLinks(metadata: Record<string, any>): Promise<ILink[]>;\n\n  /**\n   * Resolve a source for the given URL.\n   * @param link A source link.\n   * @param handledDatasets A hash of dataset identifiers that have already been handled.\n   */\n  protected abstract getSource(link: ILink, handledDatasets: Record<string, boolean>): Promise<ISourceState>;\n\n  /**\n   * Resolve a source for the given URL.\n   * This will first try to retrieve the source from cache.\n   * @param link A source ILink.\n   * @param handledDatasets A hash of dataset identifiers that have already been handled.\n   */\n  protected getSourceCached(link: ILink, handledDatasets: Record<string, boolean>): Promise<ISourceState> {\n    let source = this.sourcesState!.sources.get(link.url);\n    if (source) {\n      return source;\n    }\n    source = this.getSource(link, handledDatasets);\n    if (link.url === this.firstUrl || this.shouldStoreSourcesStates()) {\n      this.sourcesState!.sources.set(link.url, source);\n    }\n    return source;\n  }\n\n  protected shouldStoreSourcesStates(): boolean {\n    return true;\n  }\n\n  public _read(count: number, done: () => void): void {\n    if (!this.started) {\n      // The first time this is called, prepare the first source\n      this.started = true;\n\n      // Create a sources state if needed (can be defined if set from actor cache)\n      if (!this.sourcesState) {\n        this.setSourcesState();\n      }\n\n      // Await the source to be set, and start the source iterator\n      this.getSourceCached({ url: this.firstUrl }, {})\n        .then(sourceState => {\n          this.startIterator(sourceState, true);\n          done();\n        })\n        .catch(error => {\n          // We can safely ignore this error, since it handled in setSourcesState\n          done();\n        });\n    } else {\n      // Read from all current iterators\n      for (const iterator of this.currentIterators) {\n        while (count > 0) {\n          const read = iterator.read();\n          if (read !== null) {\n            count--;\n            this._push(read);\n          } else {\n            break;\n          }\n        }\n        if (count <= 0) {\n          break;\n        }\n      }\n\n      // Schedule new iterators if needed\n      if (count >= 0 && this.canStartNewIterator()) {\n        this.getSourceCached({ url: this.firstUrl }, {})\n          .then(sourceState => {\n            this.startIteratorsForNextUrls(sourceState.handledDatasets, false);\n            done();\n          })\n          .catch(error => this.destroy(error));\n      } else {\n        done();\n      }\n    }\n  }\n\n  protected canStartNewIterator(): boolean {\n    return (this.currentIterators.length + this.iteratorsPendingCreation) < this.maxIterators && !this.readable;\n  }\n\n  protected areIteratorsRunning(): boolean {\n    return (this.currentIterators.length + this.iteratorsPendingCreation) > 0;\n  }\n\n  /**\n   * Start a new iterator for the given source.\n   * Once the iterator is done, it will either determine a new source, or it will close the linked iterator.\n   * @param {ISourceState} startSource The start source state.\n   * @param {boolean} emitMetadata If the metadata event should be emitted.\n   */\n  protected startIterator(startSource: ISourceState, emitMetadata: boolean): void {\n    // Delegate the quad pattern query to the given source\n    const iterator = startSource.source!\n      .match(this.subject, this.predicate, this.object, this.graph);\n    this.currentIterators.push(iterator);\n    let receivedMetadata = false;\n\n    // Attach readers to the newly created iterator\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    (<any> iterator)._destination = this;\n    iterator.on('error', (error: Error) => this.destroy(error));\n    iterator.on('readable', () => this._fillBuffer());\n    iterator.on('end', () => {\n      this.currentIterators.splice(this.currentIterators.indexOf(iterator), 1);\n\n      // If the metadata was already received, handle the next URL in the queue\n      if (receivedMetadata) {\n        this.startIteratorsForNextUrls(startSource.handledDatasets, true);\n      }\n    });\n\n    // Listen for the metadata of the source\n    // The metadata property is guaranteed to be set\n    iterator.getProperty('metadata', (metadata: Record<string, any>) => {\n      startSource.metadata = { ...startSource.metadata, ...metadata };\n\n      // Emit metadata if needed\n      if (emitMetadata) {\n        this.setProperty('metadata', startSource.metadata);\n      }\n\n      // Determine next urls, which will eventually become a next-next source.\n      this.getSourceLinks(startSource.metadata)\n        .then((nextUrls: ILink[]) => Promise.all(nextUrls))\n        .then(async(nextUrls: ILink[]) => {\n          // Append all next URLs to our queue\n          const linkQueue = await this.getLinkQueue();\n          for (const nextUrl of nextUrls) {\n            linkQueue.push(nextUrl, startSource.link);\n          }\n\n          receivedMetadata = true;\n          this.startIteratorsForNextUrls(startSource.handledDatasets, true);\n        }).catch(error => this.destroy(error));\n    });\n  }\n\n  protected isRunning(): boolean {\n    return !this.done;\n  }\n\n  /**\n   * Check if a next URL is in the queue.\n   * If yes, start a new iterator.\n   * If no, close this iterator.\n   * @param handledDatasets\n   * @param canClose\n   */\n  protected startIteratorsForNextUrls(handledDatasets: Record<string, boolean>, canClose: boolean): void {\n    this.getLinkQueue()\n      .then(linkQueue => {\n        // Create as many new iterators as possible\n        while (this.canStartNewIterator() && this.isRunning()) {\n          const nextLink = linkQueue.pop();\n          if (nextLink) {\n            this.iteratorsPendingCreation++;\n            this.getSourceCached(nextLink, handledDatasets)\n              .then(nextSourceState => {\n                this.iteratorsPendingCreation--;\n                this.startIterator(nextSourceState, false);\n              })\n              .catch(error => this.destroy(error));\n          } else {\n            break;\n          }\n        }\n\n        // Close, only if no other iterators are still running\n        if (canClose && linkQueue.isEmpty() && !this.areIteratorsRunning()) {\n          this.close();\n        }\n      })\n      .catch(error => this.destroy(error));\n  }\n}\n\n/**\n * A reusable sources state,\n * containing a cache of all source states.\n */\nexport interface ISourcesState {\n  /**\n   * A cache for source URLs to source states.\n   */\n  sources: LRUCache<string, Promise<ISourceState>>;\n}\n\n/**\n * The current state of a source.\n * This is needed for following links within a source.\n */\nexport interface ISourceState {\n  /**\n   * The link to this source.\n   */\n  link: ILink;\n  /**\n   * A source.\n   */\n  source?: IQuadSource;\n  /**\n   * The source's initial metadata.\n   */\n  metadata: Record<string, any>;\n  /**\n   * All dataset identifiers that have been passed for this source.\n   */\n  handledDatasets: Record<string, boolean>;\n}\n"]}