{"version":3,"file":"ActorRdfResolveQuadPatternHypermedia.js","sourceRoot":"","sources":["ActorRdfResolveQuadPatternHypermedia.ts"],"names":[],"mappings":";;;AASA,yFAIgD;AAGhD,sCAAuC;AAEvC,6DAA0D;AAE1D;;GAEG;AACH,MAAa,oCAAqC,SAAQ,+DAAgC;IAcxF,YAAmB,IAA+C;QAChE,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAc,EAAE,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC7F,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,eAAe,CAAC,qBAAqB,CACxC,CAAC,EAAE,GAAG,EAAyB,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,CACzE,CAAC;SACH;IACH,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAoC;QACpD,MAAM,OAAO,GAAG,IAAA,qDAAsB,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACvD,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,iEAAiE,CAAC,CAAC;SACtG;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAES,SAAS,CAAC,OAAuB,EAAE,SAA0B;QACrE,MAAM,aAAa,GAAG,IAAA,+CAAgB,EAAC,OAAO,CAAE,CAAC;QACjD,MAAM,GAAG,GAAG,IAAA,kDAAmB,EAAC,aAAa,CAAE,CAAC;QAChD,IAAI,MAA0B,CAAC;QAE/B,yBAAyB;QACzB,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACrC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC;SAC/B;aAAM;YACL,uCAAuC;YACvC,MAAM,GAAG,IAAI,uCAAkB,CAC7B,IAAI,CAAC,SAAS,EACd,OAAO,EACP,GAAG,EACH,IAAA,gDAAiB,EAAC,aAAa,CAAC,EAChC,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,cAAc,EACnB;gBACE,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;gBACvC,uBAAuB,EAAE,IAAI,CAAC,uBAAuB;gBACrD,sBAAsB,EAAE,IAAI,CAAC,sBAAsB;gBACnD,4BAA4B,EAAE,IAAI,CAAC,4BAA4B;gBAC/D,iCAAiC,EAAE,IAAI,CAAC,iCAAiC;gBACzE,sCAAsC,EAAE,IAAI,CAAC,sCAAsC;aACpF,CACF,CAAC;YAEF,eAAe;YACf,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;aAC7B;SACF;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;CACF;AApED,oFAoEC","sourcesContent":["import type { MediatorDereferenceRdf } from '@comunica/bus-dereference-rdf';\nimport type { ActorHttpInvalidateListenable, IActionHttpInvalidate } from '@comunica/bus-http-invalidate';\nimport type { MediatorRdfMetadata } from '@comunica/bus-rdf-metadata';\nimport type { MediatorRdfMetadataExtract } from '@comunica/bus-rdf-metadata-extract';\nimport type { MediatorRdfResolveHypermedia } from '@comunica/bus-rdf-resolve-hypermedia';\nimport type { MediatorRdfResolveHypermediaLinks } from '@comunica/bus-rdf-resolve-hypermedia-links';\nimport type { MediatorRdfResolveHypermediaLinksQueue } from '@comunica/bus-rdf-resolve-hypermedia-links-queue';\nimport type { IActionRdfResolveQuadPattern,\n  IQuadSource, IActorRdfResolveQuadPatternArgs } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport {\n  ActorRdfResolveQuadPatternSource, getContextSource,\n  getContextSourceUrl,\n  getDataSourceType, hasContextSingleSource,\n} from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type { IActorTest } from '@comunica/core';\nimport type { IActionContext } from '@comunica/types';\nimport LRUCache = require('lru-cache');\nimport type { Algebra } from 'sparqlalgebrajs';\nimport { MediatedQuadSource } from './MediatedQuadSource';\n\n/**\n * A comunica Hypermedia RDF Resolve Quad Pattern Actor.\n */\nexport class ActorRdfResolveQuadPatternHypermedia extends ActorRdfResolveQuadPatternSource\n  implements IActorRdfResolveQuadPatternHypermediaArgs {\n  public readonly mediatorDereferenceRdf: MediatorDereferenceRdf;\n  public readonly mediatorMetadata: MediatorRdfMetadata;\n  public readonly mediatorMetadataExtract: MediatorRdfMetadataExtract;\n  public readonly mediatorRdfResolveHypermedia: MediatorRdfResolveHypermedia;\n  public readonly mediatorRdfResolveHypermediaLinks: MediatorRdfResolveHypermediaLinks;\n  public readonly mediatorRdfResolveHypermediaLinksQueue: MediatorRdfResolveHypermediaLinksQueue;\n  public readonly cacheSize: number;\n  public readonly cache?: LRUCache<string, MediatedQuadSource>;\n  public readonly httpInvalidator: ActorHttpInvalidateListenable;\n  public readonly maxIterators: number;\n  public readonly aggregateStore: boolean;\n\n  public constructor(args: IActorRdfResolveQuadPatternHypermediaArgs) {\n    super(args);\n    this.cache = this.cacheSize ? new LRUCache<string, any>({ max: this.cacheSize }) : undefined;\n    const cache = this.cache;\n    if (cache) {\n      this.httpInvalidator.addInvalidateListener(\n        ({ url }: IActionHttpInvalidate) => url ? cache.del(url) : cache.reset(),\n      );\n    }\n  }\n\n  public async test(action: IActionRdfResolveQuadPattern): Promise<IActorTest> {\n    const sources = hasContextSingleSource(action.context);\n    if (!sources) {\n      throw new Error(`Actor ${this.name} can only resolve quad pattern queries against a single source.`);\n    }\n    return true;\n  }\n\n  protected getSource(context: IActionContext, operation: Algebra.Pattern): Promise<IQuadSource> {\n    const contextSource = getContextSource(context)!;\n    const url = getContextSourceUrl(contextSource)!;\n    let source: MediatedQuadSource;\n\n    // Try to read from cache\n    if (this.cache && this.cache.has(url)) {\n      source = this.cache.get(url)!;\n    } else {\n      // If not in cache, create a new source\n      source = new MediatedQuadSource(\n        this.cacheSize,\n        context,\n        url,\n        getDataSourceType(contextSource),\n        this.maxIterators,\n        this.aggregateStore,\n        {\n          mediatorMetadata: this.mediatorMetadata,\n          mediatorMetadataExtract: this.mediatorMetadataExtract,\n          mediatorDereferenceRdf: this.mediatorDereferenceRdf,\n          mediatorRdfResolveHypermedia: this.mediatorRdfResolveHypermedia,\n          mediatorRdfResolveHypermediaLinks: this.mediatorRdfResolveHypermediaLinks,\n          mediatorRdfResolveHypermediaLinksQueue: this.mediatorRdfResolveHypermediaLinksQueue,\n        },\n      );\n\n      // Set in cache\n      if (this.cache) {\n        this.cache.set(url, source);\n      }\n    }\n\n    return Promise.resolve(source);\n  }\n}\n\nexport interface IActorRdfResolveQuadPatternHypermediaArgs extends IActorRdfResolveQuadPatternArgs {\n  /**\n   * The maximum number of entries in the LRU cache, set to 0 to disable.\n   * @range {integer}\n   * @default {100}\n   */\n  cacheSize: number;\n  /* eslint-disable max-len */\n  /**\n   * An actor that listens to HTTP invalidation events\n   * @default {<default_invalidator> a <npmd:@comunica/bus-http-invalidate/^2.0.0/components/ActorHttpInvalidateListenable.jsonld#ActorHttpInvalidateListenable>}\n   */\n  httpInvalidator: ActorHttpInvalidateListenable;\n  /* eslint-enable max-len */\n  /**\n   * The maximum number of links that can be followed in parallel.\n   * @default {64}\n   */\n  maxIterators: number;\n  /**\n   * If all discovered quads across all links from a seed source should be indexed in an aggregated store,\n   * to speed up later calls.\n   * This should only be used for sources without filter factor.\n   * @default {false}\n   */\n  aggregateStore: boolean;\n  /**\n   * The RDF dereference mediator\n   */\n  mediatorDereferenceRdf: MediatorDereferenceRdf;\n  /**\n   * The metadata mediator\n   */\n  mediatorMetadata: MediatorRdfMetadata;\n  /**\n   * The metadata extract mediator\n   */\n  mediatorMetadataExtract: MediatorRdfMetadataExtract;\n  /**\n   * The hypermedia resolve mediator\n   */\n  mediatorRdfResolveHypermedia: MediatorRdfResolveHypermedia;\n  /**\n   * The hypermedia links resolve mediator\n   */\n  mediatorRdfResolveHypermediaLinks: MediatorRdfResolveHypermediaLinks;\n  /**\n   * The hypermedia links queue resolve mediator\n   */\n  mediatorRdfResolveHypermediaLinksQueue: MediatorRdfResolveHypermediaLinksQueue;\n}\n"]}