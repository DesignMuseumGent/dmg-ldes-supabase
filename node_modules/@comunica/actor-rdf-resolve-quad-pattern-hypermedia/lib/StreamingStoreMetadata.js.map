{"version":3,"file":"StreamingStoreMetadata.js","sourceRoot":"","sources":["StreamingStoreMetadata.ts"],"names":[],"mappings":";;;AAAA,uEAA0E;AAI1E,6DAAqD;AAErD;;GAEG;AACH,MAAa,sBAAuB,SAAQ,oCAAc;IAA1D;;QACkB,qBAAgB,GAAiC,IAAI,GAAG,EAA2B,CAAC;IAkCtG,CAAC;IAhCQ,KAAK,CACV,OAAyB,EACzB,SAA2B,EAC3B,MAAwB,EACxB,KAAuB;QAEvB,0CAA0C;QAC1C,MAAM,QAAQ,GAAG,IAAI,+CAAyB,CACtC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE;YACpD,SAAS,EAAE,KAAK;YAChB,OAAO,EAAE,GAAG,EAAE;gBACZ,yDAAyD;gBACzD,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACzC,CAAC;SACF,CACF,CAAC;QAEF,0DAA0D;QAC1D,MAAM,QAAQ,GAAkB;YAC9B,WAAW,EAAE;gBACX,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,OAAQ,EAAE,SAAU,EAAE,MAAO,EAAE,KAAM,CAAC;aACzE;YACD,gBAAgB,EAAE,KAAK;SACxB,CAAC;QACF,QAAQ,CAAC,WAAW,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAE3C,gEAAgE;QAChE,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAEpC,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AAnCD,wDAmCC","sourcesContent":["import { ClosableTransformIterator } from '@comunica/bus-query-operation';\nimport type { MetadataQuads } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport { StreamingStore } from 'rdf-streaming-store';\n\n/**\n * A StreamingStore that returns an AsyncIterator with a valid MetadataQuads property.\n */\nexport class StreamingStoreMetadata extends StreamingStore {\n  public readonly runningIterators: Set<AsyncIterator<RDF.Quad>> = new Set<AsyncIterator<RDF.Quad>>();\n\n  public match(\n    subject?: RDF.Term | null,\n    predicate?: RDF.Term | null,\n    object?: RDF.Term | null,\n    graph?: RDF.Term | null,\n  ): AsyncIterator<RDF.Quad> {\n    // Wrap the raw stream in an AsyncIterator\n    const iterator = new ClosableTransformIterator<RDF.Quad, RDF.Quad>(\n      <any> super.match(subject, predicate, object, graph), {\n        autoStart: false,\n        onClose: () => {\n          // Running iterators are deleted once closed or destroyed\n          this.runningIterators.delete(iterator);\n        },\n      },\n    );\n\n    // Expose the metadata property containing the cardinality\n    const metadata: MetadataQuads = {\n      cardinality: {\n        type: 'exact',\n        value: this.getStore().countQuads(subject!, predicate!, object!, graph!),\n      },\n      canContainUndefs: false,\n    };\n    iterator.setProperty('metadata', metadata);\n\n    // Store all running iterators until they close or are destroyed\n    this.runningIterators.add(iterator);\n\n    return iterator;\n  }\n}\n"]}