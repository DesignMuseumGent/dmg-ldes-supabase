{"version":3,"file":"ActorQueryOperationPathSeq.js","sourceRoot":"","sources":["ActorQueryOperationPathSeq.ts"],"names":[],"mappings":";;;AAAA,uEAAkE;AAElE,uEAEuC;AAIvC,qDAA0C;AAE1C;;GAEG;AACH,MAAa,0BAA2B,SAAQ,uCAAiB;IAG/D,YAAmB,IAAiC;QAClD,KAAK,CAAC,IAAI,EAAE,yBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,YAAY,CACvB,iBAA+B,EAC/B,OAAuB;QAEvB,MAAM,SAAS,GAAiB,iBAAiB,CAAC,SAAS,CAAC;QAE5D,IAAI,MAAM,GAAa,iBAAiB,CAAC,OAAO,CAAC;QACjD,MAAM,sBAAsB,GAAmB,EAAE,CAAC;QAClD,MAAM,OAAO,GAAiB,MAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK;aAC5D,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC,EAAE,EAAE;YACvB,MAAM,UAAU,GAAG,CAAC,KAAK,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAgB,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;YAClJ,MAAM,SAAS,GAAG,uCAAiB,CAAC,OAAO;iBACxC,UAAU,CAAC,MAAM,EAAE,YAAY,EAAE,UAAU,EAAE,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACzE,MAAM,MAAM,GAAG,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;gBACjD,OAAO;gBACP,SAAS;aACV,CAAC,CAAC;YAEH,MAAM,GAAG,UAAU,CAAC;YACpB,IAAI,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBAClC,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aACzC;YAED,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;QAC/B,CAAC,CAAC;aACD,GAAG,CAAC,KAAK,EAAC,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;YACpC,MAAM,EAAE,yCAAmB,CAAC,eAAe,CAAC,MAAM,MAAM,CAAC;YACzD,SAAS;SACV,CAAC,CAAC,CAAC,CAAC;QAEP,MAAM,IAAI,GAAG,yCAAmB,CAAC,eAAe,CAAC,MAAM,IAAI,CAAC,YAAY;aACrE,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;QACjD,kDAAkD;QAClD,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAW;YAC7D,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI;gBACxB,KAAK,MAAM,qBAAqB,IAAI,sBAAsB,EAAE;oBAC1D,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;iBAC3C;gBACD,IAAI,CAAC,IAAI,CAAC,CAAC;gBACX,IAAI,EAAE,CAAC;YACT,CAAC;SACF,CAAC,CAAC;QAEH,2DAA2D;QAC3D,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,cAAc;YACd,KAAK,CAAC,QAAQ;gBACZ,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC3C,MAAM,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,sBAAsB;qBAChF,IAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC,qBAAqB,CAAC,KAAK,KAAK,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBAClF,OAAO,EAAE,GAAG,YAAY,EAAE,SAAS,EAAE,CAAC;YACxC,CAAC;SACF,CAAC;IACJ,CAAC;CACF;AA9DD,gEA8DC","sourcesContent":["import { ActorAbstractPath } from '@comunica/actor-abstract-path';\nimport type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n} from '@comunica/bus-query-operation';\nimport type { MediatorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { Bindings, IActionContext, IQueryOperationResult, IJoinEntry } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Path Seq Query Operation Actor.\n */\nexport class ActorQueryOperationPathSeq extends ActorAbstractPath {\n  public readonly mediatorJoin: MediatorRdfJoin;\n\n  public constructor(args: IActorQueryOperationPathSeq) {\n    super(args, Algebra.types.SEQ);\n  }\n\n  public async runOperation(\n    operationOriginal: Algebra.Path,\n    context: IActionContext,\n  ): Promise<IQueryOperationResult> {\n    const predicate = <Algebra.Seq> operationOriginal.predicate;\n\n    let joiner: RDF.Term = operationOriginal.subject;\n    const generatedVariableNames: RDF.Variable[] = [];\n    const entries: IJoinEntry[] = await Promise.all(predicate.input\n      .map((subPredicate, i) => {\n        const nextJoiner = i === predicate.input.length - 1 ? <RDF.Variable> operationOriginal.object : this.generateVariable(operationOriginal, `b${i}`);\n        const operation = ActorAbstractPath.FACTORY\n          .createPath(joiner, subPredicate, nextJoiner, operationOriginal.graph);\n        const output = this.mediatorQueryOperation.mediate({\n          context,\n          operation,\n        });\n\n        joiner = nextJoiner;\n        if (i < predicate.input.length - 1) {\n          generatedVariableNames.push(nextJoiner);\n        }\n\n        return { output, operation };\n      })\n      .map(async({ output, operation }) => ({\n        output: ActorQueryOperation.getSafeBindings(await output),\n        operation,\n      })));\n\n    const join = ActorQueryOperation.getSafeBindings(await this.mediatorJoin\n      .mediate({ type: 'inner', entries, context }));\n    // Remove the generated variable from the bindings\n    const bindingsStream = join.bindingsStream.transform<Bindings>({\n      transform(item, next, push) {\n        for (const generatedVariableName of generatedVariableNames) {\n          item = item.delete(generatedVariableName);\n        }\n        push(item);\n        next();\n      },\n    });\n\n    // Remove the generated variable from the list of variables\n    return {\n      type: 'bindings',\n      bindingsStream,\n      async metadata() {\n        const joinMetadata = await join.metadata();\n        const variables = joinMetadata.variables.filter(variable => !generatedVariableNames\n          .some(generatedVariableName => generatedVariableName.value === variable.value));\n        return { ...joinMetadata, variables };\n      },\n    };\n  }\n}\n\nexport interface IActorQueryOperationPathSeq extends IActorQueryOperationTypedMediatedArgs {\n  /**\n   * A mediator for joining Bindings streams\n   */\n  mediatorJoin: MediatorRdfJoin;\n}\n"]}