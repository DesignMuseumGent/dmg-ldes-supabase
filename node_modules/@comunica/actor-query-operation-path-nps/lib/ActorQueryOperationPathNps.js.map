{"version":3,"file":"ActorQueryOperationPathNps.js","sourceRoot":"","sources":["ActorQueryOperationPathNps.ts"],"names":[],"mappings":";;;AAAA,uEAAkE;AAElE,uEAEuC;AAEvC,qDAA0C;AAE1C;;GAEG;AACH,MAAa,0BAA2B,SAAQ,uCAAiB;IAC/D,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,yBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAuB,EAAE,OAAuB;QACxE,MAAM,SAAS,GAAiB,SAAS,CAAC,SAAS,CAAC;QACpD,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;QAE/C,MAAM,OAAO,GAAG,uCAAiB,CAAC,OAAO;aACtC,aAAa,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;QAC9E,MAAM,MAAM,GAAG,yCAAmB,CAAC,eAAe,CAChD,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAC3E,CAAC;QAEF,qDAAqD;QACrD,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,SAAS,CAAW;YAC/D,MAAM,CAAC,QAAQ;gBACb,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtE,CAAC;YACD,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI;gBACxB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBACzB,IAAI,EAAE,CAAC;YACT,CAAC;SACF,CAAC,CAAC;QAEH,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,cAAc;YACd,QAAQ,EAAE,MAAM,CAAC,QAAQ;SAC1B,CAAC;IACJ,CAAC;CACF;AAhCD,gEAgCC","sourcesContent":["import { ActorAbstractPath } from '@comunica/actor-abstract-path';\nimport type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n} from '@comunica/bus-query-operation';\nimport type { Bindings, IActionContext, IQueryOperationResult } from '@comunica/types';\nimport { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Path Nps Query Operation Actor.\n */\nexport class ActorQueryOperationPathNps extends ActorAbstractPath {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, Algebra.types.NPS);\n  }\n\n  public async runOperation(operation: Algebra.Path, context: IActionContext): Promise<IQueryOperationResult> {\n    const predicate = <Algebra.Nps> operation.predicate;\n    const blank = this.generateVariable(operation);\n\n    const pattern = ActorAbstractPath.FACTORY\n      .createPattern(operation.subject, blank, operation.object, operation.graph);\n    const output = ActorQueryOperation.getSafeBindings(\n      await this.mediatorQueryOperation.mediate({ operation: pattern, context }),\n    );\n\n    // Remove the generated blank nodes from the bindings\n    const bindingsStream = output.bindingsStream.transform<Bindings>({\n      filter(bindings) {\n        return !predicate.iris.some(iri => iri.equals(bindings.get(blank)));\n      },\n      transform(item, next, push) {\n        push(item.delete(blank));\n        next();\n      },\n    });\n\n    return {\n      type: 'bindings',\n      bindingsStream,\n      metadata: output.metadata,\n    };\n  }\n}\n"]}