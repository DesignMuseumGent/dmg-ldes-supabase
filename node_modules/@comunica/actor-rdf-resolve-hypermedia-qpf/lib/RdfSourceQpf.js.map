{"version":3,"file":"RdfSourceQpf.js","sourceRoot":"","sources":["RdfSourceQpf.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ISearchForm } from '@comunica/actor-rdf-metadata-extract-hydra-controls';\nimport type { MediatorDereferenceRdf } from '@comunica/bus-dereference-rdf';\nimport type { IActorRdfMetadataOutput, MediatorRdfMetadata } from '@comunica/bus-rdf-metadata';\nimport type { MediatorRdfMetadataExtract } from '@comunica/bus-rdf-metadata-extract';\nimport type { IQuadSource } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type { IActionContext } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport { ArrayIterator, TransformIterator, wrap } from 'asynciterator';\nimport { DataFactory } from 'rdf-data-factory';\nimport { termToString } from 'rdf-string';\nimport { mapTerms, matchPattern } from 'rdf-terms';\n\nconst DF = new DataFactory();\n\n/**\n * An RDF source that executes a quad pattern over a QPF interface and fetches its first page.\n */\nexport class RdfSourceQpf implements IQuadSource {\n  public readonly searchForm: ISearchForm;\n\n  private readonly mediatorMetadata: MediatorRdfMetadata;\n\n  private readonly mediatorMetadataExtract: MediatorRdfMetadataExtract;\n\n  private readonly mediatorDereferenceRdf: MediatorDereferenceRdf;\n\n  private readonly subjectUri: string;\n  private readonly predicateUri: string;\n  private readonly objectUri: string;\n  private readonly graphUri?: string;\n  private readonly defaultGraph?: RDF.NamedNode;\n  private readonly context: IActionContext;\n  private readonly cachedQuads: Record<string, AsyncIterator<RDF.Quad>>;\n\n  public constructor(mediatorMetadata: MediatorRdfMetadata,\n    mediatorMetadataExtract: MediatorRdfMetadataExtract,\n    mediatorDereferenceRdf: MediatorDereferenceRdf,\n    subjectUri: string, predicateUri: string, objectUri: string, graphUri: string | undefined,\n    metadata: Record<string, any>, context: IActionContext, initialQuads?: RDF.Stream) {\n    this.mediatorMetadata = mediatorMetadata;\n    this.mediatorMetadataExtract = mediatorMetadataExtract;\n    this.mediatorDereferenceRdf = mediatorDereferenceRdf;\n    this.subjectUri = subjectUri;\n    this.predicateUri = predicateUri;\n    this.objectUri = objectUri;\n    this.graphUri = graphUri;\n    this.context = context;\n    this.cachedQuads = {};\n    const searchForm = this.getSearchForm(metadata);\n    if (!searchForm) {\n      throw new Error('Illegal state: found no TPF/QPF search form anymore in metadata.');\n    }\n    this.searchForm = searchForm;\n    this.defaultGraph = metadata.defaultGraph ? DF.namedNode(metadata.defaultGraph) : undefined;\n    if (initialQuads) {\n      let wrappedQuads: AsyncIterator<RDF.Quad> = wrap<RDF.Quad>(initialQuads);\n      if (this.defaultGraph) {\n        wrappedQuads = this.reverseMapQuadsToDefaultGraph(wrappedQuads);\n      }\n      wrappedQuads.setProperty('metadata', metadata);\n      this.cacheQuads(wrappedQuads, DF.variable(''), DF.variable(''), DF.variable(''), DF.variable(''));\n    }\n  }\n\n  /**\n   * Get a first QPF search form.\n   * @param {{[p: string]: any}} metadata A metadata object.\n   * @return {ISearchForm} A search form, or null if none could be found.\n   */\n  public getSearchForm(metadata: Record<string, any>): ISearchForm | undefined {\n    if (!metadata.searchForms || !metadata.searchForms.values) {\n      return;\n    }\n\n    // Find a quad pattern or triple pattern search form\n    const { searchForms } = metadata;\n    for (const searchForm of searchForms.values) {\n      if (this.graphUri &&\n        this.subjectUri in searchForm.mappings &&\n        this.predicateUri in searchForm.mappings &&\n        this.objectUri in searchForm.mappings &&\n        this.graphUri in searchForm.mappings &&\n        Object.keys(searchForm.mappings).length === 4) {\n        return searchForm;\n      }\n      if (this.subjectUri in searchForm.mappings &&\n        this.predicateUri in searchForm.mappings &&\n        this.objectUri in searchForm.mappings &&\n        Object.keys(searchForm.mappings).length === 3) {\n        return searchForm;\n      }\n    }\n  }\n\n  /**\n   * Create a QPF fragment IRI for the given quad pattern.\n   * @param {ISearchForm} searchForm A search form.\n   * @param {Term} subject A term.\n   * @param {Term} predicate A term.\n   * @param {Term} object A term.\n   * @param {Term} graph A term.\n   * @return {string} A URI.\n   */\n  public createFragmentUri(searchForm: ISearchForm,\n    subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term): string {\n    const entries: Record<string, string> = {};\n    const input = [\n      { uri: this.subjectUri, term: subject },\n      { uri: this.predicateUri, term: predicate },\n      { uri: this.objectUri, term: object },\n      { uri: this.graphUri, term: graph },\n    ];\n    for (const entry of input) {\n      if (entry.uri && entry.term.termType !== 'Variable') {\n        entries[entry.uri] = termToString(entry.term);\n      }\n    }\n    return searchForm.getUri(entries);\n  }\n\n  public match(subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term): AsyncIterator<RDF.Quad> {\n    // If we are querying the default graph,\n    // and the source has an overridden value for the default graph (such as QPF can provide),\n    // we override the graph parameter with that value.\n    let modifiedGraph = false;\n    if (graph.termType === 'DefaultGraph') {\n      if (this.defaultGraph) {\n        modifiedGraph = true;\n        graph = this.defaultGraph;\n      } else if (Object.keys(this.searchForm.mappings).length === 4 && !this.defaultGraph) {\n        // If the sd:defaultGraph is not declared on a QPF endpoint,\n        // then the default graph must be empty.\n        const quads = new ArrayIterator([], { autoStart: false });\n        quads.setProperty('metadata', {\n          requestTime: 0,\n          cardinality: { type: 'exact', value: 0 },\n          first: null,\n          next: null,\n          last: null,\n          canContainUndefs: false,\n        });\n        return quads;\n      }\n    }\n\n    // Try to emit from cache\n    const cached = this.getCachedQuads(subject, predicate, object, graph);\n    if (cached) {\n      return cached;\n    }\n\n    const quads = new TransformIterator(async() => {\n      let url: string = this.createFragmentUri(this.searchForm, subject, predicate, object, graph);\n      const dereferenceRdfOutput = await this.mediatorDereferenceRdf.mediate({ context: this.context, url });\n      url = dereferenceRdfOutput.url;\n\n      // Determine the metadata and emit it\n      const rdfMetadataOuput: IActorRdfMetadataOutput = await this.mediatorMetadata.mediate(\n        { context: this.context,\n          url,\n          quads: dereferenceRdfOutput.data,\n          triples: dereferenceRdfOutput.metadata?.triples },\n      );\n      const metadataExtractPromise = this.mediatorMetadataExtract\n        .mediate({\n          context: this.context,\n          url,\n          metadata: rdfMetadataOuput.metadata,\n          requestTime: dereferenceRdfOutput.requestTime,\n        })\n        .then(({ metadata }) => quads\n          .setProperty('metadata', { ...metadata, canContainUndefs: false }));\n\n      // The server is free to send any data in its response (such as metadata),\n      // including quads that do not match the given matter.\n      // Therefore, we have to filter away all non-matching quads here.\n      const actualDefaultGraph = DF.defaultGraph();\n      let filteredOutput: AsyncIterator<RDF.Quad> = wrap<RDF.Quad>(rdfMetadataOuput.data)\n        .transform({\n          filter(quad: RDF.Quad) {\n            if (matchPattern(quad, subject, predicate, object, graph)) {\n              return true;\n            }\n            // Special case: if we are querying in the default graph, and we had an overridden default graph,\n            // also accept that incoming triples may be defined in the actual default graph\n            return modifiedGraph && matchPattern(quad, subject, predicate, object, actualDefaultGraph);\n          },\n        });\n      if (modifiedGraph || graph.termType === 'Variable') {\n        // Reverse-map the overridden default graph back to the actual default graph\n        filteredOutput = this.reverseMapQuadsToDefaultGraph(filteredOutput);\n      }\n\n      // Swallow error events, as they will be emitted in the metadata stream as well,\n      // and therefore thrown async next.\n      filteredOutput.on('error', () => {\n        // Do nothing\n      });\n      // Ensures metadata event is emitted before end-event\n      await metadataExtractPromise;\n\n      return filteredOutput;\n    }, { autoStart: false });\n\n    this.cacheQuads(quads, subject, predicate, object, graph);\n    return this.getCachedQuads(subject, predicate, object, graph)!;\n  }\n\n  protected reverseMapQuadsToDefaultGraph(quads: AsyncIterator<RDF.Quad>): AsyncIterator<RDF.Quad> {\n    const actualDefaultGraph = DF.defaultGraph();\n    return quads.map(\n      quad => mapTerms(quad,\n        (term, key) => key === 'graph' && term.equals(this.defaultGraph) ? actualDefaultGraph : term),\n    );\n  }\n\n  protected getPatternId(subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term): string {\n    /* eslint-disable id-length */\n    return JSON.stringify({\n      s: subject.termType === 'Variable' ? '' : _termToString(subject),\n      p: predicate.termType === 'Variable' ? '' : _termToString(predicate),\n      o: object.termType === 'Variable' ? '' : _termToString(object),\n      g: graph.termType === 'Variable' ? '' : _termToString(graph),\n    });\n    /* eslint-enable id-length */\n  }\n\n  protected cacheQuads(quads: AsyncIterator<RDF.Quad>,\n    subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term): void {\n    const patternId = this.getPatternId(subject, predicate, object, graph);\n    this.cachedQuads[patternId] = quads.clone();\n  }\n\n  protected getCachedQuads(subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term):\n  AsyncIterator<RDF.Quad> | undefined {\n    const patternId = this.getPatternId(subject, predicate, object, graph);\n    const quads = this.cachedQuads[patternId];\n    if (quads) {\n      return quads.clone();\n    }\n  }\n}\n\nfunction _termToString(term: RDF.Term): string {\n  return term.termType === 'DefaultGraph' ?\n    // Any character that cannot be present in a URL will do\n    '|' :\n    termToString(term);\n}\n"]}