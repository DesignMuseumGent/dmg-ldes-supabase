{"version":3,"file":"ActorQueryOperationJoin.js","sourceRoot":"","sources":["ActorQueryOperationJoin.ts"],"names":[],"mappings":";;;AACA,uEAGuC;AAMvC;;GAEG;AACH,MAAa,uBAAwB,SAAQ,sDAA8C;IAGzF,YAAmB,IAAkC;QACnD,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,SAAuB,EAAE,OAAuB;QACzE,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CACvB,iBAA+B,EAC/B,OAAuB;QAEvB,MAAM,OAAO,GAAiB,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,KAAK;aACrE,GAAG,CAAC,KAAK,EAAC,YAAY,EAAC,EAAE,CAAC,CAAC;YAC1B,MAAM,EAAE,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,CAAC;YACvF,SAAS,EAAE,YAAY;SACxB,CAAC,CAAC,CAAC,CAAC;aACJ,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;YAC/B,MAAM,EAAE,yCAAmB,CAAC,eAAe,CAAC,MAAM,CAAC;YACnD,SAAS;SACV,CAAC,CAAC,CAAC;QAEN,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;IACxE,CAAC;CACF;AA3BD,0DA2BC","sourcesContent":["import type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n  ActorQueryOperationTypedMediated,\n} from '@comunica/bus-query-operation';\nimport type { MediatorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { IActorTest } from '@comunica/core';\nimport type { IQueryOperationResult, IActionContext, IJoinEntry } from '@comunica/types';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Join Query Operation Actor.\n */\nexport class ActorQueryOperationJoin extends ActorQueryOperationTypedMediated<Algebra.Join> {\n  public readonly mediatorJoin: MediatorRdfJoin;\n\n  public constructor(args: IActorQueryOperationJoinArgs) {\n    super(args, 'join');\n  }\n\n  public async testOperation(operation: Algebra.Join, context: IActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(\n    operationOriginal: Algebra.Join,\n    context: IActionContext,\n  ): Promise<IQueryOperationResult> {\n    const entries: IJoinEntry[] = (await Promise.all(operationOriginal.input\n      .map(async subOperation => ({\n        output: await this.mediatorQueryOperation.mediate({ operation: subOperation, context }),\n        operation: subOperation,\n      }))))\n      .map(({ output, operation }) => ({\n        output: ActorQueryOperation.getSafeBindings(output),\n        operation,\n      }));\n\n    return this.mediatorJoin.mediate({ type: 'inner', entries, context });\n  }\n}\n\nexport interface IActorQueryOperationJoinArgs extends IActorQueryOperationTypedMediatedArgs {\n  /**\n   * A mediator for joining Bindings streams\n   */\n  mediatorJoin: MediatorRdfJoin;\n}\n"]}