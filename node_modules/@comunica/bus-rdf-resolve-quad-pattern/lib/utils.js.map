{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { KeysRdfResolveQuadPattern } from '@comunica/context-entries';\nimport type { IActionContext, DataSources, IDataSource } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\n\n/**\n * Check if the given data source is a string or RDF store.\n * @param dataSource A data source.\n */\nexport function isDataSourceRawType(dataSource: IDataSource): dataSource is string | RDF.Source {\n  return typeof dataSource === 'string' || 'match' in dataSource;\n}\n\n/**\n * Get the data source type.\n * @param dataSource A data source.\n */\nexport function getDataSourceType(dataSource: IDataSource): string | undefined {\n  if (typeof dataSource === 'string') {\n    return '';\n  }\n  return 'match' in dataSource ? 'rdfjsSource' : dataSource.type;\n}\n\n/**\n * Get the data source value.\n * @param dataSource A data source.\n */\nexport function getDataSourceValue(dataSource: IDataSource): string | RDF.Source {\n  return isDataSourceRawType(dataSource) ? dataSource : dataSource.value;\n}\n\n/**\n * Get the data source from the given context.\n * @param {ActionContext} context An optional context.\n * @param {IDataSource} dataSource The source or undefined.\n */\nexport function getDataSourceContext(dataSource: IDataSource, context: IActionContext): IActionContext {\n  if (typeof dataSource === 'string' || 'match' in dataSource || !dataSource.context) {\n    return context;\n  }\n  return context.merge(dataSource.context);\n}\n\n/**\n * Get the sources from the given context.\n * @param {ActionContext} context An optional context.\n * @return {IDataSource[]} The array of sources or undefined.\n */\nexport function getContextSources(context: IActionContext): DataSources | undefined {\n  return context.get(KeysRdfResolveQuadPattern.sources);\n}\n\n/**\n * Get the source from the given context.\n * @param {ActionContext} context An optional context.\n * @return {IDataSource} The source or undefined.\n */\nexport function getContextSource(context: IActionContext): IDataSource | undefined {\n  return context.get(KeysRdfResolveQuadPattern.source);\n}\n\n/**\n * Get the single source if the context contains just a single source.\n * This will check both the source and sources context entries.\n * @param {IActionContext} context A context, can be null.\n * @return {IDataSource} The single datasource or undefined.\n */\nexport function getContextSourceFirst(context: IActionContext): IDataSource | undefined {\n  if (context.has(KeysRdfResolveQuadPattern.source)) {\n    // If the single source is set\n    return context.get(KeysRdfResolveQuadPattern.source);\n  }\n\n  // If multiple sources are set\n  const datasources: DataSources | undefined = context.get(KeysRdfResolveQuadPattern.sources);\n  if (datasources?.length === 1) {\n    return datasources[0];\n  }\n}\n\n/**\n * Get the source's raw URL value from the given context.\n * @param {IDataSource} source A source.\n * @return {string} The URL or null.\n */\nexport function getContextSourceUrl(source?: IDataSource): string | undefined {\n  if (source) {\n    let fileUrl = getDataSourceValue(source);\n    if (typeof fileUrl === 'string') {\n      // Remove hashes from source\n      const hashPosition = fileUrl.indexOf('#');\n      if (hashPosition >= 0) {\n        fileUrl = fileUrl.slice(0, hashPosition);\n      }\n\n      return fileUrl;\n    }\n  }\n}\n\n/**\n * Check if the given context has a single source.\n * @param {ActionContext} context An optional context.\n * @return {boolean} If the given context has a single source of the given type.\n */\nexport function hasContextSingleSource(context: IActionContext): boolean {\n  const source = getContextSource(context);\n  return Boolean(source && (isDataSourceRawType(source) || source.value));\n}\n\n/**\n * Check if the given context has a single source of the given type.\n * @param {string} requiredType The required source type name.\n * @param {ActionContext} context An optional context.\n * @return {boolean} If the given context has a single source of the given type.\n */\nexport function hasContextSingleSourceOfType(requiredType: string, context: IActionContext): boolean {\n  const source = getContextSource(context);\n  return Boolean(source && getDataSourceType(source) === requiredType && getDataSourceValue(source));\n}\n"]}