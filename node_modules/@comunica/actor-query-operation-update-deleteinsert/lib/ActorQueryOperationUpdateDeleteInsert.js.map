{"version":3,"file":"ActorQueryOperationUpdateDeleteInsert.js","sourceRoot":"","sources":["ActorQueryOperationUpdateDeleteInsert.ts"],"names":[],"mappings":";;;AAAA,+FAAoF;AACpF,iEAA6D;AAE7D,uEAEuC;AAMvC,iDAA8C;AAG9C,MAAM,EAAE,GAAG,IAAI,kCAAe,EAAE,CAAC;AACjC;;GAEG;AACH,MAAa,qCAAsC,SAAQ,sDAAsD;IAK/G,YAAmB,IAAgD;QACjE,KAAK,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QAHpB,qBAAgB,GAAG,CAAC,CAAC;IAI/B,CAAC;IAEM,KAAK,CAAC,aAAa,CACxB,SAA+B,EAC/B,OAAuB;QAEvB,yCAAmB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAA+B,EAAE,OAAuB;QAEhF,4BAA4B;QAC5B,MAAM,aAAa,GAAmB,SAAS,CAAC,KAAK,CAAC,CAAC;YACrD,yCAAmB,CAAC,eAAe,CAAC,MAAM,IAAI,CAAC,sBAAsB;iBAClE,OAAO,CAAC,EAAE,SAAS,EAAE,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;YACrE,IAAI,6BAAa,CAAC,CAAE,EAAE,CAAC,QAAQ,EAAE,CAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QAE7D,2DAA2D;QAC3D,IAAI,gBAAqD,CAAC;QAC1D,IAAI,gBAAqD,CAAC;QAC1D,IAAI,SAAS,CAAC,MAAM,EAAE;YACpB,yFAAyF;YACzF,gBAAgB,GAAG,IAAI,yDAAuB,CAC5C,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,yDAAuB,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAC5F,aAAa,CAAC,KAAK,EAAE,EACrB,KAAK,CACN,CAAC;YACF,IAAI,CAAC,gBAAgB,EAAE,CAAC;SACzB;QACD,IAAI,SAAS,CAAC,MAAM,EAAE;YACpB,yFAAyF;YACzF,gBAAgB,GAAG,IAAI,yDAAuB,CAC5C,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,yDAAuB,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAC5F,aAAa,CAAC,KAAK,EAAE,EACrB,KAAK,CACN,CAAC;YACF,IAAI,CAAC,gBAAgB,EAAE,CAAC;SACzB;QAED,sCAAsC;QACtC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;YACzD,gBAAgB;YAChB,gBAAgB;YAChB,OAAO;SACR,CAAC,CAAC;QAEH,OAAO;YACL,IAAI,EAAE,MAAM;YACZ,OAAO;SACR,CAAC;IACJ,CAAC;CACF;AA3DD,sFA2DC","sourcesContent":["import { BindingsToQuadsIterator } from '@comunica/actor-query-operation-construct';\nimport { BindingsFactory } from '@comunica/bindings-factory';\nimport type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation, ActorQueryOperationTypedMediated,\n} from '@comunica/bus-query-operation';\nimport type { MediatorRdfUpdateQuads } from '@comunica/bus-rdf-update-quads';\nimport type { IActorTest } from '@comunica/core';\nimport type { IQueryOperationResult, BindingsStream, IActionContext } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport { ArrayIterator } from 'asynciterator';\nimport type { Algebra } from 'sparqlalgebrajs';\n\nconst BF = new BindingsFactory();\n/**\n * A comunica Update DeleteInsert Query Operation Actor.\n */\nexport class ActorQueryOperationUpdateDeleteInsert extends ActorQueryOperationTypedMediated<Algebra.DeleteInsert> {\n  public readonly mediatorUpdateQuads: MediatorRdfUpdateQuads;\n\n  protected blankNodeCounter = 0;\n\n  public constructor(args: IActorQueryOperationUpdateDeleteInsertArgs) {\n    super(args, 'deleteinsert');\n  }\n\n  public async testOperation(\n    operation: Algebra.DeleteInsert,\n    context: IActionContext,\n  ): Promise<IActorTest> {\n    ActorQueryOperation.throwOnReadOnly(context);\n    return true;\n  }\n\n  public async runOperation(operation: Algebra.DeleteInsert, context: IActionContext):\n  Promise<IQueryOperationResult> {\n    // Evaluate the where clause\n    const whereBindings: BindingsStream = operation.where ?\n      ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation\n        .mediate({ operation: operation.where, context })).bindingsStream :\n      new ArrayIterator([ BF.bindings() ], { autoStart: false });\n\n    // Construct triples using the result based on the pattern.\n    let quadStreamInsert: AsyncIterator<RDF.Quad> | undefined;\n    let quadStreamDelete: AsyncIterator<RDF.Quad> | undefined;\n    if (operation.insert) {\n      // Localize blank nodes in pattern, to avoid clashes across different INSERT/DELETE calls\n      quadStreamInsert = new BindingsToQuadsIterator(\n        operation.insert.map(BindingsToQuadsIterator.localizeQuad.bind(null, this.blankNodeCounter)),\n        whereBindings.clone(),\n        false,\n      );\n      this.blankNodeCounter++;\n    }\n    if (operation.delete) {\n      // Localize blank nodes in pattern, to avoid clashes across different INSERT/DELETE calls\n      quadStreamDelete = new BindingsToQuadsIterator(\n        operation.delete.map(BindingsToQuadsIterator.localizeQuad.bind(null, this.blankNodeCounter)),\n        whereBindings.clone(),\n        false,\n      );\n      this.blankNodeCounter++;\n    }\n\n    // Evaluate the required modifications\n    const { execute } = await this.mediatorUpdateQuads.mediate({\n      quadStreamInsert,\n      quadStreamDelete,\n      context,\n    });\n\n    return {\n      type: 'void',\n      execute,\n    };\n  }\n}\n\nexport interface IActorQueryOperationUpdateDeleteInsertArgs extends IActorQueryOperationTypedMediatedArgs {\n  /**\n   * The RDF Update Quads mediator\n   */\n  mediatorUpdateQuads: MediatorRdfUpdateQuads;\n}\n"]}