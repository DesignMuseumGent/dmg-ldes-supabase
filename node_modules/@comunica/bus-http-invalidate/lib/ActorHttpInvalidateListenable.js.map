{"version":3,"file":"ActorHttpInvalidateListenable.js","sourceRoot":"","sources":["ActorHttpInvalidateListenable.ts"],"names":[],"mappings":";;;AAMA,+DAA4D;AAE5D;;;;GAIG;AACH,MAAa,6BAA8B,SAAQ,yCAAmB;IAGpE,YAAmB,IAA8B;QAC/C,KAAK,CAAC,IAAI,CAAC,CAAC;QAHG,wBAAmB,GAA0B,EAAE,CAAC;QAI/D,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;IAChC,CAAC;IAEM,qBAAqB,CAAC,QAA6B;QACxD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAA6B;QAC7C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA6B;QAC5C,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC/C,QAAQ,CAAC,MAAM,CAAC,CAAC;SAClB;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;CACF;AAtBD,sEAsBC","sourcesContent":["import type { IActorTest } from '@comunica/core';\nimport type {\n  IActionHttpInvalidate,\n  IActorHttpInvalidateOutput,\n  IActorHttpInvalidateArgs,\n} from './ActorHttpInvalidate';\nimport { ActorHttpInvalidate } from './ActorHttpInvalidate';\n\n/**\n * An ActorHttpInvalidate actor that allows listeners to be attached.\n *\n * @see ActorHttpInvalidate\n */\nexport class ActorHttpInvalidateListenable extends ActorHttpInvalidate {\n  private readonly invalidateListeners: IInvalidateListener[] = [];\n\n  public constructor(args: IActorHttpInvalidateArgs) {\n    super(args);\n    this.invalidateListeners = [];\n  }\n\n  public addInvalidateListener(listener: IInvalidateListener): void {\n    this.invalidateListeners.push(listener);\n  }\n\n  public async test(action: IActionHttpInvalidate): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionHttpInvalidate): Promise<IActorHttpInvalidateOutput> {\n    for (const listener of this.invalidateListeners) {\n      listener(action);\n    }\n    return {};\n  }\n}\n\n/**\n * Called when a {@link IActionHttpInvalidate} is received.\n */\nexport type IInvalidateListener = (action: IActionHttpInvalidate) => void;\n"]}