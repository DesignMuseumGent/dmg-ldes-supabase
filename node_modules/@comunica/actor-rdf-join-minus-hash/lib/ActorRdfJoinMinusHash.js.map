{"version":3,"file":"ActorRdfJoinMinusHash.js","sourceRoot":"","sources":["ActorRdfJoinMinusHash.ts"],"names":[],"mappings":";;;AAAA,uEAA0E;AAI1E,yDAEgC;AAKhC;;GAEG;AACH,MAAa,qBAAsB,SAAQ,2BAAY;IACrD,YAAmB,IAAuB;QACxC,KAAK,CAAC,IAAI,EAAE;YACV,WAAW,EAAE,OAAO;YACpB,YAAY,EAAE,MAAM;YACpB,YAAY,EAAE,CAAC;SAChB,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAAsB;QAC3C,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QACxC,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAExC,MAAM,SAAS,GAAG,MAAM,2BAAY,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAClE,MAAM,eAAe,GAAmB,2BAAY,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;QACrF,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;YAC9B;;;eAGG;YACH,MAAM,KAAK,GAA4B,EAAE,CAAC;YAC1C,MAAM,cAAc,GAAG,IAAI,+CAAyB,CAAC,KAAK,IAAG,EAAE;gBAC7D,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;oBAC1B,MAAM,CAAC,cAAc,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;wBACtC,KAAK,CAAC,2BAAY,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC,GAAG,IAAI,CAAC;oBACzD,CAAC,CAAC,CAAC;oBACH,MAAM,CAAC,cAAc,CAAC,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBAC3C,CAAC,CAAC,CAAC;gBACH,OAAO,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,2BAAY,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC;YAChG,CAAC,EAAE;gBACD,SAAS,EAAE,KAAK;gBAChB,OAAO;oBACL,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;oBAChC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;gBAClC,CAAC;aACF,CAAC,CAAC;YACH,OAAO;gBACL,MAAM,EAAE;oBACN,IAAI,EAAE,UAAU;oBAChB,cAAc;oBACd,QAAQ,EAAE,MAAM,CAAC,QAAQ;iBAC1B;aACF,CAAC;SACH;QACD,OAAO;YACL,MAAM,EAAE,MAAM;SACf,CAAC;IACJ,CAAC;IAES,KAAK,CAAC,mBAAmB,CACjC,MAAsB,EACtB,SAA6B;QAE7B,MAAM,mBAAmB,GAAG,2BAAY,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC;QAC3E,MAAM,gBAAgB,GAAG,2BAAY,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;QACrE,OAAO;YACL,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK;YAC3E,cAAc,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK;YAC9C,aAAa,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK;YAC7C,WAAW,EAAE,mBAAmB,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC;gBACxF,mBAAmB,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC;SAChF,CAAC;IACJ,CAAC;CACF;AA/DD,sDA+DC","sourcesContent":["import { ClosableTransformIterator } from '@comunica/bus-query-operation';\nimport type { IActionRdfJoin,\n  IActorRdfJoinOutputInner,\n  IActorRdfJoinArgs } from '@comunica/bus-rdf-join';\nimport {\n  ActorRdfJoin,\n} from '@comunica/bus-rdf-join';\nimport type { IMediatorTypeJoinCoefficients } from '@comunica/mediatortype-join-coefficients';\nimport type { MetadataBindings } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\n\n/**\n * A comunica Minus Hash RDF Join Actor.\n */\nexport class ActorRdfJoinMinusHash extends ActorRdfJoin {\n  public constructor(args: IActorRdfJoinArgs) {\n    super(args, {\n      logicalType: 'minus',\n      physicalName: 'hash',\n      limitEntries: 2,\n    });\n  }\n\n  public async getOutput(action: IActionRdfJoin): Promise<IActorRdfJoinOutputInner> {\n    const buffer = action.entries[1].output;\n    const output = action.entries[0].output;\n\n    const metadatas = await ActorRdfJoin.getMetadatas(action.entries);\n    const commonVariables: RDF.Variable[] = ActorRdfJoin.overlappingVariables(metadatas);\n    if (commonVariables.length > 0) {\n      /**\n       * To assure we've filtered all B (`buffer`) values from A (`output`) we wait until we've fetched all values of B.\n       * Then we save these triples in `index` and use it to filter our A-stream.\n       */\n      const index: Record<string, boolean> = {};\n      const bindingsStream = new ClosableTransformIterator(async() => {\n        await new Promise(resolve => {\n          buffer.bindingsStream.on('data', data => {\n            index[ActorRdfJoin.hash(data, commonVariables)] = true;\n          });\n          buffer.bindingsStream.on('end', resolve);\n        });\n        return output.bindingsStream.filter(data => !index[ActorRdfJoin.hash(data, commonVariables)]);\n      }, {\n        autoStart: false,\n        onClose() {\n          buffer.bindingsStream.destroy();\n          output.bindingsStream.destroy();\n        },\n      });\n      return {\n        result: {\n          type: 'bindings',\n          bindingsStream,\n          metadata: output.metadata,\n        },\n      };\n    }\n    return {\n      result: output,\n    };\n  }\n\n  protected async getJoinCoefficients(\n    action: IActionRdfJoin,\n    metadatas: MetadataBindings[],\n  ): Promise<IMediatorTypeJoinCoefficients> {\n    const requestInitialTimes = ActorRdfJoin.getRequestInitialTimes(metadatas);\n    const requestItemTimes = ActorRdfJoin.getRequestItemTimes(metadatas);\n    return {\n      iterations: metadatas[0].cardinality.value + metadatas[1].cardinality.value,\n      persistedItems: metadatas[0].cardinality.value,\n      blockingItems: metadatas[0].cardinality.value,\n      requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] +\n        requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1],\n    };\n  }\n}\n"]}