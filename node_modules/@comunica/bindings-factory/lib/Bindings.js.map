{"version":3,"file":"Bindings.js","sourceRoot":"","sources":["Bindings.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { Map } from 'immutable';\nimport { bindingsToString } from './bindingsToString';\n\n/**\n * An immutable.js-based Bindings object.\n */\nexport class Bindings implements RDF.Bindings {\n  public readonly type = 'bindings';\n\n  private readonly dataFactory: RDF.DataFactory;\n  private readonly entries: Map<string, RDF.Term>;\n\n  public constructor(dataFactory: RDF.DataFactory, entries: Map<string, RDF.Term>) {\n    this.dataFactory = dataFactory;\n    this.entries = entries;\n  }\n\n  public has(key: RDF.Variable | string): boolean {\n    return this.entries.has(typeof key === 'string' ? key : key.value);\n  }\n\n  public get(key: RDF.Variable | string): RDF.Term | undefined {\n    return this.entries.get(typeof key === 'string' ? key : key.value);\n  }\n\n  public set(key: RDF.Variable | string, value: RDF.Term): Bindings {\n    return new Bindings(this.dataFactory, this.entries.set(typeof key === 'string' ? key : key.value, value));\n  }\n\n  public delete(key: RDF.Variable | string): Bindings {\n    return new Bindings(this.dataFactory, this.entries.delete(typeof key === 'string' ? key : key.value));\n  }\n\n  public keys(): Iterable<RDF.Variable> {\n    return this.mapIterable<string, RDF.Variable>(\n      this.iteratorToIterable(this.entries.keys()),\n      key => this.dataFactory.variable!(key),\n    );\n  }\n\n  public values(): Iterable<RDF.Term> {\n    return this.iteratorToIterable(this.entries.values());\n  }\n\n  public forEach(fn: (value: RDF.Term, key: RDF.Variable) => any): void {\n    this.entries.forEach((value, key) => fn(value, this.dataFactory.variable!(key)));\n  }\n\n  public get size(): number {\n    return this.entries.size;\n  }\n\n  public [Symbol.iterator](): Iterator<[RDF.Variable, RDF.Term]> {\n    return this.mapIterable<[string, RDF.Term], [RDF.Variable, RDF.Term]>(\n      this.iteratorToIterable(<Iterator<[string, RDF.Term]>> this.entries.entries()),\n      ([ key, value ]) => [ this.dataFactory.variable!(key), value ],\n    )[Symbol.iterator]();\n  }\n\n  public equals(other: RDF.Bindings | null | undefined): boolean {\n    if (!other) {\n      return false;\n    }\n    if (this === other) {\n      return true;\n    }\n\n    // First check if size is equal\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    // Then check if keys and values are equal\n    for (const key of this.keys()) {\n      if (!this.get(key)?.equals(other.get(key))) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public filter(fn: (value: RDF.Term, key: RDF.Variable) => boolean): Bindings {\n    return new Bindings(this.dataFactory, Map(<any> this.entries\n      .filter((value, key) => fn(value, this.dataFactory.variable!(key)))));\n  }\n\n  public map(fn: (value: RDF.Term, key: RDF.Variable) => RDF.Term): Bindings {\n    return new Bindings(this.dataFactory, Map(<any> this.entries\n      .map((value, key) => fn(value, this.dataFactory.variable!(key)))));\n  }\n\n  public merge(other: Bindings): Bindings | undefined {\n    // Determine the union of keys\n    const keys = new Set([\n      ...this.iteratorToIterable(this.entries.keys()),\n      ...[ ...other.keys() ].map(key => key.value),\n    ]);\n\n    // Collect entries\n    const entries: [string, RDF.Term][] = [];\n    for (const key of keys) {\n      const left = this.entries.get(key)!;\n      const right = other.get(this.dataFactory.variable!(key));\n      if (left && right && !left.equals(right)) {\n        return;\n      }\n      const value = left || right;\n      entries.push([ key, value ]);\n    }\n\n    return new Bindings(this.dataFactory, Map(entries));\n  }\n\n  public mergeWith(\n    merger: (self: RDF.Term, other: RDF.Term, key: RDF.Variable) => RDF.Term,\n    other: Bindings,\n  ): Bindings {\n    // Determine the union of keys\n    const keys = new Set([\n      ...this.iteratorToIterable(this.entries.keys()),\n      ...[ ...other.keys() ].map(key => key.value),\n    ]);\n\n    // Collect entries\n    const entries: [string, RDF.Term][] = [];\n    for (const key of keys) {\n      const variable = this.dataFactory.variable!(key);\n      const left = this.entries.get(key)!;\n      const right = other.get(variable);\n      let value: RDF.Term;\n      if (left && right && !left.equals(right)) {\n        value = merger(left, right, variable);\n      } else {\n        value = left || right;\n      }\n      entries.push([ key, value ]);\n    }\n\n    return new Bindings(this.dataFactory, Map(entries));\n  }\n\n  public toString(): string {\n    return bindingsToString(this);\n  }\n\n  protected * mapIterable<T, U>(iterable: Iterable<T>, callback: (value: T) => U): Iterable<U> {\n    for (const x of iterable) {\n      // eslint-disable-next-line callback-return\n      yield callback(x);\n    }\n  }\n\n  protected iteratorToIterable<T>(iterator: Iterator<T>): Iterable<T> {\n    return {\n      [Symbol.iterator]: () => iterator,\n    };\n  }\n}\n"]}