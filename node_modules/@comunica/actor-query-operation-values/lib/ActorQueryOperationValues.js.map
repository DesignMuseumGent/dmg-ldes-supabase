{"version":3,"file":"ActorQueryOperationValues.js","sourceRoot":"","sources":["ActorQueryOperationValues.ts"],"names":[],"mappings":";;;AAAA,iEAA6D;AAE7D,uEAAyE;AAOzE,iDAA8C;AAC9C,uDAA+C;AAG/C,MAAM,EAAE,GAAG,IAAI,kCAAe,EAAE,CAAC;AACjC,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAE,CAAC;AAE7B;;GAEG;AACH,MAAa,yBAA0B,SAAQ,8CAAwC;IACrF,YAAmB,IAA0E;QAC3F,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,SAAyB,EAAE,OAAuB;QAC3E,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAyB,EAAE,OAAuB;QAE1E,MAAM,cAAc,GAAmB,IAAI,6BAAa,CAAW,SAAS,CAAC,QAAQ;aAClF,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;aACpC,GAAG,CAAC,CAAC,CAAE,GAAG,EAAE,KAAK,CAAE,EAAE,EAAE,CAAC,CAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACtE,MAAM,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;QACtC,MAAM,QAAQ,GAAG,GAA8B,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;YAChE,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE;YAChE,gBAAgB,EAAE,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,KAAK,EAAE,IAAI,QAAQ,CAAC,CAAC,CAAC;YACtH,SAAS;SACV,CAAC,CAAC;QACH,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,EAAE,CAAC;IACxD,CAAC;CACF;AAtBD,8DAsBC","sourcesContent":["import { BindingsFactory } from '@comunica/bindings-factory';\nimport type { IActionQueryOperation } from '@comunica/bus-query-operation';\nimport { ActorQueryOperationTyped } from '@comunica/bus-query-operation';\nimport type { IActorArgs, IActorTest } from '@comunica/core';\nimport type { IQueryOperationResult,\n  BindingsStream,\n  Bindings,\n  IActionContext,\n  MetadataBindings } from '@comunica/types';\nimport { ArrayIterator } from 'asynciterator';\nimport { DataFactory } from 'rdf-data-factory';\nimport type { Algebra } from 'sparqlalgebrajs';\n\nconst BF = new BindingsFactory();\nconst DF = new DataFactory();\n\n/**\n * A comunica Values Query Operation Actor.\n */\nexport class ActorQueryOperationValues extends ActorQueryOperationTyped<Algebra.Values> {\n  public constructor(args: IActorArgs<IActionQueryOperation, IActorTest, IQueryOperationResult>) {\n    super(args, 'values');\n  }\n\n  public async testOperation(operation: Algebra.Values, context: IActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(operation: Algebra.Values, context: IActionContext):\n  Promise<IQueryOperationResult> {\n    const bindingsStream: BindingsStream = new ArrayIterator<Bindings>(operation.bindings\n      .map(x => BF.bindings(Object.entries(x)\n        .map(([ key, value ]) => [ DF.variable(key.slice(1)), value ]))));\n    const variables = operation.variables;\n    const metadata = (): Promise<MetadataBindings> => Promise.resolve({\n      cardinality: { type: 'exact', value: operation.bindings.length },\n      canContainUndefs: operation.bindings.some(bindings => variables.some(variable => !(`?${variable.value}` in bindings))),\n      variables,\n    });\n    return { type: 'bindings', bindingsStream, metadata };\n  }\n}\n"]}