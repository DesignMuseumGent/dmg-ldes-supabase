{"version":3,"file":"ActorQueryOperationAddRewrite.js","sourceRoot":"","sources":["ActorQueryOperationAddRewrite.ts"],"names":[],"mappings":";;;AACA,uEAAsG;AAGtG,uDAA+C;AAE/C,qDAA0C;AAE1C,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAE,CAAC;AAE7B;;;GAGG;AACH,MAAa,6BAA8B,SAAQ,sDAA6C;IAG9F,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,IAAI,yBAAO,EAAE,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,SAAsB,EAAE,OAAuB;QACxE,yCAAmB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,YAAY,CAAC,iBAA8B,EAAE,OAAuB;QACzE,4EAA4E;QAC5E,MAAM,WAAW,GAAG,iBAAiB,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,WAAW,CAAC;QACpH,MAAM,MAAM,GAAG,iBAAiB,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC;QAErG,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,SAAS,EAAE;YAC3D,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC;SAC9F,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QAE7F,OAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;IACrE,CAAC;CACF;AAxBD,sEAwBC","sourcesContent":["import type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperation, ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport type { IActorTest } from '@comunica/core';\nimport type { IActionContext, IQueryOperationResult } from '@comunica/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport { Factory } from 'sparqlalgebrajs';\n\nconst DF = new DataFactory();\n\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor\n * that handles SPARQL add operations.\n */\nexport class ActorQueryOperationAddRewrite extends ActorQueryOperationTypedMediated<Algebra.Add> {\n  private readonly factory: Factory;\n\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'add');\n    this.factory = new Factory();\n  }\n\n  public async testOperation(operation: Algebra.Add, context: IActionContext): Promise<IActorTest> {\n    ActorQueryOperation.throwOnReadOnly(context);\n    return true;\n  }\n\n  public runOperation(operationOriginal: Algebra.Add, context: IActionContext): Promise<IQueryOperationResult> {\n    // CONSTRUCT all quads from the source, and INSERT them into the destination\n    const destination = operationOriginal.destination === 'DEFAULT' ? DF.defaultGraph() : operationOriginal.destination;\n    const source = operationOriginal.source === 'DEFAULT' ? DF.defaultGraph() : operationOriginal.source;\n\n    const operation = this.factory.createDeleteInsert(undefined, [\n      this.factory.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o'), destination),\n    ], this.factory.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o'), source));\n\n    return this.mediatorQueryOperation.mediate({ operation, context });\n  }\n}\n"]}