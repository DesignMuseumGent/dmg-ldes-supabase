{"version":3,"file":"ActorRdfResolveQuadPatternRdfJsSource.js","sourceRoot":"","sources":["ActorRdfResolveQuadPatternRdfJsSource.ts"],"names":[],"mappings":";;;AAEA,yFAEgD;AAGhD,uDAAoD;AAEpD;;GAEG;AACH,MAAa,qCAAsC,SAAQ,+DAAgC;IACzF,YAAmB,IAAqC;QACtD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAoC;QACpD,IAAI,CAAC,IAAA,2DAA4B,EAAC,aAAa,EAAE,MAAM,CAAC,OAAO,CAAC,EAAE;YAChE,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,6EAA6E,CAAC,CAAC;SAC5G;QACD,MAAM,MAAM,GAAG,IAAA,+CAAgB,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAChD,IAAI,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,CAAC,CAAC,CAAC,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAC1F,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,mCAAmC,CAAC,CAAC;SAClE;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,OAAuB;QAC/C,MAAM,MAAM,GAAc,IAAA,+CAAgB,EAAC,OAAO,CAAC,CAAC;QACpD,OAAO,IAAI,iCAAe,CAAC,OAAO,IAAI,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACxE,CAAC;CACF;AApBD,sFAoBC","sourcesContent":["import type { IActionRdfResolveQuadPattern,\n  IQuadSource, IActorRdfResolveQuadPatternArgs } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport {\n  ActorRdfResolveQuadPatternSource, getContextSource, hasContextSingleSourceOfType,\n} from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type { IActorTest } from '@comunica/core';\nimport type { IActionContext } from '@comunica/types';\nimport { RdfJsQuadSource } from './RdfJsQuadSource';\n\n/**\n * A comunica RDFJS Source RDF Resolve Quad Pattern Actor.\n */\nexport class ActorRdfResolveQuadPatternRdfJsSource extends ActorRdfResolveQuadPatternSource {\n  public constructor(args: IActorRdfResolveQuadPatternArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfResolveQuadPattern): Promise<IActorTest> {\n    if (!hasContextSingleSourceOfType('rdfjsSource', action.context)) {\n      throw new Error(`${this.name} requires a single source with an rdfjsSource to be present in the context.`);\n    }\n    const source = getContextSource(action.context);\n    if (!source || typeof source === 'string' || (!('match' in source) && !source.value.match)) {\n      throw new Error(`${this.name} received an invalid rdfjsSource.`);\n    }\n    return true;\n  }\n\n  protected async getSource(context: IActionContext): Promise<IQuadSource> {\n    const source: any = <any> getContextSource(context);\n    return new RdfJsQuadSource('match' in source ? source : source.value);\n  }\n}\n"]}