{"version":3,"file":"ActorHttpWayback.js","sourceRoot":"","sources":["ActorHttpWayback.ts"],"names":[],"mappings":";;;AACA,iDAA+C;AAC/C,+DAA2E;AAG3E,6CAAsC;AACtC,oDAAoD;AAEpD,MAAM,WAAW,GAAG,gCAAgC,CAAC;AAErD,SAAS,UAAU,CAAC,MAAgB;IAClC,MAAM,OAAO,GAAG,IAAI,qBAAO,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;IACvD,OAAO;QACL,KAAK,EAAE,IAAI,qBAAO,CAAC,IAAI,GAAG,CAAC,IAAI,OAAO,CAAC,GAAG,EAAE,EAAE,WAAW,CAAC,EAAE,OAAO,CAAC;KACrE,CAAC;AACJ,CAAC;AAED,SAAS,eAAe,CAAC,OAAuB;IAC9C,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAgB,+BAAa,CAAC,gBAAgB,CAAC,CAAC;IAC3E,IAAI,OAAO,EAAE;QACX,OAAO,CAAC,MAAgB,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;KACnE;IACD,OAAO,CAAC,MAAgB,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;AACnE,CAAC;AAED;;GAEG;AACH,MAAa,gBAAiB,SAAQ,oBAAS;IAG7C,YAAmB,IAA2B;QAC5C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAmB;QACnC,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAmB;QAClC,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAErD,IAAI,MAAM,CAAC,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,iCAAe,CAAC,kBAAkB,CAAC,EAAE;YACnF,IAAI,cAAc,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;gBACnD,GAAG,MAAM;gBACT,OAAO,EAAE,MAAM,CAAC,OAAO;qBACpB,GAAG,CAAC,iCAAe,CAAC,kBAAkB,EAAE,KAAK,CAAC;qBAC9C,GAAG,CAAgB,+BAAa,CAAC,gBAAgB,EAAE,EAAE,QAAQ,EAAE,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;aACrG,CAAC,CAAC;YAEH,mEAAmE;YACnE,IAAI,cAAc,CAAC,MAAM,KAAK,GAAG,EAAE;gBACjC,CAAE,MAAM,EAAE,cAAc,CAAE,GAAG,CAAE,cAAc,EAAE,MAAM,CAAE,CAAC;aACzD;YAED,kCAAkC;YAClC,MAAM,EAAE,IAAI,EAAE,GAAG,cAAc,CAAC;YAChC,IAAI,IAAI,EAAE;gBACR,IAAI,SAAS,IAAI,IAAI,IAAI,OAAa,IAAK,CAAC,OAAO,KAAK,UAAU,EAAE;oBAC5D,IAAK,CAAC,OAAO,EAAE,CAAC;iBACvB;qBAAM;oBACL,MAAM,eAAe,CAAC,oBAAS,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;iBACtE;aACF;SACF;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAxCD,4CAwCC","sourcesContent":["import type { IActionHttp, IActorHttpArgs, IActorHttpOutput, MediatorHttp } from '@comunica/bus-http';\nimport { ActorHttp } from '@comunica/bus-http';\nimport { KeysHttpWayback, KeysHttpProxy } from '@comunica/context-entries';\nimport type { IActorTest } from '@comunica/core';\nimport type { IActionContext, IProxyHandler, IRequest } from '@comunica/types';\nimport { Request } from 'cross-fetch';\nimport * as stringifyStream from 'stream-to-string';\n\nconst WAYBACK_URL = 'http://wayback.archive-it.org/';\n\nfunction addWayback(action: IRequest): IRequest {\n  const request = new Request(action.input, action.init);\n  return {\n    input: new Request(new URL(`/${request.url}`, WAYBACK_URL), request),\n  };\n}\n\nfunction getProxyHandler(context: IActionContext): (action: IRequest) => Promise<IRequest> {\n  const handler = context.get<IProxyHandler>(KeysHttpProxy.httpProxyHandler);\n  if (handler) {\n    return (action: IRequest) => handler.getProxy(addWayback(action));\n  }\n  return (action: IRequest) => Promise.resolve(addWayback(action));\n}\n\n/**\n * A Comunica actor to intercept HTTP requests to recover broken links using the WayBack Machine\n */\nexport class ActorHttpWayback extends ActorHttp {\n  public readonly mediatorHttp: MediatorHttp;\n\n  public constructor(args: IActorHttpWaybackArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionHttp): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionHttp): Promise<IActorHttpOutput> {\n    let result = await this.mediatorHttp.mediate(action);\n\n    if (result.status === 404 && action.context.get(KeysHttpWayback.recoverBrokenLinks)) {\n      let fallbackResult = await this.mediatorHttp.mediate({\n        ...action,\n        context: action.context\n          .set(KeysHttpWayback.recoverBrokenLinks, false)\n          .set<IProxyHandler>(KeysHttpProxy.httpProxyHandler, { getProxy: getProxyHandler(action.context) }),\n      });\n\n      // If the wayback machine returns a 200 status then use that result\n      if (fallbackResult.status === 200) {\n        [ result, fallbackResult ] = [ fallbackResult, result ];\n      }\n\n      // Consume stream to avoid process\n      const { body } = fallbackResult;\n      if (body) {\n        if ('destroy' in body && typeof (<any>body).destroy === 'function') {\n          (<any>body).destroy();\n        } else {\n          await stringifyStream(ActorHttp.toNodeReadable(fallbackResult.body));\n        }\n      }\n    }\n\n    return result;\n  }\n}\n\nexport interface IActorHttpWaybackArgs extends IActorHttpArgs {\n  mediatorHttp: MediatorHttp;\n}\n"]}