{"version":3,"file":"ActorQueryOperationLoad.js","sourceRoot":"","sources":["ActorQueryOperationLoad.ts"],"names":[],"mappings":";;;AACA,uEAAsG;AAEtG,+DAAqF;AAGrF,uDAA+C;AAE/C,qDAA0C;AAE1C,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAE,CAAC;AAE7B;;;GAGG;AACH,MAAa,uBAAwB,SAAQ,sDAA8C;IAMzF,YAAmB,IAAkC;QACnD,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,IAAI,yBAAO,EAAE,CAAC;QAC7B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CACpD,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAChF,CAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAE,CACrF,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,SAAuB,EAAE,OAAuB;QACzE,yCAAmB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAuB,EAAE,OAAuB;QAExE,6CAA6C;QAC7C,IAAI,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,2CAAyB,CAAC,OAAO,EAAE,CAAE,SAAS,CAAC,MAAM,CAAC,KAAK,CAAE,CAAC,CAAC;QAC5F,IAAI,SAAS,CAAC,MAAM,EAAE;YACpB,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,+BAAa,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;SAC1D;QACD,MAAM,MAAM,GAAG,uBAAuB,CAAC,YAAY,CAAC,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;YAC5F,SAAS,EAAE,IAAI,CAAC,kBAAkB;YAClC,OAAO,EAAE,UAAU;SACpB,CAAC,CAAC,CAAC;QAEJ,kCAAkC;QAClC,IAAI,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACnC,IAAI,SAAS,CAAC,WAAW,EAAE;YACzB,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;SAChH;QAED,qBAAqB;QACrB,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;YACzD,gBAAgB,EAAE,UAAU;YAC5B,OAAO;SACR,CAAC,CAAC;QAEH,OAAO;YACL,IAAI,EAAE,MAAM;YACZ,OAAO;SACR,CAAC;IACJ,CAAC;CACF;AAjDD,0DAiDC","sourcesContent":["import type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperation, ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport type { MediatorRdfUpdateQuads } from '@comunica/bus-rdf-update-quads';\nimport { KeysInitQuery, KeysRdfResolveQuadPattern } from '@comunica/context-entries';\nimport type { IActorTest } from '@comunica/core';\nimport type { IActionContext, IQueryOperationResult } from '@comunica/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport { Factory } from 'sparqlalgebrajs';\n\nconst DF = new DataFactory();\n\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor\n * that handles SPARQL load operations.\n */\nexport class ActorQueryOperationLoad extends ActorQueryOperationTypedMediated<Algebra.Load> {\n  public readonly mediatorUpdateQuads: MediatorRdfUpdateQuads;\n\n  private readonly factory: Factory;\n  private readonly constructOperation: Algebra.Construct;\n\n  public constructor(args: IActorQueryOperationLoadArgs) {\n    super(args, 'load');\n    this.factory = new Factory();\n    this.constructOperation = this.factory.createConstruct(\n      this.factory.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o')),\n      [ this.factory.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o')) ],\n    );\n  }\n\n  public async testOperation(operation: Algebra.Load, context: IActionContext): Promise<IActorTest> {\n    ActorQueryOperation.throwOnReadOnly(context);\n    return true;\n  }\n\n  public async runOperation(operation: Algebra.Load, context: IActionContext):\n  Promise<IQueryOperationResult> {\n    // Create CONSTRUCT query on the given source\n    let subContext = context.set(KeysRdfResolveQuadPattern.sources, [ operation.source.value ]);\n    if (operation.silent) {\n      subContext = subContext.set(KeysInitQuery.lenient, true);\n    }\n    const output = ActorQueryOperationLoad.getSafeQuads(await this.mediatorQueryOperation.mediate({\n      operation: this.constructOperation,\n      context: subContext,\n    }));\n\n    // Determine quad stream to insert\n    let quadStream = output.quadStream;\n    if (operation.destination) {\n      quadStream = quadStream.map(quad => DF.quad(quad.subject, quad.predicate, quad.object, operation.destination));\n    }\n\n    // Insert quad stream\n    const { execute } = await this.mediatorUpdateQuads.mediate({\n      quadStreamInsert: quadStream,\n      context,\n    });\n\n    return {\n      type: 'void',\n      execute,\n    };\n  }\n}\n\nexport interface IActorQueryOperationLoadArgs extends IActorQueryOperationTypedMediatedArgs {\n  /**\n   * The RDF Update Quads mediator\n   */\n  mediatorUpdateQuads: MediatorRdfUpdateQuads;\n}\n"]}