{"version":3,"file":"MediatorAll.js","sourceRoot":"","sources":["MediatorAll.ts"],"names":[],"mappings":";;;AACA,yCAA0C;AAE1C;;;GAGG;AACH,MAAa,WACX,SAAQ,eAAoB;IAC5B,YAAmB,IAA+B;QAChD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,MAAS;QAC5B,6CAA6C;QAC7C,MAAM,WAAW,GAAQ,EAAE,CAAC;QAC5B,IAAI,WAAsC,CAAC;QAC3C,IAAI;YACF,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SACpC;QAAC,MAAM;YACN,WAAW,GAAG,EAAE,CAAC;SAClB;QACD,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;YACpC,IAAI;gBACF,MAAM,UAAU,CAAC,KAAK,CAAC;gBACvB,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aACpC;YAAC,MAAM;gBACN,gBAAgB;aACjB;SACF;QAED,kCAAkC;QAClC,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAEzF,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC;IAES,KAAK,CAAC,WAAW;QACzB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;IACpE,CAAC;CACF;AAjCD,kCAiCC","sourcesContent":["import type { Actor, IAction, IActorOutput, IActorReply, IActorTest, IMediatorArgs } from '@comunica/core';\nimport { Mediator } from '@comunica/core';\n\n/**\n * A comunica mediator that runs all actors that resolve their test.\n * This mediator will always resolve to the first actor's output.\n */\nexport class MediatorAll<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest, O extends IActorOutput>\n  extends Mediator<A, I, T, O> {\n  public constructor(args: IMediatorArgs<A, I, T, O>) {\n    super(args);\n  }\n\n  public async mediate(action: I): Promise<O> {\n    // Collect all actors that resolve their test\n    const validActors: A[] = [];\n    let testResults: IActorReply<A, I, T, O>[];\n    try {\n      testResults = this.publish(action);\n    } catch {\n      testResults = [];\n    }\n    for (const testResult of testResults) {\n      try {\n        await testResult.reply;\n        validActors.push(testResult.actor);\n      } catch {\n        // Ignore errors\n      }\n    }\n\n    // Send action to all valid actors\n    const outputs = await Promise.all(validActors.map(actor => actor.runObservable(action)));\n\n    return outputs[0];\n  }\n\n  protected async mediateWith(): Promise<A> {\n    throw new Error('Unsupported operation: MediatorAll#mediateWith');\n  }\n}\n"]}