{"version":3,"file":"ActorQueryResultSerializeSimple.js","sourceRoot":"","sources":["ActorQueryResultSerializeSimple.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IActionSparqlSerialize,\n  IActorQueryResultSerializeFixedMediaTypesArgs,\n  IActorQueryResultSerializeOutput } from '@comunica/bus-query-result-serialize';\nimport { ActorQueryResultSerializeFixedMediaTypes } from '@comunica/bus-query-result-serialize';\nimport type { IActionContext, IQueryOperationResultBindings, IQueryOperationResultBoolean,\n  IQueryOperationResultQuads, IQueryOperationResultVoid } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { Readable } from 'readable-stream';\n\n/**\n * A comunica Simple Sparql Serialize Actor.\n */\nexport class ActorQueryResultSerializeSimple extends ActorQueryResultSerializeFixedMediaTypes {\n  /**\n   * @param args -\n   *   \\ @defaultNested {{ \"simple\": 0.9 }} mediaTypePriorities\n   *   \\ @defaultNested {{ \"simple\": \"https://comunica.linkeddatafragments.org/#results_simple\" }} mediaTypeFormats\n   */\n  public constructor(args: IActorQueryResultSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  public async testHandleChecked(action: IActionSparqlSerialize, context: IActionContext): Promise<boolean> {\n    if (![ 'bindings', 'quads', 'boolean', 'void' ].includes(action.type)) {\n      throw new Error('This actor can only handle bindings streams, quad streams, booleans, or updates.');\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, mediaType: string, context: IActionContext):\n  Promise<IActorQueryResultSerializeOutput> {\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    let resultStream: NodeJS.EventEmitter;\n    if (action.type === 'bindings') {\n      resultStream = (<IQueryOperationResultBindings> action).bindingsStream;\n      resultStream.on('error', error => data.emit('error', error));\n      resultStream.on('data', (bindings: RDF.Bindings) => data.push(`${[ ...bindings ].map(\n        ([ key, value ]) => `?${key.value}: ${value.value}`,\n      ).join('\\n')}\\n\\n`));\n      resultStream.on('end', () => data.push(null));\n    } else if (action.type === 'quads') {\n      resultStream = (<IQueryOperationResultQuads> action).quadStream;\n      resultStream.on('error', error => data.emit('error', error));\n      resultStream.on('data', quad => data.push(\n        `subject: ${quad.subject.value}\\n` +\n        `predicate: ${quad.predicate.value}\\n` +\n        `object: ${quad.object.value}\\n` +\n        `graph: ${quad.graph.value}\\n\\n`,\n      ));\n      resultStream.on('end', () => data.push(null));\n    } else if (action.type === 'boolean') {\n      try {\n        data.push(`${JSON.stringify(await (<IQueryOperationResultBoolean> action).execute())}\\n`);\n        data.push(null);\n      } catch (error: unknown) {\n        setTimeout(() => data.emit('error', error));\n      }\n    } else {\n      (<IQueryOperationResultVoid> action).execute()\n        .then(() => {\n          data.push('ok\\n');\n          data.push(null);\n        })\n        .catch(error => setTimeout(() => data.emit('error', error)));\n    }\n\n    return { data };\n  }\n}\n"]}