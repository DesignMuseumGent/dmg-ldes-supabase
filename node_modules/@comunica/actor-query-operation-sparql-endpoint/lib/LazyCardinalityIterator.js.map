{"version":3,"file":"LazyCardinalityIterator.js","sourceRoot":"","sources":["LazyCardinalityIterator.ts"],"names":[],"mappings":"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","sourcesContent":["import { AsyncIterator, LinkedList, DESTINATION } from 'asynciterator';\n\n/**\n  An iterator that maintains an internal buffer of items.\n  This class serves as a base class for other iterators\n  with a typically complex item generation process.\n  @extends module:asynciterator.AsyncIterator\n*/\nexport class LazyCardinalityIterator<T> extends AsyncIterator<T> {\n  private _buffer?: LinkedList<T>;\n  private _cardinality?: Promise<number>;\n  private readonly _error: any;\n  private _count = 0;\n  private _buffering = true;\n\n  public constructor(private readonly _source: AsyncIterator<T>) {\n    super();\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    (<InternalSource<T>> _source)[DESTINATION] = this;\n    _source.on('readable', destinationSetReadable);\n    _source.on('end', destinationSetReadable);\n    _source.on('error', destinationEmitError);\n    this.readable = _source.readable;\n  }\n\n  public read(): T | null {\n    if (this._buffer) {\n      if (!this._buffer.empty) {\n        return this._buffer.shift()!;\n      }\n      if (!this._buffering) {\n        this.close();\n      }\n\n      this.readable = false;\n      return null;\n    }\n\n    let item: T | null = null;\n    // eslint-disable-next-line no-cond-assign\n    if (this._source.readable && (item = this._source.read()) !== null) {\n      this._count += 1;\n    } else {\n      this.readable = false;\n      if (this._source.done) {\n        this.close();\n      }\n    }\n\n    return item;\n  }\n\n  public getCardinality(): Promise<number> {\n    if (this._cardinality) {\n      return this._cardinality;\n    }\n\n    if (this._error) {\n      return Promise.reject(this._error);\n    }\n\n    if (this._source.done) {\n      this.close();\n    }\n\n    if (this.done) {\n      this._cardinality = Promise.resolve(this._count);\n    } else {\n      this._buffer = new LinkedList();\n      this._cardinality = new Promise((resolve, reject) => {\n        this._source.removeListener('readable', destinationSetReadable);\n        this._source.removeListener('end', destinationSetReadable);\n\n        const clean = (): void => {\n          this._source.removeListener('data', onData);\n          this._source.removeListener('end', onEnd);\n          this._source.removeListener('error', onError);\n        };\n\n        const onData = (data: T): void => {\n          this._buffer!.push(data);\n          this._count += 1;\n          this.readable = true;\n        };\n        const onEnd = (): void => {\n          this._buffering = false;\n          clean();\n          resolve(this._count);\n        };\n        const onError = (err: any): void => {\n          this._buffering = false;\n          clean();\n          reject(err);\n        };\n\n        this._source.on('data', onData);\n        this._source.on('end', onEnd);\n        this._source.on('error', onError);\n      });\n    }\n\n    return this._cardinality;\n  }\n\n  public close(): void {\n    this._source.removeListener('readable', destinationSetReadable);\n    this._source.removeListener('end', destinationSetReadable);\n    this._source.removeListener('error', destinationEmitError);\n    delete (<any> this._source)[DESTINATION];\n    this._source.destroy();\n    super.close();\n  }\n}\n\ntype InternalSource<S> = AsyncIterator<S> & { [DESTINATION]: AsyncIterator<any> };\n\nfunction destinationSetReadable<S>(this: InternalSource<S>): void {\n  this[DESTINATION]!.readable = true;\n}\nfunction destinationEmitError<S>(this: InternalSource<S>, error: Error): void {\n  (<any> this[DESTINATION]!)._error = error;\n  this[DESTINATION]!.emit('error', error);\n}\n"]}