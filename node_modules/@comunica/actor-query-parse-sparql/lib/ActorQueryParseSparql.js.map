{"version":3,"file":"ActorQueryParseSparql.js","sourceRoot":"","sources":["ActorQueryParseSparql.ts"],"names":[],"mappings":";;;AACA,+DAA4D;AAE5D,qDAA4C;AAC5C,uCAAkD;AAElD;;GAEG;AACH,MAAa,qBAAsB,SAAQ,iCAAe;IAGxD,YAAmB,IAAgC;QACjD,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAyB;QACzC,IAAI,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,WAAW,CAAC,QAAQ,KAAK,QAAQ,EAAE;YAClE,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;SAC7D;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAyB;QACxC,MAAM,MAAM,GAAG,IAAI,iBAAY,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;QACtF,MAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAChD,MAAM,OAAO,GAAG,YAAY,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;QAC9E,OAAO;YACL,OAAO;YACP,SAAS,EAAE,IAAA,2BAAS,EAAC,YAAY,EAC/B,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,eAAe,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC;SAC5F,CAAC;IACJ,CAAC;CACF;AAzBD,sDAyBC","sourcesContent":["import type { IActionQueryParse, IActorQueryParseArgs, IActorQueryParseOutput } from '@comunica/bus-query-parse';\nimport { ActorQueryParse } from '@comunica/bus-query-parse';\nimport type { IActorTest } from '@comunica/core';\nimport { translate } from 'sparqlalgebrajs';\nimport { Parser as SparqlParser } from 'sparqljs';\n\n/**\n * A comunica Algebra SPARQL Parse Actor.\n */\nexport class ActorQueryParseSparql extends ActorQueryParse {\n  public readonly prefixes: Record<string, string>;\n\n  public constructor(args: IActorQueryParseSparqlArgs) {\n    super(args);\n    this.prefixes = Object.freeze(this.prefixes);\n  }\n\n  public async test(action: IActionQueryParse): Promise<IActorTest> {\n    if (action.queryFormat && action.queryFormat.language !== 'sparql') {\n      throw new Error('This actor can only parse SPARQL queries');\n    }\n    return true;\n  }\n\n  public async run(action: IActionQueryParse): Promise<IActorQueryParseOutput> {\n    const parser = new SparqlParser({ prefixes: this.prefixes, baseIRI: action.baseIRI });\n    const parsedSyntax = parser.parse(action.query);\n    const baseIRI = parsedSyntax.type === 'query' ? parsedSyntax.base : undefined;\n    return {\n      baseIRI,\n      operation: translate(parsedSyntax,\n        { quads: true, prefixes: this.prefixes, blankToVariable: true, baseIRI: action.baseIRI }),\n    };\n  }\n}\n\nexport interface IActorQueryParseSparqlArgs extends IActorQueryParseArgs {\n  /**\n   * Default prefixes to use\n   * @range {json}\n   * @default {{\n   *   \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n   *   \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n   *   \"owl\": \"http://www.w3.org/2002/07/owl#\",\n   *   \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n   *   \"dc\": \"http://purl.org/dc/terms/\",\n   *   \"dcterms\": \"http://purl.org/dc/terms/\",\n   *   \"dc11\": \"http://purl.org/dc/elements/1.1/\",\n   *   \"foaf\": \"http://xmlns.com/foaf/0.1/\",\n   *   \"geo\": \"http://www.w3.org/2003/01/geo/wgs84_pos#\",\n   *   \"dbpedia\": \"http://dbpedia.org/resource/\",\n   *   \"dbpedia-owl\": \"http://dbpedia.org/ontology/\",\n   *   \"dbpprop\": \"http://dbpedia.org/property/\",\n   *   \"schema\": \"http://schema.org/\",\n   *   \"skos\": \"http://www.w3.org/2008/05/skos#\"\n   * }}\n   */\n  prefixes?: Record<string, string>;\n}\n"]}