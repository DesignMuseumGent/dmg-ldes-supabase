{"version":3,"file":"ActorRdfMetadataAll.js","sourceRoot":"","sources":["ActorRdfMetadataAll.ts"],"names":[],"mappings":";;;AACA,iEAA8D;AAE9D,qDAA2C;AAE3C;;GAEG;AACH,MAAa,mBAAoB,SAAQ,mCAAgB;IACvD,YAAmB,IAA2B;QAC5C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAA0B;QAC1C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA0B;QACzC,MAAM,IAAI,GAAa,IAAI,0BAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAC1D,MAAM,QAAQ,GAAa,IAAI,0BAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAE9D,wEAAwE;QACxE,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;YAC/B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC1B,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,iFAAiF;QACjF,MAAM,eAAe,GAAG,GAAS,EAAE;YACjC,6BAA6B;YAC7B,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,GAAG,GAAG,EAAE;gBACjC,aAAa;YACf,CAAC,CAAC;YAEF,gCAAgC;YAChC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;gBAC7B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;YAEH,gCAAgC;YAChC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QACF,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,GAAG,GAAG,EAAE;YACjC,eAAe,EAAE,CAAC;QACpB,CAAC,CAAC;QAEF,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IAC5B,CAAC;CACF;AA5CD,kDA4CC","sourcesContent":["import type { IActionRdfMetadata, IActorRdfMetadataArgs, IActorRdfMetadataOutput } from '@comunica/bus-rdf-metadata';\nimport { ActorRdfMetadata } from '@comunica/bus-rdf-metadata';\nimport type { IActorTest } from '@comunica/core';\nimport { Readable } from 'readable-stream';\n\n/**\n * A comunica All RDF Metadata Actor.\n */\nexport class ActorRdfMetadataAll extends ActorRdfMetadata {\n  public constructor(args: IActorRdfMetadataArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfMetadata): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionRdfMetadata): Promise<IActorRdfMetadataOutput> {\n    const data: Readable = new Readable({ objectMode: true });\n    const metadata: Readable = new Readable({ objectMode: true });\n\n    // Forward errors (attach them immediately as they could arrive earlier)\n    action.quads.on('error', error => {\n      data.emit('error', error);\n      metadata.emit('error', error);\n    });\n\n    // Delay attachment of listeners until the data or metadata stream is being read.\n    const attachListeners = (): void => {\n      // Attach listeners only once\n      data._read = metadata._read = () => {\n        // Do nothing\n      };\n\n      // Forward quads to both streams\n      action.quads.on('data', quad => {\n        data.push(quad);\n        metadata.push(quad);\n      });\n\n      // Terminate both streams on-end\n      action.quads.on('end', () => {\n        data.push(null);\n        metadata.push(null);\n      });\n    };\n    data._read = metadata._read = () => {\n      attachListeners();\n    };\n\n    return { data, metadata };\n  }\n}\n"]}