{"version":3,"file":"LoggerPretty.js","sourceRoot":"","sources":["LoggerPretty.ts"],"names":[],"mappings":";;;AAAA,2CAAyC;AACzC,gDAAgD;AAEhD;;GAEG;AACH,MAAa,YAAa,SAAQ,cAAM;IAKtC,YAAmB,IAAuB;QACxC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,cAAM,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAC5B,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,IAAU;QACtC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,IAAU;QACtC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,IAAU;QACtC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACnC,CAAC;IAEM,IAAI,CAAC,OAAe,EAAE,IAAU;QACrC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,IAAU;QACtC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACnC,CAAC;IAEM,IAAI,CAAC,OAAe,EAAE,IAAU;QACrC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;IAES,GAAG,CAAC,KAAa,EAAE,OAAe,EAAE,IAAU;QACtD,IAAI,cAAM,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY;YACpD,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;YAC1E,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,MAAM,KAAK,CAAC,WAAW,EAAE,KAAK,OAAO,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACpH;IACH,CAAC;CACF;AA1CD,oCA0CC","sourcesContent":["import { Logger } from '@comunica/types';\nimport * as objectInspect from 'object-inspect';\n\n/**\n * A logger that pretty-prints everything.\n */\nexport class LoggerPretty extends Logger {\n  private readonly level: string;\n  private readonly levelOrdinal: number;\n  private readonly actors?: Record<string, boolean>;\n\n  public constructor(args: ILoggerPrettyArgs) {\n    super();\n    this.level = args.level;\n    this.levelOrdinal = Logger.getLevelOrdinal(this.level);\n    this.actors = args.actors;\n  }\n\n  public debug(message: string, data?: any): void {\n    this.log('debug', message, data);\n  }\n\n  public error(message: string, data?: any): void {\n    this.log('error', message, data);\n  }\n\n  public fatal(message: string, data?: any): void {\n    this.log('fatal', message, data);\n  }\n\n  public info(message: string, data?: any): void {\n    this.log('info', message, data);\n  }\n\n  public trace(message: string, data?: any): void {\n    this.log('trace', message, data);\n  }\n\n  public warn(message: string, data?: any): void {\n    this.log('warn', message, data);\n  }\n\n  protected log(level: string, message: string, data?: any): void {\n    if (Logger.getLevelOrdinal(level) >= this.levelOrdinal &&\n      (!data || !('actor' in data) || !this.actors || this.actors[data.actor])) {\n      process.stderr.write(`[${new Date().toISOString()}]  ${level.toUpperCase()}: ${message} ${objectInspect(data)}\\n`);\n    }\n  }\n}\n\nexport interface ILoggerPrettyArgs {\n  /**\n   * The minimum logging level.\n   */\n  level: string;\n  /**\n   * A whitelist of actor IRIs to log for.\n   */\n  actors?: Record<string, boolean>;\n}\n"]}