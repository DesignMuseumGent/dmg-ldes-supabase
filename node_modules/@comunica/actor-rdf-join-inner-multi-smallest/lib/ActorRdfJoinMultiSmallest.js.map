{"version":3,"file":"ActorRdfJoinMultiSmallest.js","sourceRoot":"","sources":["ActorRdfJoinMultiSmallest.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ActorQueryOperation,\n} from '@comunica/bus-query-operation';\nimport type {\n  IActionRdfJoin,\n  IActorRdfJoinOutputInner,\n  IActorRdfJoinArgs,\n  MediatorRdfJoin,\n} from '@comunica/bus-rdf-join';\nimport { ActorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { MediatorRdfJoinEntriesSort } from '@comunica/bus-rdf-join-entries-sort';\nimport type { IMediatorTypeJoinCoefficients } from '@comunica/mediatortype-join-coefficients';\nimport type { MetadataBindings, IJoinEntry, IActionContext, IJoinEntryWithMetadata } from '@comunica/types';\nimport { Factory } from 'sparqlalgebrajs';\n\n/**\n * A Multi Smallest RDF Join Actor.\n * It accepts 3 or more streams, joins the smallest two, and joins the result with the remaining streams.\n */\nexport class ActorRdfJoinMultiSmallest extends ActorRdfJoin {\n  public readonly mediatorJoinEntriesSort: MediatorRdfJoinEntriesSort;\n  public readonly mediatorJoin: MediatorRdfJoin;\n\n  public static readonly FACTORY = new Factory();\n\n  public constructor(args: IActorRdfJoinMultiSmallestArgs) {\n    super(args, {\n      logicalType: 'inner',\n      physicalName: 'multi-smallest',\n      limitEntries: 3,\n      limitEntriesMin: true,\n    });\n  }\n\n  /**\n   * Order the given join entries using the join-entries-sort bus.\n   * @param {IJoinEntryWithMetadata[]} entries An array of join entries.\n   * @param context The action context.\n   * @return {IJoinEntryWithMetadata[]} The sorted join entries.\n   */\n  public async sortJoinEntries(\n    entries: IJoinEntryWithMetadata[],\n    context: IActionContext,\n  ): Promise<IJoinEntryWithMetadata[]> {\n    return (await this.mediatorJoinEntriesSort.mediate({ entries, context })).entries;\n  }\n\n  protected async getOutput(action: IActionRdfJoin): Promise<IActorRdfJoinOutputInner> {\n    // Determine the two smallest streams by sorting (e.g. via cardinality)\n    const entries: IJoinEntry[] = await this.sortJoinEntries(\n      await ActorRdfJoin.getEntriesWithMetadatas([ ...action.entries ]),\n      action.context,\n    );\n    const smallestEntry1 = entries[0];\n    const smallestEntry2 = entries[1];\n    entries.splice(0, 2);\n\n    // Join the two selected streams, and then join the result with the remaining streams\n    const firstEntry: IJoinEntry = {\n      output: ActorQueryOperation.getSafeBindings(await this.mediatorJoin\n        .mediate({ type: action.type, entries: [ smallestEntry1, smallestEntry2 ], context: action.context })),\n      operation: ActorRdfJoinMultiSmallest.FACTORY\n        .createJoin([ smallestEntry1.operation, smallestEntry2.operation ], false),\n    };\n    entries.push(firstEntry);\n    return {\n      result: await this.mediatorJoin.mediate({\n        type: action.type,\n        entries,\n        context: action.context,\n      }),\n    };\n  }\n\n  protected async getJoinCoefficients(\n    action: IActionRdfJoin,\n    metadatas: MetadataBindings[],\n  ): Promise<IMediatorTypeJoinCoefficients> {\n    metadatas = [ ...metadatas ];\n    // Determine the two smallest streams by sorting (e.g. via cardinality)\n    const entriesWithMetadata = await this.sortJoinEntries(action.entries\n      .map((entry, i) => ({ ...entry, metadata: metadatas[i] })), action.context);\n    metadatas = entriesWithMetadata.map(entry => entry.metadata);\n    const requestInitialTimes = ActorRdfJoin.getRequestInitialTimes(metadatas);\n    const requestItemTimes = ActorRdfJoin.getRequestItemTimes(metadatas);\n\n    return {\n      iterations: metadatas[0].cardinality.value * metadatas[1].cardinality.value *\n        metadatas.slice(2).reduce((acc, metadata) => acc * metadata.cardinality.value, 1),\n      persistedItems: 0,\n      blockingItems: 0,\n      requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] +\n        requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1] +\n        metadatas.slice(2).reduce((sum, metadata, i) => sum + requestInitialTimes.slice(2)[i] +\n          metadata.cardinality.value * requestItemTimes.slice(2)[i], 0),\n    };\n  }\n}\n\nexport interface IActorRdfJoinMultiSmallestArgs extends IActorRdfJoinArgs {\n  /**\n   * The join entries sort mediator\n   */\n  mediatorJoinEntriesSort: MediatorRdfJoinEntriesSort;\n  /**\n   * A mediator for joining Bindings streams\n   */\n  mediatorJoin: MediatorRdfJoin;\n}\n"]}