{"version":3,"file":"QuadDestinationSparql.js","sourceRoot":"","sources":["QuadDestinationSparql.ts"],"names":[],"mappings":"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","sourcesContent":["import type { MediatorHttp } from '@comunica/bus-http';\nimport type { IQuadDestination } from '@comunica/bus-rdf-update-quads';\nimport type { IActionContext } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport { SparqlEndpointFetcher } from 'fetch-sparql-endpoint';\nimport { termToString } from 'rdf-string-ttl';\n\nconst stringifyStream = require('stream-to-string');\n\n/**\n * A quad destination that represents an LDP resource.\n */\nexport class QuadDestinationSparql implements IQuadDestination {\n  private readonly url: string;\n  private readonly context: IActionContext;\n\n  private readonly mediatorHttp: MediatorHttp;\n\n  private readonly endpointFetcher: SparqlEndpointFetcher;\n\n  public constructor(\n    url: string,\n    context: IActionContext,\n    mediatorHttp: MediatorHttp,\n  ) {\n    this.url = url;\n    this.context = context;\n    this.mediatorHttp = mediatorHttp;\n    this.endpointFetcher = new SparqlEndpointFetcher({\n      fetch: (input: Request | string, init?: RequestInit) => this.mediatorHttp.mediate(\n        { input, init, context: this.context },\n      ),\n      prefixVariableQuestionMark: true,\n    });\n  }\n\n  public insert(quads: AsyncIterator<RDF.Quad>): Promise<void> {\n    return this.wrapSparqlUpdateRequest('INSERT', quads);\n  }\n\n  public async delete(quads: AsyncIterator<RDF.Quad>): Promise<void> {\n    return this.wrapSparqlUpdateRequest('DELETE', quads);\n  }\n\n  public async wrapSparqlUpdateRequest(type: 'INSERT' | 'DELETE', quads: AsyncIterator<RDF.Quad>): Promise<void> {\n    // Wrap triples in DATA block\n    const dataWrapped = quads\n      .map((quad: RDF.Quad) => {\n        let stringQuad = `${termToString(quad.subject)} ${termToString(quad.predicate)} ${termToString(quad.object)} .`;\n        if (quad.graph.termType !== 'DefaultGraph') {\n          stringQuad = `  GRAPH ${termToString(quad.graph)} { ${stringQuad} }\\n`;\n        } else {\n          stringQuad = `  ${stringQuad}\\n`;\n        }\n        return stringQuad;\n      })\n      .prepend([ `${type} DATA {\\n` ])\n      .append([ '}' ]);\n\n    // Serialize query stream to string\n    const query = await stringifyStream(dataWrapped);\n\n    // Send update query to endpoint\n    await this.endpointFetcher.fetchUpdate(this.url, query);\n  }\n\n  public async deleteGraphs(\n    graphsIn: RDF.DefaultGraph | 'NAMED' | 'ALL' | RDF.NamedNode[],\n    requireExistence: boolean,\n    dropGraphs: boolean,\n  ): Promise<void> {\n    const graphs: (RDF.DefaultGraph | 'NAMED' | 'ALL' | RDF.NamedNode)[] = Array.isArray(graphsIn) ?\n      graphsIn :\n      [ graphsIn ];\n    const queries: string[] = [];\n    for (const graph of graphs) {\n      let graphValue: string;\n      if (typeof graph === 'string') {\n        graphValue = graph;\n      } else if (graph.termType === 'DefaultGraph') {\n        graphValue = 'DEFAULT';\n      } else {\n        graphValue = `GRAPH <${graph.value}>`;\n      }\n      queries.push(`${dropGraphs ? 'DROP' : 'CLEAR'} ${requireExistence ? '' : 'SILENT '}${graphValue}`);\n    }\n    await this.endpointFetcher.fetchUpdate(this.url, queries.join('; '));\n  }\n\n  public async createGraphs(graphs: RDF.NamedNode[], requireNonExistence: boolean): Promise<void> {\n    const queries: string[] = [];\n    for (const graph of graphs) {\n      queries.push(`CREATE${requireNonExistence ? '' : ' SILENT'} GRAPH <${graph.value}>`);\n    }\n    await this.endpointFetcher.fetchUpdate(this.url, queries.join('; '));\n  }\n}\n"]}