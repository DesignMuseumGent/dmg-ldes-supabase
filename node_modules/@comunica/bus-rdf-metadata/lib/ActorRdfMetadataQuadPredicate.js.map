{"version":3,"file":"ActorRdfMetadataQuadPredicate.js","sourceRoot":"","sources":["ActorRdfMetadataQuadPredicate.ts"],"names":[],"mappings":";;;AAAA,mCAAkC;AAIlC,yDAAsD;AAEtD;;;GAGG;AACH,MAAsB,6BAA8B,SAAQ,mCAAgB;IAC1E,YAAmB,IAAyE;QAC1F,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAaM,KAAK,CAAC,GAAG,CAAC,MAA0B;QACzC,MAAM,IAAI,GAAa,IAAI,iBAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAC1D,MAAM,QAAQ,GAAa,IAAI,iBAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAE9D,iFAAiF;QACjF,sCAAsC;QACtC,MAAM,eAAe,GAAG,GAAS,EAAE;YACjC,6BAA6B;YAC7B,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,GAAG,GAAG,EAAE;gBACjC,aAAa;YACf,CAAC,CAAC;YAEF,iBAAiB;YACjB,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;gBAC/B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBAC1B,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,EAAE,CAAC;YACnB,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;gBAC7B,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE;oBAC9C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACrB;qBAAM;oBACL,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACjB;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QACF,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,GAAG,GAAG,EAAE;YACjC,eAAe,EAAE,CAAC;QACpB,CAAC,CAAC;QAEF,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IAC5B,CAAC;CACF;AAtDD,sEAsDC","sourcesContent":["import { Readable } from 'stream';\nimport type { IActorArgs, IActorTest } from '@comunica/core';\nimport type * as RDF from '@rdfjs/types';\nimport type { IActionRdfMetadata, IActorRdfMetadataOutput } from './ActorRdfMetadata';\nimport { ActorRdfMetadata } from './ActorRdfMetadata';\n\n/**\n * An abstract implementation of {@link ActorRdfMetadata} that\n * only requires the quad test {@link ActorRdfMetadata#isMetadata} method to be overridden.\n */\nexport abstract class ActorRdfMetadataQuadPredicate extends ActorRdfMetadata {\n  public constructor(args: IActorArgs<IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>) {\n    super(args);\n  }\n\n  /**\n   * If the given quad should be sent to the metadata stream.\n   * Otherwise, it will be sent to the data stream.\n   * @param {RDF.Quad} quad A quad.\n   * @param pageUrl         The page URL from which the quads were retrieved.\n   * @param context         An object that is shared across all invocations in a single action.\n   *                        This can be used to maintain a state inside a single stream.\n   * @return {boolean}      If the given quad is a metadata quad.\n   */\n  public abstract isMetadata(quad: RDF.Quad, pageUrl: string, context: any): boolean;\n\n  public async run(action: IActionRdfMetadata): Promise<IActorRdfMetadataOutput> {\n    const data: Readable = new Readable({ objectMode: true });\n    const metadata: Readable = new Readable({ objectMode: true });\n\n    // Delay attachment of listeners until the data or metadata stream is being read.\n    // eslint-disable-next-line func-style\n    const attachListeners = (): void => {\n      // Attach listeners only once\n      data._read = metadata._read = () => {\n        // Do nothing\n      };\n\n      // Forward errors\n      action.quads.on('error', error => {\n        data.emit('error', error);\n        metadata.emit('error', error);\n      });\n\n      const context = {};\n      action.quads.on('data', quad => {\n        if (this.isMetadata(quad, action.url, context)) {\n          metadata.push(quad);\n        } else {\n          data.push(quad);\n        }\n      });\n\n      action.quads.on('end', () => {\n        data.push(null);\n        metadata.push(null);\n      });\n    };\n    data._read = metadata._read = () => {\n      attachListeners();\n    };\n\n    return { data, metadata };\n  }\n}\n"]}