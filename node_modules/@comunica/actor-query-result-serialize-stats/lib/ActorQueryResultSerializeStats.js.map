{"version":3,"file":"ActorQueryResultSerializeStats.js","sourceRoot":"","sources":["ActorQueryResultSerializeStats.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IActionSparqlSerialize,\n  IActorQueryResultSerializeFixedMediaTypesArgs,\n  IActorQueryResultSerializeOutput } from '@comunica/bus-query-result-serialize';\nimport { ActorQueryResultSerializeFixedMediaTypes } from '@comunica/bus-query-result-serialize';\nimport type {\n  IActionContext, IQueryOperationResultBindings,\n  IQueryOperationResultQuads,\n} from '@comunica/types';\nimport { Readable } from 'readable-stream';\nimport type { ActionObserverHttp } from './ActionObserverHttp';\n\n/**\n * Serializes SPARQL results for testing and debugging.\n */\nexport class ActorQueryResultSerializeStats extends ActorQueryResultSerializeFixedMediaTypes {\n  public readonly httpObserver: ActionObserverHttp;\n\n  /* eslint-disable max-len */\n  /**\n   * @param args -\n   *   \\ @defaultNested {{ \"stats\": 0.5 }} mediaTypePriorities\n   *   \\ @defaultNested {{ \"stats\": \"https://comunica.linkeddatafragments.org/#results_stats\" }} mediaTypeFormats\n   *   \\ @defaultNested {<default_observer> a <caqrsst:components/ActionObserverHttp.jsonld#ActionObserverHttp>} httpObserver\n   */\n  public constructor(args: IActorQueryResultSerializeStatsArgs) {\n    super(args);\n  }\n  /* eslint-enable max-len */\n\n  public async testHandleChecked(action: IActionSparqlSerialize, context: IActionContext): Promise<boolean> {\n    if (![ 'bindings', 'quads' ].includes(action.type)) {\n      throw new Error('This actor can only handle bindings streams or quad streams.');\n    }\n    return true;\n  }\n\n  public pushHeader(data: Readable): void {\n    const header: string = [ 'Result', 'Delay (ms)', 'HTTP requests',\n    ].join(',');\n    data.push(`${header}\\n`);\n  }\n\n  public pushStat(data: Readable, startTime: number, result: number): void {\n    const row: string = [ result, this.delay(startTime), this.httpObserver.requests,\n    ].join(',');\n    data.push(`${row}\\n`);\n  }\n\n  public pushFooter(data: Readable, startTime: number): void {\n    const footer: string = [ 'TOTAL', this.delay(startTime), this.httpObserver.requests,\n    ].join(',');\n    data.push(`${footer}\\n`);\n    data.push(null);\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, mediaType: string, context: IActionContext):\n  Promise<IActorQueryResultSerializeOutput> {\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    const resultStream: NodeJS.EventEmitter = action.type === 'bindings' ?\n      (<IQueryOperationResultBindings> action).bindingsStream :\n      (<IQueryOperationResultQuads> action).quadStream;\n\n    const startTime = this.now();\n    let result = 1;\n\n    this.pushHeader(data);\n    resultStream.on('error', error => data.emit('error', error));\n    resultStream.on('data', () => this.pushStat(data, startTime, result++));\n    resultStream.on('end', () => this.pushFooter(data, startTime));\n\n    return { data };\n  }\n\n  /* istanbul ignore next */\n  public now(): number {\n    // TODO: remove when we will drop support of Node 14\n    if (typeof performance === 'undefined') {\n      const time: [number, number] = process.hrtime();\n      return time[0] * 1_000 + (time[1] / 1_000_000);\n    }\n    return performance.now();\n  }\n\n  public delay(startTime: number): number {\n    return this.now() - startTime;\n  }\n}\n\nexport interface IActorQueryResultSerializeStatsArgs extends IActorQueryResultSerializeFixedMediaTypesArgs {\n  httpObserver: ActionObserverHttp;\n}\n"]}