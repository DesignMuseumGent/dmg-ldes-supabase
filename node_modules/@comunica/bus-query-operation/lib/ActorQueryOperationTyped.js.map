{"version":3,"file":"ActorQueryOperationTyped.js","sourceRoot":"","sources":["ActorQueryOperationTyped.ts"],"names":[],"mappings":";;;AAAA,+DAA8E;AAU9E,+DAA4D;AAE5D;;GAEG;AACH,MAAsB,wBAAsD,SAAQ,yCAAmB;IAGrG,YAAsB,IAA8B,EAAE,aAAqB;QACzE,KAAK,CAAO,EAAE,GAAG,IAAI,EAAE,aAAa,EAAE,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;SACvE;IACH,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAA6B;QAC7C,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;SAC7E;QACD,IAAI,MAAM,CAAC,SAAS,CAAC,IAAI,KAAK,IAAI,CAAC,aAAa,EAAE;YAChD,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,kBAAkB,IAAI,CAAC,aAAa,wBACpE,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;SAC5B;QACD,MAAM,SAAS,GAAU,MAAM,CAAC,SAAS,CAAC;QAC1C,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA6B;QAC5C,uBAAuB;QACvB,MAAM,uBAAuB,GAAyC,MAAM,CAAC,OAAO;aACjF,GAAG,CAAC,+BAAa,CAAC,uBAAuB,CAAC,CAAC;QAC9C,IAAI,uBAAuB,EAAE;YAC3B,uBAAuB,CAAC,YAAY,CAClC,MAAM,CAAC,SAAS,CAAC,IAAI,EACrB,SAAS,EACT,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,qBAAqB,CAAC,EACvD,IAAI,CAAC,IAAI,EACT,EAAE,CACH,CAAC;YACF,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,qBAAqB,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;SAC5F;QAED,MAAM,SAAS,GAAU,MAAM,CAAC,SAAS,CAAC;QAC1C,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,oCAAkB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAC/E,MAAM,MAAM,GAA0B,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QACrF,IAAI,UAAU,IAAI,MAAM,EAAE;YACxB,MAAM,CAAC,QAAQ,GAAS,yCAAmB;iBACxC,eAAe,CAA8E,MAAM,CAAC,QAAQ,CAAC,CAAC;SAClH;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CAMF;AApDD,4DAoDC","sourcesContent":["import { KeysInitQuery, KeysQueryOperation } from '@comunica/context-entries';\nimport type { IActorTest } from '@comunica/core';\nimport type {\n  IQueryOperationResult,\n  IPhysicalQueryPlanLogger,\n  IActionContext, IMetadata,\n} from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport type { IActionQueryOperation, IActorQueryOperationArgs } from './ActorQueryOperation';\nimport { ActorQueryOperation } from './ActorQueryOperation';\n\n/**\n * A base implementation for query operation actors for a specific operation type.\n */\nexport abstract class ActorQueryOperationTyped<O extends Algebra.Operation> extends ActorQueryOperation {\n  public readonly operationName: string;\n\n  protected constructor(args: IActorQueryOperationArgs, operationName: string) {\n    super(<any> { ...args, operationName });\n    if (!this.operationName) {\n      throw new Error('A valid \"operationName\" argument must be provided.');\n    }\n  }\n\n  public async test(action: IActionQueryOperation): Promise<IActorTest> {\n    if (!action.operation) {\n      throw new Error('Missing field \\'operation\\' in a query operation action.');\n    }\n    if (action.operation.type !== this.operationName) {\n      throw new Error(`Actor ${this.name} only supports ${this.operationName} operations, but got ${\n        action.operation.type}`);\n    }\n    const operation: O = <O> action.operation;\n    return this.testOperation(operation, action.context);\n  }\n\n  public async run(action: IActionQueryOperation): Promise<IQueryOperationResult> {\n    // Log to physical plan\n    const physicalQueryPlanLogger: IPhysicalQueryPlanLogger | undefined = action.context\n      .get(KeysInitQuery.physicalQueryPlanLogger);\n    if (physicalQueryPlanLogger) {\n      physicalQueryPlanLogger.logOperation(\n        action.operation.type,\n        undefined,\n        action.operation,\n        action.context.get(KeysInitQuery.physicalQueryPlanNode),\n        this.name,\n        {},\n      );\n      action.context = action.context.set(KeysInitQuery.physicalQueryPlanNode, action.operation);\n    }\n\n    const operation: O = <O> action.operation;\n    const subContext = action.context.set(KeysQueryOperation.operation, operation);\n    const output: IQueryOperationResult = await this.runOperation(operation, subContext);\n    if ('metadata' in output) {\n      output.metadata = <any> ActorQueryOperation\n        .cachifyMetadata<IMetadata<RDF.QuadTermName | RDF.Variable>, RDF.QuadTermName | RDF.Variable>(output.metadata);\n    }\n    return output;\n  }\n\n  protected abstract testOperation(operation: O, context: IActionContext): Promise<IActorTest>;\n\n  protected abstract runOperation(operation: O, context: IActionContext):\n  Promise<IQueryOperationResult>;\n}\n"]}