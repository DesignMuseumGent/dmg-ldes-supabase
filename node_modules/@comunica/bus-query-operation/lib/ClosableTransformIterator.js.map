{"version":3,"file":"ClosableTransformIterator.js","sourceRoot":"","sources":["ClosableTransformIterator.ts"],"names":[],"mappings":";;;AACA,iDAAkD;AAKlD;;GAEG;AACH,MAAa,yBAAoC,SAAQ,iCAAuB;IAG9E,YAAmB,MAA2B,EAAE,OAA8D;QAC5G,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IACjC,CAAC;IAES,IAAI,CAAC,OAAgB;QAC7B,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACtB,CAAC;CACF;AAZD,8DAYC","sourcesContent":["import type { AsyncIterator, TransformIteratorOptions } from 'asynciterator';\nimport { TransformIterator } from 'asynciterator';\n\ndeclare type MaybePromise<T> = T | Promise<T>;\ndeclare type SourceExpression<T> = MaybePromise<AsyncIterator<T>> | (() => MaybePromise<AsyncIterator<T>>);\n\n/**\n * A TransformIterator with a callback for when this iterator is closed in any way.\n */\nexport class ClosableTransformIterator<S, D = S> extends TransformIterator<S, D> {\n  private readonly onClose: () => void;\n\n  public constructor(source: SourceExpression<S>, options: TransformIteratorOptions<S> & { onClose: () => void }) {\n    super(source, options);\n    this.onClose = options.onClose;\n  }\n\n  protected _end(destroy: boolean): void {\n    this.onClose();\n    super._end(destroy);\n  }\n}\n"]}