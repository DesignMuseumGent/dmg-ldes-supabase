{"version":3,"file":"ActorRdfJoinNestedLoop.js","sourceRoot":"","sources":["ActorRdfJoinNestedLoop.ts"],"names":[],"mappings":";;;AACA,yDAAsD;AAGtD,yCAA2C;AAE3C;;GAEG;AACH,MAAa,sBAAuB,SAAQ,2BAAY;IACtD,YAAmB,IAAuB;QACxC,KAAK,CAAC,IAAI,EAAE;YACV,WAAW,EAAE,OAAO;YACpB,YAAY,EAAE,aAAa;YAC3B,YAAY,EAAE,CAAC;YACf,eAAe,EAAE,IAAI;SACtB,CAAC,CAAC;IACL,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,MAAsB;QAC9C,MAAM,IAAI,GAAG,IAAI,0BAAc,CAC7B,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,EACvC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,EACjC,2BAAY,CAAC,YAAY,EAC/B,EAAE,SAAS,EAAE,KAAK,EAAE,CACrB,CAAC;QACF,OAAO;YACL,MAAM,EAAE;gBACN,IAAI,EAAE,UAAU;gBAChB,cAAc,EAAE,IAAI;gBACpB,QAAQ,EAAE,KAAK,IAAG,EAAE,CAAC,MAAM,IAAI,CAAC,uBAAuB,CACrD,MAAM,CAAC,OAAO,EACd,MAAM,2BAAY,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,EAC/C,MAAM,CAAC,OAAO,CACf;aACF;SACF,CAAC;IACJ,CAAC;IAES,KAAK,CAAC,mBAAmB,CACjC,MAAsB,EACtB,SAA6B;QAE7B,MAAM,mBAAmB,GAAG,2BAAY,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC;QAC3E,MAAM,gBAAgB,GAAG,2BAAY,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;QACrE,OAAO;YACL,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK;YAC3E,cAAc,EAAE,CAAC;YACjB,aAAa,EAAE,CAAC;YAChB,WAAW,EAAE,mBAAmB,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC;gBACxF,mBAAmB,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC;SAChF,CAAC;IACJ,CAAC;CACF;AA5CD,wDA4CC","sourcesContent":["import type { IActionRdfJoin, IActorRdfJoinOutputInner, IActorRdfJoinArgs } from '@comunica/bus-rdf-join';\nimport { ActorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { IMediatorTypeJoinCoefficients } from '@comunica/mediatortype-join-coefficients';\nimport type { Bindings, MetadataBindings } from '@comunica/types';\nimport { NestedLoopJoin } from 'asyncjoin';\n\n/**\n * A comunica NestedLoop RDF Join Actor.\n */\nexport class ActorRdfJoinNestedLoop extends ActorRdfJoin {\n  public constructor(args: IActorRdfJoinArgs) {\n    super(args, {\n      logicalType: 'inner',\n      physicalName: 'nested-loop',\n      limitEntries: 2,\n      canHandleUndefs: true,\n    });\n  }\n\n  protected async getOutput(action: IActionRdfJoin): Promise<IActorRdfJoinOutputInner> {\n    const join = new NestedLoopJoin<Bindings, Bindings, Bindings>(\n      action.entries[0].output.bindingsStream,\n      action.entries[1].output.bindingsStream,\n      <any> ActorRdfJoin.joinBindings,\n      { autoStart: false },\n    );\n    return {\n      result: {\n        type: 'bindings',\n        bindingsStream: join,\n        metadata: async() => await this.constructResultMetadata(\n          action.entries,\n          await ActorRdfJoin.getMetadatas(action.entries),\n          action.context,\n        ),\n      },\n    };\n  }\n\n  protected async getJoinCoefficients(\n    action: IActionRdfJoin,\n    metadatas: MetadataBindings[],\n  ): Promise<IMediatorTypeJoinCoefficients> {\n    const requestInitialTimes = ActorRdfJoin.getRequestInitialTimes(metadatas);\n    const requestItemTimes = ActorRdfJoin.getRequestItemTimes(metadatas);\n    return {\n      iterations: metadatas[0].cardinality.value * metadatas[1].cardinality.value,\n      persistedItems: 0,\n      blockingItems: 0,\n      requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] +\n        requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1],\n    };\n  }\n}\n"]}