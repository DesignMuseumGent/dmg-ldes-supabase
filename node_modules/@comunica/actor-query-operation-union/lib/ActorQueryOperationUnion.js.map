{"version":3,"file":"ActorQueryOperationUnion.js","sourceRoot":"","sources":["ActorQueryOperationUnion.ts"],"names":[],"mappings":";;;AACA,uEAGuC;AAQvC,iDAA8C;AAC9C,yCAAsC;AAGtC;;GAEG;AACH,MAAa,wBAAyB,SAAQ,sDAA+C;IAC3F,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,cAAc,CAAC,SAA2B;QACtD,OAAO,IAAA,qBAAS,EAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;IACrC,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,aAAa,CAGzB,SAAc,EAAE,QAAkB;QAClC,oBAAoB;QACpB,MAAM,WAAW,GAA+B,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QAC5E,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YAChC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,IAAI,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAC7E,QAAQ,CAAC,WAAW,CAAC,KAAK,KAAK,CAAC,EAAE;gBAClC,IAAI,QAAQ,CAAC,WAAW,CAAC,IAAI,KAAK,UAAU,EAAE;oBAC5C,WAAW,CAAC,IAAI,GAAG,UAAU,CAAC;iBAC/B;gBACD,WAAW,CAAC,KAAK,IAAI,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC;aACjD;iBAAM;gBACL,WAAW,CAAC,IAAI,GAAG,UAAU,CAAC;gBAC9B,WAAW,CAAC,KAAK,GAAG,MAAM,CAAC,iBAAiB,CAAC;gBAC7C,MAAM;aACP;SACF;QAED,MAAM,YAAY,GAAkB;YAClC,WAAW;YACX,gBAAgB,EAAE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,gBAAgB,CAAC;SACxE,CAAC;QAEF,kBAAkB;QAClB,IAAI,QAAQ,EAAE;YACZ,YAAY,CAAC,SAAS,GAAG,wBAAwB,CAAC,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;YAChH,OAAW,YAAY,CAAC;SACzB;QACD,OAAW,YAAY,CAAC;IAC1B,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,SAAwB,EAAE,OAAuB;QAC1E,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAwB,EAAE,OAAuB;QAEzE,MAAM,OAAO,GAAoC,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK;aAChF,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;aAChG,GAAG,CAAC,yCAAmB,CAAC,eAAe,CAAC,CAAC;QAE5C,MAAM,cAAc,GAAmB,IAAI,6BAAa,CAAC,OAAO,CAAC,GAAG,CAClE,CAAC,MAAqC,EAAE,EAAE,CAAC,MAAM,CAAC,cAAc,CACjE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QAEzB,MAAM,QAAQ,GAAoC,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC1G,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,wBAAwB,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;QAC1E,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,EAAE,CAAC;IACxD,CAAC;CACF;AAzED,4DAyEC","sourcesContent":["import type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n  ActorQueryOperationTypedMediated,\n} from '@comunica/bus-query-operation';\nimport type { IActorTest } from '@comunica/core';\nimport type { BindingsStream,\n  IQueryOperationResultBindings,\n  IActionContext,\n  IQueryOperationResult,\n  MetadataBindings, MetadataQuads } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { UnionIterator } from 'asynciterator';\nimport { uniqTerms } from 'rdf-terms';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Union Query Operation Actor.\n */\nexport class ActorQueryOperationUnion extends ActorQueryOperationTypedMediated<Algebra.Union> {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'union');\n  }\n\n  /**\n   * Takes the union of the given double array variables.\n   * Uniqueness is guaranteed.\n   * @param {string[][]} variables Double array of variables to take the union of.\n   * @return {string[]} The union of the given variables.\n   */\n  public static unionVariables(variables: RDF.Variable[][]): RDF.Variable[] {\n    return uniqTerms(variables.flat());\n  }\n\n  /**\n   * Takes the union of the given metadata array.\n   * It will ensure that the cardinality metadata value is properly calculated.\n   * @param {{[p: string]: any}[]} metadatas Array of metadata.\n   * @param bindings If the union of the variables field should also be taken.\n   * @return {{[p: string]: any}} Union of the metadata.\n   */\n  public static unionMetadata<\n    Bindings extends boolean,\n    M extends (Bindings extends true ? MetadataBindings : MetadataQuads)\n  >(metadatas: M[], bindings: Bindings): M {\n    // Union cardinality\n    const cardinality: RDF.QueryResultCardinality = { type: 'exact', value: 0 };\n    for (const metadata of metadatas) {\n      if ((metadata.cardinality.value && Number.isFinite(metadata.cardinality.value)) ||\n        metadata.cardinality.value === 0) {\n        if (metadata.cardinality.type === 'estimate') {\n          cardinality.type = 'estimate';\n        }\n        cardinality.value += metadata.cardinality.value;\n      } else {\n        cardinality.type = 'estimate';\n        cardinality.value = Number.POSITIVE_INFINITY;\n        break;\n      }\n    }\n\n    const metadataBase: MetadataQuads = {\n      cardinality,\n      canContainUndefs: metadatas.some(metadata => metadata.canContainUndefs),\n    };\n\n    // Union variables\n    if (bindings) {\n      metadataBase.variables = ActorQueryOperationUnion.unionVariables(metadatas.map(metadata => metadata.variables));\n      return <M> metadataBase;\n    }\n    return <M> metadataBase;\n  }\n\n  public async testOperation(operation: Algebra.Union, context: IActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(operation: Algebra.Union, context: IActionContext):\n  Promise<IQueryOperationResult> {\n    const outputs: IQueryOperationResultBindings[] = (await Promise.all(operation.input\n      .map(subOperation => this.mediatorQueryOperation.mediate({ operation: subOperation, context }))))\n      .map(ActorQueryOperation.getSafeBindings);\n\n    const bindingsStream: BindingsStream = new UnionIterator(outputs.map(\n      (output: IQueryOperationResultBindings) => output.bindingsStream,\n    ), { autoStart: false });\n\n    const metadata: () => Promise<MetadataBindings> = () => Promise.all(outputs.map(output => output.metadata()))\n      .then(subMeta => ActorQueryOperationUnion.unionMetadata(subMeta, true));\n    return { type: 'bindings', bindingsStream, metadata };\n  }\n}\n"]}