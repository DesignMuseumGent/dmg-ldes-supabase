{"version":3,"file":"ActorQueryResultSerializeJson.js","sourceRoot":"","sources":["ActorQueryResultSerializeJson.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IActionSparqlSerialize,\n  IActorQueryResultSerializeFixedMediaTypesArgs,\n  IActorQueryResultSerializeOutput } from '@comunica/bus-query-result-serialize';\nimport { ActorQueryResultSerializeFixedMediaTypes } from '@comunica/bus-query-result-serialize';\nimport type {\n  IActionContext, IQueryOperationResultBindings, IQueryOperationResultBoolean,\n  IQueryOperationResultQuads,\n} from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport * as RdfString from 'rdf-string';\nimport { Readable } from 'readable-stream';\n\n/**\n * A comunica JSON Query Result Serialize Actor.\n */\nexport class ActorQueryResultSerializeJson extends ActorQueryResultSerializeFixedMediaTypes {\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"application/json\": 1.0\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"application/json\": \"https://comunica.linkeddatafragments.org/#results_JSON\"\n   *     }} mediaTypeFormats\n   */\n  public constructor(args: IActorQueryResultSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  public async testHandleChecked(action: IActionSparqlSerialize, context: IActionContext): Promise<boolean> {\n    if (![ 'bindings', 'quads', 'boolean' ].includes(action.type)) {\n      throw new Error('This actor can only handle bindings or quad streams.');\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, mediaType: string, context: IActionContext):\n  Promise<IActorQueryResultSerializeOutput> {\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    let empty = true;\n    if (action.type === 'bindings') {\n      const resultStream = (<IQueryOperationResultBindings> action).bindingsStream;\n      data.push('[');\n      resultStream.on('error', error => data.emit('error', error));\n      resultStream.on('data', (element: RDF.Bindings) => {\n        data.push(empty ? '\\n' : ',\\n');\n        data.push(JSON.stringify(Object.fromEntries([ ...element ]\n          .map(([ key, value ]) => [ key.value, RdfString.termToString(value) ]))));\n        empty = false;\n      });\n      resultStream.on('end', () => {\n        data.push(empty ? ']\\n' : '\\n]\\n');\n        data.push(null);\n      });\n    } else if (action.type === 'quads') {\n      const resultStream = (<IQueryOperationResultQuads> action).quadStream;\n      data.push('[');\n      resultStream.on('error', error => data.emit('error', error));\n      resultStream.on('data', element => {\n        data.push(empty ? '\\n' : ',\\n');\n        data.push(JSON.stringify(RdfString.quadToStringQuad(element)));\n        empty = false;\n      });\n      resultStream.on('end', () => {\n        data.push(empty ? ']\\n' : '\\n]\\n');\n        data.push(null);\n      });\n    } else {\n      try {\n        data.push(`${JSON.stringify(await (<IQueryOperationResultBoolean> action).execute())}\\n`);\n        data.push(null);\n      } catch (error: unknown) {\n        setTimeout(() => data.emit('error', error));\n      }\n    }\n\n    return { data };\n  }\n}\n"]}