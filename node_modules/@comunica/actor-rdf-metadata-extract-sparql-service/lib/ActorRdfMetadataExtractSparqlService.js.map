{"version":3,"file":"ActorRdfMetadataExtractSparqlService.js","sourceRoot":"","sources":["ActorRdfMetadataExtractSparqlService.ts"],"names":[],"mappings":";;;AAEA,iFAA6E;AAE7E,uEAAiE;AAEjE;;GAEG;AACH,MAAa,oCAAqC,SAAQ,kDAAuB;IAG/E,YAAmB,IAA+C;QAChE,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAiC;QACjD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAiC;QAChD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,iBAAiB;YACjB,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAEpC,wEAAwE;YACxE,MAAM,QAAQ,GAAQ,EAAE,CAAC;YACzB,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;gBAChC,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,0DAA0D;oBACrF,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,WAAW,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,MAAM,CAAC,GAAG,CAAC,EAAE;oBAC9E,QAAQ,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC;wBAC3D,IAAA,kCAAU,EAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;wBAC3C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;oBAEpB,mGAAmG;oBACnG,IAAI,IAAI,CAAC,kBAAkB;wBACzB,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;wBAC/E,QAAQ,CAAC,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;qBAC5E;iBACF;qBAAM,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,8DAA8D,EAAE;oBAClG,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;iBAC3C;YACH,CAAC,CAAC,CAAC;YAEH,4CAA4C;YAC5C,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBAC7B,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAzCD,oFAyCC","sourcesContent":["import type { IActionRdfMetadataExtract, IActorRdfMetadataExtractOutput,\n  IActorRdfMetadataExtractArgs } from '@comunica/bus-rdf-metadata-extract';\nimport { ActorRdfMetadataExtract } from '@comunica/bus-rdf-metadata-extract';\nimport type { IActorTest } from '@comunica/core';\nimport { resolve as resolveIri } from 'relative-to-absolute-iri';\n\n/**\n * A comunica RDF Metadata Extract Actor for SPARQL service descriptions.\n */\nexport class ActorRdfMetadataExtractSparqlService extends ActorRdfMetadataExtract {\n  private readonly inferHttpsEndpoint: boolean;\n\n  public constructor(args: IActorRdfMetadataExtractSparqlServiceArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfMetadataExtract): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionRdfMetadataExtract): Promise<IActorRdfMetadataExtractOutput> {\n    return new Promise((resolve, reject) => {\n      // Forward errors\n      action.metadata.on('error', reject);\n\n      // Immediately resolve when a SPARQL service endpoint URL has been found\n      const metadata: any = {};\n      action.metadata.on('data', quad => {\n        if (quad.predicate.value === 'http://www.w3.org/ns/sparql-service-description#endpoint' &&\n          (quad.subject.termType === 'BlankNode' || quad.subject.value === action.url)) {\n          metadata.sparqlService = quad.object.termType === 'Literal' ?\n            resolveIri(quad.object.value, action.url) :\n            quad.object.value;\n\n          // Fix a common mistake in SPARQL endpoint setups where HTTPS SD's refer to a non-existing HTTP API\n          if (this.inferHttpsEndpoint &&\n            action.url.startsWith('https') && !metadata.sparqlService.startsWith('https')) {\n            metadata.sparqlService = metadata.sparqlService.replace('http:', 'https:');\n          }\n        } else if (quad.predicate.value === 'http://www.w3.org/ns/sparql-service-description#defaultGraph') {\n          metadata.defaultGraph = quad.object.value;\n        }\n      });\n\n      // If no value has been found, emit nothing.\n      action.metadata.on('end', () => {\n        resolve({ metadata });\n      });\n    });\n  }\n}\n\nexport interface IActorRdfMetadataExtractSparqlServiceArgs extends IActorRdfMetadataExtractArgs {\n  /**\n   * If HTTPS endpoints should be forcefully used if the original URL was HTTPS-based\n   * @default {true}\n   */\n  inferHttpsEndpoint: boolean;\n}\n"]}