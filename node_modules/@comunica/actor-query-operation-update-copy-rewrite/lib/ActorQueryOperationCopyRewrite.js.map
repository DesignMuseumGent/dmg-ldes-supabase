{"version":3,"file":"ActorQueryOperationCopyRewrite.js","sourceRoot":"","sources":["ActorQueryOperationCopyRewrite.ts"],"names":[],"mappings":";;;AACA,uEAAsG;AAItG,qDAA0C;AAE1C;;;GAGG;AACH,MAAa,8BAA+B,SAAQ,sDAA8C;IAGhG,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,IAAI,yBAAO,EAAE,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,SAAuB,EAAE,OAAuB;QACzE,yCAAmB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,YAAY,CAAC,iBAA+B,EAAE,OAAuB;QAC1E,kCAAkC;QAClC,IAAI,CAAC,OAAO,iBAAiB,CAAC,WAAW,KAAK,QAAQ,IAAI,OAAO,iBAAiB,CAAC,MAAM,KAAK,QAAQ;YAClG,iBAAiB,CAAC,WAAW,KAAK,iBAAiB,CAAC,MAAM,CAAC;YAC7D,CAAC,OAAO,iBAAiB,CAAC,WAAW,KAAK,QAAQ,IAAI,OAAO,iBAAiB,CAAC,MAAM,KAAK,QAAQ;gBAChG,iBAAiB,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,EAAE;YACnE,OAAO,OAAO,CAAC,OAAO,CAAC;gBACrB,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE;aACjC,CAAC,CAAC;SACJ;QAED,kDAAkD;QAClD,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC;YACnD,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC;YAC5D,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,EAAE,iBAAiB,CAAC,WAAW,EAAE,iBAAiB,CAAC,MAAM,CAAC;SAC1G,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;IACrE,CAAC;CACF;AAhCD,wEAgCC","sourcesContent":["import type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperation, ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport type { IActorTest } from '@comunica/core';\nimport type { IActionContext, IQueryOperationResult } from '@comunica/types';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport { Factory } from 'sparqlalgebrajs';\n\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor that\n * handles SPARQL copy operations.\n */\nexport class ActorQueryOperationCopyRewrite extends ActorQueryOperationTypedMediated<Algebra.Copy> {\n  private readonly factory: Factory;\n\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'copy');\n    this.factory = new Factory();\n  }\n\n  public async testOperation(operation: Algebra.Copy, context: IActionContext): Promise<IActorTest> {\n    ActorQueryOperation.throwOnReadOnly(context);\n    return true;\n  }\n\n  public runOperation(operationOriginal: Algebra.Copy, context: IActionContext): Promise<IQueryOperationResult> {\n    // No-op if source === destination\n    if ((typeof operationOriginal.destination === 'string' && typeof operationOriginal.source === 'string' &&\n        operationOriginal.destination === operationOriginal.source) ||\n      (typeof operationOriginal.destination !== 'string' && typeof operationOriginal.source !== 'string' &&\n        operationOriginal.destination.equals(operationOriginal.source))) {\n      return Promise.resolve({\n        type: 'void',\n        execute: () => Promise.resolve(),\n      });\n    }\n\n    // COPY is equivalent to drop destination, and add\n    const operation = this.factory.createCompositeUpdate([\n      this.factory.createDrop(operationOriginal.destination, true),\n      this.factory.createAdd(operationOriginal.source, operationOriginal.destination, operationOriginal.silent),\n    ]);\n    return this.mediatorQueryOperation.mediate({ operation, context });\n  }\n}\n"]}