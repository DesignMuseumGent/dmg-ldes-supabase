{"version":3,"file":"ActorHashBindingsSha1.js","sourceRoot":"","sources":["ActorHashBindingsSha1.ts"],"names":[],"mappings":";;;AACA,mEAAgE;AAEhE,qCAA+B;AAC/B,2CAA0C;AAE1C,MAAM,YAAY,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAE7C;;GAEG;AACH,MAAa,qBAAsB,SAAQ,qCAAiB;IACnD,KAAK,CAAC,IAAI,CAAC,MAA2B;QAC3C,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE;YAC/B,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,yDAAyD,CAAC,CAAC;SAC9F;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA2B;QAC1C,OAAO;YACL,YAAY,EAAE,QAAQ,CAAC,EAAE,CAAC,IAAA,cAAI,GAAE;iBAC7B,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,WAAW,CAAC,CAAE,GAAG,QAAQ,CAAE;iBACpD,GAAG,CAAC,CAAC,CAAE,GAAG,EAAE,KAAK,CAAE,EAAE,EAAE,CAAC,CAAE,IAAA,yBAAY,EAAC,GAAG,CAAC,EAAE,IAAA,yBAAY,EAAC,KAAK,CAAC,CAAE,CAAC,CAAC,CAAC,CAAC;iBACxE,MAAM,CAAC,KAAK,CAAC;YAChB,cAAc,EAAE,IAAI;SACrB,CAAC;IACJ,CAAC;CACF;AAjBD,sDAiBC","sourcesContent":["import type { IActionHashBindings, IActorHashBindingsOutput } from '@comunica/bus-hash-bindings';\nimport { ActorHashBindings } from '@comunica/bus-hash-bindings';\nimport type { IActorTest } from '@comunica/core';\nimport { sha1 } from 'hash.js';\nimport { termToString } from 'rdf-string';\n\nconst canonicalize = require('canonicalize');\n\n/**\n * A comunica Memento Http Actor.\n */\nexport class ActorHashBindingsSha1 extends ActorHashBindings {\n  public async test(action: IActionHashBindings): Promise<IActorTest> {\n    if (!action.allowHashCollisions) {\n      throw new Error(`Actor ${this.name} can not provide hash functions without hash collisions`);\n    }\n    return true;\n  }\n\n  public async run(action: IActionHashBindings): Promise<IActorHashBindingsOutput> {\n    return {\n      hashFunction: bindings => sha1()\n        .update(canonicalize(Object.fromEntries([ ...bindings ]\n          .map(([ key, value ]) => [ termToString(key), termToString(value) ]))))\n        .digest('hex'),\n      hashCollisions: true,\n    };\n  }\n}\n"]}