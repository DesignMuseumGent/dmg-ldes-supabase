{"version":3,"file":"ActorOptimizeQueryOperationJoinConnected.js","sourceRoot":"","sources":["ActorOptimizeQueryOperationJoinConnected.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  IActionOptimizeQueryOperation,\n  IActorOptimizeQueryOperationOutput,\n} from '@comunica/bus-optimize-query-operation';\nimport { ActorOptimizeQueryOperation } from '@comunica/bus-optimize-query-operation';\nimport type { IActorTest } from '@comunica/core';\nimport type { Algebra, Factory } from 'sparqlalgebrajs';\nimport { Util } from 'sparqlalgebrajs';\n\n/**\n * A comunica Join Connected Optimize Query Operation Actor.\n */\nexport class ActorOptimizeQueryOperationJoinConnected extends ActorOptimizeQueryOperation {\n  public async test(action: IActionOptimizeQueryOperation): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionOptimizeQueryOperation): Promise<IActorOptimizeQueryOperationOutput> {\n    const operation = Util.mapOperation(action.operation, {\n      join(op: Algebra.Join, factory: Factory) {\n        return {\n          recurse: false,\n          result: ActorOptimizeQueryOperationJoinConnected.cluster(op, factory),\n        };\n      },\n    });\n    return { operation, context: action.context };\n  }\n\n  /**\n   * Iteratively cluster join entries based on their overlapping variables.\n   * @param op A join operation.\n   * @param factory An algebra factory.\n   */\n  public static cluster(op: Algebra.Join, factory: Factory): Algebra.Join {\n    // Initialize each entry to be in a separate cluster\n    const initialClusters: IJoinCluster[] = op.input.map(subOp => ({\n      inScopeVariables: Object.fromEntries(Util.inScopeVariables(subOp).map(variable => [ variable.value, true ])),\n      entries: [ subOp ],\n    }));\n\n    // Iteratively merge clusters until they don't change anymore\n    let oldClusters: IJoinCluster[];\n    let newClusters: IJoinCluster[] = initialClusters;\n    do {\n      oldClusters = newClusters;\n      newClusters = ActorOptimizeQueryOperationJoinConnected.clusterIteration(oldClusters);\n    } while (oldClusters.length !== newClusters.length);\n\n    // Create new join operation of latest clusters\n    const subJoins = newClusters.map(cluster => factory.createJoin(cluster.entries));\n    return subJoins.length === 1 ? subJoins[0] : factory.createJoin(subJoins, false);\n  }\n\n  /**\n   * Perform a single clustering iteration.\n   * Clusters will be joined if they have overlapping variables.\n   * @param oldCluster\n   */\n  public static clusterIteration(oldCluster: IJoinCluster[]): IJoinCluster[] {\n    const newClusters: IJoinCluster[] = [];\n\n    for (const entry of oldCluster) {\n      // Try to add entry to a join cluster\n      let joined = false;\n      for (const newEntry of newClusters) {\n        if (ActorOptimizeQueryOperationJoinConnected\n          .haveOverlappingVariables(entry.inScopeVariables, newEntry.inScopeVariables)) {\n          newEntry.entries = [ ...newEntry.entries, ...entry.entries ];\n          newEntry.inScopeVariables = { ...newEntry.inScopeVariables, ...entry.inScopeVariables };\n          joined = true;\n          break;\n        }\n      }\n\n      // If none was found, create new cluster\n      if (!joined) {\n        newClusters.push({\n          inScopeVariables: entry.inScopeVariables,\n          entries: entry.entries,\n        });\n      }\n    }\n\n    return newClusters;\n  }\n\n  /**\n   * Check if the two given variable objects are overlapping.\n   * @param variablesA A variables objects.\n   * @param variablesB A variables objects.\n   */\n  public static haveOverlappingVariables(\n    variablesA: Record<string, boolean>,\n    variablesB: Record<string, boolean>,\n  ): boolean {\n    for (const variableA of Object.keys(variablesA)) {\n      if (variablesB[variableA]) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * A cluster of join entries.\n */\nexport interface IJoinCluster {\n  /**\n   * Union of all variables in scope within the join entries.\n   */\n  inScopeVariables: Record<string, boolean>;\n  /**\n   * Join entries\n   */\n  entries: Algebra.Operation[];\n}\n"]}