"use strict";
/* This file was automatically generated. Do not edit by hand. */
Object.defineProperty(exports, "__esModule", { value: true });
const { ns1, rdf, foaf, rr, ns5, owl, rdfs, ns8, vaem, ns10, ns11, cc, ns13, dc11, xsd, vann } = {
    'ns1': 'http://',
    'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'foaf': 'http://xmlns.com/foaf/0.1/',
    'rr': 'http://www.w3.org/ns/r2rml#',
    'ns5': 'http://richard.cyganiak.de/foaf.rdf#',
    'owl': 'http://www.w3.org/2002/07/owl#',
    'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
    'ns8': 'http://www.w3.org/',
    'vaem': 'http://www.linkedmodel.org/schema/vaem#',
    'ns10': 'http://www.w3.org/People/Ivan/',
    'ns11': 'http://purl.org/vocommons/voaf#',
    'cc': 'http://creativecommons.org/ns#',
    'ns13': 'http://creativecommons.org/licenses/by/3.0/',
    'dc11': 'http://purl.org/dc/elements/1.1/',
    'xsd': 'http://www.w3.org/2001/XMLSchema#',
    'vann': 'http://purl.org/vocab/vann/'
};
exports.default = ({ blankNode, literal, namedNode, quad }) => {
    const blankNodes = [];
    for (let i = 0; i < 40; i++) {
        blankNodes.push(blankNode());
    }
    return [
        quad(namedNode(`${ns1}boris.villazon.terrazas.name`), namedNode(`${rdf}type`), namedNode(`${foaf}Person`), namedNode(rr)),
        quad(namedNode(`${ns1}boris.villazon.terrazas.name`), namedNode(`${foaf}name`), literal(`Boris Villazon-Terrazas`), namedNode(rr)),
        quad(namedNode(`${ns5}cygri`), namedNode(`${rdf}type`), namedNode(`${foaf}Person`), namedNode(rr)),
        quad(namedNode(`${ns5}cygri`), namedNode(`${foaf}name`), literal(`Richard Cyganiak`), namedNode(rr)),
        quad(namedNode(`${rdf}Property`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rdfs}Class`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rdfs}Datatype`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rdfs}Resource`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(ns8), namedNode(`${rdf}type`), namedNode(`${foaf}Organization`), namedNode(rr)),
        quad(namedNode(ns8), namedNode(`${vaem}acronym`), literal(`W3C`), namedNode(rr)),
        quad(namedNode(ns8), namedNode(`${rdfs}label`), literal(`The World Wide Web Consortium (W3C)`, 'en'), namedNode(rr)),
        quad(namedNode(ns10), namedNode(`${rdf}type`), namedNode(`${foaf}Person`), namedNode(rr)),
        quad(namedNode(ns10), namedNode(`${foaf}name`), literal(`Ivan Herman`), namedNode(rr)),
        quad(namedNode(rr), namedNode(`${rdf}type`), namedNode(`${ns11}Vocabulary`), namedNode(rr)),
        quad(namedNode(rr), namedNode(`${rdf}type`), namedNode(`${owl}Ontology`), namedNode(rr)),
        quad(namedNode(rr), namedNode(`${cc}license`), namedNode(ns13), namedNode(rr)),
        quad(namedNode(rr), namedNode(`${dc11}contributor`), namedNode(`${ns1}boris.villazon.terrazas.name`), namedNode(rr)),
        quad(namedNode(rr), namedNode(`${dc11}contributor`), namedNode(ns10), namedNode(rr)),
        quad(namedNode(rr), namedNode(`${dc11}creator`), namedNode(`${ns5}cygri`), namedNode(rr)),
        quad(namedNode(rr), namedNode(`${dc11}description`), literal(`RDB to RDF Mapping Language - Vocabulary`, 'en'), namedNode(rr)),
        quad(namedNode(rr), namedNode(`${dc11}issued`), literal(`2012-01-24`, namedNode(`${xsd}date`)), namedNode(rr)),
        quad(namedNode(rr), namedNode(`${dc11}modified`), literal(`2012-07-16`, namedNode(`${xsd}date`)), namedNode(rr)),
        quad(namedNode(rr), namedNode(`${dc11}publisher`), namedNode(ns8), namedNode(rr)),
        quad(namedNode(rr), namedNode(`${dc11}title`), literal(`R2RML vocabulary`, 'en'), namedNode(rr)),
        quad(namedNode(rr), namedNode(`${vann}preferredNamespacePrefix`), literal(`rr`), namedNode(rr)),
        quad(namedNode(rr), namedNode(`${vann}preferredNamespaceUri`), literal(`http://www.w3.org/ns/r2rml#`), namedNode(rr)),
        quad(namedNode(`${rr}BaseTableOrView`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rr}BaseTableOrView`), namedNode(`${rdfs}subClassOf`), namedNode(`${rr}LogicalTable`), namedNode(rr)),
        quad(namedNode(`${rr}LogicalTable`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rr}LogicalTable`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(rr)),
        quad(namedNode(`${rr}LogicalTable`), namedNode(`${rdfs}comment`), literal(`Represents a logical table.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}BlankNode`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rr}BlankNode`), namedNode(`${rdfs}comment`), literal(`Denotes a blank node, used with termType`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}GraphMap`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rr}GraphMap`), namedNode(`${rdfs}subClassOf`), namedNode(`${rr}TermMap`), namedNode(rr)),
        quad(namedNode(`${rr}GraphMap`), namedNode(`${rdfs}comment`), literal(`Represents a graph map.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}TermMap`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rr}TermMap`), namedNode(`${rdfs}label`), literal(`Term Map`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}TermMap`), namedNode(`${rdfs}comment`), literal(`A function that generates an RDF term from a logical table row.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}IRI`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rr}IRI`), namedNode(`${rdfs}comment`), literal(`Denotes an IRI, used with termpType.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}Join`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rr}Join`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(rr)),
        quad(namedNode(`${rr}Join`), namedNode(`${rdfs}subClassOf`), blankNodes[0], namedNode(rr)),
        quad(namedNode(`${rr}Join`), namedNode(`${rdfs}subClassOf`), blankNodes[1], namedNode(rr)),
        quad(namedNode(`${rr}Join`), namedNode(`${rdfs}subClassOf`), blankNodes[2], namedNode(rr)),
        quad(namedNode(`${rr}Join`), namedNode(`${rdfs}subClassOf`), blankNodes[3], namedNode(rr)),
        quad(namedNode(`${rr}Join`), namedNode(`${rdfs}comment`), literal(`Represents a join condition.`, 'en'), namedNode(rr)),
        quad(blankNodes[0], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[0], namedNode(`${owl}maxQualifiedCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(blankNodes[0], namedNode(`${owl}onDataRange`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(blankNodes[0], namedNode(`${owl}onProperty`), namedNode(`${rr}child`), namedNode(rr)),
        quad(blankNodes[1], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[1], namedNode(`${owl}onDataRange`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(blankNodes[1], namedNode(`${owl}onProperty`), namedNode(`${rr}parent`), namedNode(rr)),
        quad(blankNodes[1], namedNode(`${owl}minQualifiedCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(blankNodes[2], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[2], namedNode(`${owl}onDataRange`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(blankNodes[2], namedNode(`${owl}onProperty`), namedNode(`${rr}child`), namedNode(rr)),
        quad(blankNodes[2], namedNode(`${owl}minQualifiedCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(blankNodes[3], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[3], namedNode(`${owl}maxQualifiedCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(blankNodes[3], namedNode(`${owl}onDataRange`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(blankNodes[3], namedNode(`${owl}onProperty`), namedNode(`${rr}parent`), namedNode(rr)),
        quad(namedNode(`${rr}Literal`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rr}Literal`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(rr)),
        quad(namedNode(`${rr}Literal`), namedNode(`${rdfs}comment`), literal(`Denotes a Literal, used with termType.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}ObjectMap`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rr}ObjectMap`), namedNode(`${rdfs}subClassOf`), namedNode(`${rr}TermMap`), namedNode(rr)),
        quad(namedNode(`${rr}ObjectMap`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(rr)),
        quad(namedNode(`${rr}ObjectMap`), namedNode(`${rdfs}subClassOf`), blankNodes[4], namedNode(rr)),
        quad(namedNode(`${rr}ObjectMap`), namedNode(`${rdfs}subClassOf`), blankNodes[5], namedNode(rr)),
        quad(namedNode(`${rr}ObjectMap`), namedNode(`${rdfs}subClassOf`), blankNodes[6], namedNode(rr)),
        quad(namedNode(`${rr}ObjectMap`), namedNode(`${rdfs}subClassOf`), blankNodes[7], namedNode(rr)),
        quad(namedNode(`${rr}ObjectMap`), namedNode(`${rdfs}comment`), literal(`Represents an object map.`, 'en'), namedNode(rr)),
        quad(blankNodes[4], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[4], namedNode(`${owl}onDataRange`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(blankNodes[4], namedNode(`${owl}onProperty`), namedNode(`${rr}language`), namedNode(rr)),
        quad(blankNodes[4], namedNode(`${owl}minQualifiedCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(blankNodes[5], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[5], namedNode(`${owl}onProperty`), namedNode(`${rr}object`), namedNode(rr)),
        quad(blankNodes[5], namedNode(`${owl}onClass`), namedNode(`${rdfs}Resource`), namedNode(rr)),
        quad(blankNodes[5], namedNode(`${owl}minQualifiedCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(blankNodes[6], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[6], namedNode(`${owl}maxQualifiedCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(blankNodes[6], namedNode(`${owl}onProperty`), namedNode(`${rr}object`), namedNode(rr)),
        quad(blankNodes[6], namedNode(`${owl}onClass`), namedNode(`${rdfs}Resource`), namedNode(rr)),
        quad(blankNodes[7], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[7], namedNode(`${owl}onProperty`), namedNode(`${rr}datatype`), namedNode(rr)),
        quad(blankNodes[7], namedNode(`${owl}onClass`), namedNode(`${rdfs}Datatype`), namedNode(rr)),
        quad(blankNodes[7], namedNode(`${owl}minQualifiedCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(namedNode(`${rr}PredicateMap`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rr}PredicateMap`), namedNode(`${rdfs}subClassOf`), namedNode(`${rr}TermMap`), namedNode(rr)),
        quad(namedNode(`${rr}PredicateMap`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(rr)),
        quad(namedNode(`${rr}PredicateMap`), namedNode(`${rdfs}subClassOf`), blankNodes[8], namedNode(rr)),
        quad(namedNode(`${rr}PredicateMap`), namedNode(`${rdfs}comment`), literal(`Represents a predicate map.`, 'en'), namedNode(rr)),
        quad(blankNodes[8], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[8], namedNode(`${owl}onProperty`), namedNode(`${rr}predicate`), namedNode(rr)),
        quad(blankNodes[8], namedNode(`${owl}onClass`), namedNode(`${rdf}Property`), namedNode(rr)),
        quad(blankNodes[8], namedNode(`${owl}qualifiedCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(namedNode(`${rr}PredicateObjectMap`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rr}PredicateObjectMap`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(rr)),
        quad(namedNode(`${rr}PredicateObjectMap`), namedNode(`${rdfs}subClassOf`), blankNodes[9], namedNode(rr)),
        quad(namedNode(`${rr}PredicateObjectMap`), namedNode(`${rdfs}subClassOf`), blankNodes[10], namedNode(rr)),
        quad(namedNode(`${rr}PredicateObjectMap`), namedNode(`${rdfs}comment`), literal(`Represents a predicate-object map.`, 'en'), namedNode(rr)),
        quad(blankNodes[9], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[9], namedNode(`${owl}onProperty`), namedNode(`${rr}predicateMap`), namedNode(rr)),
        quad(blankNodes[9], namedNode(`${owl}onClass`), namedNode(`${rr}PredicateMap`), namedNode(rr)),
        quad(blankNodes[9], namedNode(`${owl}minQualifiedCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(blankNodes[10], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[10], namedNode(`${owl}onProperty`), namedNode(`${rr}objectMap`), namedNode(rr)),
        quad(blankNodes[10], namedNode(`${owl}onClass`), namedNode(`${rr}ObjectMap`), namedNode(rr)),
        quad(blankNodes[10], namedNode(`${owl}qualifiedCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(namedNode(`${rr}R2RMLView`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rr}R2RMLView`), namedNode(`${rdfs}subClassOf`), namedNode(`${rr}LogicalTable`), namedNode(rr)),
        quad(namedNode(`${rr}RefObjectMap`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rr}RefObjectMap`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(rr)),
        quad(namedNode(`${rr}RefObjectMap`), namedNode(`${rdfs}comment`), literal(`Denotes a reference to an object map.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}SQL2008`), namedNode(`${rdf}type`), namedNode(`${owl}NamedIndividual`), namedNode(rr)),
        quad(namedNode(`${rr}SQL2008`), namedNode(`${rdfs}comment`), literal(`Core SQL 2008`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}SubjectMap`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rr}SubjectMap`), namedNode(`${rdfs}subClassOf`), namedNode(`${rr}TermMap`), namedNode(rr)),
        quad(namedNode(`${rr}SubjectMap`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(rr)),
        quad(namedNode(`${rr}SubjectMap`), namedNode(`${rdfs}subClassOf`), blankNodes[11], namedNode(rr)),
        quad(namedNode(`${rr}SubjectMap`), namedNode(`${rdfs}comment`), literal(`Represents a subject map.`, 'en'), namedNode(rr)),
        quad(blankNodes[11], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[11], namedNode(`${owl}onProperty`), namedNode(`${rr}class`), namedNode(rr)),
        quad(blankNodes[11], namedNode(`${owl}onClass`), namedNode(`${rdfs}Class`), namedNode(rr)),
        quad(blankNodes[11], namedNode(`${owl}minQualifiedCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(namedNode(`${rr}TriplesMap`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(namedNode(`${rr}TriplesMap`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(rr)),
        quad(namedNode(`${rr}TriplesMap`), namedNode(`${rdfs}subClassOf`), blankNodes[12], namedNode(rr)),
        quad(namedNode(`${rr}TriplesMap`), namedNode(`${rdfs}subClassOf`), blankNodes[13], namedNode(rr)),
        quad(namedNode(`${rr}TriplesMap`), namedNode(`${rdfs}comment`), literal(`Represents a triples map.`, 'en'), namedNode(rr)),
        quad(blankNodes[12], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[12], namedNode(`${owl}onProperty`), namedNode(`${rr}subjectMap`), namedNode(rr)),
        quad(blankNodes[12], namedNode(`${owl}onClass`), namedNode(`${rr}SubjectMap`), namedNode(rr)),
        quad(blankNodes[12], namedNode(`${owl}qualifiedCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(blankNodes[13], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[13], namedNode(`${owl}onProperty`), namedNode(`${rr}logicalTable`), namedNode(rr)),
        quad(blankNodes[13], namedNode(`${owl}onClass`), namedNode(`${rr}LogicalTable`), namedNode(rr)),
        quad(blankNodes[13], namedNode(`${owl}qualifiedCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(namedNode(`${rr}child`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(rr)),
        quad(namedNode(`${rr}child`), namedNode(`${rdfs}comment`), literal(`Names a column in the child table of a join.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}child`), namedNode(`${rdfs}domain`), namedNode(`${rr}Join`), namedNode(rr)),
        quad(namedNode(`${rr}child`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(namedNode(`${rr}class`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}class`), namedNode(`${rdfs}comment`), literal(`The subject value generated for a logical table row will be asserted as an instance of this RDFS class.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}class`), namedNode(`${rdfs}domain`), namedNode(`${rr}SubjectMap`), namedNode(rr)),
        quad(namedNode(`${rr}class`), namedNode(`${rdfs}range`), namedNode(`${rdfs}Class`), namedNode(rr)),
        quad(namedNode(`${rr}column`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(rr)),
        quad(namedNode(`${rr}column`), namedNode(`${rdfs}comment`), literal(`Name of a column in the logical table. When generating RDF triples from a logical table row, value from the specified column is used as the subject, predicate, or object (based upon the specific domain).`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}column`), namedNode(`${rdfs}domain`), namedNode(`${rr}TermMap`), namedNode(rr)),
        quad(namedNode(`${rr}column`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(namedNode(`${rr}constant`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}datatype`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}datatype`), namedNode(`${rdfs}comment`), literal(`Specifies the datatype of the object component for the generated triple from a logical table row.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}datatype`), namedNode(`${rdfs}domain`), namedNode(`${rr}ObjectMap`), namedNode(rr)),
        quad(namedNode(`${rr}datatype`), namedNode(`${rdfs}range`), namedNode(`${rdfs}Datatype`), namedNode(rr)),
        quad(namedNode(`${rr}defaultGraph`), namedNode(`${rdf}type`), namedNode(`${owl}NamedIndividual`), namedNode(rr)),
        quad(namedNode(`${rr}defaultGraph`), namedNode(`${rdfs}comment`), literal(`Denotes a default graph`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}graph`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}graph`), namedNode(`${rdfs}comment`), literal(`An IRI reference for use as the graph name of all triples generated with the GraphMap.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}graph`), namedNode(`${rdfs}domain`), blankNodes[14], namedNode(rr)),
        quad(blankNodes[14], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(blankNodes[14], namedNode(`${owl}intersectionOf`), blankNodes[15], namedNode(rr)),
        quad(namedNode(`${rr}graphMap`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}graphMap`), namedNode(`${rdfs}comment`), literal(`Specifies a GraphMap. When used with a SubjectMap element, all the RDF triples generated from a logical row will be stored in the specified named graph. Otherwise, the RDF triple generated using the (predicate, object) pair will be stored in the specified named graph.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}graphMap`), namedNode(`${rdfs}domain`), blankNodes[16], namedNode(rr)),
        quad(namedNode(`${rr}graphMap`), namedNode(`${rdfs}range`), namedNode(`${rr}GraphMap`), namedNode(rr)),
        quad(blankNodes[16], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(blankNodes[16], namedNode(`${owl}unionOf`), blankNodes[17], namedNode(rr)),
        quad(namedNode(`${rr}inverseExpression`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(rr)),
        quad(namedNode(`${rr}inverseExpression`), namedNode(`${rdfs}comment`), literal(`An expression that allows, at query processing time, use of index-based access to the the (underlying) relational tables, instead of simply retrieving the table rows first and then applying a filter. This property is useful for retrieval based on conditions involving subject, predicate, or object generated from logical table column(s) and involves some transformation.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}inverseExpression`), namedNode(`${rdfs}domain`), namedNode(`${rr}TermMap`), namedNode(rr)),
        quad(namedNode(`${rr}inverseExpression`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(namedNode(`${rr}joinCondition`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}joinCondition`), namedNode(`${rdfs}comment`), literal(`Specifies the join condition for joining the child logical table with the parent logical table of the foreign key constraint.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}joinCondition`), namedNode(`${rdfs}domain`), namedNode(`${rr}RefObjectMap`), namedNode(rr)),
        quad(namedNode(`${rr}joinCondition`), namedNode(`${rdfs}range`), namedNode(`${rr}Join`), namedNode(rr)),
        quad(namedNode(`${rr}language`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(rr)),
        quad(namedNode(`${rr}language`), namedNode(`${rdfs}comment`), literal(`Specified the language for the object component for the generated triple from a logical table row.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}language`), namedNode(`${rdfs}domain`), namedNode(`${rr}ObjectMap`), namedNode(rr)),
        quad(namedNode(`${rr}language`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(namedNode(`${rr}logicalTable`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}logicalTable`), namedNode(`${rdfs}comment`), literal(`Definition of logical table to be mapped.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}logicalTable`), namedNode(`${rdfs}domain`), namedNode(`${rr}TriplesMap`), namedNode(rr)),
        quad(namedNode(`${rr}logicalTable`), namedNode(`${rdfs}range`), namedNode(`${rr}LogicalTable`), namedNode(rr)),
        quad(namedNode(`${rr}object`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}object`), namedNode(`${rdfs}comment`), literal(`Specifies the object for the generated triple from the logical table row.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}object`), namedNode(`${rdfs}domain`), blankNodes[18], namedNode(rr)),
        quad(namedNode(`${rr}object`), namedNode(`${rdfs}range`), namedNode(`${rdfs}Resource`), namedNode(rr)),
        quad(blankNodes[18], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(blankNodes[18], namedNode(`${owl}intersectionOf`), blankNodes[19], namedNode(rr)),
        quad(namedNode(`${rr}objectMap`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}objectMap`), namedNode(`${rdfs}comment`), literal(`An ObjectMap element to generate the object component of the (predicate, object) pair from a logical table row.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}objectMap`), namedNode(`${rdfs}domain`), namedNode(`${rr}PredicateObjectMap`), namedNode(rr)),
        quad(namedNode(`${rr}objectMap`), namedNode(`${rdfs}range`), blankNodes[20], namedNode(rr)),
        quad(blankNodes[20], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(blankNodes[20], namedNode(`${owl}unionOf`), blankNodes[21], namedNode(rr)),
        quad(namedNode(`${rr}parent`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(rr)),
        quad(namedNode(`${rr}parent`), namedNode(`${rdfs}comment`), literal(`Names a column in the parent table of a join.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}parent`), namedNode(`${rdfs}domain`), namedNode(`${rr}Join`), namedNode(rr)),
        quad(namedNode(`${rr}parent`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(namedNode(`${rr}parentTriplesMap`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}parentTriplesMap`), namedNode(`${rdfs}comment`), literal(`Specifies the TriplesMap element corresponding to the parent logical table of the foreign key constraint.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}parentTriplesMap`), namedNode(`${rdfs}domain`), namedNode(`${rr}RefObjectMap`), namedNode(rr)),
        quad(namedNode(`${rr}parentTriplesMap`), namedNode(`${rdfs}range`), namedNode(`${rr}TriplesMap`), namedNode(rr)),
        quad(namedNode(`${rr}predicate`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}predicate`), namedNode(`${rdfs}comment`), literal(`Specifies the predicate for the generated triple from the logical table row.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}predicate`), namedNode(`${rdfs}domain`), blankNodes[22], namedNode(rr)),
        quad(namedNode(`${rr}predicate`), namedNode(`${rdfs}range`), namedNode(`${rdf}Property`), namedNode(rr)),
        quad(blankNodes[22], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(blankNodes[22], namedNode(`${owl}intersectionOf`), blankNodes[23], namedNode(rr)),
        quad(namedNode(`${rr}predicateMap`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}predicateMap`), namedNode(`${rdfs}comment`), literal(`A PredicateMap element to generate the predicate component of the (predicate, object) pair from a logical table row.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}predicateMap`), namedNode(`${rdfs}domain`), namedNode(`${rr}PredicateObjectMap`), namedNode(rr)),
        quad(namedNode(`${rr}predicateMap`), namedNode(`${rdfs}range`), namedNode(`${rr}PredicateMap`), namedNode(rr)),
        quad(namedNode(`${rr}predicateObjectMap`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}predicateObjectMap`), namedNode(`${rdfs}comment`), literal(`A PredicateObjectMap element to generate (predicate, object) pair from a logical table row.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}predicateObjectMap`), namedNode(`${rdfs}range`), namedNode(`${rr}PredicateObjectMap`), namedNode(rr)),
        quad(namedNode(`${rr}sqlQuery`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(rr)),
        quad(namedNode(`${rr}sqlQuery`), namedNode(`${rdfs}comment`), literal(`A valid SQL query.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}sqlQuery`), namedNode(`${rdfs}domain`), namedNode(`${rr}R2RMLView`), namedNode(rr)),
        quad(namedNode(`${rr}sqlQuery`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(namedNode(`${rr}sqlVersion`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}sqlVersion`), namedNode(`${rdfs}comment`), literal(`An identifier for a SQL version.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}sqlVersion`), namedNode(`${rdfs}domain`), namedNode(`${rr}R2RMLView`), namedNode(rr)),
        quad(namedNode(`${rr}subject`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}subject`), namedNode(`${rdfs}comment`), literal(`An IRI reference for use as subject for all the RDF triples generated from a logical table row.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}subject`), namedNode(`${rdfs}domain`), blankNodes[24], namedNode(rr)),
        quad(blankNodes[24], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(blankNodes[24], namedNode(`${owl}intersectionOf`), blankNodes[25], namedNode(rr)),
        quad(namedNode(`${rr}subjectMap`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}subjectMap`), namedNode(`${rdfs}comment`), literal(`A SubjectMap element to generate a subject from a logical table row.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}subjectMap`), namedNode(`${rdfs}domain`), namedNode(`${rr}TriplesMap`), namedNode(rr)),
        quad(namedNode(`${rr}subjectMap`), namedNode(`${rdfs}range`), namedNode(`${rr}SubjectMap`), namedNode(rr)),
        quad(namedNode(`${rr}tableName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(rr)),
        quad(namedNode(`${rr}tableName`), namedNode(`${rdfs}comment`), literal(`Schema-qualified name of a table or view.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}tableName`), namedNode(`${rdfs}domain`), namedNode(`${rr}BaseTableOrView`), namedNode(rr)),
        quad(namedNode(`${rr}tableName`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(namedNode(`${rr}template`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(rr)),
        quad(namedNode(`${rr}template`), namedNode(`${rdfs}comment`), literal(`A template (format string) to specify how to generate a value for a subject, predicate, or object, using one or more columns from a logical table row.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}template`), namedNode(`${rdfs}domain`), namedNode(`${rr}TermMap`), namedNode(rr)),
        quad(namedNode(`${rr}template`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(namedNode(`${rr}termType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(rr)),
        quad(namedNode(`${rr}termType`), namedNode(`${rdfs}comment`), literal(`A string indicating whether subject or object generated using the value from column name specified for rr:column should be an IRI reference, blank node, or a literal.`, 'en'), namedNode(rr)),
        quad(namedNode(`${rr}termType`), namedNode(`${rdfs}domain`), namedNode(`${rr}TermMap`), namedNode(rr)),
        quad(namedNode(`${rr}termType`), namedNode(`${rdfs}range`), blankNodes[26], namedNode(rr)),
        quad(blankNodes[26], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(rr)),
        quad(blankNodes[26], namedNode(`${owl}unionOf`), blankNodes[27], namedNode(rr)),
        quad(blankNodes[23], namedNode(`${rdf}first`), namedNode(`${rr}PredicateMap`), namedNode(rr)),
        quad(blankNodes[23], namedNode(`${rdf}rest`), blankNodes[28], namedNode(rr)),
        quad(blankNodes[19], namedNode(`${rdf}first`), namedNode(`${rr}ObjectMap`), namedNode(rr)),
        quad(blankNodes[19], namedNode(`${rdf}rest`), blankNodes[29], namedNode(rr)),
        quad(blankNodes[30], namedNode(`${rdf}first`), namedNode(`${rr}RefObjectMap`), namedNode(rr)),
        quad(blankNodes[30], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(rr)),
        quad(blankNodes[29], namedNode(`${rdf}first`), blankNodes[31], namedNode(rr)),
        quad(blankNodes[29], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(rr)),
        quad(blankNodes[27], namedNode(`${rdf}first`), namedNode(`${rr}BlankNode`), namedNode(rr)),
        quad(blankNodes[27], namedNode(`${rdf}rest`), blankNodes[32], namedNode(rr)),
        quad(blankNodes[28], namedNode(`${rdf}first`), blankNodes[33], namedNode(rr)),
        quad(blankNodes[28], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(rr)),
        quad(blankNodes[17], namedNode(`${rdf}first`), namedNode(`${rr}PredicateObjectMap`), namedNode(rr)),
        quad(blankNodes[17], namedNode(`${rdf}rest`), blankNodes[34], namedNode(rr)),
        quad(blankNodes[34], namedNode(`${rdf}first`), namedNode(`${rr}SubjectMap`), namedNode(rr)),
        quad(blankNodes[34], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(rr)),
        quad(blankNodes[15], namedNode(`${rdf}first`), namedNode(`${rr}GraphMap`), namedNode(rr)),
        quad(blankNodes[15], namedNode(`${rdf}rest`), blankNodes[35], namedNode(rr)),
        quad(blankNodes[35], namedNode(`${rdf}first`), blankNodes[36], namedNode(rr)),
        quad(blankNodes[35], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(rr)),
        quad(blankNodes[32], namedNode(`${rdf}first`), namedNode(`${rr}IRI`), namedNode(rr)),
        quad(blankNodes[32], namedNode(`${rdf}rest`), blankNodes[37], namedNode(rr)),
        quad(blankNodes[25], namedNode(`${rdf}first`), namedNode(`${rr}SubjectMap`), namedNode(rr)),
        quad(blankNodes[25], namedNode(`${rdf}rest`), blankNodes[38], namedNode(rr)),
        quad(blankNodes[38], namedNode(`${rdf}first`), blankNodes[39], namedNode(rr)),
        quad(blankNodes[38], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(rr)),
        quad(blankNodes[21], namedNode(`${rdf}first`), namedNode(`${rr}ObjectMap`), namedNode(rr)),
        quad(blankNodes[21], namedNode(`${rdf}rest`), blankNodes[30], namedNode(rr)),
        quad(blankNodes[31], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[31], namedNode(`${owl}maxQualifiedCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(blankNodes[31], namedNode(`${owl}onDataRange`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(blankNodes[31], namedNode(`${owl}onProperty`), namedNode(`${rr}column`), namedNode(rr)),
        quad(blankNodes[39], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[39], namedNode(`${owl}maxQualifiedCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(blankNodes[39], namedNode(`${owl}onDataRange`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(blankNodes[39], namedNode(`${owl}onProperty`), namedNode(`${rr}column`), namedNode(rr)),
        quad(blankNodes[33], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[33], namedNode(`${owl}maxQualifiedCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(blankNodes[33], namedNode(`${owl}onDataRange`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(blankNodes[33], namedNode(`${owl}onProperty`), namedNode(`${rr}column`), namedNode(rr)),
        quad(blankNodes[36], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(rr)),
        quad(blankNodes[36], namedNode(`${owl}maxQualifiedCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(rr)),
        quad(blankNodes[36], namedNode(`${owl}onDataRange`), namedNode(`${xsd}string`), namedNode(rr)),
        quad(blankNodes[36], namedNode(`${owl}onProperty`), namedNode(`${rr}template`), namedNode(rr)),
        quad(blankNodes[37], namedNode(`${rdf}first`), namedNode(`${rr}Literal`), namedNode(rr)),
        quad(blankNodes[37], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(rr)),
    ];
};
