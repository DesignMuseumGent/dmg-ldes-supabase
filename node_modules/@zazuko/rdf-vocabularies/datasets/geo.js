"use strict";
/* This file was automatically generated. Do not edit by hand. */
Object.defineProperty(exports, "__esModule", { value: true });
const { geo, dc11, xsd, rdf, owl, rdfs, ns7, ns8, skos, ns10, ns11, ns12, ns13 } = {
    'geo': 'http://www.opengis.net/ont/geosparql#',
    'dc11': 'http://purl.org/dc/elements/1.1/',
    'xsd': 'http://www.w3.org/2001/XMLSchema#',
    'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'owl': 'http://www.w3.org/2002/07/owl#',
    'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
    'ns7': 'http://www.opengis.net/ont/',
    'ns8': 'http://www.opengis.net/spec/geosparql/',
    'skos': 'http://www.w3.org/2004/02/skos/core#',
    'ns10': 'http://www.opengis.net/doc/IS/geosparql/',
    'ns11': 'http://www.opengis.net/def/function/ogc-geosparql/',
    'ns12': 'http://www.opengis.net/def/rule/ogc-geosparql/',
    'ns13': 'http://www.w3.org/2004/02/skos/'
};
exports.default = ({ literal, namedNode, quad }) => {
    return [
        quad(namedNode(`${geo}Feature`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}Feature`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}Feature`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}Feature`), namedNode(`${dc11}description`), literal(`
      This class represents the top-level feature type. This class is 
      equivalent to GFI_Feature defined in ISO 19156:2011, and it is 
      superclass of all feature types.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}Feature`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(geo)),
        quad(namedNode(`${geo}Feature`), namedNode(`${rdfs}comment`), literal(`
      This class represents the top-level feature type. This class is 
      equivalent to GFI_Feature defined in ISO 19156:2011, and it is 
      superclass of all feature types.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}Feature`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}Feature`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}Feature`), namedNode(`${rdfs}label`), literal(`Feature`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}Feature`), namedNode(`${rdfs}subClassOf`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}Feature`), namedNode(`${owl}disjointWith`), namedNode(`${geo}Geometry`), namedNode(geo)),
        quad(namedNode(`${geo}Feature`), namedNode(`${skos}definition`), literal(`
      This class represents the top-level feature type. This class is 
      equivalent to GFI_Feature defined in ISO 19156:2011, and it is 
      superclass of all feature types.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}Feature`), namedNode(`${skos}prefLabel`), literal(`Feature`, 'en'), namedNode(geo)),
        quad(namedNode(`${ns7}geosparql`), namedNode(`${dc11}creator`), literal(`Open Geospatial Consortium`), namedNode(geo)),
        quad(namedNode(`${ns7}geosparql`), namedNode(`${dc11}date`), literal(`2012-04-30`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${ns7}geosparql`), namedNode(`${dc11}description`), literal(`An RDF/OWL vocabulary for representing spatial information`), namedNode(geo)),
        quad(namedNode(`${ns7}geosparql`), namedNode(`${rdf}type`), namedNode(`${owl}Ontology`), namedNode(geo)),
        quad(namedNode(`${ns7}geosparql`), namedNode(`${dc11}source`), literal(`OGC GeoSPARQL â€“ A Geographic Query Language for RDF Data OGC 11-052r5`), namedNode(geo)),
        quad(namedNode(`${ns7}geosparql`), namedNode(`${dc11}source`), namedNode(`${ns10}1.0`), namedNode(geo)),
        quad(namedNode(`${ns7}geosparql`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}1.0`), namedNode(geo)),
        quad(namedNode(`${ns7}geosparql`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns11}1.0`), namedNode(geo)),
        quad(namedNode(`${ns7}geosparql`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns12}1.0`), namedNode(geo)),
        quad(namedNode(`${ns7}geosparql`), namedNode(`${owl}imports`), namedNode(dc11), namedNode(geo)),
        quad(namedNode(`${ns7}geosparql`), namedNode(`${owl}imports`), namedNode(`${ns7}gml`), namedNode(geo)),
        quad(namedNode(`${ns7}geosparql`), namedNode(`${owl}imports`), namedNode(`${ns7}sf`), namedNode(geo)),
        quad(namedNode(`${ns7}geosparql`), namedNode(`${owl}imports`), namedNode(`${ns13}core`), namedNode(geo)),
        quad(namedNode(`${ns7}geosparql`), namedNode(`${owl}versionInfo`), literal(`OGC GeoSPARQL 1.0`), namedNode(geo)),
        quad(namedNode(`${geo}SpatialObject`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}SpatialObject`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}SpatialObject`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}SpatialObject`), namedNode(`${dc11}description`), literal(`
      The class spatial-object represents everything that can have 
      a spatial representation. It is superclass of feature and geometry.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}SpatialObject`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(geo)),
        quad(namedNode(`${geo}SpatialObject`), namedNode(`${rdfs}comment`), literal(`
      The class spatial-object represents everything that can have 
      a spatial representation. It is superclass of feature and geometry.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}SpatialObject`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}SpatialObject`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}SpatialObject`), namedNode(`${rdfs}label`), literal(`SpatialObject`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}SpatialObject`), namedNode(`${skos}definition`), literal(`
      The class spatial-object represents everything that can have 
      a spatial representation. It is superclass of feature and geometry.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}SpatialObject`), namedNode(`${skos}prefLabel`), literal(`SpatialObject`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}Geometry`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}Geometry`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}Geometry`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}Geometry`), namedNode(`${dc11}description`), literal(`
      The class represents the top-level geometry type. This class is 
      equivalent to the UML class GM_Object defined in ISO 19107, and 
      it is superclass of all geometry types.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}Geometry`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(geo)),
        quad(namedNode(`${geo}Geometry`), namedNode(`${rdfs}comment`), literal(`
      The class represents the top-level geometry type. This class is 
      equivalent to the UML class GM_Object defined in ISO 19107, and 
      it is superclass of all geometry types.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}Geometry`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}Geometry`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}Geometry`), namedNode(`${rdfs}label`), literal(`Geometry`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}Geometry`), namedNode(`${rdfs}subClassOf`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}Geometry`), namedNode(`${owl}disjointWith`), namedNode(`${geo}Feature`), namedNode(geo)),
        quad(namedNode(`${geo}Geometry`), namedNode(`${skos}definition`), literal(`
      The class represents the top-level geometry type. This class is 
      equivalent to the UML class GM_Object defined in ISO 19107, and 
      it is superclass of all geometry types.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}Geometry`), namedNode(`${skos}prefLabel`), literal(`Geometry`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}asGML`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}asGML`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}asGML`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}asGML`), namedNode(`${dc11}description`), literal(`
      The GML serialization of a geometry
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}asGML`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(geo)),
        quad(namedNode(`${geo}asGML`), namedNode(`${rdfs}comment`), literal(`
      The GML serialization of a geometry
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}asGML`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}asGML`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}asGML`), namedNode(`${rdfs}label`), literal(`asGML`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}asGML`), namedNode(`${skos}definition`), literal(`
      The GML serialization of a geometry
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}asGML`), namedNode(`${skos}prefLabel`), literal(`asGML`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}asGML`), namedNode(`${rdfs}domain`), namedNode(`${geo}Geometry`), namedNode(geo)),
        quad(namedNode(`${geo}asGML`), namedNode(`${rdfs}range`), namedNode(`${geo}gmlLiteral`), namedNode(geo)),
        quad(namedNode(`${geo}asGML`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${geo}hasSerialization`), namedNode(geo)),
        quad(namedNode(`${geo}gmlLiteral`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}gmlLiteral`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}gmlLiteral`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}gmlLiteral`), namedNode(`${dc11}description`), literal(`
      A GML serialization of a geometry object.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}gmlLiteral`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(geo)),
        quad(namedNode(`${geo}gmlLiteral`), namedNode(`${rdfs}comment`), literal(`
      A GML serialization of a geometry object.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}gmlLiteral`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}gmlLiteral`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}gmlLiteral`), namedNode(`${rdfs}label`), literal(`GML Literal`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}gmlLiteral`), namedNode(`${skos}definition`), literal(`
      A GML serialization of a geometry object.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}gmlLiteral`), namedNode(`${skos}prefLabel`), literal(`GML Literal`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}hasSerialization`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}hasSerialization`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}hasSerialization`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}hasSerialization`), namedNode(`${dc11}description`), literal(`
      Connects a geometry object with its text-based serialization.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}hasSerialization`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(geo)),
        quad(namedNode(`${geo}hasSerialization`), namedNode(`${rdfs}comment`), literal(`
      Connects a geometry object with its text-based serialization.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}hasSerialization`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}hasSerialization`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}hasSerialization`), namedNode(`${rdfs}label`), literal(`has serialization`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}hasSerialization`), namedNode(`${skos}definition`), literal(`
      Connects a geometry object with its text-based serialization.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}hasSerialization`), namedNode(`${skos}prefLabel`), literal(`has serialization`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}hasSerialization`), namedNode(`${rdfs}domain`), namedNode(`${geo}Geometry`), namedNode(geo)),
        quad(namedNode(`${geo}hasSerialization`), namedNode(`${rdfs}range`), namedNode(`${rdfs}Literal`), namedNode(geo)),
        quad(namedNode(`${geo}asWKT`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}asWKT`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}asWKT`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}asWKT`), namedNode(`${dc11}description`), literal(`
      The WKT serialization of a geometry
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}asWKT`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(geo)),
        quad(namedNode(`${geo}asWKT`), namedNode(`${rdfs}comment`), literal(`
      The WKT serialization of a geometry
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}asWKT`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}asWKT`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}asWKT`), namedNode(`${rdfs}label`), literal(`asWKT`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}asWKT`), namedNode(`${skos}definition`), literal(`
      The WKT serialization of a geometry
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}asWKT`), namedNode(`${skos}prefLabel`), literal(`asWKT`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}asWKT`), namedNode(`${rdfs}domain`), namedNode(`${geo}Geometry`), namedNode(geo)),
        quad(namedNode(`${geo}asWKT`), namedNode(`${rdfs}range`), namedNode(`${geo}wktLiteral`), namedNode(geo)),
        quad(namedNode(`${geo}asWKT`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${geo}hasSerialization`), namedNode(geo)),
        quad(namedNode(`${geo}wktLiteral`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}wktLiteral`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}wktLiteral`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}wktLiteral`), namedNode(`${dc11}description`), literal(`
      A Well-known Text serialization of a geometry object.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}wktLiteral`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(geo)),
        quad(namedNode(`${geo}wktLiteral`), namedNode(`${rdfs}comment`), literal(`
      A Well-known Text serialization of a geometry object.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}wktLiteral`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}wktLiteral`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}wktLiteral`), namedNode(`${rdfs}label`), literal(`Well-known Text Literal`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}wktLiteral`), namedNode(`${skos}definition`), literal(`
      A Well-known Text serialization of a geometry object.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}wktLiteral`), namedNode(`${skos}prefLabel`), literal(`Well-known Text Literal`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}coordinateDimension`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}coordinateDimension`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}coordinateDimension`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}coordinateDimension`), namedNode(`${dc11}description`), literal(`
      The number of measurements or axes needed to describe the position of this
      geometry in a coordinate system.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}coordinateDimension`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(geo)),
        quad(namedNode(`${geo}coordinateDimension`), namedNode(`${rdfs}comment`), literal(`
      The number of measurements or axes needed to describe the position of this
      geometry in a coordinate system.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}coordinateDimension`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}coordinateDimension`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}coordinateDimension`), namedNode(`${rdfs}label`), literal(`coordinateDimension`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}coordinateDimension`), namedNode(`${skos}definition`), literal(`
      The number of measurements or axes needed to describe the position of this
      geometry in a coordinate system.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}coordinateDimension`), namedNode(`${skos}prefLabel`), literal(`coordinateDimension`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}coordinateDimension`), namedNode(`${rdfs}domain`), namedNode(`${geo}Geometry`), namedNode(geo)),
        quad(namedNode(`${geo}coordinateDimension`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(geo)),
        quad(namedNode(`${geo}defaultGeometry`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}defaultGeometry`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}defaultGeometry`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}defaultGeometry`), namedNode(`${dc11}description`), literal(`
      The default geometry to be used in spatial calculations.
      It is Usually the most detailed geometry.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}defaultGeometry`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}defaultGeometry`), namedNode(`${rdfs}comment`), literal(`
      The default geometry to be used in spatial calculations.
      It is Usually the most detailed geometry.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}defaultGeometry`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}defaultGeometry`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}defaultGeometry`), namedNode(`${rdfs}label`), literal(`defaultGeometry`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}defaultGeometry`), namedNode(`${skos}definition`), literal(`
      The default geometry to be used in spatial calculations.
      It is Usually the most detailed geometry.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}defaultGeometry`), namedNode(`${skos}prefLabel`), literal(`defaultGeometry`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}defaultGeometry`), namedNode(`${rdfs}domain`), namedNode(`${geo}Feature`), namedNode(geo)),
        quad(namedNode(`${geo}defaultGeometry`), namedNode(`${rdfs}range`), namedNode(`${geo}Geometry`), namedNode(geo)),
        quad(namedNode(`${geo}defaultGeometry`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${geo}hasGeometry`), namedNode(geo)),
        quad(namedNode(`${geo}hasGeometry`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}hasGeometry`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}hasGeometry`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}hasGeometry`), namedNode(`${dc11}description`), literal(`
      A spatial representation for a given feature.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}hasGeometry`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}hasGeometry`), namedNode(`${rdfs}comment`), literal(`
      A spatial representation for a given feature.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}hasGeometry`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}hasGeometry`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}hasGeometry`), namedNode(`${rdfs}label`), literal(`hasGeometry`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}hasGeometry`), namedNode(`${skos}definition`), literal(`
      A spatial representation for a given feature.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}hasGeometry`), namedNode(`${skos}prefLabel`), literal(`hasGeometry`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}hasGeometry`), namedNode(`${rdfs}domain`), namedNode(`${geo}Feature`), namedNode(geo)),
        quad(namedNode(`${geo}hasGeometry`), namedNode(`${rdfs}range`), namedNode(`${geo}Geometry`), namedNode(geo)),
        quad(namedNode(`${geo}dimension`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}dimension`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}dimension`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}dimension`), namedNode(`${dc11}description`), literal(`
      The topological dimension of this geometric object, which 
      must be less than or equal to the coordinate dimension. 
      In non-homogeneous collections, this will return the largest 
      topological dimension of the contained objects.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}dimension`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(geo)),
        quad(namedNode(`${geo}dimension`), namedNode(`${rdfs}comment`), literal(`
      The topological dimension of this geometric object, which 
      must be less than or equal to the coordinate dimension. 
      In non-homogeneous collections, this will return the largest 
      topological dimension of the contained objects.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}dimension`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}dimension`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}dimension`), namedNode(`${rdfs}label`), literal(`dimension`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}dimension`), namedNode(`${skos}definition`), literal(`
      The topological dimension of this geometric object, which 
      must be less than or equal to the coordinate dimension. 
      In non-homogeneous collections, this will return the largest 
      topological dimension of the contained objects.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}dimension`), namedNode(`${skos}prefLabel`), literal(`dimension`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}dimension`), namedNode(`${rdfs}domain`), namedNode(`${geo}Geometry`), namedNode(geo)),
        quad(namedNode(`${geo}dimension`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(geo)),
        quad(namedNode(`${geo}ehContains`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}ehContains`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}ehContains`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}ehContains`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject spatially contains the 
      object SpatialObject. DE-9IM: T*TFF*FF*
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehContains`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}ehContains`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject spatially contains the 
      object SpatialObject. DE-9IM: T*TFF*FF*
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehContains`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}ehContains`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}ehContains`), namedNode(`${rdfs}label`), literal(`contains`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehContains`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject spatially contains the 
      object SpatialObject. DE-9IM: T*TFF*FF*
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehContains`), namedNode(`${skos}prefLabel`), literal(`contains`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehContains`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}ehContains`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}ehCoveredBy`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}ehCoveredBy`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}ehCoveredBy`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}ehCoveredBy`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject is spatially covered 
      by the object SpatialObject. DE-9IM: TFF*TFT**
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehCoveredBy`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}ehCoveredBy`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject is spatially covered 
      by the object SpatialObject. DE-9IM: TFF*TFT**
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehCoveredBy`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}ehCoveredBy`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}ehCoveredBy`), namedNode(`${rdfs}label`), literal(`coveredBy`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehCoveredBy`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject is spatially covered 
      by the object SpatialObject. DE-9IM: TFF*TFT**
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehCoveredBy`), namedNode(`${skos}prefLabel`), literal(`coveredBy`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehCoveredBy`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}ehCoveredBy`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}ehCovers`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}ehCovers`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}ehCovers`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}ehCovers`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject spatially covers the 
      object SpatialObject. DE-9IM: T*TFT*FF*
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehCovers`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}ehCovers`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject spatially covers the 
      object SpatialObject. DE-9IM: T*TFT*FF*
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehCovers`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}ehCovers`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}ehCovers`), namedNode(`${rdfs}label`), literal(`covers`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehCovers`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject spatially covers the 
      object SpatialObject. DE-9IM: T*TFT*FF*
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehCovers`), namedNode(`${skos}prefLabel`), literal(`covers`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehCovers`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}ehCovers`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}ehDisjoint`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}ehDisjoint`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}ehDisjoint`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}ehDisjoint`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject is spatially disjoint
      from the object SpatialObject. DE-9IM: FF*FF****
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehDisjoint`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}ehDisjoint`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject is spatially disjoint
      from the object SpatialObject. DE-9IM: FF*FF****
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehDisjoint`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}ehDisjoint`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}ehDisjoint`), namedNode(`${rdfs}label`), literal(`disjoint`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehDisjoint`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject is spatially disjoint
      from the object SpatialObject. DE-9IM: FF*FF****
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehDisjoint`), namedNode(`${skos}prefLabel`), literal(`disjoint`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehDisjoint`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}ehDisjoint`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}ehEquals`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}ehEquals`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}ehEquals`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}ehEquals`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject spatially equals the 
      object SpatialObject. DE-9IM: TFFFTFFFT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehEquals`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}ehEquals`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject spatially equals the 
      object SpatialObject. DE-9IM: TFFFTFFFT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehEquals`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}ehEquals`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}ehEquals`), namedNode(`${rdfs}label`), literal(`equals`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehEquals`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject spatially equals the 
      object SpatialObject. DE-9IM: TFFFTFFFT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehEquals`), namedNode(`${skos}prefLabel`), literal(`equals`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehEquals`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}ehEquals`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}ehInside`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}ehInside`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}ehInside`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}ehInside`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject is spatially inside 
      the object SpatialObject. DE-9IM: TFF*FFT**
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehInside`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}ehInside`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject is spatially inside 
      the object SpatialObject. DE-9IM: TFF*FFT**
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehInside`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}ehInside`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}ehInside`), namedNode(`${rdfs}label`), literal(`inside`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehInside`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject is spatially inside 
      the object SpatialObject. DE-9IM: TFF*FFT**
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehInside`), namedNode(`${skos}prefLabel`), literal(`inside`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehInside`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}ehInside`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}ehMeet`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}ehMeet`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}ehMeet`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}ehMeet`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject spatially meets the 
      object SpatialObject. 
      DE-9IM: FT******* ^ F**T***** ^ F***T****
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehMeet`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}ehMeet`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject spatially meets the 
      object SpatialObject. 
      DE-9IM: FT******* ^ F**T***** ^ F***T****
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehMeet`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}ehMeet`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}ehMeet`), namedNode(`${rdfs}label`), literal(`meet`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehMeet`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject spatially meets the 
      object SpatialObject. 
      DE-9IM: FT******* ^ F**T***** ^ F***T****
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehMeet`), namedNode(`${skos}prefLabel`), literal(`meet`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehMeet`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}ehMeet`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}ehOverlap`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}ehOverlap`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}ehOverlap`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}ehOverlap`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject spatially overlaps the 
      object SpatialObject. DE-9IM: T*T***T**
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehOverlap`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}ehOverlap`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject spatially overlaps the 
      object SpatialObject. DE-9IM: T*T***T**
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehOverlap`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}ehOverlap`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}ehOverlap`), namedNode(`${rdfs}label`), literal(`overlap`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehOverlap`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject spatially overlaps the 
      object SpatialObject. DE-9IM: T*T***T**
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehOverlap`), namedNode(`${skos}prefLabel`), literal(`overlap`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}ehOverlap`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}ehOverlap`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}isEmpty`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}isEmpty`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}isEmpty`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}isEmpty`), namedNode(`${dc11}description`), literal(`
      (true) if this geometric object is the empty Geometry. If 
      true, then this geometric object represents the empty point 
      set for the coordinate space.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}isEmpty`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(geo)),
        quad(namedNode(`${geo}isEmpty`), namedNode(`${rdfs}comment`), literal(`
      (true) if this geometric object is the empty Geometry. If 
      true, then this geometric object represents the empty point 
      set for the coordinate space.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}isEmpty`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}isEmpty`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}isEmpty`), namedNode(`${rdfs}label`), literal(`isEmpty`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}isEmpty`), namedNode(`${skos}definition`), literal(`
      (true) if this geometric object is the empty Geometry. If 
      true, then this geometric object represents the empty point 
      set for the coordinate space.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}isEmpty`), namedNode(`${skos}prefLabel`), literal(`isEmpty`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}isEmpty`), namedNode(`${rdfs}domain`), namedNode(`${geo}Geometry`), namedNode(geo)),
        quad(namedNode(`${geo}isEmpty`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(geo)),
        quad(namedNode(`${geo}isSimple`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}isSimple`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}isSimple`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}isSimple`), namedNode(`${dc11}description`), literal(`
      (true) if this geometric object has no anomalous geometric 
      points, such as self intersection or self tangency.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}isSimple`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(geo)),
        quad(namedNode(`${geo}isSimple`), namedNode(`${rdfs}comment`), literal(`
      (true) if this geometric object has no anomalous geometric 
      points, such as self intersection or self tangency.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}isSimple`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}isSimple`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}isSimple`), namedNode(`${rdfs}label`), literal(`isSimple`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}isSimple`), namedNode(`${skos}definition`), literal(`
      (true) if this geometric object has no anomalous geometric 
      points, such as self intersection or self tangency.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}isSimple`), namedNode(`${skos}prefLabel`), literal(`isSimple`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}isSimple`), namedNode(`${rdfs}domain`), namedNode(`${geo}Geometry`), namedNode(geo)),
        quad(namedNode(`${geo}isSimple`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8dc`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8dc`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8dc`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}rcc8dc`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject is spatially disjoint
      from the object SpatialObject. DE-9IM: FFTFFTTTT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8dc`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8dc`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject is spatially disjoint
      from the object SpatialObject. DE-9IM: FFTFFTTTT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8dc`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8dc`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8dc`), namedNode(`${rdfs}label`), literal(`disconnected`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8dc`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject is spatially disjoint
      from the object SpatialObject. DE-9IM: FFTFFTTTT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8dc`), namedNode(`${skos}prefLabel`), literal(`disconnected`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8dc`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8dc`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ec`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ec`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ec`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ec`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject spatially meets the 
      object SpatialObject. DE-9IM: FFTFTTTTT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ec`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ec`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject spatially meets the 
      object SpatialObject. DE-9IM: FFTFTTTTT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ec`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ec`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ec`), namedNode(`${rdfs}label`), literal(`externally connected`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ec`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject spatially meets the 
      object SpatialObject. DE-9IM: FFTFTTTTT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ec`), namedNode(`${skos}prefLabel`), literal(`externally connected`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ec`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ec`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8eq`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8eq`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8eq`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}rcc8eq`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject spatially equals the 
      object SpatialObject. DE-9IM: TFFFTFFFT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8eq`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8eq`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject spatially equals the 
      object SpatialObject. DE-9IM: TFFFTFFFT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8eq`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8eq`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8eq`), namedNode(`${rdfs}label`), literal(`equals`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8eq`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject spatially equals the 
      object SpatialObject. DE-9IM: TFFFTFFFT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8eq`), namedNode(`${skos}prefLabel`), literal(`equals`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8eq`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8eq`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntpp`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntpp`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntpp`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntpp`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject is spatially inside 
      the object SpatialObject. DE-9IM: TFFTFFTTT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntpp`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntpp`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject is spatially inside 
      the object SpatialObject. DE-9IM: TFFTFFTTT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntpp`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntpp`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntpp`), namedNode(`${rdfs}label`), literal(`non-tangential proper part`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntpp`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject is spatially inside 
      the object SpatialObject. DE-9IM: TFFTFFTTT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntpp`), namedNode(`${skos}prefLabel`), literal(`non-tangential proper part`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntpp`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntpp`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntppi`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntppi`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntppi`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntppi`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject spatially contains the 
      object SpatialObject. DE-9IM: TTTFFTFFT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntppi`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntppi`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject spatially contains the 
      object SpatialObject. DE-9IM: TTTFFTFFT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntppi`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntppi`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntppi`), namedNode(`${rdfs}label`), literal(`non-tangential proper part inverse`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntppi`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject spatially contains the 
      object SpatialObject. DE-9IM: TTTFFTFFT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntppi`), namedNode(`${skos}prefLabel`), literal(`non-tangential proper part inverse`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntppi`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8ntppi`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8po`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8po`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8po`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}rcc8po`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject spatially overlaps the 
      object SpatialObject. DE-9IM: TTTTTTTTT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8po`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8po`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject spatially overlaps the 
      object SpatialObject. DE-9IM: TTTTTTTTT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8po`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8po`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8po`), namedNode(`${rdfs}label`), literal(`partially overlapping`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8po`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject spatially overlaps the 
      object SpatialObject. DE-9IM: TTTTTTTTT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8po`), namedNode(`${skos}prefLabel`), literal(`partially overlapping`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8po`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8po`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tpp`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tpp`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tpp`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tpp`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject is spatially covered 
      by the object SpatialObject. DE-9IM: TFFTTFTTT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tpp`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tpp`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject is spatially covered 
      by the object SpatialObject. DE-9IM: TFFTTFTTT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tpp`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tpp`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tpp`), namedNode(`${rdfs}label`), literal(`tangential proper part`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tpp`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject is spatially covered 
      by the object SpatialObject. DE-9IM: TFFTTFTTT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tpp`), namedNode(`${skos}prefLabel`), literal(`tangential proper part`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tpp`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tpp`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tppi`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tppi`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tppi`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tppi`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject spatially covers the 
      object SpatialObject. DE-9IM: TTTFTTFFT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tppi`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tppi`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject spatially covers the 
      object SpatialObject. DE-9IM: TTTFTTFFT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tppi`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tppi`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tppi`), namedNode(`${rdfs}label`), literal(`tangential proper part inverse`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tppi`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject spatially covers the 
      object SpatialObject. DE-9IM: TTTFTTFFT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tppi`), namedNode(`${skos}prefLabel`), literal(`tangential proper part inverse`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tppi`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}rcc8tppi`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}sfContains`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}sfContains`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}sfContains`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}sfContains`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject spatially contains the 
      object SpatialObject. DE-9IM: T*****FF*
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfContains`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}sfContains`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject spatially contains the 
      object SpatialObject. DE-9IM: T*****FF*
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfContains`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}sfContains`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}sfContains`), namedNode(`${rdfs}label`), literal(`contains`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfContains`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject spatially contains the 
      object SpatialObject. DE-9IM: T*****FF*
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfContains`), namedNode(`${skos}prefLabel`), literal(`contains`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfContains`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}sfContains`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}sfCrosses`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}sfCrosses`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}sfCrosses`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}sfCrosses`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject spatially crosses the 
      object SpatialObject. DE-9IM: T*T******
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfCrosses`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}sfCrosses`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject spatially crosses the 
      object SpatialObject. DE-9IM: T*T******
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfCrosses`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}sfCrosses`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}sfCrosses`), namedNode(`${rdfs}label`), literal(`crosses`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfCrosses`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject spatially crosses the 
      object SpatialObject. DE-9IM: T*T******
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfCrosses`), namedNode(`${skos}prefLabel`), literal(`crosses`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfCrosses`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}sfCrosses`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}sfDisjoint`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}sfDisjoint`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}sfDisjoint`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}sfDisjoint`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject is spatially disjoint 
      from the object SpatialObject. DE-9IM: FF*FF****
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfDisjoint`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}sfDisjoint`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject is spatially disjoint 
      from the object SpatialObject. DE-9IM: FF*FF****
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfDisjoint`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}sfDisjoint`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}sfDisjoint`), namedNode(`${rdfs}label`), literal(`disjoint`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfDisjoint`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject is spatially disjoint 
      from the object SpatialObject. DE-9IM: FF*FF****
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfDisjoint`), namedNode(`${skos}prefLabel`), literal(`disjoint`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfDisjoint`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}sfDisjoint`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}sfEquals`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}sfEquals`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}sfEquals`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}sfEquals`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject spatially equals the 
      object SpatialObject. DE-9IM: TFFFTFFFT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfEquals`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}sfEquals`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject spatially equals the 
      object SpatialObject. DE-9IM: TFFFTFFFT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfEquals`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}sfEquals`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}sfEquals`), namedNode(`${rdfs}label`), literal(`equals`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfEquals`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject spatially equals the 
      object SpatialObject. DE-9IM: TFFFTFFFT
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfEquals`), namedNode(`${skos}prefLabel`), literal(`equals`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfEquals`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}sfEquals`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}sfIntersects`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}sfIntersects`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}sfIntersects`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}sfIntersects`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject is not spatially disjoint 
      from the object SpatialObject.
      DE-9IM: T******** ^ *T******* ^ ***T***** ^ ****T**** 
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfIntersects`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}sfIntersects`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject is not spatially disjoint 
      from the object SpatialObject.
      DE-9IM: T******** ^ *T******* ^ ***T***** ^ ****T**** 
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfIntersects`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}sfIntersects`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}sfIntersects`), namedNode(`${rdfs}label`), literal(`intersects`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfIntersects`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject is not spatially disjoint 
      from the object SpatialObject.
      DE-9IM: T******** ^ *T******* ^ ***T***** ^ ****T**** 
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfIntersects`), namedNode(`${skos}prefLabel`), literal(`intersects`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfIntersects`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}sfIntersects`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}sfOverlaps`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}sfOverlaps`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}sfOverlaps`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}sfOverlaps`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject spatially overlaps the 
      object SpatialObject. DE-9IM: T*T***T** 
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfOverlaps`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}sfOverlaps`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject spatially overlaps the 
      object SpatialObject. DE-9IM: T*T***T** 
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfOverlaps`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}sfOverlaps`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}sfOverlaps`), namedNode(`${rdfs}label`), literal(`overlaps`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfOverlaps`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject spatially overlaps the 
      object SpatialObject. DE-9IM: T*T***T** 
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfOverlaps`), namedNode(`${skos}prefLabel`), literal(`overlaps`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfOverlaps`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}sfOverlaps`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}sfTouches`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}sfTouches`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}sfTouches`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}sfTouches`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject spatially touches the 
      object SpatialObject.
      DE-9IM: FT******* ^ F**T***** ^ F***T****
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfTouches`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}sfTouches`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject spatially touches the 
      object SpatialObject.
      DE-9IM: FT******* ^ F**T***** ^ F***T****
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfTouches`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}sfTouches`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}sfTouches`), namedNode(`${rdfs}label`), literal(`touches`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfTouches`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject spatially touches the 
      object SpatialObject.
      DE-9IM: FT******* ^ F**T***** ^ F***T****
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfTouches`), namedNode(`${skos}prefLabel`), literal(`touches`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfTouches`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}sfTouches`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}sfWithin`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}sfWithin`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}sfWithin`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}sfWithin`), namedNode(`${dc11}description`), literal(`
      Exists if the subject SpatialObject is spatially within the 
      object SpatialObject. DE-9IM: T*F**F***
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfWithin`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(geo)),
        quad(namedNode(`${geo}sfWithin`), namedNode(`${rdfs}comment`), literal(`
      Exists if the subject SpatialObject is spatially within the 
      object SpatialObject. DE-9IM: T*F**F***
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfWithin`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}sfWithin`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}sfWithin`), namedNode(`${rdfs}label`), literal(`within`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfWithin`), namedNode(`${skos}definition`), literal(`
      Exists if the subject SpatialObject is spatially within the 
      object SpatialObject. DE-9IM: T*F**F***
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfWithin`), namedNode(`${skos}prefLabel`), literal(`within`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}sfWithin`), namedNode(`${rdfs}domain`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}sfWithin`), namedNode(`${rdfs}range`), namedNode(`${geo}SpatialObject`), namedNode(geo)),
        quad(namedNode(`${geo}spatialDimension`), namedNode(`${dc11}contributor`), literal(`Matthew Perry`), namedNode(geo)),
        quad(namedNode(`${geo}spatialDimension`), namedNode(`${dc11}creator`), literal(`OGC GeoSPARQL 1.0 Standard Working Group`), namedNode(geo)),
        quad(namedNode(`${geo}spatialDimension`), namedNode(`${dc11}date`), literal(`2011-06-16`, namedNode(`${xsd}date`)), namedNode(geo)),
        quad(namedNode(`${geo}spatialDimension`), namedNode(`${dc11}description`), literal(`
      The number of measurements or axes needed to describe the spatial position of 
      this geometry in a coordinate system.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}spatialDimension`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(geo)),
        quad(namedNode(`${geo}spatialDimension`), namedNode(`${rdfs}comment`), literal(`
      The number of measurements or axes needed to describe the spatial position of 
      this geometry in a coordinate system.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}spatialDimension`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}geosparql`), namedNode(geo)),
        quad(namedNode(`${geo}spatialDimension`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}1.0`), namedNode(geo)),
        quad(namedNode(`${geo}spatialDimension`), namedNode(`${rdfs}label`), literal(`spatialDimension`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}spatialDimension`), namedNode(`${skos}definition`), literal(`
      The number of measurements or axes needed to describe the spatial position of 
      this geometry in a coordinate system.
    `, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}spatialDimension`), namedNode(`${skos}prefLabel`), literal(`spatialDimension`, 'en'), namedNode(geo)),
        quad(namedNode(`${geo}spatialDimension`), namedNode(`${rdfs}domain`), namedNode(`${geo}Geometry`), namedNode(geo)),
        quad(namedNode(`${geo}spatialDimension`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(geo)),
    ];
};
