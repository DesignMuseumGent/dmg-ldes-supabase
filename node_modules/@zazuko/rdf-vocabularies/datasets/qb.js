"use strict";
/* This file was automatically generated. Do not edit by hand. */
Object.defineProperty(exports, "__esModule", { value: true });
const { qb, rdf, rdfs, owl, ns5, dcterms, xsd, ns8, ns9, skos, foaf } = {
    'qb': 'http://purl.org/linked-data/cube#',
    'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
    'owl': 'http://www.w3.org/2002/07/owl#',
    'ns5': 'http://purl.org/linked-data/',
    'dcterms': 'http://purl.org/dc/terms/',
    'xsd': 'http://www.w3.org/2001/XMLSchema#',
    'ns8': 'http://www.opendatacommons.org/licenses/pddl/1.0/',
    'ns9': 'http://purl.org/NET/scovo#',
    'skos': 'http://www.w3.org/2004/02/skos/core#',
    'foaf': 'http://xmlns.com/foaf/0.1/'
};
exports.default = ({ blankNode, literal, namedNode, quad }) => {
    const blankNodes = [];
    for (let i = 0; i < 9; i++) {
        blankNodes.push(blankNode());
    }
    return [
        quad(namedNode(`${qb}Attachable`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(qb)),
        quad(namedNode(`${qb}Attachable`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qb)),
        quad(namedNode(`${qb}Attachable`), namedNode(`${rdfs}comment`), literal(`Abstract superclass for everything that can have attributes and dimensions`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}Attachable`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}Attachable`), namedNode(`${rdfs}label`), literal(`Attachable (abstract)`, 'en'), namedNode(qb)),
        quad(namedNode(`${ns5}cube`), namedNode(`${rdf}type`), namedNode(`${owl}Ontology`), namedNode(qb)),
        quad(namedNode(`${ns5}cube`), namedNode(`${rdfs}comment`), literal(`This vocabulary allows multi-dimensional data, such as statistics, to be published in RDF. It is based on the core information model from SDMX (and thus also DDI).`), namedNode(qb)),
        quad(namedNode(`${ns5}cube`), namedNode(`${rdfs}label`), literal(`The data cube vocabulary`), namedNode(qb)),
        quad(namedNode(`${ns5}cube`), namedNode(`${dcterms}contributor`), blankNodes[0], namedNode(qb)),
        quad(namedNode(`${ns5}cube`), namedNode(`${dcterms}contributor`), blankNodes[1], namedNode(qb)),
        quad(namedNode(`${ns5}cube`), namedNode(`${dcterms}contributor`), blankNodes[2], namedNode(qb)),
        quad(namedNode(`${ns5}cube`), namedNode(`${dcterms}contributor`), blankNodes[3], namedNode(qb)),
        quad(namedNode(`${ns5}cube`), namedNode(`${dcterms}contributor`), blankNodes[4], namedNode(qb)),
        quad(namedNode(`${ns5}cube`), namedNode(`${dcterms}created`), literal(`2010-07-12`, namedNode(`${xsd}date`)), namedNode(qb)),
        quad(namedNode(`${ns5}cube`), namedNode(`${dcterms}license`), namedNode(ns8), namedNode(qb)),
        quad(namedNode(`${ns5}cube`), namedNode(`${dcterms}modified`), literal(`2010-11-27`, namedNode(`${xsd}date`)), namedNode(qb)),
        quad(namedNode(`${ns5}cube`), namedNode(`${dcterms}modified`), literal(`2013-03-02`, namedNode(`${xsd}date`)), namedNode(qb)),
        quad(namedNode(`${ns5}cube`), namedNode(`${dcterms}modified`), literal(`2013-07-26`, namedNode(`${xsd}date`)), namedNode(qb)),
        quad(namedNode(`${ns5}cube`), namedNode(`${dcterms}title`), literal(`Vocabulary for multi-dimensional (e.g. statistical) data publishing`), namedNode(qb)),
        quad(namedNode(`${ns5}cube`), namedNode(`${owl}versionInfo`), literal(`0.2`), namedNode(qb)),
        quad(namedNode(`${qb}AttributeProperty`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(qb)),
        quad(namedNode(`${qb}AttributeProperty`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qb)),
        quad(namedNode(`${qb}AttributeProperty`), namedNode(`${rdfs}comment`), literal(`The class of components which represent attributes of observations in the cube, e.g. unit of measurement`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}AttributeProperty`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}AttributeProperty`), namedNode(`${rdfs}label`), literal(`Attribute property`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}AttributeProperty`), namedNode(`${rdfs}subClassOf`), namedNode(`${qb}ComponentProperty`), namedNode(qb)),
        quad(namedNode(`${qb}AttributeProperty`), namedNode(`${owl}disjointWith`), namedNode(`${qb}MeasureProperty`), namedNode(qb)),
        quad(namedNode(`${qb}ComponentProperty`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(qb)),
        quad(namedNode(`${qb}ComponentProperty`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qb)),
        quad(namedNode(`${qb}ComponentProperty`), namedNode(`${rdfs}comment`), literal(`Abstract super-property of all properties representing dimensions, attributes or measures`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}ComponentProperty`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}ComponentProperty`), namedNode(`${rdfs}label`), literal(`Component property (abstract)`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}ComponentProperty`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}MeasureProperty`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(qb)),
        quad(namedNode(`${qb}MeasureProperty`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qb)),
        quad(namedNode(`${qb}MeasureProperty`), namedNode(`${rdfs}comment`), literal(`The class of components which represent the measured value of the phenomenon being observed`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}MeasureProperty`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}MeasureProperty`), namedNode(`${rdfs}label`), literal(`Measure property`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}MeasureProperty`), namedNode(`${rdfs}subClassOf`), namedNode(`${qb}ComponentProperty`), namedNode(qb)),
        quad(namedNode(`${qb}MeasureProperty`), namedNode(`${owl}disjointWith`), namedNode(`${qb}AttributeProperty`), namedNode(qb)),
        quad(namedNode(`${qb}MeasureProperty`), namedNode(`${owl}disjointWith`), namedNode(`${qb}DimensionProperty`), namedNode(qb)),
        quad(namedNode(`${qb}CodedProperty`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(qb)),
        quad(namedNode(`${qb}CodedProperty`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qb)),
        quad(namedNode(`${qb}CodedProperty`), namedNode(`${rdfs}comment`), literal(`Superclass of all coded ComponentProperties`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}CodedProperty`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}CodedProperty`), namedNode(`${rdfs}label`), literal(`Coded property`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}CodedProperty`), namedNode(`${rdfs}subClassOf`), namedNode(`${qb}ComponentProperty`), namedNode(qb)),
        quad(namedNode(`${qb}ComponentSet`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(qb)),
        quad(namedNode(`${qb}ComponentSet`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qb)),
        quad(namedNode(`${qb}ComponentSet`), namedNode(`${rdfs}comment`), literal(`Abstract class of things which reference one or more ComponentProperties`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}ComponentSet`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}ComponentSet`), namedNode(`${rdfs}label`), literal(`Component set`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}ComponentSpecification`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(qb)),
        quad(namedNode(`${qb}ComponentSpecification`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qb)),
        quad(namedNode(`${qb}ComponentSpecification`), namedNode(`${rdfs}comment`), literal(`Used to define properties of a component (attribute, dimension etc) which are specific to its usage in a DSD.`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}ComponentSpecification`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}ComponentSpecification`), namedNode(`${rdfs}label`), literal(`Component specification`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}ComponentSpecification`), namedNode(`${rdfs}subClassOf`), namedNode(`${qb}ComponentSet`), namedNode(qb)),
        quad(namedNode(`${qb}DataSet`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(qb)),
        quad(namedNode(`${qb}DataSet`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qb)),
        quad(namedNode(`${qb}DataSet`), namedNode(`${rdfs}comment`), literal(`Represents a collection of observations, possibly organized into various slices, conforming to some common dimensional structure.`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}DataSet`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}DataSet`), namedNode(`${rdfs}label`), literal(`Data set`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}DataSet`), namedNode(`${rdfs}subClassOf`), namedNode(`${qb}Attachable`), namedNode(qb)),
        quad(namedNode(`${qb}DataSet`), namedNode(`${owl}equivalentClass`), namedNode(`${ns9}Dataset`), namedNode(qb)),
        quad(namedNode(`${qb}DataStructureDefinition`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(qb)),
        quad(namedNode(`${qb}DataStructureDefinition`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qb)),
        quad(namedNode(`${qb}DataStructureDefinition`), namedNode(`${rdfs}comment`), literal(`Defines the structure of a DataSet or slice`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}DataStructureDefinition`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}DataStructureDefinition`), namedNode(`${rdfs}label`), literal(`Data structure definition`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}DataStructureDefinition`), namedNode(`${rdfs}subClassOf`), namedNode(`${qb}ComponentSet`), namedNode(qb)),
        quad(namedNode(`${qb}DimensionProperty`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(qb)),
        quad(namedNode(`${qb}DimensionProperty`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qb)),
        quad(namedNode(`${qb}DimensionProperty`), namedNode(`${rdfs}comment`), literal(`The class of components which represent the dimensions of the cube`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}DimensionProperty`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}DimensionProperty`), namedNode(`${rdfs}label`), literal(`Dimension property`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}DimensionProperty`), namedNode(`${rdfs}subClassOf`), namedNode(`${qb}ComponentProperty`), namedNode(qb)),
        quad(namedNode(`${qb}DimensionProperty`), namedNode(`${rdfs}subClassOf`), namedNode(`${qb}CodedProperty`), namedNode(qb)),
        quad(namedNode(`${qb}DimensionProperty`), namedNode(`${owl}disjointWith`), namedNode(`${qb}MeasureProperty`), namedNode(qb)),
        quad(namedNode(`${qb}HierarchicalCodeList`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(qb)),
        quad(namedNode(`${qb}HierarchicalCodeList`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qb)),
        quad(namedNode(`${qb}HierarchicalCodeList`), namedNode(`${rdfs}comment`), literal(`Represents a generalized hierarchy of concepts which can be used for coding. The hierarchy is defined by one or more roots together with a property which relates concepts in the hierarchy to thier child concept .  The same concepts may be members of multiple hierarchies provided that different qb:parentChildProperty values are used for each hierarchy.`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}HierarchicalCodeList`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}HierarchicalCodeList`), namedNode(`${rdfs}label`), literal(`Hierarchical Code List`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}Observation`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(qb)),
        quad(namedNode(`${qb}Observation`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qb)),
        quad(namedNode(`${qb}Observation`), namedNode(`${rdfs}comment`), literal(`A single observation in the cube, may have one or more associated measured values`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}Observation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}Observation`), namedNode(`${rdfs}label`), literal(`Observation`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}Observation`), namedNode(`${rdfs}subClassOf`), namedNode(`${qb}Attachable`), namedNode(qb)),
        quad(namedNode(`${qb}Observation`), namedNode(`${owl}equivalentClass`), namedNode(`${ns9}Item`), namedNode(qb)),
        quad(namedNode(`${qb}ObservationGroup`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(qb)),
        quad(namedNode(`${qb}ObservationGroup`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qb)),
        quad(namedNode(`${qb}ObservationGroup`), namedNode(`${rdfs}comment`), literal(`A, possibly arbitrary, group of observations.`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}ObservationGroup`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}ObservationGroup`), namedNode(`${rdfs}label`), literal(`Observation Group`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}Slice`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(qb)),
        quad(namedNode(`${qb}Slice`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qb)),
        quad(namedNode(`${qb}Slice`), namedNode(`${rdfs}comment`), literal(`Denotes a subset of a DataSet defined by fixing a subset of the dimensional values, component properties on the Slice`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}Slice`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}Slice`), namedNode(`${rdfs}label`), literal(`Slice`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}Slice`), namedNode(`${rdfs}subClassOf`), namedNode(`${qb}Attachable`), namedNode(qb)),
        quad(namedNode(`${qb}Slice`), namedNode(`${rdfs}subClassOf`), namedNode(`${qb}ObservationGroup`), namedNode(qb)),
        quad(namedNode(`${qb}SliceKey`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(qb)),
        quad(namedNode(`${qb}SliceKey`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qb)),
        quad(namedNode(`${qb}SliceKey`), namedNode(`${rdfs}comment`), literal(`Denotes a subset of the component properties of a DataSet which are fixed in the corresponding slices`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}SliceKey`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}SliceKey`), namedNode(`${rdfs}label`), literal(`Slice key`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}SliceKey`), namedNode(`${rdfs}subClassOf`), namedNode(`${qb}ComponentSet`), namedNode(qb)),
        quad(namedNode(`${qb}attribute`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}attribute`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}attribute`), namedNode(`${rdfs}comment`), literal(`An alternative to qb:componentProperty which makes explicit that the component is a attribute`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}attribute`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}attribute`), namedNode(`${rdfs}label`), literal(`attribute`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}attribute`), namedNode(`${rdfs}range`), namedNode(`${qb}AttributeProperty`), namedNode(qb)),
        quad(namedNode(`${qb}attribute`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qb}componentProperty`), namedNode(qb)),
        quad(namedNode(`${qb}componentProperty`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}componentProperty`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}componentProperty`), namedNode(`${rdfs}comment`), literal(`indicates a ComponentProperty (i.e. attribute/dimension) expected on a DataSet, or a dimension fixed in a SliceKey`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}componentProperty`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}componentProperty`), namedNode(`${rdfs}label`), literal(`component`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}componentProperty`), namedNode(`${rdfs}range`), namedNode(`${qb}ComponentProperty`), namedNode(qb)),
        quad(namedNode(`${qb}componentProperty`), namedNode(`${rdfs}domain`), namedNode(`${qb}ComponentSet`), namedNode(qb)),
        quad(namedNode(`${qb}codeList`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}codeList`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}codeList`), namedNode(`${rdfs}comment`), literal(`gives the code list associated with a CodedProperty`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}codeList`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}codeList`), namedNode(`${rdfs}label`), literal(`code list`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}codeList`), namedNode(`${rdfs}range`), blankNodes[5], namedNode(qb)),
        quad(namedNode(`${qb}codeList`), namedNode(`${rdfs}domain`), namedNode(`${qb}CodedProperty`), namedNode(qb)),
        quad(blankNodes[5], namedNode(`${owl}unionOf`), blankNodes[6], namedNode(qb)),
        quad(namedNode(`${qb}component`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}component`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}component`), namedNode(`${rdfs}comment`), literal(`indicates a component specification which is included in the structure of the dataset`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}component`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}component`), namedNode(`${rdfs}label`), literal(`component specification`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}component`), namedNode(`${rdfs}range`), namedNode(`${qb}ComponentSpecification`), namedNode(qb)),
        quad(namedNode(`${qb}component`), namedNode(`${rdfs}domain`), namedNode(`${qb}DataStructureDefinition`), namedNode(qb)),
        quad(namedNode(`${qb}componentAttachment`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}componentAttachment`), namedNode(`${rdfs}comment`), literal(`Indicates the level at which the component property should be attached, this might an qb:DataSet, qb:Slice or qb:Observation, or a qb:MeasureProperty.`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}componentAttachment`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}componentAttachment`), namedNode(`${rdfs}label`), literal(`component attachment`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}componentAttachment`), namedNode(`${rdfs}range`), namedNode(`${rdfs}Class`), namedNode(qb)),
        quad(namedNode(`${qb}componentAttachment`), namedNode(`${rdfs}domain`), namedNode(`${qb}ComponentSpecification`), namedNode(qb)),
        quad(namedNode(`${qb}componentRequired`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}componentRequired`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qb)),
        quad(namedNode(`${qb}componentRequired`), namedNode(`${rdfs}comment`), literal(`Indicates whether a component property is required (true) or optional (false) in the context of a DSD. Only applicable
    to components correspond to an attribute. Defaults to false (optional).`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}componentRequired`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}componentRequired`), namedNode(`${rdfs}label`), literal(`component required`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}componentRequired`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(qb)),
        quad(namedNode(`${qb}componentRequired`), namedNode(`${rdfs}domain`), namedNode(`${qb}ComponentSpecification`), namedNode(qb)),
        quad(namedNode(`${qb}concept`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}concept`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}concept`), namedNode(`${rdfs}comment`), literal(`gives the concept which is being measured or indicated by a ComponentProperty`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}concept`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}concept`), namedNode(`${rdfs}label`), literal(`concept`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}concept`), namedNode(`${rdfs}range`), namedNode(`${skos}Concept`), namedNode(qb)),
        quad(namedNode(`${qb}concept`), namedNode(`${rdfs}domain`), namedNode(`${qb}ComponentProperty`), namedNode(qb)),
        quad(namedNode(`${qb}dataSet`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}dataSet`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}dataSet`), namedNode(`${rdfs}comment`), literal(`indicates the data set of which this observation is a part`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}dataSet`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}dataSet`), namedNode(`${rdfs}label`), literal(`data set`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}dataSet`), namedNode(`${rdfs}range`), namedNode(`${qb}DataSet`), namedNode(qb)),
        quad(namedNode(`${qb}dataSet`), namedNode(`${rdfs}domain`), namedNode(`${qb}Observation`), namedNode(qb)),
        quad(namedNode(`${qb}dataSet`), namedNode(`${owl}equivalentProperty`), namedNode(`${ns9}dataset`), namedNode(qb)),
        quad(namedNode(`${qb}dimension`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}dimension`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}dimension`), namedNode(`${rdfs}comment`), literal(`An alternative to qb:componentProperty which makes explicit that the component is a dimension`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}dimension`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}dimension`), namedNode(`${rdfs}label`), literal(`dimension`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}dimension`), namedNode(`${rdfs}range`), namedNode(`${qb}DimensionProperty`), namedNode(qb)),
        quad(namedNode(`${qb}dimension`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qb}componentProperty`), namedNode(qb)),
        quad(namedNode(`${qb}hierarchyRoot`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}hierarchyRoot`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}hierarchyRoot`), namedNode(`${rdfs}comment`), literal(`Specifies a root of the hierarchy. A hierarchy may have multiple roots but must have at least one.`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}hierarchyRoot`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}hierarchyRoot`), namedNode(`${rdfs}domain`), namedNode(`${qb}HierarchicalCodeList`), namedNode(qb)),
        quad(namedNode(`${qb}measure`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}measure`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}measure`), namedNode(`${rdfs}comment`), literal(`An alternative to qb:componentProperty which makes explicit that the component is a measure`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}measure`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}measure`), namedNode(`${rdfs}label`), literal(`measure`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}measure`), namedNode(`${rdfs}range`), namedNode(`${qb}MeasureProperty`), namedNode(qb)),
        quad(namedNode(`${qb}measure`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qb}componentProperty`), namedNode(qb)),
        quad(namedNode(`${qb}measureDimension`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}measureDimension`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}measureDimension`), namedNode(`${rdfs}comment`), literal(`An alternative to qb:componentProperty which makes explicit that the component is a measure dimension`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}measureDimension`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}measureDimension`), namedNode(`${rdfs}label`), literal(`measure dimension`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}measureDimension`), namedNode(`${rdfs}range`), namedNode(`${qb}DimensionProperty`), namedNode(qb)),
        quad(namedNode(`${qb}measureDimension`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qb}componentProperty`), namedNode(qb)),
        quad(namedNode(`${qb}measureType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}measureType`), namedNode(`${rdf}type`), namedNode(`${qb}DimensionProperty`), namedNode(qb)),
        quad(namedNode(`${qb}measureType`), namedNode(`${rdfs}comment`), literal(`Generic measure dimension, the value of this dimension indicates which measure (from the set of measures in the DSD) is being given by the obsValue (or other primary measure)`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}measureType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}measureType`), namedNode(`${rdfs}label`), literal(`measure type`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}measureType`), namedNode(`${rdfs}range`), namedNode(`${qb}MeasureProperty`), namedNode(qb)),
        quad(namedNode(`${qb}observation`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}observation`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}observation`), namedNode(`${rdfs}comment`), literal(`indicates a observation contained within this slice of the data set`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}observation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}observation`), namedNode(`${rdfs}label`), literal(`observation`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}observation`), namedNode(`${rdfs}range`), namedNode(`${qb}Observation`), namedNode(qb)),
        quad(namedNode(`${qb}observation`), namedNode(`${rdfs}domain`), namedNode(`${qb}ObservationGroup`), namedNode(qb)),
        quad(namedNode(`${qb}observationGroup`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}observationGroup`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}observationGroup`), namedNode(`${rdfs}comment`), literal(`Indicates a group of observations. The domain of this property is left open so that a group may be attached to different resources and need not be restricted to a single DataSet`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}observationGroup`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}observationGroup`), namedNode(`${rdfs}label`), literal(`observation group`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}observationGroup`), namedNode(`${rdfs}range`), namedNode(`${qb}ObservationGroup`), namedNode(qb)),
        quad(namedNode(`${qb}order`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}order`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qb)),
        quad(namedNode(`${qb}order`), namedNode(`${rdfs}comment`), literal(`indicates a priority order for the components of sets with this structure, used to guide presentations - lower order numbers come before higher numbers, un-numbered components come last`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}order`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}order`), namedNode(`${rdfs}label`), literal(`order`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}order`), namedNode(`${rdfs}range`), namedNode(`${xsd}int`), namedNode(qb)),
        quad(namedNode(`${qb}order`), namedNode(`${rdfs}domain`), namedNode(`${qb}ComponentSpecification`), namedNode(qb)),
        quad(namedNode(`${qb}parentChildProperty`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}parentChildProperty`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}parentChildProperty`), namedNode(`${rdfs}comment`), literal(`Specifies a property which relates a parent concept in the hierarchy to a child concept.`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}parentChildProperty`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}parentChildProperty`), namedNode(`${rdfs}label`), literal(`parent-child property`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}parentChildProperty`), namedNode(`${rdfs}range`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}parentChildProperty`), namedNode(`${rdfs}domain`), namedNode(`${qb}HierarchicalCodeList`), namedNode(qb)),
        quad(namedNode(`${qb}slice`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}slice`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}slice`), namedNode(`${rdfs}comment`), literal(`Indicates a subset of a DataSet defined by fixing a subset of the dimensional values`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}slice`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}slice`), namedNode(`${rdfs}label`), literal(`slice`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}slice`), namedNode(`${rdfs}range`), namedNode(`${qb}Slice`), namedNode(qb)),
        quad(namedNode(`${qb}slice`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qb}observationGroup`), namedNode(qb)),
        quad(namedNode(`${qb}slice`), namedNode(`${rdfs}domain`), namedNode(`${qb}DataSet`), namedNode(qb)),
        quad(namedNode(`${qb}sliceKey`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}sliceKey`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}sliceKey`), namedNode(`${rdfs}comment`), literal(`indicates a slice key which is used for slices in this dataset`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}sliceKey`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}sliceKey`), namedNode(`${rdfs}label`), literal(`slice key`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}sliceKey`), namedNode(`${rdfs}range`), namedNode(`${qb}SliceKey`), namedNode(qb)),
        quad(namedNode(`${qb}sliceKey`), namedNode(`${rdfs}domain`), namedNode(`${qb}DataStructureDefinition`), namedNode(qb)),
        quad(namedNode(`${qb}sliceStructure`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}sliceStructure`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}sliceStructure`), namedNode(`${rdfs}comment`), literal(`indicates the sub-key corresponding to this slice`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}sliceStructure`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}sliceStructure`), namedNode(`${rdfs}label`), literal(`slice structure`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}sliceStructure`), namedNode(`${rdfs}range`), namedNode(`${qb}SliceKey`), namedNode(qb)),
        quad(namedNode(`${qb}sliceStructure`), namedNode(`${rdfs}domain`), namedNode(`${qb}Slice`), namedNode(qb)),
        quad(namedNode(`${qb}structure`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qb)),
        quad(namedNode(`${qb}structure`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qb)),
        quad(namedNode(`${qb}structure`), namedNode(`${rdfs}comment`), literal(`indicates the structure to which this data set conforms`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}structure`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns5}cube`), namedNode(qb)),
        quad(namedNode(`${qb}structure`), namedNode(`${rdfs}label`), literal(`structure`, 'en'), namedNode(qb)),
        quad(namedNode(`${qb}structure`), namedNode(`${rdfs}range`), namedNode(`${qb}DataStructureDefinition`), namedNode(qb)),
        quad(namedNode(`${qb}structure`), namedNode(`${rdfs}domain`), namedNode(`${qb}DataSet`), namedNode(qb)),
        quad(blankNodes[0], namedNode(`${foaf}mbox`), literal(`dave@epimorphics.com`), namedNode(qb)),
        quad(blankNodes[1], namedNode(`${foaf}mbox`), literal(`jeni@jenitennison.com`), namedNode(qb)),
        quad(blankNodes[2], namedNode(`${foaf}mbox`), literal(`richard@cyganiak.de`), namedNode(qb)),
        quad(blankNodes[3], namedNode(`${foaf}mbox`), literal(`ian@epimorphics.com`), namedNode(qb)),
        quad(blankNodes[4], namedNode(`${foaf}mbox`), literal(`arofan.gregory@earthlink.net`), namedNode(qb)),
        quad(blankNodes[7], namedNode(`${rdf}first`), namedNode(`${qb}HierarchicalCodeList`), namedNode(qb)),
        quad(blankNodes[7], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qb)),
        quad(blankNodes[8], namedNode(`${rdf}first`), namedNode(`${skos}Collection`), namedNode(qb)),
        quad(blankNodes[8], namedNode(`${rdf}rest`), blankNodes[7], namedNode(qb)),
        quad(blankNodes[6], namedNode(`${rdf}first`), namedNode(`${skos}ConceptScheme`), namedNode(qb)),
        quad(blankNodes[6], namedNode(`${rdf}rest`), blankNodes[8], namedNode(qb)),
    ];
};
