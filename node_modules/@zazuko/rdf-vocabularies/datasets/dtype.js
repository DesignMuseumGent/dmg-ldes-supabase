"use strict";
/* This file was automatically generated. Do not edit by hand. */
Object.defineProperty(exports, "__esModule", { value: true });
const { ns1, dc11, dtype, vaem, ns5, xsd, rdfs, owl, rdf, ns10 } = {
    'ns1': 'http://www.linkedmodel.org/1.1/schema/',
    'dc11': 'http://purl.org/dc/elements/1.1/',
    'dtype': 'http://www.linkedmodel.org/schema/dtype#',
    'vaem': 'http://www.linkedmodel.org/schema/vaem#',
    'ns5': 'http://voag.linkedmodel.org/voag#',
    'xsd': 'http://www.w3.org/2001/XMLSchema#',
    'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
    'owl': 'http://www.w3.org/2002/07/owl#',
    'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'ns10': 'http://www.linkedmodel.org/schema/'
};
exports.default = ({ blankNode, literal, namedNode, quad }) => {
    const blankNodes = [];
    for (let i = 0; i < 23; i++) {
        blankNodes.push(blankNode());
    }
    return [
        quad(namedNode(`${ns1}dtype`), namedNode(`${dc11}author`), literal(`Ralph Hodgson`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${dc11}subject`), literal(`Datatype schema`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${dc11}title`), literal(`Datatype Ontology`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${vaem}dateCreated`), literal(`2011-05-29`, namedNode(`${vaem}dateUnion`)), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${vaem}description`), literal(`The ontology "dtype" provides a specification of simple data types such as enumerations and codelists. These are needed in support of the conversion of XML Schemas and UML Models to OWL. The purpose of "dtype" is to provide a foundation for expressing rich data types. These data types are typically needed when dealing with OWL representations of data structures derived from XML Schema.`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${vaem}hasGraphRole`), namedNode(`${vaem}SchemaGraph`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${vaem}hasLicenseType`), namedNode(`${ns5}CC-SHAREALIKE_3PT0-US`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${vaem}lastUpdated`), literal(`2014-06-28`, namedNode(`${vaem}dateUnion`)), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${vaem}name`), literal(`DTYPE`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${vaem}namespace`), literal(`http://www.linkedmodel.org/schema/dtype`, namedNode(`${xsd}anyURI`)), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${vaem}namespacePrefix`), literal(`dtype`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${vaem}owner`), literal(`TopQuadrant`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${vaem}revision`), literal(`1.1`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dc11}author`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dc11}subject`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dc11}title`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dc11}contributor`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dc11}description`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${vaem}withAttributionTo`), namedNode(`${ns5}TopQuadrantAttribution`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${rdfs}label`), literal(`Datatype Ontology`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${owl}versionIRI`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${ns1}dtype`), namedNode(`${owl}versionInfo`), literal(`Created with TopBraid Composer`), namedNode(dtype)),
        quad(namedNode(`${dtype}CodeList`), namedNode(`${rdfs}label`), literal(`Codelist`), namedNode(dtype)),
        quad(namedNode(`${dtype}CodeList`), namedNode(`${vaem}comment`), literal(`A codelist is a controlled vocabulary of terms that are used to represent permissible values of a variable in information systems. The representaiton of codes in "dtype" has been influenced by CCTS and UBL.`), namedNode(dtype)),
        quad(namedNode(`${dtype}CodeList`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(dtype)),
        quad(namedNode(`${dtype}CodeList`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}CodeList`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}CodeList`), namedNode(`${rdfs}subClassOf`), namedNode(`${dtype}Enumeration`), namedNode(dtype)),
        quad(namedNode(`${ns10}dtype`), namedNode(`${rdf}type`), namedNode(`${owl}Ontology`), namedNode(dtype)),
        quad(namedNode(`${ns10}dtype`), namedNode(`${owl}imports`), namedNode(`${ns10}vaem`), namedNode(dtype)),
        quad(namedNode(`${dtype}Enumeration`), namedNode(`${rdfs}label`), literal(`DTYPE Enumeration`), namedNode(dtype)),
        quad(namedNode(`${dtype}Enumeration`), namedNode(`${vaem}comment`), literal(`A type that serves as a container for the enumerated values of an enumeration. This enables the enumeration itself to be referenceable. One need for this is in determing the default value of an enumeration , another need is in the management of sub-enumerations and composite enumerations.`), namedNode(dtype)),
        quad(namedNode(`${dtype}Enumeration`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(dtype)),
        quad(namedNode(`${dtype}Enumeration`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}Enumeration`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}Enumeration`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(dtype)),
        quad(namedNode(`${dtype}Enumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[0], namedNode(dtype)),
        quad(namedNode(`${dtype}Enumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[1], namedNode(dtype)),
        quad(namedNode(`${dtype}Enumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[2], namedNode(dtype)),
        quad(namedNode(`${dtype}CompositeCodeList`), namedNode(`${rdfs}label`), literal(`Composite Code List`), namedNode(dtype)),
        quad(namedNode(`${dtype}CompositeCodeList`), namedNode(`${vaem}comment`), literal(`A composite codelist is a codelist made up of other codelists. It does not introduce any new codes.`), namedNode(dtype)),
        quad(namedNode(`${dtype}CompositeCodeList`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(dtype)),
        quad(namedNode(`${dtype}CompositeCodeList`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}CompositeCodeList`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}CompositeCodeList`), namedNode(`${rdfs}subClassOf`), namedNode(`${dtype}CodeList`), namedNode(dtype)),
        quad(namedNode(`${dtype}CompositeCodeList`), namedNode(`${rdfs}subClassOf`), blankNodes[3], namedNode(dtype)),
        quad(namedNode(`${dtype}CompositeCodeList`), namedNode(`${owl}disjointWith`), namedNode(`${dtype}DerivedCodeList`), namedNode(dtype)),
        quad(namedNode(`${dtype}CompositeCodeList`), namedNode(`${owl}disjointWith`), namedNode(`${dtype}SimpleCodeList`), namedNode(dtype)),
        quad(blankNodes[3], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[3], namedNode(`${owl}onProperty`), namedNode(`${dtype}compositeOf`), namedNode(dtype)),
        quad(blankNodes[3], namedNode(`${owl}allValuesFrom`), namedNode(`${dtype}CodeList`), namedNode(dtype)),
        quad(namedNode(`${dtype}DerivedCodeList`), namedNode(`${rdfs}label`), literal(`Derived Code List`), namedNode(dtype)),
        quad(namedNode(`${dtype}DerivedCodeList`), namedNode(`${vaem}comment`), literal(`A derived codelist is a sublist of another codelist. The members that it has must be members of the source list.`), namedNode(dtype)),
        quad(namedNode(`${dtype}DerivedCodeList`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(dtype)),
        quad(namedNode(`${dtype}DerivedCodeList`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}DerivedCodeList`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}DerivedCodeList`), namedNode(`${rdfs}subClassOf`), namedNode(`${dtype}CodeList`), namedNode(dtype)),
        quad(namedNode(`${dtype}DerivedCodeList`), namedNode(`${rdfs}subClassOf`), blankNodes[4], namedNode(dtype)),
        quad(namedNode(`${dtype}DerivedCodeList`), namedNode(`${rdfs}subClassOf`), blankNodes[5], namedNode(dtype)),
        quad(namedNode(`${dtype}DerivedCodeList`), namedNode(`${rdfs}subClassOf`), blankNodes[6], namedNode(dtype)),
        quad(namedNode(`${dtype}DerivedCodeList`), namedNode(`${owl}disjointWith`), namedNode(`${dtype}CompositeCodeList`), namedNode(dtype)),
        quad(namedNode(`${dtype}DerivedCodeList`), namedNode(`${owl}disjointWith`), namedNode(`${dtype}SimpleCodeList`), namedNode(dtype)),
        quad(namedNode(`${dtype}SimpleCodeList`), namedNode(`${rdfs}label`), literal(`Simple Code List`), namedNode(dtype)),
        quad(namedNode(`${dtype}SimpleCodeList`), namedNode(`${vaem}comment`), literal(`A simple codelist is one made up only of enumerated values.`), namedNode(dtype)),
        quad(namedNode(`${dtype}SimpleCodeList`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(dtype)),
        quad(namedNode(`${dtype}SimpleCodeList`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}SimpleCodeList`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}SimpleCodeList`), namedNode(`${rdfs}subClassOf`), namedNode(`${dtype}CodeList`), namedNode(dtype)),
        quad(namedNode(`${dtype}SimpleCodeList`), namedNode(`${rdfs}subClassOf`), blankNodes[7], namedNode(dtype)),
        quad(namedNode(`${dtype}SimpleCodeList`), namedNode(`${owl}disjointWith`), namedNode(`${dtype}CompositeCodeList`), namedNode(dtype)),
        quad(namedNode(`${dtype}SimpleCodeList`), namedNode(`${owl}disjointWith`), namedNode(`${dtype}DerivedCodeList`), namedNode(dtype)),
        quad(blankNodes[4], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[4], namedNode(`${owl}onProperty`), namedNode(`${dtype}derivedFrom`), namedNode(dtype)),
        quad(blankNodes[4], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(dtype)),
        quad(blankNodes[5], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[5], namedNode(`${owl}onProperty`), namedNode(`${dtype}derivedFrom`), namedNode(dtype)),
        quad(blankNodes[5], namedNode(`${owl}allValuesFrom`), namedNode(`${dtype}CodeList`), namedNode(dtype)),
        quad(blankNodes[6], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[6], namedNode(`${owl}onProperty`), namedNode(`${dtype}hasMember`), namedNode(dtype)),
        quad(blankNodes[6], namedNode(`${owl}allValuesFrom`), namedNode(`${dtype}ValueReference`), namedNode(dtype)),
        quad(namedNode(`${dtype}EnumeratedValue`), namedNode(`${dc11}description`), literal(`The base class for datatypes that have values that are restriced to a set of literals or tokens. The members of the restriction may themselve be restriced by facets that apply to scalar data types.`), namedNode(dtype)),
        quad(namedNode(`${dtype}EnumeratedValue`), namedNode(`${rdfs}label`), literal(`DTYPE Enumerated value`), namedNode(dtype)),
        quad(namedNode(`${dtype}EnumeratedValue`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(dtype)),
        quad(namedNode(`${dtype}EnumeratedValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}EnumeratedValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}EnumeratedValue`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(dtype)),
        quad(namedNode(`${dtype}EnumeratedValue`), namedNode(`${rdfs}subClassOf`), blankNodes[8], namedNode(dtype)),
        quad(namedNode(`${dtype}EnumeratedValue`), namedNode(`${rdfs}subClassOf`), blankNodes[9], namedNode(dtype)),
        quad(namedNode(`${dtype}EnumeratedValue`), namedNode(`${rdfs}subClassOf`), blankNodes[10], namedNode(dtype)),
        quad(namedNode(`${dtype}EnumeratedValue`), namedNode(`${rdfs}subClassOf`), blankNodes[11], namedNode(dtype)),
        quad(namedNode(`${dtype}EnumeratedValue`), namedNode(`${rdfs}subClassOf`), blankNodes[12], namedNode(dtype)),
        quad(namedNode(`${dtype}EnumeratedValue`), namedNode(`${rdfs}subClassOf`), blankNodes[13], namedNode(dtype)),
        quad(namedNode(`${dtype}EnumeratedValue`), namedNode(`${rdfs}subClassOf`), blankNodes[14], namedNode(dtype)),
        quad(blankNodes[8], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[8], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(dtype)),
        quad(blankNodes[8], namedNode(`${owl}onProperty`), namedNode(`${dtype}value`), namedNode(dtype)),
        quad(blankNodes[9], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[9], namedNode(`${owl}onProperty`), namedNode(`${dtype}position`), namedNode(dtype)),
        quad(blankNodes[9], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(dtype)),
        quad(blankNodes[10], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[10], namedNode(`${owl}onProperty`), namedNode(`${dtype}order`), namedNode(dtype)),
        quad(blankNodes[10], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(dtype)),
        quad(blankNodes[11], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[11], namedNode(`${owl}onProperty`), namedNode(`${dtype}code`), namedNode(dtype)),
        quad(blankNodes[11], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(dtype)),
        quad(blankNodes[12], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[12], namedNode(`${owl}onProperty`), namedNode(`${vaem}url`), namedNode(dtype)),
        quad(blankNodes[12], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(dtype)),
        quad(blankNodes[13], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[13], namedNode(`${owl}onProperty`), namedNode(`${vaem}name`), namedNode(dtype)),
        quad(blankNodes[13], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(dtype)),
        quad(blankNodes[14], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[14], namedNode(`${owl}onProperty`), namedNode(`${vaem}description`), namedNode(dtype)),
        quad(blankNodes[14], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(dtype)),
        quad(blankNodes[0], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[0], namedNode(`${owl}onProperty`), namedNode(`${dtype}defaultValue`), namedNode(dtype)),
        quad(blankNodes[0], namedNode(`${owl}allValuesFrom`), namedNode(`${dtype}EnumeratedValue`), namedNode(dtype)),
        quad(blankNodes[1], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[1], namedNode(`${owl}onProperty`), namedNode(`${dtype}value`), namedNode(dtype)),
        quad(blankNodes[1], namedNode(`${owl}allValuesFrom`), namedNode(`${dtype}EnumeratedValue`), namedNode(dtype)),
        quad(blankNodes[2], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[2], namedNode(`${owl}onProperty`), namedNode(`${dtype}defaultValue`), namedNode(dtype)),
        quad(blankNodes[2], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(dtype)),
        quad(blankNodes[7], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[7], namedNode(`${owl}onProperty`), namedNode(`${dtype}hasMember`), namedNode(dtype)),
        quad(blankNodes[7], namedNode(`${owl}allValuesFrom`), namedNode(`${dtype}EnumeratedValue`), namedNode(dtype)),
        quad(namedNode(`${dtype}ValueReference`), namedNode(`${rdfs}label`), literal(`Value Reference`), namedNode(dtype)),
        quad(namedNode(`${dtype}ValueReference`), namedNode(`${vaem}comment`), literal(`A value reference is a pointer to an Enumerated Value. The original position of the value can be overridden by the position attribute.`), namedNode(dtype)),
        quad(namedNode(`${dtype}ValueReference`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(dtype)),
        quad(namedNode(`${dtype}ValueReference`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}ValueReference`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}ValueReference`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(dtype)),
        quad(namedNode(`${dtype}ValueReference`), namedNode(`${rdfs}subClassOf`), blankNodes[15], namedNode(dtype)),
        quad(namedNode(`${dtype}ValueReference`), namedNode(`${rdfs}subClassOf`), blankNodes[16], namedNode(dtype)),
        quad(namedNode(`${dtype}ValueReference`), namedNode(`${rdfs}subClassOf`), blankNodes[17], namedNode(dtype)),
        quad(blankNodes[15], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[15], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(dtype)),
        quad(blankNodes[15], namedNode(`${owl}onProperty`), namedNode(`${dtype}refersTo`), namedNode(dtype)),
        quad(blankNodes[16], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[16], namedNode(`${owl}onProperty`), namedNode(`${dtype}position`), namedNode(dtype)),
        quad(blankNodes[16], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(dtype)),
        quad(blankNodes[17], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(dtype)),
        quad(blankNodes[17], namedNode(`${owl}onProperty`), namedNode(`${dtype}refersTo`), namedNode(dtype)),
        quad(blankNodes[17], namedNode(`${owl}allValuesFrom`), namedNode(`${dtype}EnumeratedValue`), namedNode(dtype)),
        quad(namedNode(`${dtype}code`), namedNode(`${rdfs}label`), literal(`code`), namedNode(dtype)),
        quad(namedNode(`${dtype}code`), namedNode(`${vaem}comment`), literal(`A property for expressing an encoded value. The range has been set to "xsd:anySimpleType" to allow for a variety of scalar datatypes.`), namedNode(dtype)),
        quad(namedNode(`${dtype}code`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(dtype)),
        quad(namedNode(`${dtype}code`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}code`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}code`), namedNode(`${rdfs}range`), namedNode(`${xsd}anySimpleType`), namedNode(dtype)),
        quad(namedNode(`${dtype}compositeOf`), namedNode(`${rdfs}label`), literal(`composite of`), namedNode(dtype)),
        quad(namedNode(`${dtype}compositeOf`), namedNode(`${vaem}comment`), literal(`Aproperty for constructing composite data structures`), namedNode(dtype)),
        quad(namedNode(`${dtype}compositeOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(dtype)),
        quad(namedNode(`${dtype}compositeOf`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}compositeOf`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}defaultValue`), namedNode(`${rdfs}label`), literal(`default value`), namedNode(dtype)),
        quad(namedNode(`${dtype}defaultValue`), namedNode(`${vaem}comment`), literal(`The property "dtype:defaultValue" is a general property for specifying a value in situations where none is specified, or can be determined. In some cases of use, this property could have a scalar value and in other cases may need to refer to a first class concept that holds a "value object".  For this reason, the  type of this property is set as "rdf:Property" and the property is rangeless.`), namedNode(dtype)),
        quad(namedNode(`${dtype}defaultValue`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(dtype)),
        quad(namedNode(`${dtype}defaultValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}defaultValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}derivedFrom`), namedNode(`${rdfs}label`), literal(`derived from`), namedNode(dtype)),
        quad(namedNode(`${dtype}derivedFrom`), namedNode(`${vaem}comment`), literal(`A property for specifying a derivation relationship.`), namedNode(dtype)),
        quad(namedNode(`${dtype}derivedFrom`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(dtype)),
        quad(namedNode(`${dtype}derivedFrom`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}derivedFrom`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}hasMember`), namedNode(`${rdfs}label`), literal(`has member`), namedNode(dtype)),
        quad(namedNode(`${dtype}hasMember`), namedNode(`${vaem}comment`), literal(`A property for specifying how member elements make up a data structure.`), namedNode(dtype)),
        quad(namedNode(`${dtype}hasMember`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(dtype)),
        quad(namedNode(`${dtype}hasMember`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}hasMember`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}isInvalid`), namedNode(`${rdfs}label`), literal(`is invalid`), namedNode(dtype)),
        quad(namedNode(`${dtype}isInvalid`), namedNode(`${vaem}comment`), literal(`A boolean flag to state that a value is invalid with respect to its type.`), namedNode(dtype)),
        quad(namedNode(`${dtype}isInvalid`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(dtype)),
        quad(namedNode(`${dtype}isInvalid`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}isInvalid`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}isInvalid`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(dtype)),
        quad(namedNode(`${dtype}literal`), namedNode(`${rdfs}label`), literal(`literal`), namedNode(dtype)),
        quad(namedNode(`${dtype}literal`), namedNode(`${vaem}comment`), literal(`A general purpose property for holding string literals.`), namedNode(dtype)),
        quad(namedNode(`${dtype}literal`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(dtype)),
        quad(namedNode(`${dtype}literal`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}literal`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}literal`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(dtype)),
        quad(namedNode(`${dtype}numericUnion`), namedNode(`${dc11}description`), literal(`A datatype that is the union of numeric xsd data types. "numericUnion" is equivalent to the xsd specification that uses an xsd:union of memberTypes="xsd:decimal xsd:double xsd:float xsd:integer".`), namedNode(dtype)),
        quad(namedNode(`${dtype}numericUnion`), namedNode(`${rdfs}label`), literal(`numeric union`), namedNode(dtype)),
        quad(namedNode(`${dtype}numericUnion`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(dtype)),
        quad(namedNode(`${dtype}numericUnion`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}numericUnion`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}numericUnion`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Resource`), namedNode(dtype)),
        quad(namedNode(`${dtype}numericUnion`), namedNode(`${owl}equivalentClass`), blankNodes[18], namedNode(dtype)),
        quad(blankNodes[18], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(dtype)),
        quad(blankNodes[18], namedNode(`${owl}unionOf`), blankNodes[19], namedNode(dtype)),
        quad(namedNode(`${dtype}order`), namedNode(`${rdfs}label`), literal(`order`), namedNode(dtype)),
        quad(namedNode(`${dtype}order`), namedNode(`${vaem}comment`), literal(`The property "dtype:order" provides a means to specify a precedence. One use of order is in specifying ordered enumerations such as "voag:ConfidentialityLevel".  A similar property, but with an important type difference, is "vaem:orderIndex". This is for use on property occurrences in class axioms where it can be placed on a restriction to specify how that property may be transformed into other representations where ordering has some importance, for example, in XML Schema sequences.  Whereas "vaem:order" is a datatype property, "vaem:orderIndex" is an annotation property.`), namedNode(dtype)),
        quad(namedNode(`${dtype}order`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(dtype)),
        quad(namedNode(`${dtype}order`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}order`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}order`), namedNode(`${rdfs}range`), namedNode(`${xsd}nonNegativeInteger`), namedNode(dtype)),
        quad(namedNode(`${dtype}order`), namedNode(`${rdfs}seeAlso`), namedNode(`${dtype}orderIndex`), namedNode(dtype)),
        quad(namedNode(`${dtype}orderIndex`), namedNode(`${rdfs}label`), literal(`order index`), namedNode(dtype)),
        quad(namedNode(`${dtype}orderIndex`), namedNode(`${vaem}comment`), literal(`The property "dtype:orderIndex" is an annotation property to specify a position that some value or structure will have. One use is to specify the place that a resource has in a sequence. One use is on property occurrences in class axioms. Here "vaem:orderIndex" is placed on a restriction to specify how that property may be transformed into a representation where ordering has some importance, for example, in XML Schema sequences.`), namedNode(dtype)),
        quad(namedNode(`${dtype}orderIndex`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(dtype)),
        quad(namedNode(`${dtype}orderIndex`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}orderIndex`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}orderIndex`), namedNode(`${rdfs}range`), namedNode(`${xsd}nonNegativeInteger`), namedNode(dtype)),
        quad(namedNode(`${dtype}position`), namedNode(`${rdfs}label`), literal(`position`), namedNode(dtype)),
        quad(namedNode(`${dtype}position`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(dtype)),
        quad(namedNode(`${dtype}position`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}position`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}position`), namedNode(`${rdfs}range`), namedNode(`${xsd}nonNegativeInteger`), namedNode(dtype)),
        quad(namedNode(`${dtype}refersTo`), namedNode(`${rdfs}label`), literal(`refers to`), namedNode(dtype)),
        quad(namedNode(`${dtype}refersTo`), namedNode(`${vaem}comment`), literal(`An indirection pointer for relating a slot in am occurrence data structure, such as "dtype:ValueReference" with another resource.`), namedNode(dtype)),
        quad(namedNode(`${dtype}refersTo`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(dtype)),
        quad(namedNode(`${dtype}refersTo`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}refersTo`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}type`), namedNode(`${rdfs}label`), literal(`datatype`), namedNode(dtype)),
        quad(namedNode(`${dtype}type`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(dtype)),
        quad(namedNode(`${dtype}type`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}type`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}value`), namedNode(`${rdfs}label`), literal(`value`), namedNode(dtype)),
        quad(namedNode(`${dtype}value`), namedNode(`${vaem}comment`), literal(`The property "dtype:value" is a general property that in some cases could have scalar values and in other cases may refer to a first class concept that is a "value object". For this reason, the  type of this property is set as "rdf:Property" and the property is rangeless.`), namedNode(dtype)),
        quad(namedNode(`${dtype}value`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(dtype)),
        quad(namedNode(`${dtype}value`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns1}dtype`), namedNode(dtype)),
        quad(namedNode(`${dtype}value`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns10}dtype`), namedNode(dtype)),
        quad(blankNodes[19], namedNode(`${rdf}first`), namedNode(`${xsd}float`), namedNode(dtype)),
        quad(blankNodes[19], namedNode(`${rdf}rest`), blankNodes[20], namedNode(dtype)),
        quad(blankNodes[20], namedNode(`${rdf}first`), namedNode(`${xsd}decimal`), namedNode(dtype)),
        quad(blankNodes[20], namedNode(`${rdf}rest`), blankNodes[21], namedNode(dtype)),
        quad(blankNodes[22], namedNode(`${rdf}first`), namedNode(`${xsd}double`), namedNode(dtype)),
        quad(blankNodes[22], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(dtype)),
        quad(blankNodes[21], namedNode(`${rdf}first`), namedNode(`${xsd}integer`), namedNode(dtype)),
        quad(blankNodes[21], namedNode(`${rdf}rest`), blankNodes[22], namedNode(dtype)),
    ];
};
