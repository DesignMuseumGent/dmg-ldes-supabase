"use strict";
/* This file was automatically generated. Do not edit by hand. */
Object.defineProperty(exports, "__esModule", { value: true });
const { test, rdf, owl, rdfs, xsd, dc11, ns7, ns8, ns9 } = {
    'test': 'http://www.w3.org/2006/03/test-description#',
    'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'owl': 'http://www.w3.org/2002/07/owl#',
    'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
    'xsd': 'http://www.w3.org/2001/XMLSchema#',
    'dc11': 'http://purl.org/dc/elements/1.1/',
    'ns7': 'http://www.w3.org/2001/tag/fdesc54/webarch#',
    'ns8': 'https://www.w3.org/2006/03/',
    'ns9': 'http://www.w3.org/TR/2005/NOTE-test-metadata-20050914/'
};
exports.default = ({ blankNode, literal, namedNode, quad }) => {
    const blankNodes = [];
    for (let i = 0; i < 15; i++) {
        blankNodes.push(blankNode());
    }
    return [
        quad(namedNode(`${test}ReviewStatus`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(test)),
        quad(namedNode(`${test}ReviewStatus`), namedNode(`${rdfs}comment`), literal(`A particular stage in a review process`), namedNode(test)),
        quad(namedNode(`${test}ReviewStatus`), namedNode(`${rdfs}label`), literal(`Status in a review process`, 'en'), namedNode(test)),
        quad(namedNode(`${test}SimpleReviewStatus`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(test)),
        quad(namedNode(`${test}SimpleReviewStatus`), namedNode(`${rdfs}label`), literal(`A status for a simple review process containing 6 possible stages`, 'en'), namedNode(test)),
        quad(namedNode(`${test}SimpleReviewStatus`), namedNode(`${rdfs}subClassOf`), namedNode(`${test}ReviewStatus`), namedNode(test)),
        quad(namedNode(`${test}SimpleReviewStatus`), namedNode(`${owl}oneOf`), blankNodes[0], namedNode(test)),
        quad(blankNodes[0], namedNode(`${rdf}first`), namedNode(`${test}unreviewed`), namedNode(test)),
        quad(blankNodes[0], namedNode(`${rdf}rest`), blankNodes[1], namedNode(test)),
        quad(namedNode(`${test}SpecificationTestCase`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(test)),
        quad(namedNode(`${test}SpecificationTestCase`), namedNode(`${rdfs}comment`), literal(`A test case which relates to a requirement set in a specification`), namedNode(test)),
        quad(namedNode(`${test}SpecificationTestCase`), namedNode(`${rdfs}label`), literal(`A Test Case based on a specification`, 'en'), namedNode(test)),
        quad(namedNode(`${test}SpecificationTestCase`), namedNode(`${rdfs}subClassOf`), namedNode(`${test}TestCase`), namedNode(test)),
        quad(namedNode(`${test}SpecificationTestCase`), namedNode(`${rdfs}subClassOf`), blankNodes[2], namedNode(test)),
        quad(namedNode(`${test}TestCase`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(test)),
        quad(namedNode(`${test}TestCase`), namedNode(`${rdfs}comment`), literal(`A set of test inputs, execution conditions, and expected results developed for a particular objective, such as to exercise a particular program path or to verify compliance with a specific requirement`), namedNode(test)),
        quad(namedNode(`${test}TestCase`), namedNode(`${rdfs}label`), literal(`A Test Case`, 'en'), namedNode(test)),
        quad(namedNode(`${test}TestCase`), namedNode(`${rdfs}subClassOf`), blankNodes[3], namedNode(test)),
        quad(namedNode(`${test}TestCase`), namedNode(`${rdfs}subClassOf`), blankNodes[4], namedNode(test)),
        quad(namedNode(`${test}TestCase`), namedNode(`${rdfs}subClassOf`), blankNodes[5], namedNode(test)),
        quad(namedNode(`${test}TestCase`), namedNode(`${rdfs}subClassOf`), blankNodes[6], namedNode(test)),
        quad(namedNode(`${test}TestCase`), namedNode(`${rdfs}subClassOf`), blankNodes[7], namedNode(test)),
        quad(namedNode(`${test}TestCase`), namedNode(`${rdfs}subClassOf`), blankNodes[8], namedNode(test)),
        quad(namedNode(`${test}TestCase`), namedNode(`${rdfs}subClassOf`), blankNodes[9], namedNode(test)),
        quad(namedNode(`${test}TestCase`), namedNode(`${rdfs}subClassOf`), blankNodes[10], namedNode(test)),
        quad(blankNodes[2], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(test)),
        quad(blankNodes[2], namedNode(`${owl}minCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(test)),
        quad(blankNodes[2], namedNode(`${owl}onProperty`), namedNode(`${test}specificationReference`), namedNode(test)),
        quad(blankNodes[3], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(test)),
        quad(blankNodes[3], namedNode(`${owl}onProperty`), namedNode(`${dc11}description`), namedNode(test)),
        quad(blankNodes[3], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(test)),
        quad(blankNodes[4], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(test)),
        quad(blankNodes[4], namedNode(`${owl}minCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(test)),
        quad(blankNodes[4], namedNode(`${owl}onProperty`), namedNode(`${dc11}contributor`), namedNode(test)),
        quad(blankNodes[5], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(test)),
        quad(blankNodes[5], namedNode(`${owl}minCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(test)),
        quad(blankNodes[5], namedNode(`${owl}onProperty`), namedNode(`${test}purpose`), namedNode(test)),
        quad(blankNodes[6], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(test)),
        quad(blankNodes[6], namedNode(`${owl}onProperty`), namedNode(`${test}reviewStatus`), namedNode(test)),
        quad(blankNodes[6], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(test)),
        quad(blankNodes[7], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(test)),
        quad(blankNodes[7], namedNode(`${owl}minCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(test)),
        quad(blankNodes[7], namedNode(`${owl}onProperty`), namedNode(`${dc11}rights`), namedNode(test)),
        quad(blankNodes[8], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(test)),
        quad(blankNodes[8], namedNode(`${owl}minCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(test)),
        quad(blankNodes[8], namedNode(`${owl}onProperty`), namedNode(`${dc11}title`), namedNode(test)),
        quad(blankNodes[9], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(test)),
        quad(blankNodes[9], namedNode(`${owl}onProperty`), namedNode(`${test}purpose`), namedNode(test)),
        quad(blankNodes[9], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(test)),
        quad(blankNodes[10], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(test)),
        quad(blankNodes[10], namedNode(`${owl}onProperty`), namedNode(`${dc11}title`), namedNode(test)),
        quad(blankNodes[10], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(test)),
        quad(namedNode(`${test}accepted`), namedNode(`${rdf}type`), namedNode(`${test}ReviewStatus`), namedNode(test)),
        quad(namedNode(`${test}accepted`), namedNode(`${rdfs}comment`), literal(`the item has gone through a first review, which shows it as valid for further processing`), namedNode(test)),
        quad(namedNode(`${test}accepted`), namedNode(`${rdfs}label`), literal(`accepted`, 'en'), namedNode(test)),
        quad(namedNode(`${test}approved`), namedNode(`${rdf}type`), namedNode(`${test}ReviewStatus`), namedNode(test)),
        quad(namedNode(`${test}approved`), namedNode(`${rdfs}comment`), literal(`the item has gone through the review process and was approved`), namedNode(test)),
        quad(namedNode(`${test}approved`), namedNode(`${rdfs}label`), literal(`approved`, 'en'), namedNode(test)),
        quad(namedNode(`${test}assigned`), namedNode(`${rdf}type`), namedNode(`${test}ReviewStatus`), namedNode(test)),
        quad(namedNode(`${test}assigned`), namedNode(`${rdfs}comment`), literal(`a more specific review of the item has been assigned to someone`), namedNode(test)),
        quad(namedNode(`${test}assigned`), namedNode(`${rdfs}label`), literal(`assigned`, 'en'), namedNode(test)),
        quad(namedNode(`${test}expectedResults`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(test)),
        quad(namedNode(`${test}expectedResults`), namedNode(`${rdfs}comment`), literal(`The results that a conformant implementation is expected to produce when this test is executed`), namedNode(test)),
        quad(namedNode(`${test}expectedResults`), namedNode(`${rdfs}label`), literal(`expected results`, 'en'), namedNode(test)),
        quad(namedNode(`${test}expectedResults`), namedNode(`${rdfs}domain`), namedNode(`${test}TestCase`), namedNode(test)),
        quad(namedNode(`${test}informationResourceInput`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(test)),
        quad(namedNode(`${test}informationResourceInput`), namedNode(`${rdfs}comment`), literal(`Information Resource (e.g. a file) used as input for the test case`, 'en'), namedNode(test)),
        quad(namedNode(`${test}informationResourceInput`), namedNode(`${rdfs}label`), literal(`information resource as input`, 'en'), namedNode(test)),
        quad(namedNode(`${test}informationResourceInput`), namedNode(`${rdfs}range`), namedNode(`${ns7}InformationResource`), namedNode(test)),
        quad(namedNode(`${test}informationResourceInput`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${test}input`), namedNode(test)),
        quad(namedNode(`${test}input`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(test)),
        quad(namedNode(`${test}input`), namedNode(`${rdfs}comment`), literal(`Parameters or data that are needed for the test execution.`, 'en'), namedNode(test)),
        quad(namedNode(`${test}input`), namedNode(`${rdfs}label`), literal(`input`, 'en'), namedNode(test)),
        quad(namedNode(`${test}input`), namedNode(`${rdfs}domain`), namedNode(`${test}TestCase`), namedNode(test)),
        quad(namedNode(`${test}informationResourceResults`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(test)),
        quad(namedNode(`${test}informationResourceResults`), namedNode(`${rdfs}comment`), literal(`Information Resource (e.g. a file) that contains the expected results for the test case`), namedNode(test)),
        quad(namedNode(`${test}informationResourceResults`), namedNode(`${rdfs}label`), literal(`information resource as expected results`, 'en'), namedNode(test)),
        quad(namedNode(`${test}informationResourceResults`), namedNode(`${rdfs}range`), namedNode(`${ns7}InformationResource`), namedNode(test)),
        quad(namedNode(`${test}informationResourceResults`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${test}expectedResults`), namedNode(test)),
        quad(namedNode(`${test}onhold`), namedNode(`${rdf}type`), namedNode(`${test}ReviewStatus`), namedNode(test)),
        quad(namedNode(`${test}onhold`), namedNode(`${rdfs}comment`), literal(`the item had already gone through the review process, but the results of the review need to be re-assessed due to new input`), namedNode(test)),
        quad(namedNode(`${test}onhold`), namedNode(`${rdfs}label`), literal(`on hold`), namedNode(test)),
        quad(namedNode(`${test}preCondition`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(test)),
        quad(namedNode(`${test}preCondition`), namedNode(`${rdfs}comment`), literal(`a condition that must be met before the test is executed`, 'en'), namedNode(test)),
        quad(namedNode(`${test}preCondition`), namedNode(`${rdfs}label`), literal(`precondition`, 'en'), namedNode(test)),
        quad(namedNode(`${test}preCondition`), namedNode(`${rdfs}domain`), namedNode(`${test}TestCase`), namedNode(test)),
        quad(namedNode(`${test}preCondition`), namedNode(`${rdfs}range`), namedNode(`${rdfs}Literal`), namedNode(test)),
        quad(namedNode(`${test}purpose`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(test)),
        quad(namedNode(`${test}purpose`), namedNode(`${rdfs}label`), literal(`purpose`, 'en'), namedNode(test)),
        quad(namedNode(`${test}purpose`), namedNode(`${rdfs}domain`), namedNode(`${test}TestCase`), namedNode(test)),
        quad(namedNode(`${test}purpose`), namedNode(`${rdfs}range`), namedNode(`${rdfs}Literal`), namedNode(test)),
        quad(namedNode(`${test}rejected`), namedNode(`${rdf}type`), namedNode(`${test}ReviewStatus`), namedNode(test)),
        quad(namedNode(`${test}rejected`), namedNode(`${rdfs}comment`), literal(`the item has gone through the review process and was rejected`), namedNode(test)),
        quad(namedNode(`${test}rejected`), namedNode(`${rdfs}label`), literal(`rejected`, 'en'), namedNode(test)),
        quad(namedNode(`${test}reviewStatus`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(test)),
        quad(namedNode(`${test}reviewStatus`), namedNode(`${rdfs}label`), literal(`status of review`, 'en'), namedNode(test)),
        quad(namedNode(`${test}reviewStatus`), namedNode(`${rdfs}range`), namedNode(`${test}ReviewStatus`), namedNode(test)),
        quad(namedNode(`${test}specificationReference`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(test)),
        quad(namedNode(`${test}specificationReference`), namedNode(`${rdfs}comment`), literal(`a description or a link of what part of which specification lead to the creation of this test case`, 'en'), namedNode(test)),
        quad(namedNode(`${test}specificationReference`), namedNode(`${rdfs}label`), literal(`reference in specification`, 'en'), namedNode(test)),
        quad(namedNode(`${test}specificationReference`), namedNode(`${rdfs}domain`), namedNode(`${test}TestCase`), namedNode(test)),
        quad(namedNode(`${test}specificationReference`), namedNode(`${rdfs}range`), namedNode(`${rdfs}Literal`), namedNode(test)),
        quad(namedNode(`${test}unreviewed`), namedNode(`${rdf}type`), namedNode(`${test}ReviewStatus`), namedNode(test)),
        quad(namedNode(`${test}unreviewed`), namedNode(`${rdfs}comment`), literal(`the item has been proposed, but hasn't been reviewed (e.g. for completeness) yet`), namedNode(test)),
        quad(namedNode(`${test}unreviewed`), namedNode(`${rdfs}label`), literal(`unreviewed`, 'en'), namedNode(test)),
        quad(namedNode(`${ns8}test-description`), namedNode(`${rdfs}seeAlso`), namedNode(ns9), namedNode(test)),
        quad(blankNodes[11], namedNode(`${rdf}first`), namedNode(`${test}approved`), namedNode(test)),
        quad(blankNodes[11], namedNode(`${rdf}rest`), blankNodes[12], namedNode(test)),
        quad(blankNodes[12], namedNode(`${rdf}first`), namedNode(`${test}rejected`), namedNode(test)),
        quad(blankNodes[12], namedNode(`${rdf}rest`), blankNodes[13], namedNode(test)),
        quad(blankNodes[13], namedNode(`${rdf}first`), namedNode(`${test}onhold`), namedNode(test)),
        quad(blankNodes[13], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(test)),
        quad(blankNodes[1], namedNode(`${rdf}first`), namedNode(`${test}accepted`), namedNode(test)),
        quad(blankNodes[1], namedNode(`${rdf}rest`), blankNodes[14], namedNode(test)),
        quad(blankNodes[14], namedNode(`${rdf}first`), namedNode(`${test}assigned`), namedNode(test)),
        quad(blankNodes[14], namedNode(`${rdf}rest`), blankNodes[11], namedNode(test)),
    ];
};
