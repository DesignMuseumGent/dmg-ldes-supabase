/* This file was automatically generated. Do not edit by hand. */
const {
  ns1,
  dcterms,
  xsd,
  rdf,
  owl,
  rdfs,
  ns7,
  ns8
} = {
  'ns1': 'http://www.w3.org/ns/shex#',
  'dcterms': 'http://purl.org/dc/terms/',
  'xsd': 'http://www.w3.org/2001/XMLSchema#',
  'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
  'owl': 'http://www.w3.org/2002/07/owl#',
  'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
  'ns7': 'http://shex.io/',
  'ns8': 'https://github.com/shexSpec/shexspec.github.io/commit/'
};
export default (({
  blankNode,
  literal,
  namedNode,
  quad
}) => {
  const blankNodes = [];

  for (let i = 0; i < 55; i++) {
    blankNodes.push(blankNode());
  }

  return [quad(namedNode(ns1), namedNode(`${dcterms}date`), literal(`2017-07-07`, namedNode(`${xsd}date`)), namedNode(ns1)), quad(namedNode(ns1), namedNode(`${dcterms}description`), literal(`This document describes the RDFS vocabulary description used in the Shape Expression Language (ShEx) [[shex-semantics]] along with the default JSON-LD Context and shape expression to validate RDF versions of shapes.`, 'en'), namedNode(ns1)), quad(namedNode(ns1), namedNode(`${dcterms}title`), literal(`Shape Expression Vocabulary`, 'en'), namedNode(ns1)), quad(namedNode(ns1), namedNode(`${rdf}type`), namedNode(`${owl}Ontology`), namedNode(ns1)), quad(namedNode(ns1), namedNode(`${rdfs}seeAlso`), namedNode(`${ns7}shex-semantics`), namedNode(ns1)), quad(namedNode(ns1), namedNode(`${owl}versionInfo`), namedNode(`${ns8}e05f8e97471f5271f50612bed253102f770364b4`), namedNode(ns1)), quad(namedNode(`${ns1}Annotation`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}Annotation`), namedNode(`${rdfs}comment`), literal(`Annotations provide a format-independent way to provide additional information about elements in a schema. `, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}Annotation`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}Annotation`), namedNode(`${rdfs}label`), literal(`Annotation`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}EachOf`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}EachOf`), namedNode(`${rdfs}comment`), literal(`A TripleExpression composed of one or more sub-expressions, all of which must match.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}EachOf`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}EachOf`), namedNode(`${rdfs}label`), literal(`Each Of`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}EachOf`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}TripleExpression`), namedNode(ns1)), quad(namedNode(`${ns1}TripleExpression`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}TripleExpression`), namedNode(`${rdfs}comment`), literal(`The abstract class of Triple Expressions.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}TripleExpression`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}TripleExpression`), namedNode(`${rdfs}label`), literal(`Triple Expression`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}IriStem`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}IriStem`), namedNode(`${rdfs}comment`), literal(`An IRI prefix used for matching IRIs.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}IriStem`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}IriStem`), namedNode(`${rdfs}label`), literal(`IRI Stem`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}IriStem`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Stem`), namedNode(ns1)), quad(namedNode(`${ns1}Stem`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}Stem`), namedNode(`${rdfs}comment`), literal(`Abstract class for Stems`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}Stem`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}Stem`), namedNode(`${rdfs}label`), literal(`Stem`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}IriStemRange`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}IriStemRange`), namedNode(`${rdfs}comment`), literal(`An IRI prefix (or wildcard) along with a set of excluded values, used for node matching.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}IriStemRange`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}IriStemRange`), namedNode(`${rdfs}label`), literal(`IRI StemRange`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}IriStemRange`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}StemRange`), namedNode(ns1)), quad(namedNode(`${ns1}StemRange`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}StemRange`), namedNode(`${rdfs}comment`), literal(`Abstract Class for Stem Ranges`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}StemRange`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}StemRange`), namedNode(`${rdfs}label`), literal(`StemRange`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}Language`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}Language`), namedNode(`${rdfs}comment`), literal(`An Language tag used for matching Literal Languages.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}Language`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}Language`), namedNode(`${rdfs}label`), literal(`Language`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}LanguageStem`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}LanguageStem`), namedNode(`${rdfs}comment`), literal(`An Language prefix used for matching Literal Languages.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}LanguageStem`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}LanguageStem`), namedNode(`${rdfs}label`), literal(`Language Stem`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}LanguageStem`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Stem`), namedNode(ns1)), quad(namedNode(`${ns1}LanguageStemRange`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}LanguageStemRange`), namedNode(`${rdfs}comment`), literal(`An Language prefix (or wildcard) along with a set of excluded values, used for node matching.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}LanguageStemRange`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}LanguageStemRange`), namedNode(`${rdfs}label`), literal(`Language StemRange`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}LanguageStemRange`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}StemRange`), namedNode(ns1)), quad(namedNode(`${ns1}LiteralStem`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}LiteralStem`), namedNode(`${rdfs}comment`), literal(`An Literal prefix used for matching Literals.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}LiteralStem`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}LiteralStem`), namedNode(`${rdfs}label`), literal(`Literal Stem`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}LiteralStem`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Stem`), namedNode(ns1)), quad(namedNode(`${ns1}LiteralStemRange`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}LiteralStemRange`), namedNode(`${rdfs}comment`), literal(`An Literal prefix (or wildcard) along with a set of excluded values, used for node matching.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}LiteralStemRange`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}LiteralStemRange`), namedNode(`${rdfs}label`), literal(`Literal StemRange`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}LiteralStemRange`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}StemRange`), namedNode(ns1)), quad(namedNode(`${ns1}NodeConstraint`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}NodeConstraint`), namedNode(`${rdfs}comment`), literal(`A constraint on the type or value of an RDF Node.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}NodeConstraint`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}NodeConstraint`), namedNode(`${rdfs}label`), literal(`Node Constraint`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}NodeConstraint`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ShapeExpression`), namedNode(ns1)), quad(namedNode(`${ns1}ShapeExpression`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}ShapeExpression`), namedNode(`${rdfs}comment`), literal(`The abstract class of Shape Expressions.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}ShapeExpression`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}ShapeExpression`), namedNode(`${rdfs}label`), literal(`Shape Expression`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}NodeKind`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}NodeKind`), namedNode(`${rdfs}comment`), literal(`The set of kinds of RDF Nodes.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}NodeKind`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}NodeKind`), namedNode(`${rdfs}label`), literal(`Node Kind`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}OneOf`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}OneOf`), namedNode(`${rdfs}comment`), literal(`A TripleExpression composed of one or more sub-expressions, one of which must match.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}OneOf`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}OneOf`), namedNode(`${rdfs}label`), literal(`One Of`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}OneOf`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}TripleExpression`), namedNode(ns1)), quad(namedNode(`${ns1}Schema`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}Schema`), namedNode(`${rdfs}comment`), literal(`A Schema contains the set of shapes, used for matching a focus node.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}Schema`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}Schema`), namedNode(`${rdfs}label`), literal(`Schema`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}SemAct`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}SemAct`), namedNode(`${rdfs}comment`), literal(`A list of Semantic Actions that serve as an extension point for Shape Expressions. They appear in lists in Schema's startActs and Shape, OneOf, EachOf and TripleConstraint's semActs.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}SemAct`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}SemAct`), namedNode(`${rdfs}label`), literal(`Semantic Actions`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}Shape`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}Shape`), namedNode(`${rdfs}comment`), literal(`A shapes schema is captured in a Schema object where shapes is a mapping from shape label to shape expression.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}Shape`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}Shape`), namedNode(`${rdfs}label`), literal(`Shape Or`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}Shape`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ShapeExpression`), namedNode(ns1)), quad(namedNode(`${ns1}ShapeAnd`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}ShapeAnd`), namedNode(`${rdfs}comment`), literal(`A ShapeExpression composed of one or more sub-expressions, all of which must match.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}ShapeAnd`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}ShapeAnd`), namedNode(`${rdfs}label`), literal(`Shape And`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}ShapeAnd`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ShapeExpression`), namedNode(ns1)), quad(namedNode(`${ns1}ShapeExternal`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}ShapeExternal`), namedNode(`${rdfs}comment`), literal(`A reference to a shape defined in some external Schema.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}ShapeExternal`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}ShapeExternal`), namedNode(`${rdfs}label`), literal(`Shape External`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}ShapeExternal`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ShapeExpression`), namedNode(ns1)), quad(namedNode(`${ns1}ShapeNot`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}ShapeNot`), namedNode(`${rdfs}comment`), literal(`A ShapeNot is satisfied when it’s included ShapeExpression is not satisfied.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}ShapeNot`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}ShapeNot`), namedNode(`${rdfs}label`), literal(`Shape Not`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}ShapeNot`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ShapeExpression`), namedNode(ns1)), quad(namedNode(`${ns1}ShapeOr`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}ShapeOr`), namedNode(`${rdfs}comment`), literal(`A ShapeExpression composed of one or more sub-expressions, one of which must match.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}ShapeOr`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}ShapeOr`), namedNode(`${rdfs}label`), literal(`Shape Or`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}ShapeOr`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ShapeExpression`), namedNode(ns1)), quad(namedNode(`${ns1}TripleConstraint`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}TripleConstraint`), namedNode(`${rdfs}comment`), literal(`A constraint on a triple having a specific predicate and optionally a shape expression used for matching values.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}TripleConstraint`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}TripleConstraint`), namedNode(`${rdfs}label`), literal(`Triple Constraint`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}TripleConstraint`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}TripleExpression`), namedNode(ns1)), quad(namedNode(`${ns1}Wildcard`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)), quad(namedNode(`${ns1}Wildcard`), namedNode(`${rdfs}comment`), literal(`Indicates that a stem is a Wildcard, rather than a URI prefix.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}Wildcard`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}Wildcard`), namedNode(`${rdfs}label`), literal(`Wildcard`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}annotation`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}annotation`), namedNode(`${rdfs}comment`), literal(`Annotations on a TripleExpression.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}annotation`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}annotation`), namedNode(`${rdfs}label`), literal(`annotation`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}annotation`), namedNode(`${rdfs}domain`), blankNodes[0], namedNode(ns1)), quad(namedNode(`${ns1}annotation`), namedNode(`${rdfs}range`), namedNode(`${ns1}Annotation`), namedNode(ns1)), quad(blankNodes[0], namedNode(`${owl}unionOf`), blankNodes[1], namedNode(ns1)), quad(namedNode(`${ns1}bnode`), namedNode(`${rdf}type`), namedNode(`${ns1}NodeKind`), namedNode(ns1)), quad(namedNode(`${ns1}bnode`), namedNode(`${rdfs}comment`), literal(`Requires node to be a Blank Node`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}bnode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}bnode`), namedNode(`${rdfs}label`), literal(`bnode`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}closed`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}closed`), namedNode(`${rdfs}comment`), literal(`Indicates that a Shape is closed, meaning that it may contain no property values other than those used within TripleConstraints.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}closed`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}closed`), namedNode(`${rdfs}label`), literal(`closed`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}closed`), namedNode(`${rdfs}domain`), namedNode(`${ns1}Shape`), namedNode(ns1)), quad(namedNode(`${ns1}closed`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(ns1)), quad(namedNode(`${ns1}code`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}code`), namedNode(`${rdfs}comment`), literal(`Code executed by Semantic Action.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}code`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}code`), namedNode(`${rdfs}label`), literal(`code`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}code`), namedNode(`${rdfs}domain`), namedNode(`${ns1}SemAct`), namedNode(ns1)), quad(namedNode(`${ns1}code`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns1)), quad(namedNode(`${ns1}datatype`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}datatype`), namedNode(`${rdfs}comment`), literal(`A datatype constraint.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}datatype`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}datatype`), namedNode(`${rdfs}label`), literal(`datatype`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}datatype`), namedNode(`${rdfs}domain`), namedNode(`${ns1}NodeConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}datatype`), namedNode(`${rdfs}range`), namedNode(`${rdfs}Datatype`), namedNode(ns1)), quad(namedNode(`${ns1}exclusion`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}exclusion`), namedNode(`${rdfs}comment`), literal(`Values that are excluded from value matching.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}exclusion`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}exclusion`), namedNode(`${rdfs}label`), literal(`exclusion`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}exclusion`), namedNode(`${rdfs}domain`), namedNode(`${ns1}StemRange`), namedNode(ns1)), quad(namedNode(`${ns1}exclusion`), namedNode(`${rdfs}range`), blankNodes[2], namedNode(ns1)), quad(blankNodes[2], namedNode(`${owl}unionOf`), blankNodes[3], namedNode(ns1)), quad(namedNode(`${ns1}expression`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}expression`), namedNode(`${rdfs}comment`), literal(`Expression associated with the TripleExpression.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}expression`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}expression`), namedNode(`${rdfs}label`), literal(`expression`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}expression`), namedNode(`${rdfs}domain`), namedNode(`${ns1}Shape`), namedNode(ns1)), quad(namedNode(`${ns1}expression`), namedNode(`${rdfs}range`), namedNode(`${ns1}TripleExpression`), namedNode(ns1)), quad(namedNode(`${ns1}expressions`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}expressions`), namedNode(`${rdfs}comment`), literal(`List of 2 or more expressions associated with the TripleExpression.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}expressions`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}expressions`), namedNode(`${rdfs}label`), literal(`expressions`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}expressions`), namedNode(`${rdfs}domain`), blankNodes[4], namedNode(ns1)), quad(namedNode(`${ns1}expressions`), namedNode(`${rdfs}range`), namedNode(`${ns1}TripleExpression`), namedNode(ns1)), quad(blankNodes[4], namedNode(`${owl}unionOf`), blankNodes[5], namedNode(ns1)), quad(namedNode(`${ns1}extra`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}extra`), namedNode(`${rdfs}comment`), literal(`Properties which may have extra values beyond those matched through a constraint.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}extra`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}extra`), namedNode(`${rdfs}label`), literal(`extra`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}extra`), namedNode(`${rdfs}domain`), namedNode(`${ns1}Shape`), namedNode(ns1)), quad(namedNode(`${ns1}extra`), namedNode(`${rdfs}range`), namedNode(`${rdfs}Resource`), namedNode(ns1)), quad(namedNode(`${ns1}flags`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}flags`), namedNode(`${rdfs}comment`), literal(`Regular expression flags`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}flags`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}flags`), namedNode(`${rdfs}label`), literal(`flags`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}flags`), namedNode(`${rdfs}domain`), namedNode(`${ns1}NodeConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}flags`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns1)), quad(namedNode(`${ns1}fractiondigits`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}fractiondigits`), namedNode(`${rdfs}comment`), literal(`for "fractiondigits" constraints, v is less than or equals the number of digits to the right of the decimal place in the XML Schema canonical form[xmlschema-2] of the value of n, ignoring trailing zeros.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}fractiondigits`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}fractiondigits`), namedNode(`${rdfs}label`), literal(`fraction digits`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}fractiondigits`), namedNode(`${rdfs}domain`), namedNode(`${ns1}NodeConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}fractiondigits`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(ns1)), quad(namedNode(`${ns1}fractiondigits`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns1}numericFacet`), namedNode(ns1)), quad(namedNode(`${ns1}numericFacet`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}numericFacet`), namedNode(`${rdfs}comment`), literal(`Abstract property of numeric facets on a NodeConstraint.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}numericFacet`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}numericFacet`), namedNode(`${rdfs}label`), literal(``, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}numericFacet`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns1}xsFacet`), namedNode(ns1)), quad(namedNode(`${ns1}inverse`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}inverse`), namedNode(`${rdfs}comment`), literal(`Constrains the subject of a triple, rather than the object.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}inverse`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}inverse`), namedNode(`${rdfs}label`), literal(`inverse`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}inverse`), namedNode(`${rdfs}domain`), namedNode(`${ns1}TripleConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}inverse`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(ns1)), quad(namedNode(`${ns1}iri`), namedNode(`${rdf}type`), namedNode(`${ns1}NodeKind`), namedNode(ns1)), quad(namedNode(`${ns1}iri`), namedNode(`${rdfs}comment`), literal(`Requires node to be an IRI`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}iri`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}iri`), namedNode(`${rdfs}label`), literal(`iri`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}languageTag`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}languageTag`), namedNode(`${rdfs}comment`), literal(`The value used to match the language tag of a language-tagged string.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}languageTag`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}languageTag`), namedNode(`${rdfs}label`), literal(`language tag`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}languageTag`), namedNode(`${rdfs}domain`), namedNode(`${ns1}Language`), namedNode(ns1)), quad(namedNode(`${ns1}languageTag`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns1)), quad(namedNode(`${ns1}length`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}length`), namedNode(`${rdfs}comment`), literal(`The exact length of the value of the cell.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}length`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}length`), namedNode(`${rdfs}label`), literal(`length`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}length`), namedNode(`${rdfs}domain`), namedNode(`${ns1}NodeConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}length`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(ns1)), quad(namedNode(`${ns1}length`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns1}stringFacet`), namedNode(ns1)), quad(namedNode(`${ns1}stringFacet`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}stringFacet`), namedNode(`${rdfs}comment`), literal(`An abstract property of string facets on a NodeConstraint.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}stringFacet`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}stringFacet`), namedNode(`${rdfs}label`), literal(``, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}stringFacet`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns1}xsFacet`), namedNode(ns1)), quad(namedNode(`${ns1}literal`), namedNode(`${rdf}type`), namedNode(`${ns1}NodeKind`), namedNode(ns1)), quad(namedNode(`${ns1}literal`), namedNode(`${rdfs}comment`), literal(`Requires node to be an rdf:Literal`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}literal`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}literal`), namedNode(`${rdfs}label`), literal(`literal`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}max`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}max`), namedNode(`${rdfs}comment`), literal(`Maximum number of times this TripleExpression may match; -1 for “*”`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}max`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}max`), namedNode(`${rdfs}label`), literal(`maximum cardinality`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}max`), namedNode(`${rdfs}domain`), blankNodes[6], namedNode(ns1)), quad(namedNode(`${ns1}max`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(ns1)), quad(blankNodes[6], namedNode(`${owl}unionOf`), blankNodes[7], namedNode(ns1)), quad(namedNode(`${ns1}maxexclusive`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}maxexclusive`), namedNode(`${rdfs}comment`), literal(`An atomic property that contains a single number that is the maximum valid value (exclusive).`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}maxexclusive`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}maxexclusive`), namedNode(`${rdfs}label`), literal(`max exclusive`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}maxexclusive`), namedNode(`${rdfs}domain`), namedNode(`${ns1}NodeConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}maxexclusive`), namedNode(`${rdfs}range`), blankNodes[8], namedNode(ns1)), quad(namedNode(`${ns1}maxexclusive`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns1}numericFacet`), namedNode(ns1)), quad(blankNodes[8], namedNode(`${owl}unionOf`), blankNodes[9], namedNode(ns1)), quad(namedNode(`${ns1}maxinclusive`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}maxinclusive`), namedNode(`${rdfs}comment`), literal(`An atomic property that contains a single number that is the maximum valid value (inclusive).`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}maxinclusive`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}maxinclusive`), namedNode(`${rdfs}label`), literal(`max inclusive`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}maxinclusive`), namedNode(`${rdfs}domain`), namedNode(`${ns1}NodeConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}maxinclusive`), namedNode(`${rdfs}range`), blankNodes[10], namedNode(ns1)), quad(namedNode(`${ns1}maxinclusive`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns1}numericFacet`), namedNode(ns1)), quad(blankNodes[10], namedNode(`${owl}unionOf`), blankNodes[11], namedNode(ns1)), quad(namedNode(`${ns1}maxlength`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}maxlength`), namedNode(`${rdfs}comment`), literal(`A numeric atomic property that contains a single integer that is the maximum length of the value.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}maxlength`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}maxlength`), namedNode(`${rdfs}label`), literal(`max length`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}maxlength`), namedNode(`${rdfs}domain`), namedNode(`${ns1}NodeConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}maxlength`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(ns1)), quad(namedNode(`${ns1}maxlength`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns1}stringFacet`), namedNode(ns1)), quad(namedNode(`${ns1}min`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}min`), namedNode(`${rdfs}comment`), literal(`Minimum number of times this TripleExpression may match.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}min`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}min`), namedNode(`${rdfs}label`), literal(`minimum cardinatliy`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}min`), namedNode(`${rdfs}domain`), blankNodes[12], namedNode(ns1)), quad(namedNode(`${ns1}min`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(ns1)), quad(blankNodes[12], namedNode(`${owl}unionOf`), blankNodes[13], namedNode(ns1)), quad(namedNode(`${ns1}minexclusive`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}minexclusive`), namedNode(`${rdfs}comment`), literal(`An atomic property that contains a single number that is the minimum valid value (exclusive).`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}minexclusive`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}minexclusive`), namedNode(`${rdfs}label`), literal(`min exclusive`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}minexclusive`), namedNode(`${rdfs}domain`), namedNode(`${ns1}NodeConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}minexclusive`), namedNode(`${rdfs}range`), blankNodes[14], namedNode(ns1)), quad(namedNode(`${ns1}minexclusive`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns1}numericFacet`), namedNode(ns1)), quad(blankNodes[14], namedNode(`${owl}unionOf`), blankNodes[15], namedNode(ns1)), quad(namedNode(`${ns1}mininclusive`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}mininclusive`), namedNode(`${rdfs}comment`), literal(`An atomic property that contains a single number that is the minimum valid value (inclusive).`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}mininclusive`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}mininclusive`), namedNode(`${rdfs}label`), literal(`min inclusive`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}mininclusive`), namedNode(`${rdfs}domain`), namedNode(`${ns1}NodeConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}mininclusive`), namedNode(`${rdfs}range`), blankNodes[16], namedNode(ns1)), quad(namedNode(`${ns1}mininclusive`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns1}numericFacet`), namedNode(ns1)), quad(blankNodes[16], namedNode(`${owl}unionOf`), blankNodes[17], namedNode(ns1)), quad(namedNode(`${ns1}minlength`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}minlength`), namedNode(`${rdfs}comment`), literal(`An atomic property that contains a single integer that is the minimum length of the value.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}minlength`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}minlength`), namedNode(`${rdfs}label`), literal(`min length`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}minlength`), namedNode(`${rdfs}domain`), namedNode(`${ns1}NodeConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}minlength`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(ns1)), quad(namedNode(`${ns1}minlength`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns1}stringFacet`), namedNode(ns1)), quad(namedNode(`${ns1}name`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}name`), namedNode(`${rdfs}comment`), literal(`Identifier of SemAct extension.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}name`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}name`), namedNode(`${rdfs}label`), literal(`name`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}name`), namedNode(`${rdfs}domain`), namedNode(`${ns1}SemAct`), namedNode(ns1)), quad(namedNode(`${ns1}name`), namedNode(`${rdfs}range`), namedNode(`${rdfs}Resource`), namedNode(ns1)), quad(namedNode(`${ns1}nodeKind`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}nodeKind`), namedNode(`${rdfs}comment`), literal(`Restiction on the kind of node matched; restricted to the defined instances of NodeKind. One of shex:iri, shex:bnode, shex:literal, or shex:nonliteral.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}nodeKind`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}nodeKind`), namedNode(`${rdfs}label`), literal(`node kind`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}nodeKind`), namedNode(`${rdfs}domain`), namedNode(`${ns1}NodeConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}nodeKind`), namedNode(`${rdfs}range`), namedNode(`${ns1}NodeKind`), namedNode(ns1)), quad(namedNode(`${ns1}nonliteral`), namedNode(`${rdf}type`), namedNode(`${ns1}NodeKind`), namedNode(ns1)), quad(namedNode(`${ns1}nonliteral`), namedNode(`${rdfs}comment`), literal(`Requires node to be a Blank Node or IRI`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}nonliteral`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}nonliteral`), namedNode(`${rdfs}label`), literal(`nonliteral`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}xsFacet`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}xsFacet`), namedNode(`${rdfs}comment`), literal(`An abstract property of string and numeric facets on a NodeConstraint.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}xsFacet`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}xsFacet`), namedNode(`${rdfs}label`), literal(``, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}xsFacet`), namedNode(`${rdfs}domain`), namedNode(`${ns1}NodeConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}object`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}object`), namedNode(`${rdfs}comment`), literal(`The object of an Annotation.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}object`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}object`), namedNode(`${rdfs}label`), literal(`object`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}object`), namedNode(`${rdfs}domain`), namedNode(`${ns1}Annotation`), namedNode(ns1)), quad(namedNode(`${ns1}object`), namedNode(`${rdfs}range`), namedNode(`${rdfs}Resource`), namedNode(ns1)), quad(namedNode(`${ns1}pattern`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}pattern`), namedNode(`${rdfs}comment`), literal(`A regular expression used for matching a value.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}pattern`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}pattern`), namedNode(`${rdfs}label`), literal(`pattern`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}pattern`), namedNode(`${rdfs}domain`), namedNode(`${ns1}NodeConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}pattern`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns1)), quad(namedNode(`${ns1}pattern`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns1}stringFacet`), namedNode(ns1)), quad(namedNode(`${ns1}predicate`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}predicate`), namedNode(`${rdfs}comment`), literal(`The predicate of a TripleConstraint or Annotation.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}predicate`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}predicate`), namedNode(`${rdfs}label`), literal(`predicate`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}predicate`), namedNode(`${rdfs}domain`), blankNodes[18], namedNode(ns1)), quad(namedNode(`${ns1}predicate`), namedNode(`${rdfs}range`), namedNode(`${rdfs}Resource`), namedNode(ns1)), quad(blankNodes[18], namedNode(`${owl}unionOf`), blankNodes[19], namedNode(ns1)), quad(namedNode(`${ns1}semActs`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}semActs`), namedNode(`${rdfs}comment`), literal(`Semantic Actions on this TripleExpression.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}semActs`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}semActs`), namedNode(`${rdfs}label`), literal(`semantic action`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}semActs`), namedNode(`${rdfs}domain`), blankNodes[20], namedNode(ns1)), quad(namedNode(`${ns1}semActs`), namedNode(`${rdfs}range`), namedNode(`${ns1}SemAct`), namedNode(ns1)), quad(blankNodes[20], namedNode(`${owl}unionOf`), blankNodes[21], namedNode(ns1)), quad(namedNode(`${ns1}shapeExpr`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}shapeExpr`), namedNode(`${rdfs}comment`), literal(`Shape Expression referenced by this shape.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}shapeExpr`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}shapeExpr`), namedNode(`${rdfs}label`), literal(`shape expression`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}shapeExpr`), namedNode(`${rdfs}domain`), namedNode(`${ns1}ShapeNot`), namedNode(ns1)), quad(namedNode(`${ns1}shapeExpr`), namedNode(`${rdfs}range`), namedNode(`${ns1}ShapeExpression`), namedNode(ns1)), quad(namedNode(`${ns1}shapeExprs`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}shapeExprs`), namedNode(`${rdfs}comment`), literal(`A list of 2 or more Shape Expressions referenced by this shape.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}shapeExprs`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}shapeExprs`), namedNode(`${rdfs}label`), literal(`shape expressions`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}shapeExprs`), namedNode(`${rdfs}domain`), blankNodes[22], namedNode(ns1)), quad(namedNode(`${ns1}shapeExprs`), namedNode(`${rdfs}range`), namedNode(`${ns1}ShapeExpression`), namedNode(ns1)), quad(namedNode(`${ns1}shapeExprs`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns1}shapeExpr`), namedNode(ns1)), quad(blankNodes[22], namedNode(`${owl}unionOf`), blankNodes[23], namedNode(ns1)), quad(namedNode(`${ns1}shapes`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}shapes`), namedNode(`${rdfs}comment`), literal(`Shapes in this Schema.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}shapes`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}shapes`), namedNode(`${rdfs}label`), literal(`shapes`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}shapes`), namedNode(`${rdfs}domain`), namedNode(`${ns1}Schema`), namedNode(ns1)), quad(namedNode(`${ns1}shapes`), namedNode(`${rdfs}range`), namedNode(`${ns1}ShapeExpression`), namedNode(ns1)), quad(namedNode(`${ns1}start`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}start`), namedNode(`${rdfs}comment`), literal(`A ShapeExpression matched against the focus node prior to any other mapped expressions.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}start`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}start`), namedNode(`${rdfs}label`), literal(`start`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}start`), namedNode(`${rdfs}domain`), namedNode(`${ns1}Schema`), namedNode(ns1)), quad(namedNode(`${ns1}start`), namedNode(`${rdfs}range`), namedNode(`${ns1}ShapeExpression`), namedNode(ns1)), quad(namedNode(`${ns1}startActs`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}startActs`), namedNode(`${rdfs}comment`), literal(`Semantic Actions run on the Schema.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}startActs`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}startActs`), namedNode(`${rdfs}label`), literal(`start actions`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}startActs`), namedNode(`${rdfs}domain`), namedNode(`${ns1}Schema`), namedNode(ns1)), quad(namedNode(`${ns1}startActs`), namedNode(`${rdfs}range`), namedNode(`${ns1}SemAct`), namedNode(ns1)), quad(namedNode(`${ns1}stem`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}stem`), namedNode(`${rdfs}comment`), literal(`A stem value used for matching or excluding values.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}stem`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}stem`), namedNode(`${rdfs}label`), literal(`stem`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}stem`), namedNode(`${rdfs}domain`), blankNodes[24], namedNode(ns1)), quad(namedNode(`${ns1}stem`), namedNode(`${rdfs}range`), blankNodes[25], namedNode(ns1)), quad(blankNodes[24], namedNode(`${owl}unionOf`), blankNodes[26], namedNode(ns1)), quad(blankNodes[25], namedNode(`${owl}unionOf`), blankNodes[27], namedNode(ns1)), quad(namedNode(`${ns1}totaldigits`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}totaldigits`), namedNode(`${rdfs}comment`), literal(`for "totaldigits" constraints, v equals the number of digits in the XML Schema canonical form[xmlschema-2] of the value of n`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}totaldigits`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}totaldigits`), namedNode(`${rdfs}label`), literal(`total digits`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}totaldigits`), namedNode(`${rdfs}domain`), namedNode(`${ns1}NodeConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}totaldigits`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(ns1)), quad(namedNode(`${ns1}totaldigits`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns1}numericFacet`), namedNode(ns1)), quad(namedNode(`${ns1}valueExpr`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}valueExpr`), namedNode(`${rdfs}comment`), literal(`A ShapeExpression used for matching the object (or subject if inverted) of a TripleConstraint.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}valueExpr`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}valueExpr`), namedNode(`${rdfs}label`), literal(`value expression`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}valueExpr`), namedNode(`${rdfs}domain`), namedNode(`${ns1}TripleConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}valueExpr`), namedNode(`${rdfs}range`), namedNode(`${ns1}ShapeExpression`), namedNode(ns1)), quad(namedNode(`${ns1}values`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)), quad(namedNode(`${ns1}values`), namedNode(`${rdfs}comment`), literal(`A value restriction on a NodeConstraint.`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}values`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns1), namedNode(ns1)), quad(namedNode(`${ns1}values`), namedNode(`${rdfs}label`), literal(`values`, 'en'), namedNode(ns1)), quad(namedNode(`${ns1}values`), namedNode(`${rdfs}domain`), namedNode(`${ns1}NodeConstraint`), namedNode(ns1)), quad(namedNode(`${ns1}values`), namedNode(`${rdfs}range`), blankNodes[28], namedNode(ns1)), quad(blankNodes[28], namedNode(`${owl}unionOf`), blankNodes[29], namedNode(ns1)), quad(blankNodes[11], namedNode(`${rdf}first`), namedNode(`${xsd}integer`), namedNode(ns1)), quad(blankNodes[11], namedNode(`${rdf}rest`), blankNodes[30], namedNode(ns1)), quad(blankNodes[17], namedNode(`${rdf}first`), namedNode(`${xsd}integer`), namedNode(ns1)), quad(blankNodes[17], namedNode(`${rdf}rest`), blankNodes[31], namedNode(ns1)), quad(blankNodes[32], namedNode(`${rdf}first`), namedNode(`${ns1}Language`), namedNode(ns1)), quad(blankNodes[32], namedNode(`${rdf}rest`), blankNodes[33], namedNode(ns1)), quad(blankNodes[33], namedNode(`${rdf}first`), namedNode(`${ns1}Stem`), namedNode(ns1)), quad(blankNodes[33], namedNode(`${rdf}rest`), blankNodes[34], namedNode(ns1)), quad(blankNodes[27], namedNode(`${rdf}first`), namedNode(`${xsd}string`), namedNode(ns1)), quad(blankNodes[27], namedNode(`${rdf}rest`), blankNodes[35], namedNode(ns1)), quad(blankNodes[35], namedNode(`${rdf}first`), namedNode(`${ns1}Wildcard`), namedNode(ns1)), quad(blankNodes[35], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns1)), quad(blankNodes[36], namedNode(`${rdf}first`), namedNode(`${ns1}OneOf`), namedNode(ns1)), quad(blankNodes[36], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns1)), quad(blankNodes[13], namedNode(`${rdf}first`), namedNode(`${ns1}EachOf`), namedNode(ns1)), quad(blankNodes[13], namedNode(`${rdf}rest`), blankNodes[37], namedNode(ns1)), quad(blankNodes[23], namedNode(`${rdf}first`), namedNode(`${ns1}ShapeAnd`), namedNode(ns1)), quad(blankNodes[23], namedNode(`${rdf}rest`), blankNodes[38], namedNode(ns1)), quad(blankNodes[38], namedNode(`${rdf}first`), namedNode(`${ns1}ShapeOr`), namedNode(ns1)), quad(blankNodes[38], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns1)), quad(blankNodes[29], namedNode(`${rdf}first`), namedNode(`${rdfs}Resource`), namedNode(ns1)), quad(blankNodes[29], namedNode(`${rdf}rest`), blankNodes[32], namedNode(ns1)), quad(blankNodes[34], namedNode(`${rdf}first`), namedNode(`${ns1}StemRange`), namedNode(ns1)), quad(blankNodes[34], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns1)), quad(blankNodes[9], namedNode(`${rdf}first`), namedNode(`${xsd}integer`), namedNode(ns1)), quad(blankNodes[9], namedNode(`${rdf}rest`), blankNodes[39], namedNode(ns1)), quad(blankNodes[3], namedNode(`${rdf}first`), namedNode(`${rdfs}Resource`), namedNode(ns1)), quad(blankNodes[3], namedNode(`${rdf}rest`), blankNodes[40], namedNode(ns1)), quad(blankNodes[7], namedNode(`${rdf}first`), namedNode(`${ns1}EachOf`), namedNode(ns1)), quad(blankNodes[7], namedNode(`${rdf}rest`), blankNodes[41], namedNode(ns1)), quad(blankNodes[1], namedNode(`${rdf}first`), namedNode(`${ns1}EachOf`), namedNode(ns1)), quad(blankNodes[1], namedNode(`${rdf}rest`), blankNodes[42], namedNode(ns1)), quad(blankNodes[26], namedNode(`${rdf}first`), namedNode(`${ns1}Stem`), namedNode(ns1)), quad(blankNodes[26], namedNode(`${rdf}rest`), blankNodes[43], namedNode(ns1)), quad(blankNodes[43], namedNode(`${rdf}first`), namedNode(`${ns1}StemRange`), namedNode(ns1)), quad(blankNodes[43], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns1)), quad(blankNodes[40], namedNode(`${rdf}first`), namedNode(`${ns1}Stem`), namedNode(ns1)), quad(blankNodes[40], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns1)), quad(blankNodes[42], namedNode(`${rdf}first`), namedNode(`${ns1}OneOf`), namedNode(ns1)), quad(blankNodes[42], namedNode(`${rdf}rest`), blankNodes[44], namedNode(ns1)), quad(blankNodes[44], namedNode(`${rdf}first`), namedNode(`${ns1}TripleConstraint`), namedNode(ns1)), quad(blankNodes[44], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns1)), quad(blankNodes[21], namedNode(`${rdf}first`), namedNode(`${ns1}EachOf`), namedNode(ns1)), quad(blankNodes[21], namedNode(`${rdf}rest`), blankNodes[45], namedNode(ns1)), quad(blankNodes[45], namedNode(`${rdf}first`), namedNode(`${ns1}OneOf`), namedNode(ns1)), quad(blankNodes[45], namedNode(`${rdf}rest`), blankNodes[46], namedNode(ns1)), quad(blankNodes[46], namedNode(`${rdf}first`), namedNode(`${ns1}TripleConstraint`), namedNode(ns1)), quad(blankNodes[46], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns1)), quad(blankNodes[5], namedNode(`${rdf}first`), namedNode(`${ns1}EachOf`), namedNode(ns1)), quad(blankNodes[5], namedNode(`${rdf}rest`), blankNodes[36], namedNode(ns1)), quad(blankNodes[37], namedNode(`${rdf}first`), namedNode(`${ns1}OneOf`), namedNode(ns1)), quad(blankNodes[37], namedNode(`${rdf}rest`), blankNodes[47], namedNode(ns1)), quad(blankNodes[47], namedNode(`${rdf}first`), namedNode(`${ns1}TripleConstraint`), namedNode(ns1)), quad(blankNodes[47], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns1)), quad(blankNodes[41], namedNode(`${rdf}first`), namedNode(`${ns1}OneOf`), namedNode(ns1)), quad(blankNodes[41], namedNode(`${rdf}rest`), blankNodes[48], namedNode(ns1)), quad(blankNodes[48], namedNode(`${rdf}first`), namedNode(`${ns1}TripleConstraint`), namedNode(ns1)), quad(blankNodes[48], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns1)), quad(blankNodes[31], namedNode(`${rdf}first`), namedNode(`${xsd}decimal`), namedNode(ns1)), quad(blankNodes[31], namedNode(`${rdf}rest`), blankNodes[49], namedNode(ns1)), quad(blankNodes[49], namedNode(`${rdf}first`), namedNode(`${xsd}double`), namedNode(ns1)), quad(blankNodes[49], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns1)), quad(blankNodes[39], namedNode(`${rdf}first`), namedNode(`${xsd}decimal`), namedNode(ns1)), quad(blankNodes[39], namedNode(`${rdf}rest`), blankNodes[50], namedNode(ns1)), quad(blankNodes[50], namedNode(`${rdf}first`), namedNode(`${xsd}double`), namedNode(ns1)), quad(blankNodes[50], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns1)), quad(blankNodes[30], namedNode(`${rdf}first`), namedNode(`${xsd}decimal`), namedNode(ns1)), quad(blankNodes[30], namedNode(`${rdf}rest`), blankNodes[51], namedNode(ns1)), quad(blankNodes[51], namedNode(`${rdf}first`), namedNode(`${xsd}double`), namedNode(ns1)), quad(blankNodes[51], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns1)), quad(blankNodes[15], namedNode(`${rdf}first`), namedNode(`${xsd}integer`), namedNode(ns1)), quad(blankNodes[15], namedNode(`${rdf}rest`), blankNodes[52], namedNode(ns1)), quad(blankNodes[52], namedNode(`${rdf}first`), namedNode(`${xsd}decimal`), namedNode(ns1)), quad(blankNodes[52], namedNode(`${rdf}rest`), blankNodes[53], namedNode(ns1)), quad(blankNodes[53], namedNode(`${rdf}first`), namedNode(`${xsd}double`), namedNode(ns1)), quad(blankNodes[53], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns1)), quad(blankNodes[54], namedNode(`${rdf}first`), namedNode(`${ns1}TripleConstraint`), namedNode(ns1)), quad(blankNodes[54], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns1)), quad(blankNodes[19], namedNode(`${rdf}first`), namedNode(`${ns1}Annotation`), namedNode(ns1)), quad(blankNodes[19], namedNode(`${rdf}rest`), blankNodes[54], namedNode(ns1))];
});