/* This file was automatically generated. Do not edit by hand. */
const {
  geor,
  rdf,
  skos
} = {
  'geor': 'http://www.opengis.net/def/rule/geosparql/',
  'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
  'skos': 'http://www.w3.org/2004/02/skos/core#'
};
export default (({
  literal,
  namedNode,
  quad
}) => {
  return [quad(namedNode(geor), namedNode(`${rdf}type`), namedNode(`${skos}Collection`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}ehContains`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}ehCoveredBy`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}ehCovers`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}ehDisjoint`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}ehEquals`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}ehInside`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}ehMeet`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}ehOverlap`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}rcc8dc`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}rcc8ec`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}rcc8eq`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}rcc8ntpp`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}rcc8ntppi`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}rcc8po`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}rcc8tpp`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}rcc8tppi`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}sfContains`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}sfCrosses`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}sfDisjoint`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}sfEquals`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}sfIntersects`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}sfOverlaps`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}sfTouches`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}member`), namedNode(`${geor}sfWithin`), namedNode(geor)), quad(namedNode(geor), namedNode(`${skos}prefLabel`), literal(`GeoSPARQL rules`, 'en'), namedNode(geor))];
});