"use strict";
/* This file was automatically generated. Do not edit by hand. */
Object.defineProperty(exports, "__esModule", { value: true });
const { ns1, dcterms, xsd, rdf, rdfs, ns6, vs, ns8, ns9, ns10, ns11, ns12, ns13, ns14, ns15, ns16, ns17, ns18, ns19, ns20, ns21, ns22, ns23, ns24, ns25, ns26, time, ns28, owl, vann } = {
    'ns1': 'http://www.w3.org/ns/dpv#',
    'dcterms': 'http://purl.org/dc/terms/',
    'xsd': 'http://www.w3.org/2001/XMLSchema#',
    'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
    'ns6': 'http://www.specialprivacy.eu/vocabs/purposes#',
    'vs': 'http://www.w3.org/2003/06/sw-vocab-status/ns#',
    'ns8': 'https://enterprivacy.com/wp-content/uploads/2018/09/',
    'ns9': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_4/par_2/',
    'ns10': 'http://www.specialprivacy.eu/vocabs/data#',
    'ns11': 'http://www.specialprivacy.eu/vocabs/processing#',
    'ns12': 'https://www.specialprivacy.eu/vocabs/',
    'ns13': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_4/par_5/',
    'ns14': 'https://www.w3.org/community/dpvcg/',
    'ns15': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_9/par_1/',
    'ns16': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_4/par_1/',
    'ns17': 'http://www.specialprivacy.eu/langs/usage-policy#',
    'ns18': 'https://www.specialprivacy.eu/',
    'ns19': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_4/par_11/',
    'ns20': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_4/par_7/',
    'ns21': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_4/par_8/',
    'ns22': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_4/par_9/',
    'ns23': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_37/',
    'ns24': 'https://www.iso.org/',
    'ns25': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_27/',
    'ns26': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_4/par_10/',
    'time': 'http://www.w3.org/2006/time#',
    'ns28': 'https://w3.org/ns/',
    'owl': 'http://www.w3.org/2002/07/owl#',
    'vann': 'http://purl.org/vocab/vann/'
};
exports.default = ({ literal, namedNode, quad }) => {
    return [
        quad(namedNode(`${ns1}AcademicResearch`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}AcademicResearch`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}AcademicResearch`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}AcademicResearch`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}AcademicResearch`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}AcademicResearch`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}AcademicResearch`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}AcademicResearch`), namedNode(`${dcterms}description`), literal(`conduct or assist with research conducted in an academic context e.g. within universities`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AcademicResearch`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}AcademicResearch`), namedNode(`${rdfs}label`), literal(`Academic Research`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AcademicResearch`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns6}Education`), namedNode(ns1)),
        quad(namedNode(`${ns1}AcademicResearch`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ResearchAndDevelopment`), namedNode(ns1)),
        quad(namedNode(`${ns1}AcademicResearch`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ResearchAndDevelopment`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}ResearchAndDevelopment`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}ResearchAndDevelopment`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}ResearchAndDevelopment`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}ResearchAndDevelopment`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}ResearchAndDevelopment`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}ResearchAndDevelopment`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}ResearchAndDevelopment`), namedNode(`${dcterms}description`), literal(`conduct research and development for new methods, products, or services`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ResearchAndDevelopment`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}ResearchAndDevelopment`), namedNode(`${rdfs}label`), literal(`Research and Development`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ResearchAndDevelopment`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Purpose`), namedNode(ns1)),
        quad(namedNode(`${ns1}ResearchAndDevelopment`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Accent`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Accent`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Accent`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Accent`), namedNode(`${dcterms}description`), literal(`Information about an linguistic and speech accents.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Accent`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Accent`), namedNode(`${rdfs}label`), literal(`Accent`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Accent`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Language`), namedNode(ns1)),
        quad(namedNode(`${ns1}Accent`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Accent`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Language`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Language`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Language`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Language`), namedNode(`${dcterms}description`), literal(`Information about language and lingual history.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Language`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Language`), namedNode(`${rdfs}label`), literal(`Language`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Language`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Ethnicity`), namedNode(ns1)),
        quad(namedNode(`${ns1}Language`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Language`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControl`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControl`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControl`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControl`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControl`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControl`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControl`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControl`), namedNode(`${dcterms}description`), literal(`conduct or enforce access control`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControl`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControl`), namedNode(`${rdfs}label`), literal(`Access Control`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControl`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns6}Login`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControl`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Security`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControl`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Security`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Security`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}Security`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}Security`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Security`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Security`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}Security`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}Security`), namedNode(`${dcterms}description`), literal(`ensure and enforce security e.g. of data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Security`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Security`), namedNode(`${rdfs}label`), literal(`Security`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Security`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Purpose`), namedNode(ns1)),
        quad(namedNode(`${ns1}Security`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControlMethod`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControlMethod`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControlMethod`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControlMethod`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControlMethod`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControlMethod`), namedNode(`${dcterms}description`), literal(`Methods which restrict access to a place or resource`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControlMethod`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControlMethod`), namedNode(`${rdfs}label`), literal(`Access Control Method`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControlMethod`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}TechnicalMeasure`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccessControlMethod`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalMeasure`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalMeasure`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalMeasure`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalMeasure`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalMeasure`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalMeasure`), namedNode(`${dcterms}description`), literal(`Technical measures required/followed when processing data of the declared category`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalMeasure`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalMeasure`), namedNode(`${rdfs}label`), literal(`Technical Measure`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalMeasure`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}TechnicalOrganisationalMeasure`), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalMeasure`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AccountIdentifier`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}AccountIdentifier`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccountIdentifier`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccountIdentifier`), namedNode(`${dcterms}description`), literal(`Information about financial account identifier.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AccountIdentifier`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccountIdentifier`), namedNode(`${rdfs}label`), literal(`Account Identifier`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AccountIdentifier`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}FinancialAccount`), namedNode(ns1)),
        quad(namedNode(`${ns1}AccountIdentifier`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AccountIdentifier`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccount`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccount`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccount`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccount`), namedNode(`${dcterms}description`), literal(`Information about financial accounts.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccount`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccount`), namedNode(`${rdfs}label`), literal(`Financial Account`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccount`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Financial`), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccount`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccount`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Acquantaince`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Acquantaince`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Acquantaince`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Acquantaince`), namedNode(`${dcterms}description`), literal(`Information about acquaintainces in a social network.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Acquantaince`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Acquantaince`), namedNode(`${rdfs}label`), literal(`Acquantaince`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Acquantaince`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}SocialNetwork`), namedNode(ns1)),
        quad(namedNode(`${ns1}Acquantaince`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Acquantaince`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialNetwork`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialNetwork`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialNetwork`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialNetwork`), namedNode(`${dcterms}description`), literal(`Information about friends or connections expressed as a social network`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialNetwork`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialNetwork`), namedNode(`${rdfs}label`), literal(`Social Network`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialNetwork`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Social`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialNetwork`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialNetwork`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Acquire`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Acquire`), namedNode(`${dcterms}description`), literal(`to come into possession or control of the data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Acquire`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Acquire`), namedNode(`${rdfs}label`), literal(`Acquire`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Acquire`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Obtain`), namedNode(ns1)),
        quad(namedNode(`${ns1}Acquire`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Acquire`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Obtain`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Obtain`), namedNode(`${dcterms}description`), literal(`to solicit or gather data from someone`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Obtain`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Obtain`), namedNode(`${rdfs}label`), literal(`Obtain`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Obtain`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Obtain`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Obtain`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Adapt`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Adapt`), namedNode(`${dcterms}description`), literal(`to modify the data, often rewritten into a new form for a new use`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Adapt`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Adapt`), namedNode(`${rdfs}label`), literal(`Adapt`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Adapt`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transform`), namedNode(ns1)),
        quad(namedNode(`${ns1}Adapt`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Adapt`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transform`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Transform`), namedNode(`${dcterms}description`), literal(`to change the form or nature of data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Transform`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transform`), namedNode(`${rdfs}label`), literal(`Transform`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Transform`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transform`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Transform`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Advertising`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Advertising`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Advertising`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}Advertising`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}Advertising`), namedNode(`${dcterms}description`), literal(`carry out advertising i.e. process or artefact used to call attention to a product, service, etc. through announcements, notices, or other forms of communication.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Advertising`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Advertising`), namedNode(`${rdfs}label`), literal(`Advertising`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Advertising`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Marketing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Advertising`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Advertising`), namedNode(`${rdfs}comment`), literal(`Advertising is a subset of Marketing. Advertising by itself does not indicate 'personalisation' i.e. personalised ads.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Marketing`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Marketing`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Marketing`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}Marketing`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}Marketing`), namedNode(`${dcterms}description`), literal(`carry out marketing i.e. promoting, selling, and distributing a product or service`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Marketing`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Marketing`), namedNode(`${rdfs}label`), literal(`Marketing`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Marketing`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}CommercialInterest`), namedNode(ns1)),
        quad(namedNode(`${ns1}Marketing`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Age`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Age`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Age`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Age`), namedNode(`${dcterms}description`), literal(`Information about age`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Age`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Age`), namedNode(`${rdfs}label`), literal(`Age`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Age`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PhysicalCharacteristic`), namedNode(ns1)),
        quad(namedNode(`${ns1}Age`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Age`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalCharacteristic`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalCharacteristic`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalCharacteristic`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalCharacteristic`), namedNode(`${dcterms}description`), literal(`Information about physical characteristics`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalCharacteristic`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalCharacteristic`), namedNode(`${rdfs}label`), literal(`PhysicalCharacteristic`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalCharacteristic`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}Demographic`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalCharacteristic`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}External`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalCharacteristic`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalCharacteristic`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Align`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Align`), namedNode(`${dcterms}description`), literal(`to adjust the data to be in relation to another data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Align`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Align`), namedNode(`${rdfs}label`), literal(`Align`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Align`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transform`), namedNode(ns1)),
        quad(namedNode(`${ns1}Align`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Align`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Alter`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Alter`), namedNode(`${dcterms}description`), literal(`to change the data withouth changing it into something else`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Alter`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Alter`), namedNode(`${rdfs}label`), literal(`Alter`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Alter`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transform`), namedNode(ns1)),
        quad(namedNode(`${ns1}Alter`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Alter`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Analyse`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Analyse`), namedNode(`${dcterms}description`), literal(`to study or examine the data in detail`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Analyse`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Analyse`), namedNode(`${rdfs}label`), literal(`Analyse`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Analyse`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns11}Analyse`), namedNode(ns1)),
        quad(namedNode(`${ns1}Analyse`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Use`), namedNode(ns1)),
        quad(namedNode(`${ns1}Analyse`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Analyse`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns12}processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Use`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Use`), namedNode(`${dcterms}description`), literal(`to use data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Use`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Use`), namedNode(`${rdfs}label`), literal(`Use`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Use`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Use`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Use`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymise`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymise`), namedNode(`${dcterms}description`), literal(`to irreversibly alter personal data in such a way that a unique data subject can no longer be identified directly or indirectly or in combination with other data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymise`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymise`), namedNode(`${rdfs}label`), literal(`Anonymise`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymise`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns11}Anonymize`), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymise`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transform`), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymise`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymise`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns12}processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymization`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymization`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymization`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymization`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymization`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymization`), namedNode(`${dcterms}description`), literal(`Alterting personal data irreversibly such that a data subject can no longer be identified directly or indirectly, either by the data controller alone or in collaboration with any other party`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymization`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymization`), namedNode(`${rdfs}label`), literal(`Anonymization`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymization`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PseudoAnonymization`), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymization`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Anonymization`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns13}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymization`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymization`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymization`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymization`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymization`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymization`), namedNode(`${dcterms}description`), literal(`PseudoAnonmyization or 'pseudonymisation’ means the processing of personal data in such a manner that the personal data can no longer be attributed to a specific data subject without the use of additional information, provided that such additional information is kept separately and is subject to technical and organisational measures to ensure that the personal data are not attributed to an identified or identifiable natural person;`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymization`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymization`), namedNode(`${rdfs}label`), literal(`Pseudo-Anonymization`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymization`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PseudonymisationEncryption`), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymization`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymization`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns13}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}ApartmentOwned`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}ApartmentOwned`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}ApartmentOwned`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}ApartmentOwned`), namedNode(`${dcterms}description`), literal(`Information about apartement(s) owned and its history`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ApartmentOwned`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}ApartmentOwned`), namedNode(`${rdfs}label`), literal(`Apartment Owned`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ApartmentOwned`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}HouseOwned`), namedNode(ns1)),
        quad(namedNode(`${ns1}ApartmentOwned`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ApartmentOwned`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}HouseOwned`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}HouseOwned`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}HouseOwned`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}HouseOwned`), namedNode(`${dcterms}description`), literal(`Information about house(s) owned and ownership history.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}HouseOwned`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}HouseOwned`), namedNode(`${rdfs}label`), literal(`House Owned`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}HouseOwned`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Ownership`), namedNode(ns1)),
        quad(namedNode(`${ns1}HouseOwned`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}HouseOwned`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Association`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Association`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Association`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Association`), namedNode(`${dcterms}description`), literal(`Information about associations in a social network with other individuals, groups, or entities e.g. friend of a friend`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Association`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Association`), namedNode(`${rdfs}label`), literal(`Association`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Association`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}SocialNetwork`), namedNode(ns1)),
        quad(namedNode(`${ns1}Association`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Association`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Attitude`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Attitude`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Attitude`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Attitude`), namedNode(`${dcterms}description`), literal(`Information about attitude.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Attitude`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Attitude`), namedNode(`${rdfs}label`), literal(`Attitude`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Attitude`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Behavioral`), namedNode(ns1)),
        quad(namedNode(`${ns1}Attitude`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Attitude`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Behavioral`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Behavioral`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Behavioral`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Behavioral`), namedNode(`${dcterms}description`), literal(`Information about behavior or activity`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Behavioral`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Behavioral`), namedNode(`${rdfs}label`), literal(`Behavioral`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Behavioral`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}Activity`), namedNode(ns1)),
        quad(namedNode(`${ns1}Behavioral`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}External`), namedNode(ns1)),
        quad(namedNode(`${ns1}Behavioral`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Behavioral`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Authenticating`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Authenticating`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Authenticating`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Authenticating`), namedNode(`${dcterms}description`), literal(`Information about authentication and information used for authenticating`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Authenticating`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Authenticating`), namedNode(`${rdfs}label`), literal(`Authenticating`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Authenticating`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Internal`), namedNode(ns1)),
        quad(namedNode(`${ns1}Authenticating`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Authenticating`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Internal`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Internal`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Internal`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Internal`), namedNode(`${dcterms}description`), literal(`Informatoin about internal characteristics that cannot be seen or observed`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Internal`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Internal`), namedNode(`${rdfs}label`), literal(`Internal`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Internal`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PersonalDataCategory`), namedNode(ns1)),
        quad(namedNode(`${ns1}Internal`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Internal`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationHistory`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationHistory`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationHistory`), namedNode(`${dcterms}description`), literal(`Information about prior authentication and its outcomes such as login attempts or location.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationHistory`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationHistory`), namedNode(`${rdfs}label`), literal(`Authentication History`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationHistory`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Behavioral`), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationHistory`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationHistory`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns14), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationProtocols`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationProtocols`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationProtocols`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationProtocols`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationProtocols`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationProtocols`), namedNode(`${dcterms}description`), literal(`Protocols involving validation of identity i.e. authentication of a person or information`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationProtocols`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationProtocols`), namedNode(`${rdfs}label`), literal(`Authentication Protocols`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationProtocols`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}TechnicalMeasure`), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthenticationProtocols`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthorisationProcedure`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthorisationProcedure`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthorisationProcedure`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthorisationProcedure`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthorisationProcedure`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthorisationProcedure`), namedNode(`${dcterms}description`), literal(`Procedures for determining authorisation through permission or authority`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthorisationProcedure`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthorisationProcedure`), namedNode(`${rdfs}label`), literal(`Authorisation Procedure`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthorisationProcedure`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}OrganisationalMeasure`), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthorisationProcedure`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AuthorisationProcedure`), namedNode(`${rdfs}comment`), literal(`non-technical authorisation procedures: How is it described on an organisational level, who gets access to the data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}OrganisationalMeasure`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}OrganisationalMeasure`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}OrganisationalMeasure`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}OrganisationalMeasure`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}OrganisationalMeasure`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}OrganisationalMeasure`), namedNode(`${dcterms}description`), literal(`Organisational measures required/followed when processing data of the declared category`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}OrganisationalMeasure`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}OrganisationalMeasure`), namedNode(`${rdfs}label`), literal(`Organisational Measure`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}OrganisationalMeasure`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}TechnicalOrganisationalMeasure`), namedNode(ns1)),
        quad(namedNode(`${ns1}OrganisationalMeasure`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Authority`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Authority`), namedNode(`${dcterms}creator`), literal(`Georg Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}Authority`), namedNode(`${dcterms}creator`), literal(`Harshvardhan Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Authority`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}Authority`), namedNode(`${dcterms}description`), literal(`An authority with the power to create or enforce laws, or determine their compliance.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Authority`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Authority`), namedNode(`${rdfs}label`), literal(`Authority`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Authority`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}LegalEntity`), namedNode(ns1)),
        quad(namedNode(`${ns1}Authority`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalEntity`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalEntity`), namedNode(`${dcterms}description`), literal(`A human or non-human that constitute as a legally defined entity`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalEntity`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalEntity`), namedNode(`${rdfs}label`), literal(`Legal Entity`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalEntity`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AutomatedDecisionMaking`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}AutomatedDecisionMaking`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}AutomatedDecisionMaking`), namedNode(`${dcterms}creator`), literal(`Piero Bonatti`), namedNode(ns1)),
        quad(namedNode(`${ns1}AutomatedDecisionMaking`), namedNode(`${dcterms}description`), literal(`Processing that involves automated decision making`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AutomatedDecisionMaking`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}AutomatedDecisionMaking`), namedNode(`${rdfs}label`), literal(`Automated Decision Making`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AutomatedDecisionMaking`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}AutomatedDecisionMaking`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}BankAccount`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}BankAccount`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}BankAccount`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}BankAccount`), namedNode(`${dcterms}description`), literal(`Information about bank accounts.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}BankAccount`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}BankAccount`), namedNode(`${rdfs}label`), literal(`Bank Account`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}BankAccount`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}FinancialAccount`), namedNode(ns1)),
        quad(namedNode(`${ns1}BankAccount`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}BankAccount`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}External`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}External`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}External`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}External`), namedNode(`${dcterms}description`), literal(`Information about external characteristics that can be observed`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}External`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}External`), namedNode(`${rdfs}label`), literal(`External`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}External`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PersonalDataCategory`), namedNode(ns1)),
        quad(namedNode(`${ns1}External`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}External`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Biometric`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Biometric`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Biometric`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Biometric`), namedNode(`${dcterms}description`), literal(`Information about biometrics and biometric characteristics.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Biometric`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Biometric`), namedNode(`${rdfs}label`), literal(`Biometric`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Biometric`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Identifying`), namedNode(ns1)),
        quad(namedNode(`${ns1}Biometric`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(ns1)),
        quad(namedNode(`${ns1}Biometric`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Biometric`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Identifying`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Identifying`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Identifying`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Identifying`), namedNode(`${dcterms}description`), literal(`Information that uniquely or semi-uniquely identifies an individual or a group`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Identifying`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Identifying`), namedNode(`${rdfs}label`), literal(`Identifying`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Identifying`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}External`), namedNode(ns1)),
        quad(namedNode(`${ns1}Identifying`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Identifying`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(`${dcterms}description`), literal(`Personal data belonging to one of 'special categories' that are more sensitive and require additional measures`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(`${rdfs}label`), literal(`Special Category Personal Data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PersonalDataCategory`), namedNode(ns1)),
        quad(namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns15}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(`${rdfs}comment`), literal(`trade union membership, which is explicitly included in the taxative listing in GDPR Art. 9 (1), is not covered yet.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}BloodType`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}BloodType`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}BloodType`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}BloodType`), namedNode(`${dcterms}description`), literal(`Information about blood type.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}BloodType`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}BloodType`), namedNode(`${rdfs}label`), literal(`Blood Type`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}BloodType`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}MedicalHealth`), namedNode(ns1)),
        quad(namedNode(`${ns1}BloodType`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}BloodType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}MedicalHealth`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}MedicalHealth`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}MedicalHealth`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}MedicalHealth`), namedNode(`${dcterms}description`), literal(`Information about health, medical conditions or health care`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MedicalHealth`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}MedicalHealth`), namedNode(`${rdfs}label`), literal(`MedicalHealth`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MedicalHealth`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}External`), namedNode(ns1)),
        quad(namedNode(`${ns1}MedicalHealth`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(ns1)),
        quad(namedNode(`${ns1}MedicalHealth`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MedicalHealth`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowserFingerprint`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowserFingerprint`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowserFingerprint`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowserFingerprint`), namedNode(`${dcterms}description`), literal(`Information about the web browser which is used as a 'fingerprint'`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowserFingerprint`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowserFingerprint`), namedNode(`${rdfs}label`), literal(`Browser Fingerprint`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowserFingerprint`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}DeviceBased`), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowserFingerprint`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowserFingerprint`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceBased`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceBased`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceBased`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceBased`), namedNode(`${dcterms}description`), literal(`Information about devices`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceBased`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceBased`), namedNode(`${rdfs}label`), literal(`Device Based`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceBased`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}Computer`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceBased`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Tracking`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceBased`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceBased`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingBehavior`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingBehavior`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingBehavior`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingBehavior`), namedNode(`${dcterms}description`), literal(`Information about browsing behaviour.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingBehavior`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingBehavior`), namedNode(`${rdfs}label`), literal(`Browsing Behavior`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingBehavior`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}OnlineActivity`), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingBehavior`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Behavioral`), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingBehavior`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingBehavior`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingReferral`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingReferral`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingReferral`), namedNode(`${dcterms}description`), literal(`Information about web browsing referrer or referral, which can be based on location, targeted referrals, direct, organic search, social media or actions, campaigns.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingReferral`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingReferral`), namedNode(`${rdfs}label`), literal(`Browsing Referral`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingReferral`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}BrowsingBehaviour`), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingReferral`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}BrowsingReferral`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns14), namedNode(ns1)),
        quad(namedNode(`${ns1}CallLog`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CallLog`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}CallLog`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CallLog`), namedNode(`${dcterms}description`), literal(`Information about the calls that an individual has made.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CallLog`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CallLog`), namedNode(`${rdfs}label`), literal(`Call Log`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CallLog`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Behavioral`), namedNode(ns1)),
        quad(namedNode(`${ns1}CallLog`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CallLog`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}CarOwned`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CarOwned`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}CarOwned`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CarOwned`), namedNode(`${dcterms}description`), literal(`Information about cars ownership and ownership history.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CarOwned`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CarOwned`), namedNode(`${rdfs}label`), literal(`Car Owned`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CarOwned`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Ownership`), namedNode(ns1)),
        quad(namedNode(`${ns1}CarOwned`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CarOwned`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Ownership`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Ownership`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Ownership`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Ownership`), namedNode(`${dcterms}description`), literal(`Information about ownership and history, including renting, borrowing, possessions.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Ownership`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Ownership`), namedNode(`${rdfs}label`), literal(`Ownership`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Ownership`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Financial`), namedNode(ns1)),
        quad(namedNode(`${ns1}Ownership`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Ownership`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Certification`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Certification`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}Certification`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Certification`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}Certification`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}Certification`), namedNode(`${dcterms}description`), literal(`Certification mechanisms, seals, and marks for the purpose of demonstrating compliance`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Certification`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Certification`), namedNode(`${rdfs}label`), literal(`Certification`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Certification`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}CertificationSeal`), namedNode(ns1)),
        quad(namedNode(`${ns1}Certification`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CertificationSeal`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CertificationSeal`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}CertificationSeal`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CertificationSeal`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}CertificationSeal`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}CertificationSeal`), namedNode(`${dcterms}description`), literal(`Certifications, seals, and marks indicating compliance to regulations or practices`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CertificationSeal`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CertificationSeal`), namedNode(`${rdfs}label`), literal(`Certification and Seal`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CertificationSeal`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}OrganisationalMeasure`), namedNode(ns1)),
        quad(namedNode(`${ns1}CertificationSeal`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Character`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Character`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Character`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Character`), namedNode(`${dcterms}description`), literal(`Information about character in the public sphere`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Character`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Character`), namedNode(`${rdfs}label`), literal(`Character`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Character`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PublicLife`), namedNode(ns1)),
        quad(namedNode(`${ns1}Character`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Character`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}PublicLife`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PublicLife`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}PublicLife`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PublicLife`), namedNode(`${dcterms}description`), literal(`Information about public life`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PublicLife`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PublicLife`), namedNode(`${rdfs}label`), literal(`Public Life`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PublicLife`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Social`), namedNode(ns1)),
        quad(namedNode(`${ns1}PublicLife`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PublicLife`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Child`), namedNode(`${dcterms}created`), literal(`2020-11-25`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Child`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Child`), namedNode(`${dcterms}description`), literal(`A 'child' is a natural legal person who is below a certain legal age depending on the legal jurisdiction.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Child`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Child`), namedNode(`${rdfs}label`), literal(`Child`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Child`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}DataSubject`), namedNode(ns1)),
        quad(namedNode(`${ns1}Child`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Child`), namedNode(`${rdfs}comment`), literal(`The legality of age defining a child varies by jurisdiction. In addition, 'child' is distinct from a 'minor'. For example, the legal age drinking alcohol can be 21, which makes a person of age 20 a 'minor' in this context. In other cases, 'minor' and 'child' are used interchangeably to refer to a person below some legally defined age.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubject`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubject`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubject`), namedNode(`${dcterms}creator`), literal(`Javier Ferenandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubject`), namedNode(`${dcterms}description`), literal(`The individual (or category of individuals) whose personal data is being processed`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubject`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubject`), namedNode(`${rdfs}label`), literal(`Data Subject`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubject`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}LegalEntity`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubject`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubject`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns16}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubject`), namedNode(`${rdfs}comment`), literal(`The term 'data subject' is specific to the GDPR, but is functionally equivalent to the term 'individual' and the ISO/IEC term 'PII Principle'.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubject`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CodeOfConduct`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CodeOfConduct`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}CodeOfConduct`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CodeOfConduct`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}CodeOfConduct`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}CodeOfConduct`), namedNode(`${dcterms}description`), literal(`A set of rules or procedures outlining the norms and practices for conducting activities`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CodeOfConduct`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CodeOfConduct`), namedNode(`${rdfs}label`), literal(`Code of Conduct`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CodeOfConduct`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}GuidelinesPrinciple`), namedNode(ns1)),
        quad(namedNode(`${ns1}CodeOfConduct`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}GuidelinesPrinciple`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}GuidelinesPrinciple`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}GuidelinesPrinciple`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}GuidelinesPrinciple`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}GuidelinesPrinciple`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}GuidelinesPrinciple`), namedNode(`${dcterms}description`), literal(`Guidelines or Principles regarding processing and operational measures`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}GuidelinesPrinciple`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}GuidelinesPrinciple`), namedNode(`${rdfs}label`), literal(`GuidelinesPrinciple`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}GuidelinesPrinciple`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}OrganisationalMeasure`), namedNode(ns1)),
        quad(namedNode(`${ns1}GuidelinesPrinciple`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Collect`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Collect`), namedNode(`${dcterms}description`), literal(`to gather data from someone`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Collect`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Collect`), namedNode(`${rdfs}label`), literal(`Collect`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Collect`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns11}Collect`), namedNode(ns1)),
        quad(namedNode(`${ns1}Collect`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Obtain`), namedNode(ns1)),
        quad(namedNode(`${ns1}Collect`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Collect`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Collect`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns12}processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Combine`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Combine`), namedNode(`${dcterms}description`), literal(`to join or merge data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Combine`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Combine`), namedNode(`${rdfs}label`), literal(`Combine`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Combine`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns11}Aggregate`), namedNode(ns1)),
        quad(namedNode(`${ns1}Combine`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transform`), namedNode(ns1)),
        quad(namedNode(`${ns1}Combine`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Combine`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Combine`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns12}processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialInterest`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialInterest`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialInterest`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialInterest`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialInterest`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialInterest`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialInterest`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialInterest`), namedNode(`${dcterms}description`), literal(`carry out activities with a commercial interest i.e. of profit or benefit to the Controller`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialInterest`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialInterest`), namedNode(`${rdfs}label`), literal(`Commercial Interest`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialInterest`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Purpose`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialInterest`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Purpose`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Purpose`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}Purpose`), namedNode(`${dcterms}creator`), literal(`Javier Ferenandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}Purpose`), namedNode(`${dcterms}description`), literal(`The purpose of processing personal data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Purpose`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Purpose`), namedNode(`${rdfs}label`), literal(`Purpose`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Purpose`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns17}AnyPurpose`), namedNode(ns1)),
        quad(namedNode(`${ns1}Purpose`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Purpose`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns18), namedNode(ns1)),
        quad(namedNode(`${ns1}Purpose`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialResearch`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialResearch`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialResearch`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialResearch`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialResearch`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialResearch`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialResearch`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialResearch`), namedNode(`${dcterms}description`), literal(`conduct research in a commercial setting e.g. in a company`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialResearch`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialResearch`), namedNode(`${rdfs}label`), literal(`Commercial Research`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialResearch`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns6}Develop`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialResearch`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ResearchAndDevelopment`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommercialResearch`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Communication`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Communication`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Communication`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Communication`), namedNode(`${dcterms}description`), literal(`Information communicated from or to an individual`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Communication`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Communication`), namedNode(`${rdfs}label`), literal(`Communication`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Communication`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Social`), namedNode(ns1)),
        quad(namedNode(`${ns1}Communication`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Communication`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Social`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Social`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Social`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Social`), namedNode(`${dcterms}description`), literal(`Information about social aspects such as family, public life, or professional networks.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Social`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Social`), namedNode(`${rdfs}label`), literal(`Social`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Social`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PersonalDataCategory`), namedNode(ns1)),
        quad(namedNode(`${ns1}Social`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Social`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationForCustomerCare`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationForCustomerCare`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationForCustomerCare`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationForCustomerCare`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationForCustomerCare`), namedNode(`${dcterms}description`), literal(`communicate with users via email, phone, sms, chat or push messages regarding your requests.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationForCustomerCare`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationForCustomerCare`), namedNode(`${rdfs}label`), literal(`Communication for Customer Care`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationForCustomerCare`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}CustomerCare`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationForCustomerCare`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CustomerCare`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CustomerCare`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}CustomerCare`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}CustomerCare`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}CustomerCare`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CustomerCare`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}CustomerCare`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}CustomerCare`), namedNode(`${dcterms}description`), literal(`provide assistance for customer complaints and satisfaction`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CustomerCare`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CustomerCare`), namedNode(`${rdfs}label`), literal(`Customer Care`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CustomerCare`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns6}Feedback`), namedNode(ns1)),
        quad(namedNode(`${ns1}CustomerCare`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ServiceProvision`), namedNode(ns1)),
        quad(namedNode(`${ns1}CustomerCare`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationsMetadata`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationsMetadata`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationsMetadata`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationsMetadata`), namedNode(`${dcterms}description`), literal(`Information about communication metadata in the public sphere`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationsMetadata`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationsMetadata`), namedNode(`${rdfs}label`), literal(`Communications Metadata`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationsMetadata`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}Interactive`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationsMetadata`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PublicLife`), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationsMetadata`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CommunicationsMetadata`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Connection`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Connection`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Connection`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Connection`), namedNode(`${dcterms}description`), literal(`Information about and including connections in a social network`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Connection`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Connection`), namedNode(`${rdfs}label`), literal(`Connection`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Connection`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}SocialNetwork`), namedNode(ns1)),
        quad(namedNode(`${ns1}Connection`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Connection`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Consent`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Consent`), namedNode(`${dcterms}description`), literal(`Consent of the data subject regarding processing of their personal data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Consent`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Consent`), namedNode(`${rdfs}label`), literal(`Consent`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Consent`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Consent`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns19}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Consult`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Consult`), namedNode(`${dcterms}description`), literal(`to consult or query data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Consult`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Consult`), namedNode(`${rdfs}label`), literal(`Consult`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Consult`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns11}Query`), namedNode(ns1)),
        quad(namedNode(`${ns1}Consult`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Use`), namedNode(ns1)),
        quad(namedNode(`${ns1}Consult`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Consult`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Consult`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns12}processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Consultation`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Consultation`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Consultation`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}Consultation`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}Consultation`), namedNode(`${dcterms}description`), literal(`Consultation is a process of receving feedback, advice, or opinion from an external agency`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Consultation`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Consultation`), namedNode(`${rdfs}label`), literal(`Consultation`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Consultation`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}OrganisationalMeasure`), namedNode(ns1)),
        quad(namedNode(`${ns1}Consultation`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ConsultationWithAuthority`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}ConsultationWithAuthority`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}ConsultationWithAuthority`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}ConsultationWithAuthority`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}ConsultationWithAuthority`), namedNode(`${dcterms}description`), literal(`Consultation with an authority or authoritative entity`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ConsultationWithAuthority`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}ConsultationWithAuthority`), namedNode(`${rdfs}label`), literal(`Consultation with Authority`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ConsultationWithAuthority`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Consultation`), namedNode(ns1)),
        quad(namedNode(`${ns1}ConsultationWithAuthority`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Contact`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Contact`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Contact`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Contact`), namedNode(`${dcterms}description`), literal(`Information about contacts or used for contacting e.g. email address or phone number`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Contact`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Contact`), namedNode(`${rdfs}label`), literal(`Contact`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Contact`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}Physical`), namedNode(ns1)),
        quad(namedNode(`${ns1}Contact`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Tracking`), namedNode(ns1)),
        quad(namedNode(`${ns1}Contact`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Contact`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Tracking`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Tracking`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Tracking`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Tracking`), namedNode(`${dcterms}description`), literal(`Information used to track an individual or group e.g. location or email`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Tracking`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Tracking`), namedNode(`${rdfs}label`), literal(`Tracking`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Tracking`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PersonalDataCategory`), namedNode(ns1)),
        quad(namedNode(`${ns1}Tracking`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Tracking`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Context`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Context`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}Context`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}Context`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Context`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Context`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}Context`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}Context`), namedNode(`${dcterms}description`), literal(`The 'context' or 'scope' of the purpose, e.g. restriction to a certain business sector`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Context`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Context`), namedNode(`${rdfs}label`), literal(`Context`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Context`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Contract`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Contract`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}Contract`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Contract`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}Contract`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}Contract`), namedNode(`${dcterms}description`), literal(`Contractual terms governing data handling within the data controller`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Contract`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Contract`), namedNode(`${rdfs}label`), literal(`Contract`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Contract`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}LegalAgreement`), namedNode(ns1)),
        quad(namedNode(`${ns1}Contract`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalAgreement`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalAgreement`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalAgreement`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalAgreement`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalAgreement`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalAgreement`), namedNode(`${dcterms}description`), literal(`A legally binding agreement`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalAgreement`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalAgreement`), namedNode(`${rdfs}label`), literal(`Legal Agreement`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalAgreement`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}OrganisationalMeasure`), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalAgreement`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Copy`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Copy`), namedNode(`${dcterms}description`), literal(`to produce an exact reprodution of the data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Copy`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Copy`), namedNode(`${rdfs}label`), literal(`Copy`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Copy`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns11}Copy`), namedNode(ns1)),
        quad(namedNode(`${ns1}Copy`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Copy`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Copy`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns12}processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Processing`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Processing`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}Processing`), namedNode(`${dcterms}creator`), literal(`Javier Ferenandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}Processing`), namedNode(`${dcterms}description`), literal(`The processing performed on personal data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Processing`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Processing`), namedNode(`${rdfs}label`), literal(`Processing`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Processing`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns17}AnyProcessing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Processing`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Processing`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns18), namedNode(ns1)),
        quad(namedNode(`${ns1}Processing`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Country`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Country`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Country`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Country`), namedNode(`${dcterms}description`), literal(`Information about country e.g. residence, travel.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Country`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Country`), namedNode(`${rdfs}label`), literal(`Country`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Country`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Location`), namedNode(ns1)),
        quad(namedNode(`${ns1}Country`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Country`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Location`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Location`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Location`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Location`), namedNode(`${dcterms}description`), literal(`Information about location`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Location`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Location`), namedNode(`${rdfs}label`), literal(`Location`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Location`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}Location`), namedNode(ns1)),
        quad(namedNode(`${ns1}Location`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Tracking`), namedNode(ns1)),
        quad(namedNode(`${ns1}Location`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Location`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateEventRecommendations`), namedNode(`${dcterms}created`), literal(`2019-11-26`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateEventRecommendations`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateEventRecommendations`), namedNode(`${dcterms}creator`), literal(`Rudy Jacob`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateEventRecommendations`), namedNode(`${dcterms}description`), literal(`create and provide personalised recommendations for events`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateEventRecommendations`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateEventRecommendations`), namedNode(`${rdfs}label`), literal(`Create Event Recommendations`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateEventRecommendations`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}CreatePersonalizedRecommendations`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateEventRecommendations`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateEventRecommendations`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns18), namedNode(ns1)),
        quad(namedNode(`${ns1}CreatePersonalizedRecommendations`), namedNode(`${dcterms}created`), literal(`2019-11-26`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CreatePersonalizedRecommendations`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreatePersonalizedRecommendations`), namedNode(`${dcterms}creator`), literal(`Rudy Jacob`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreatePersonalizedRecommendations`), namedNode(`${dcterms}description`), literal(`create and provide personalised recommendations`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreatePersonalizedRecommendations`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreatePersonalizedRecommendations`), namedNode(`${rdfs}label`), literal(`Create Personalized Recommendations`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreatePersonalizedRecommendations`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ServicePersonalization`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreatePersonalizedRecommendations`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreatePersonalizedRecommendations`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns18), namedNode(ns1)),
        quad(namedNode(`${ns1}ServicePersonalization`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}ServicePersonalization`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServicePersonalization`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServicePersonalization`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServicePersonalization`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServicePersonalization`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServicePersonalization`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServicePersonalization`), namedNode(`${dcterms}description`), literal(`personalise service or activity`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ServicePersonalization`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServicePersonalization`), namedNode(`${rdfs}label`), literal(`Service Personalization`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ServicePersonalization`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Purpose`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServicePersonalization`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateProductRecommendations`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateProductRecommendations`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateProductRecommendations`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateProductRecommendations`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateProductRecommendations`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateProductRecommendations`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateProductRecommendations`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateProductRecommendations`), namedNode(`${dcterms}description`), literal(`create product recommendations e.g. suggest similar products`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateProductRecommendations`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateProductRecommendations`), namedNode(`${rdfs}label`), literal(`Create Product Recommendations`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateProductRecommendations`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns6}Marketing`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateProductRecommendations`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}CreatePersonalizedRecommendations`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreateProductRecommendations`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Credit`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Credit`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Credit`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Credit`), namedNode(`${dcterms}description`), literal(`Information about reputation with regards to money`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Credit`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Credit`), namedNode(`${rdfs}label`), literal(`Credit`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Credit`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transactional`), namedNode(ns1)),
        quad(namedNode(`${ns1}Credit`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Credit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transactional`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Transactional`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transactional`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transactional`), namedNode(`${dcterms}description`), literal(`Information about an purchasing, spending or income`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Transactional`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transactional`), namedNode(`${rdfs}label`), literal(`Transactional`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Transactional`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Financial`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transactional`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Transactional`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCapacity`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCapacity`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCapacity`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCapacity`), namedNode(`${dcterms}description`), literal(`Information about credit capacity.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCapacity`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCapacity`), namedNode(`${rdfs}label`), literal(`Credit Capacity`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCapacity`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Credit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCapacity`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCapacity`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCardNumber`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCardNumber`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCardNumber`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCardNumber`), namedNode(`${dcterms}description`), literal(`Information about credit card number`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCardNumber`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCardNumber`), namedNode(`${rdfs}label`), literal(`Credit Card Number`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCardNumber`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PaymentCardNumber`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCardNumber`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditCardNumber`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardNumber`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardNumber`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardNumber`), namedNode(`${dcterms}description`), literal(`Information about payment card number.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardNumber`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardNumber`), namedNode(`${rdfs}label`), literal(`Payment Card Number`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardNumber`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}AccountIdentifier`), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardNumber`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PaymentCard`), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardNumber`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardNumber`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns14), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditRecord`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditRecord`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditRecord`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditRecord`), namedNode(`${dcterms}description`), literal(`Information about credit record.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditRecord`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditRecord`), namedNode(`${rdfs}label`), literal(`Credit Record`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditRecord`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Credit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditRecord`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditRecord`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditScore`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditScore`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditScore`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditScore`), namedNode(`${dcterms}description`), literal(`Information about credit score.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditScore`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditScore`), namedNode(`${rdfs}label`), literal(`Credit Score`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditScore`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}CreditWorthiness`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditScore`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditScore`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditWorthiness`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditWorthiness`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditWorthiness`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditWorthiness`), namedNode(`${dcterms}description`), literal(`Information about credit worthiness.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditWorthiness`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditWorthiness`), namedNode(`${rdfs}label`), literal(`Credit Worthiness`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditWorthiness`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Credit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditWorthiness`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditWorthiness`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditStanding`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditStanding`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditStanding`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditStanding`), namedNode(`${dcterms}description`), literal(`Information about credit standing.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditStanding`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditStanding`), namedNode(`${rdfs}label`), literal(`Credit Standing`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditStanding`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Credit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditStanding`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CreditStanding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Criminal`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Criminal`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Criminal`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Criminal`), namedNode(`${dcterms}description`), literal(`Information about criminal activity e.g. criminal convictions or jail time`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Criminal`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Criminal`), namedNode(`${rdfs}label`), literal(`Criminal`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Criminal`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}Judicial`), namedNode(ns1)),
        quad(namedNode(`${ns1}Criminal`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Social`), namedNode(ns1)),
        quad(namedNode(`${ns1}Criminal`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Criminal`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalCharge`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalCharge`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalCharge`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalCharge`), namedNode(`${dcterms}description`), literal(`Information about criminal charges.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalCharge`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalCharge`), namedNode(`${rdfs}label`), literal(`Criminal Charge`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalCharge`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Criminal`), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalCharge`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalCharge`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalConviction`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalConviction`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalConviction`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalConviction`), namedNode(`${dcterms}description`), literal(`Information about criminal convictions.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalConviction`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalConviction`), namedNode(`${rdfs}label`), literal(`Criminal Conviction`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalConviction`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Criminal`), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalConviction`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalConviction`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalPardon`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalPardon`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalPardon`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalPardon`), namedNode(`${dcterms}description`), literal(`Information about criminal pardons.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalPardon`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalPardon`), namedNode(`${rdfs}label`), literal(`Criminal Pardon`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalPardon`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Criminal`), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalPardon`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}CriminalPardon`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceProvision`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceProvision`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceProvision`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceProvision`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceProvision`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceProvision`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceProvision`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceProvision`), namedNode(`${dcterms}description`), literal(`provide service or activity`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceProvision`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceProvision`), namedNode(`${rdfs}label`), literal(`Service Provision`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceProvision`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Purpose`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceProvision`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DNACode`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DNACode`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}DNACode`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DNACode`), namedNode(`${dcterms}description`), literal(`Information about DNA.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DNACode`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DNACode`), namedNode(`${rdfs}label`), literal(`DNA Code`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DNACode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}MedicalHealth`), namedNode(ns1)),
        quad(namedNode(`${ns1}DNACode`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DNACode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}DPIA`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DPIA`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DPIA`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}DPIA`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}DPIA`), namedNode(`${dcterms}description`), literal(`A DPIA involves determining the potential and actual impact of processing activities on individuals or groups of individuals`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DPIA`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DPIA`), namedNode(`${rdfs}label`), literal(`Data Protection Impact Assessment (DPIA)`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DPIA`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ImpactAssessment`), namedNode(ns1)),
        quad(namedNode(`${ns1}DPIA`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DPIA`), namedNode(`${rdfs}comment`), literal(`Top class: Impact Assessment, and DPIA is sub-class`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ImpactAssessment`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}ImpactAssessment`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImpactAssessment`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImpactAssessment`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImpactAssessment`), namedNode(`${dcterms}description`), literal(`Calculating or determining the likelihood of impact of an existing or proposed process, which can involve risks or detriments.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ImpactAssessment`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImpactAssessment`), namedNode(`${rdfs}label`), literal(`Impact Assessment`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ImpactAssessment`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}OrganisationalMeasure`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImpactAssessment`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataController`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DataController`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataController`), namedNode(`${dcterms}creator`), literal(`Javier Ferenandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataController`), namedNode(`${dcterms}description`), literal(`The individual or organisation that decides (or controls) the purpose(s) of processing personal data.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataController`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataController`), namedNode(`${rdfs}label`), literal(`Data Controller`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataController`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}LegalEntity`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataController`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataController`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns20}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataController`), namedNode(`${rdfs}comment`), literal(`The terms 'Controller' is usually the more common form of indicating a Data Controller. In ISO/IEC the term 'PII Controller' is used.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataController`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProcessor`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProcessor`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProcessor`), namedNode(`${dcterms}description`), literal(`A ‘processor’ means a natural or legal person, public authority, agency or other body which processes personal data on behalf of the controller.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProcessor`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProcessor`), namedNode(`${rdfs}label`), literal(`Data Processor`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProcessor`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Recipient`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProcessor`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProcessor`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns21}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Recipient`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Recipient`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}Recipient`), namedNode(`${dcterms}creator`), literal(`Javier Ferenandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}Recipient`), namedNode(`${dcterms}description`), literal(`Entities that receive personal data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Recipient`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Recipient`), namedNode(`${rdfs}label`), literal(`Recipient`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Recipient`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns17}AnyRecipient`), namedNode(ns1)),
        quad(namedNode(`${ns1}Recipient`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}LegalEntity`), namedNode(ns1)),
        quad(namedNode(`${ns1}Recipient`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Recipient`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns18), namedNode(ns1)),
        quad(namedNode(`${ns1}Recipient`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns22}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Recipient`), namedNode(`${rdfs}comment`), literal(`A recipient of personal data can be used to indicate any entity that receives personal data. This can be a Third Party, Processor (GDPR), or even a Controller.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Recipient`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionAuthority`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionAuthority`), namedNode(`${dcterms}creator`), literal(`Georg Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionAuthority`), namedNode(`${dcterms}creator`), literal(`Harshvardhan Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionAuthority`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionAuthority`), namedNode(`${dcterms}description`), literal(`An authority tasked with overseeing legal compliance regarding privacy and data protection laws.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionAuthority`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionAuthority`), namedNode(`${rdfs}label`), literal(`Data Protection Authority`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionAuthority`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Authority`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionAuthority`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionOfficer`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionOfficer`), namedNode(`${dcterms}creator`), literal(`Georg Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionOfficer`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionOfficer`), namedNode(`${dcterms}description`), literal(`An entity within or authorised by an organisation to monitor internal compliance, inform and advise on your data protection obligations and act as a contact point for data subjects and the supervisory authority.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionOfficer`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionOfficer`), namedNode(`${rdfs}label`), literal(`Data Protection Officer`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionOfficer`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}LegalEntity`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionOfficer`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataProtectionOfficer`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns23}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSource`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSource`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSource`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSource`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSource`), namedNode(`${dcterms}description`), literal(`The source or origin of data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSource`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSource`), namedNode(`${rdfs}label`), literal(`Data Source`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSource`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSource`), namedNode(`${rdfs}comment`), literal(`Source is direct point of data collection; 'origin' would indicate the original/others points of where the data originates from`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubProcessor`), namedNode(`${dcterms}created`), literal(`2020-11-25`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubProcessor`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubProcessor`), namedNode(`${dcterms}description`), literal(`A 'sub-processor' is a processor engaged by another processor`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubProcessor`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubProcessor`), namedNode(`${rdfs}label`), literal(`Data Sub-Processor`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubProcessor`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}DataProcessor`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubProcessor`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubProcessor`), namedNode(`${rdfs}comment`), literal(`sub-processor' is a commonly used term similar to 'sub-contractor' and does not have a specific legal definition`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubjectRight`), namedNode(`${dcterms}created`), literal(`2020-11-18`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubjectRight`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubjectRight`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubjectRight`), namedNode(`${dcterms}creator`), literal(`Harshvardhan Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubjectRight`), namedNode(`${dcterms}description`), literal(`The rights applicable or provided to a Data Subject`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubjectRight`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubjectRight`), namedNode(`${rdfs}label`), literal(`Data Subject Right`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubjectRight`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Right`), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubjectRight`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DataSubjectRight`), namedNode(`${rdfs}comment`), literal(`Based on use of definitions, the notion of 'Data Subject Right' can be equivalent to 'Individual Right' or 'Right of a Person'`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Right`), namedNode(`${dcterms}created`), literal(`2020-11-18`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Right`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}Right`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}Right`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Right`), namedNode(`${dcterms}description`), literal(`The right(s) applicable, provided, or expected.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Right`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Right`), namedNode(`${rdfs}label`), literal(`Right`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Right`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Right`), namedNode(`${rdfs}comment`), literal(`A 'right' is a legal, social, or ethical principle of freedom or entitlement which dictate the norms regarding what is allowed or owed.. Rights as a concept encompass a broad area of norms and entities, and are not specific to Individuals or Data Protection / Privacy. For individual specific rights, see dpv:DataSubjectRight`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeIdentification`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DeIdentification`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeIdentification`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeIdentification`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeIdentification`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeIdentification`), namedNode(`${dcterms}description`), literal(`Conversion of identifiable personal data (PII) to un-identifiable personal data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeIdentification`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeIdentification`), namedNode(`${rdfs}label`), literal(`De-Identification`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeIdentification`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PseudoAnonymization`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeIdentification`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeliveryOfGoods`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DeliveryOfGoods`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeliveryOfGoods`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeliveryOfGoods`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeliveryOfGoods`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeliveryOfGoods`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeliveryOfGoods`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeliveryOfGoods`), namedNode(`${dcterms}description`), literal(`deliver goods and services`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeliveryOfGoods`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeliveryOfGoods`), namedNode(`${rdfs}label`), literal(`Delivery of Goods`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeliveryOfGoods`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns6}Delivery`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeliveryOfGoods`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}RequestedServiceProvision`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeliveryOfGoods`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Demeanor`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Demeanor`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Demeanor`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Demeanor`), namedNode(`${dcterms}description`), literal(`Information about demeanor.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Demeanor`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Demeanor`), namedNode(`${rdfs}label`), literal(`Demeanor`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Demeanor`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Behavioral`), namedNode(ns1)),
        quad(namedNode(`${ns1}Demeanor`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Demeanor`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Demographic`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Demographic`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Demographic`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Demographic`), namedNode(`${dcterms}description`), literal(`Information about demography and demographic characteristics`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Demographic`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Demographic`), namedNode(`${rdfs}label`), literal(`Demographic`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Demographic`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}External`), namedNode(ns1)),
        quad(namedNode(`${ns1}Demographic`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Demographic`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Derive`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Derive`), namedNode(`${dcterms}description`), literal(`to create new derivative data from the original data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Derive`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Derive`), namedNode(`${rdfs}label`), literal(`Derive`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Derive`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns11}Derive`), namedNode(ns1)),
        quad(namedNode(`${ns1}Derive`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transform`), namedNode(ns1)),
        quad(namedNode(`${ns1}Derive`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Derive`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns12}processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}DerivedPersonalData`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DerivedPersonalData`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}DerivedPersonalData`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DerivedPersonalData`), namedNode(`${dcterms}description`), literal(`Derived data is data that is obtained or derived from other data.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DerivedPersonalData`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DerivedPersonalData`), namedNode(`${rdfs}label`), literal(`Derived Personal Data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DerivedPersonalData`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}Derived`), namedNode(ns1)),
        quad(namedNode(`${ns1}DerivedPersonalData`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PersonalDataCategory`), namedNode(ns1)),
        quad(namedNode(`${ns1}DerivedPersonalData`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DerivedPersonalData`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns14), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataCategory`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataCategory`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataCategory`), namedNode(`${dcterms}creator`), literal(`Harshvardhan Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataCategory`), namedNode(`${dcterms}description`), literal(`A category of personal data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataCategory`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataCategory`), namedNode(`${rdfs}label`), literal(`Personal Data Category`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataCategory`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns17}AnyData`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataCategory`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataCategory`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns18), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataCategory`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns16}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataCategory`), namedNode(`${rdfs}comment`), literal(`For a formal legal definition of personal data, see GDPR Art.4-1. An informal definition consists of any data directly or indirectly associated or related to an individual. This definition is equivalent to ISO/IEC definition of Personally Identifiable Information (PII).`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataCategory`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DesignStandard`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DesignStandard`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}DesignStandard`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DesignStandard`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}DesignStandard`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}DesignStandard`), namedNode(`${dcterms}description`), literal(`A set of rules or guidelines outlining criterias for design`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DesignStandard`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DesignStandard`), namedNode(`${rdfs}label`), literal(`Design Standard`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DesignStandard`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}GuidelinesPrinciple`), namedNode(ns1)),
        quad(namedNode(`${ns1}DesignStandard`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Destruct`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Destruct`), namedNode(`${dcterms}description`), literal(`to process data in a way it no longer exists or cannot be repaired`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Destruct`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Destruct`), namedNode(`${rdfs}label`), literal(`Destruct`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Destruct`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Remove`), namedNode(ns1)),
        quad(namedNode(`${ns1}Destruct`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Destruct`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Remove`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Remove`), namedNode(`${dcterms}description`), literal(`to destruct or erase data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Remove`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Remove`), namedNode(`${rdfs}label`), literal(`Remove`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Remove`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Remove`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Remove`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceApplications`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceApplications`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceApplications`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceApplications`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceApplications`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceApplications`), namedNode(`${dcterms}description`), literal(`Information about applications or application-like software on a device.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceApplications`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceApplications`), namedNode(`${rdfs}label`), literal(`Device Applications`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceApplications`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}DeviceSoftware`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceApplications`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceApplications`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns14), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceSoftware`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceSoftware`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceSoftware`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceSoftware`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceSoftware`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceSoftware`), namedNode(`${dcterms}description`), literal(`Information about software on or related to a device.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceSoftware`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceSoftware`), namedNode(`${rdfs}label`), literal(`Device Software`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceSoftware`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}DeviceBased`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceSoftware`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceSoftware`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns14), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceOperatingSystem`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceOperatingSystem`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceOperatingSystem`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceOperatingSystem`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceOperatingSystem`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceOperatingSystem`), namedNode(`${dcterms}description`), literal(`Information about the operating system (OS) or system software that manages hardware or software resources.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceOperatingSystem`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceOperatingSystem`), namedNode(`${rdfs}label`), literal(`Device Operating System`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceOperatingSystem`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}DeviceSoftware`), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceOperatingSystem`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DeviceOperatingSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns14), namedNode(ns1)),
        quad(namedNode(`${ns1}Dialect`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Dialect`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Dialect`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Dialect`), namedNode(`${dcterms}description`), literal(`Information about linguistic dialects.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Dialect`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Dialect`), namedNode(`${rdfs}label`), literal(`Dialect`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Dialect`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Language`), namedNode(ns1)),
        quad(namedNode(`${ns1}Dialect`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Dialect`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}DirectMarketing`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DirectMarketing`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DirectMarketing`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}DirectMarketing`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}DirectMarketing`), namedNode(`${dcterms}description`), literal(`carry out direct marketing i.e. marketing communicated directly to the individual`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DirectMarketing`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DirectMarketing`), namedNode(`${rdfs}label`), literal(`Direct Marketing`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DirectMarketing`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Marketing`), namedNode(ns1)),
        quad(namedNode(`${ns1}DirectMarketing`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Disability`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Disability`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Disability`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Disability`), namedNode(`${dcterms}description`), literal(`Information about disabilities.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Disability`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Disability`), namedNode(`${rdfs}label`), literal(`Disability`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Disability`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}MedicalHealth`), namedNode(ns1)),
        quad(namedNode(`${ns1}Disability`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Disability`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}DisciplinaryAction`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DisciplinaryAction`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}DisciplinaryAction`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DisciplinaryAction`), namedNode(`${dcterms}description`), literal(`Information about disciplinary actions and its history`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DisciplinaryAction`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DisciplinaryAction`), namedNode(`${rdfs}label`), literal(`Disciplinary Action`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DisciplinaryAction`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Professional`), namedNode(ns1)),
        quad(namedNode(`${ns1}DisciplinaryAction`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DisciplinaryAction`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Professional`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Professional`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Professional`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Professional`), namedNode(`${dcterms}description`), literal(`Information about educational or professional career`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Professional`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Professional`), namedNode(`${rdfs}label`), literal(`Professional`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Professional`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Social`), namedNode(ns1)),
        quad(namedNode(`${ns1}Professional`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Professional`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Disclose`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Disclose`), namedNode(`${dcterms}description`), literal(`to make data known`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Disclose`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Disclose`), namedNode(`${rdfs}label`), literal(`Disclose`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Disclose`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Disclose`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Disclose`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}DiscloseByTransmission`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DiscloseByTransmission`), namedNode(`${dcterms}description`), literal(`to disclose data by means of transmission`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DiscloseByTransmission`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DiscloseByTransmission`), namedNode(`${rdfs}label`), literal(`Disclose by Transmission`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DiscloseByTransmission`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Disclose`), namedNode(ns1)),
        quad(namedNode(`${ns1}DiscloseByTransmission`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DiscloseByTransmission`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Dislike`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Dislike`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Dislike`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Dislike`), namedNode(`${dcterms}description`), literal(`Information about dislikes or preferences regarding repulsions.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Dislike`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Dislike`), namedNode(`${rdfs}label`), literal(`Dislike`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Dislike`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Interest`), namedNode(ns1)),
        quad(namedNode(`${ns1}Dislike`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Dislike`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Interest`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Interest`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Interest`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Interest`), namedNode(`${dcterms}description`), literal(`Information about interests`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Interest`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Interest`), namedNode(`${rdfs}label`), literal(`Interest`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Interest`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Preference`), namedNode(ns1)),
        quad(namedNode(`${ns1}Interest`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Interest`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Disseminate`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Disseminate`), namedNode(`${dcterms}description`), literal(`to spread data throughout`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Disseminate`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Disseminate`), namedNode(`${rdfs}label`), literal(`Disseminate`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Disseminate`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Disclose`), namedNode(ns1)),
        quad(namedNode(`${ns1}Disseminate`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Disseminate`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Divorce`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Divorce`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Divorce`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Divorce`), namedNode(`${dcterms}description`), literal(`Information about divorce(s).`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Divorce`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Divorce`), namedNode(`${rdfs}label`), literal(`Divorce`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Divorce`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}FamilyStructure`), namedNode(ns1)),
        quad(namedNode(`${ns1}Divorce`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Divorce`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyStructure`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyStructure`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyStructure`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyStructure`), namedNode(`${dcterms}description`), literal(`Information about family and familial structure.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyStructure`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyStructure`), namedNode(`${rdfs}label`), literal(`Family Structure`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyStructure`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Family`), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyStructure`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyStructure`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}DrugTestResult`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}DrugTestResult`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}DrugTestResult`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}DrugTestResult`), namedNode(`${dcterms}description`), literal(`Information about drug test results.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DrugTestResult`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}DrugTestResult`), namedNode(`${rdfs}label`), literal(`Drug Test Result`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DrugTestResult`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}MedicalHealth`), namedNode(ns1)),
        quad(namedNode(`${ns1}DrugTestResult`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}DrugTestResult`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailAddress`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailAddress`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailAddress`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailAddress`), namedNode(`${dcterms}description`), literal(`Information about Email address.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailAddress`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailAddress`), namedNode(`${rdfs}label`), literal(`Email Address`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailAddress`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Contact`), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailAddress`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailAddress`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailContent`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailContent`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailContent`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailContent`), namedNode(`${dcterms}description`), literal(`Information about the contents of Emails sent or recevied`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailContent`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailContent`), namedNode(`${rdfs}label`), literal(`Email Content`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailContent`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Communication`), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailContent`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EmailContent`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}EmploymentHistory`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}EmploymentHistory`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}EmploymentHistory`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}EmploymentHistory`), namedNode(`${dcterms}description`), literal(`Information about employment history`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EmploymentHistory`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}EmploymentHistory`), namedNode(`${rdfs}label`), literal(`Employment History`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EmploymentHistory`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Professional`), namedNode(ns1)),
        quad(namedNode(`${ns1}EmploymentHistory`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EmploymentHistory`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInRest`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInRest`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInRest`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInRest`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInRest`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInRest`), namedNode(`${dcterms}description`), literal(`Encryption of data when being stored (persistent encryption)`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInRest`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInRest`), namedNode(`${rdfs}label`), literal(`Encryption in Rest`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInRest`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PseudonymisationEncryption`), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInRest`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudonymisationEncryption`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudonymisationEncryption`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudonymisationEncryption`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudonymisationEncryption`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudonymisationEncryption`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudonymisationEncryption`), namedNode(`${dcterms}description`), literal(`Technical measures consisting of pseudoanonymization and encryption`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudonymisationEncryption`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudonymisationEncryption`), namedNode(`${rdfs}label`), literal(`Pseudonymisation and Encryption`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudonymisationEncryption`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}TechnicalMeasure`), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudonymisationEncryption`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInTransfer`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInTransfer`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInTransfer`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInTransfer`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInTransfer`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInTransfer`), namedNode(`${dcterms}description`), literal(`Encryption of data in transit e.g. when being transferred from one location to another, including sharing`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInTransfer`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInTransfer`), namedNode(`${rdfs}label`), literal(`Encryption in Transfer`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInTransfer`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PseudonymisationEncryption`), namedNode(ns1)),
        quad(namedNode(`${ns1}EncryptionInTransfer`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Erase`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Erase`), namedNode(`${dcterms}description`), literal(`to delete data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Erase`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Erase`), namedNode(`${rdfs}label`), literal(`Erase`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Erase`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Remove`), namedNode(ns1)),
        quad(namedNode(`${ns1}Erase`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Erase`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}EthnicOrigin`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}EthnicOrigin`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}EthnicOrigin`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}EthnicOrigin`), namedNode(`${dcterms}description`), literal(`Information about ethnic origin`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EthnicOrigin`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}EthnicOrigin`), namedNode(`${rdfs}label`), literal(`Ethnic Origin`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EthnicOrigin`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(ns1)),
        quad(namedNode(`${ns1}EthnicOrigin`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Ethnicity`), namedNode(ns1)),
        quad(namedNode(`${ns1}EthnicOrigin`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EthnicOrigin`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Ethnicity`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Ethnicity`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Ethnicity`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Ethnicity`), namedNode(`${dcterms}description`), literal(`Information about ethnic origins and lineage`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Ethnicity`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Ethnicity`), namedNode(`${rdfs}label`), literal(`Ethnicity`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Ethnicity`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}External`), namedNode(ns1)),
        quad(namedNode(`${ns1}Ethnicity`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Ethnicity`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}EvaluationScoring`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}EvaluationScoring`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}EvaluationScoring`), namedNode(`${dcterms}creator`), literal(`Piero Bonatti`), namedNode(ns1)),
        quad(namedNode(`${ns1}EvaluationScoring`), namedNode(`${dcterms}description`), literal(`Processing that involves evaluation and scoring of individuals`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EvaluationScoring`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}EvaluationScoring`), namedNode(`${rdfs}label`), literal(`Evaluation and Scoring`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EvaluationScoring`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}EvaluationScoring`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Family`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Family`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Family`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Family`), namedNode(`${dcterms}description`), literal(`Information about family and relationships`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Family`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Family`), namedNode(`${rdfs}label`), literal(`Family`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Family`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Social`), namedNode(ns1)),
        quad(namedNode(`${ns1}Family`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Family`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyHealthHistory`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyHealthHistory`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyHealthHistory`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyHealthHistory`), namedNode(`${dcterms}description`), literal(`Information about family health history.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyHealthHistory`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyHealthHistory`), namedNode(`${rdfs}label`), literal(`Family Health History`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyHealthHistory`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}HealthHistory`), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyHealthHistory`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FamilyHealthHistory`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthHistory`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthHistory`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthHistory`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthHistory`), namedNode(`${dcterms}description`), literal(`Information about health history.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthHistory`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthHistory`), namedNode(`${rdfs}label`), literal(`Health History`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthHistory`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}MedicalHealth`), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthHistory`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthHistory`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Favorite`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Favorite`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Favorite`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Favorite`), namedNode(`${dcterms}description`), literal(`Information about favorites`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Favorite`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Favorite`), namedNode(`${rdfs}label`), literal(`Favorite`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Favorite`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Preference`), namedNode(ns1)),
        quad(namedNode(`${ns1}Favorite`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Favorite`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Preference`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Preference`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Preference`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Preference`), namedNode(`${dcterms}description`), literal(`Information about preferences or interests`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Preference`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Preference`), namedNode(`${rdfs}label`), literal(`Preference`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Preference`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}Preference`), namedNode(ns1)),
        quad(namedNode(`${ns1}Preference`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Internal`), namedNode(ns1)),
        quad(namedNode(`${ns1}Preference`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Preference`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteColor`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteColor`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteColor`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteColor`), namedNode(`${dcterms}description`), literal(`Information about favorite color.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteColor`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteColor`), namedNode(`${rdfs}label`), literal(`Favorite Color`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteColor`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Favorite`), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteColor`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteColor`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteFood`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteFood`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteFood`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteFood`), namedNode(`${dcterms}description`), literal(`Information about favorite food.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteFood`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteFood`), namedNode(`${rdfs}label`), literal(`Favorite Food`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteFood`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Favorite`), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteFood`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteFood`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteMusic`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteMusic`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteMusic`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteMusic`), namedNode(`${dcterms}description`), literal(`Information about favorite music.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteMusic`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteMusic`), namedNode(`${rdfs}label`), literal(`Favorite Music`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteMusic`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Favorite`), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteMusic`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FavoriteMusic`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Fetish`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Fetish`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Fetish`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Fetish`), namedNode(`${dcterms}description`), literal(`Information an individual's sexual fetishes`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Fetish`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Fetish`), namedNode(`${rdfs}label`), literal(`Fetish`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Fetish`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Sexual`), namedNode(ns1)),
        quad(namedNode(`${ns1}Fetish`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Fetish`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sexual`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Sexual`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sexual`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sexual`), namedNode(`${dcterms}description`), literal(`Information about sexuality and sexual history`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Sexual`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sexual`), namedNode(`${rdfs}label`), literal(`Sexual`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Sexual`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}External`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sexual`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sexual`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Sexual`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Financial`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Financial`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Financial`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Financial`), namedNode(`${dcterms}description`), literal(`Information about finance including monetary characteristics and transactions`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Financial`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Financial`), namedNode(`${rdfs}label`), literal(`Financial`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Financial`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}Financial`), namedNode(ns1)),
        quad(namedNode(`${ns1}Financial`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PersonalDataCategory`), namedNode(ns1)),
        quad(namedNode(`${ns1}Financial`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Financial`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccountNumber`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccountNumber`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccountNumber`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccountNumber`), namedNode(`${dcterms}description`), literal(`Information about financial account number`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccountNumber`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccountNumber`), namedNode(`${rdfs}label`), literal(`Financial Account Number`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccountNumber`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}AccountIdentifier`), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccountNumber`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FinancialAccountNumber`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Fingerprint`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Fingerprint`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Fingerprint`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Fingerprint`), namedNode(`${dcterms}description`), literal(`Information about fingerprint used for biometric purposes.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Fingerprint`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Fingerprint`), namedNode(`${rdfs}label`), literal(`Fingerprint`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Fingerprint`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Biometric`), namedNode(ns1)),
        quad(namedNode(`${ns1}Fingerprint`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Fingerprint`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}FraudPreventionAndDetection`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}FraudPreventionAndDetection`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}FraudPreventionAndDetection`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}FraudPreventionAndDetection`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}FraudPreventionAndDetection`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}FraudPreventionAndDetection`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}FraudPreventionAndDetection`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}FraudPreventionAndDetection`), namedNode(`${dcterms}description`), literal(`detect and prevent fraud`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FraudPreventionAndDetection`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}FraudPreventionAndDetection`), namedNode(`${rdfs}label`), literal(`Fraud Prevention and Detection`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}FraudPreventionAndDetection`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns6}Government`), namedNode(ns1)),
        quad(namedNode(`${ns1}FraudPreventionAndDetection`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Security`), namedNode(ns1)),
        quad(namedNode(`${ns1}FraudPreventionAndDetection`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Friend`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Friend`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Friend`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Friend`), namedNode(`${dcterms}description`), literal(`Information about friends in a social network, including aspects of friendships such as years together or nature of friendship.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Friend`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Friend`), namedNode(`${rdfs}label`), literal(`Friend`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Friend`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}SocialNetwork`), namedNode(ns1)),
        quad(namedNode(`${ns1}Friend`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Friend`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}GPSCoordinate`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}GPSCoordinate`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}GPSCoordinate`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}GPSCoordinate`), namedNode(`${dcterms}description`), literal(`Information about location expressed using Global Position System coordinates (GPS)`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}GPSCoordinate`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}GPSCoordinate`), namedNode(`${rdfs}label`), literal(`GPS Coordinate`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}GPSCoordinate`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Location`), namedNode(ns1)),
        quad(namedNode(`${ns1}GPSCoordinate`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}GPSCoordinate`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Gender`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Gender`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Gender`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Gender`), namedNode(`${dcterms}description`), literal(`Information about gender`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Gender`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Gender`), namedNode(`${rdfs}label`), literal(`Gender`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Gender`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PhysicalCharacteristic`), namedNode(ns1)),
        quad(namedNode(`${ns1}Gender`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Gender`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}GeneralReputation`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}GeneralReputation`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}GeneralReputation`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}GeneralReputation`), namedNode(`${dcterms}description`), literal(`Information about reputation in the public sphere`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}GeneralReputation`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}GeneralReputation`), namedNode(`${rdfs}label`), literal(`General Reputation`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}GeneralReputation`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PublicLife`), namedNode(ns1)),
        quad(namedNode(`${ns1}GeneralReputation`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}GeneralReputation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Geographic`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Geographic`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Geographic`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Geographic`), namedNode(`${dcterms}description`), literal(`Information about location or based on geography (e.g., home address)`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Geographic`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Geographic`), namedNode(`${rdfs}label`), literal(`Geographic`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Geographic`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Demographic`), namedNode(ns1)),
        quad(namedNode(`${ns1}Geographic`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Geographic`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}GroupMembership`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}GroupMembership`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}GroupMembership`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}GroupMembership`), namedNode(`${dcterms}description`), literal(`Information about groups and memberships included or associated with in a social network`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}GroupMembership`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}GroupMembership`), namedNode(`${rdfs}label`), literal(`Group Membership`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}GroupMembership`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}SocialNetwork`), namedNode(ns1)),
        quad(namedNode(`${ns1}GroupMembership`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}GroupMembership`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}HairColor`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}HairColor`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}HairColor`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}HairColor`), namedNode(`${dcterms}description`), literal(`Information about hair colour`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}HairColor`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}HairColor`), namedNode(`${rdfs}label`), literal(`Hair Color`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}HairColor`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PhysicalCharacteristic`), namedNode(ns1)),
        quad(namedNode(`${ns1}HairColor`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}HairColor`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Health`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Health`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Health`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Health`), namedNode(`${dcterms}description`), literal(`Information about health.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Health`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Health`), namedNode(`${rdfs}label`), literal(`Health`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Health`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}Health`), namedNode(ns1)),
        quad(namedNode(`${ns1}Health`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}MedicalHealth`), namedNode(ns1)),
        quad(namedNode(`${ns1}Health`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Health`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthRecord`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthRecord`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthRecord`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthRecord`), namedNode(`${dcterms}description`), literal(`Information about health record.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthRecord`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthRecord`), namedNode(`${rdfs}label`), literal(`Health Record`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthRecord`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}MedicalHealth`), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthRecord`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}HealthRecord`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Height`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Height`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Height`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Height`), namedNode(`${dcterms}description`), literal(`Information about physical height`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Height`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Height`), namedNode(`${rdfs}label`), literal(`Height`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Height`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PhysicalCharacteristic`), namedNode(ns1)),
        quad(namedNode(`${ns1}Height`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Height`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Historical`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Historical`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Historical`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Historical`), namedNode(`${dcterms}description`), literal(`Information about historical data related to or relevant regarding history or past events`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Historical`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Historical`), namedNode(`${rdfs}label`), literal(`Historical`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Historical`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PersonalDataCategory`), namedNode(ns1)),
        quad(namedNode(`${ns1}Historical`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Historical`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}IPAddress`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}IPAddress`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}IPAddress`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}IPAddress`), namedNode(`${dcterms}description`), literal(`Information about the Internet protocol (IP) address of a device`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}IPAddress`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}IPAddress`), namedNode(`${rdfs}label`), literal(`IP Address`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}IPAddress`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}DeviceBased`), namedNode(ns1)),
        quad(namedNode(`${ns1}IPAddress`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}IPAddress`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}IdentityVerification`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}IdentityVerification`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}IdentityVerification`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}IdentityVerification`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}IdentityVerification`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}IdentityVerification`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}IdentityVerification`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}IdentityVerification`), namedNode(`${dcterms}description`), literal(`verify and authorise identity`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}IdentityVerification`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}IdentityVerification`), namedNode(`${rdfs}label`), literal(`Identity Verification`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}IdentityVerification`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Security`), namedNode(ns1)),
        quad(namedNode(`${ns1}IdentityVerification`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveExistingProductsAndServices`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveExistingProductsAndServices`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveExistingProductsAndServices`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveExistingProductsAndServices`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveExistingProductsAndServices`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveExistingProductsAndServices`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveExistingProductsAndServices`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveExistingProductsAndServices`), namedNode(`${dcterms}description`), literal(`improve existing products and services`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveExistingProductsAndServices`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveExistingProductsAndServices`), namedNode(`${rdfs}label`), literal(`Improve Existing Products and Services`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveExistingProductsAndServices`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}OptimisationForController`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveExistingProductsAndServices`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForController`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForController`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForController`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForController`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForController`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForController`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForController`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForController`), namedNode(`${dcterms}description`), literal(`optimise activities and services for the Controller`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForController`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForController`), namedNode(`${rdfs}label`), literal(`Optimisation for Controller`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForController`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ServiceOptimization`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForController`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveInternalCRMProcesses`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveInternalCRMProcesses`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveInternalCRMProcesses`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveInternalCRMProcesses`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveInternalCRMProcesses`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveInternalCRMProcesses`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveInternalCRMProcesses`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveInternalCRMProcesses`), namedNode(`${dcterms}description`), literal(`improve customer-relationship management (CRM) processes`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveInternalCRMProcesses`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveInternalCRMProcesses`), namedNode(`${rdfs}label`), literal(`Improve Internal CRM Processes`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveInternalCRMProcesses`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}OptimisationForController`), namedNode(ns1)),
        quad(namedNode(`${ns1}ImproveInternalCRMProcesses`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Income`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Income`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Income`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Income`), namedNode(`${dcterms}description`), literal(`Information about financial income e.g. for individual or household or family`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Income`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Income`), namedNode(`${rdfs}label`), literal(`Income`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Income`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transactional`), namedNode(ns1)),
        quad(namedNode(`${ns1}Income`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Income`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}IncomeBracket`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}IncomeBracket`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}IncomeBracket`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}IncomeBracket`), namedNode(`${dcterms}description`), literal(`Information about income bracket.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}IncomeBracket`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}IncomeBracket`), namedNode(`${rdfs}label`), literal(`Income Bracket`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}IncomeBracket`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Demographic`), namedNode(ns1)),
        quad(namedNode(`${ns1}IncomeBracket`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}IncomeBracket`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}IncreaseServiceRobustness`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}IncreaseServiceRobustness`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}IncreaseServiceRobustness`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}IncreaseServiceRobustness`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}IncreaseServiceRobustness`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}IncreaseServiceRobustness`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}IncreaseServiceRobustness`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}IncreaseServiceRobustness`), namedNode(`${dcterms}description`), literal(`improve the robustness and resilience of services`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}IncreaseServiceRobustness`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}IncreaseServiceRobustness`), namedNode(`${rdfs}label`), literal(`Increase Service Robustness`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}IncreaseServiceRobustness`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}OptimisationForController`), namedNode(ns1)),
        quad(namedNode(`${ns1}IncreaseServiceRobustness`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}IndividualHealthHistory`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}IndividualHealthHistory`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}IndividualHealthHistory`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}IndividualHealthHistory`), namedNode(`${dcterms}description`), literal(`Information about information health history.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}IndividualHealthHistory`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}IndividualHealthHistory`), namedNode(`${rdfs}label`), literal(`Individual Health History`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}IndividualHealthHistory`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}HealthHistory`), namedNode(ns1)),
        quad(namedNode(`${ns1}IndividualHealthHistory`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}IndividualHealthHistory`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}InnovativeUseOfNewTechnologies`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}InnovativeUseOfNewTechnologies`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}InnovativeUseOfNewTechnologies`), namedNode(`${dcterms}creator`), literal(`Piero Bonatti`), namedNode(ns1)),
        quad(namedNode(`${ns1}InnovativeUseOfNewTechnologies`), namedNode(`${dcterms}description`), literal(`Processing that involves use of innovative and new technologies`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}InnovativeUseOfNewTechnologies`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}InnovativeUseOfNewTechnologies`), namedNode(`${rdfs}label`), literal(`Innovative Use of New Technologies`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}InnovativeUseOfNewTechnologies`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}InnovativeUseOfNewTechnologies`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Intention`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Intention`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Intention`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Intention`), namedNode(`${dcterms}description`), literal(`Information about intentions`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Intention`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Intention`), namedNode(`${rdfs}label`), literal(`Intention`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Intention`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Preference`), namedNode(ns1)),
        quad(namedNode(`${ns1}Intention`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Intention`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Interaction`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Interaction`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Interaction`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Interaction`), namedNode(`${dcterms}description`), literal(`Information about interactions in the public sphere`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Interaction`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Interaction`), namedNode(`${rdfs}label`), literal(`Interaction`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Interaction`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PublicLife`), namedNode(ns1)),
        quad(namedNode(`${ns1}Interaction`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Interaction`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}InternalResourceOptimisation`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}InternalResourceOptimisation`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}InternalResourceOptimisation`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}InternalResourceOptimisation`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}InternalResourceOptimisation`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}InternalResourceOptimisation`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}InternalResourceOptimisation`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}InternalResourceOptimisation`), namedNode(`${dcterms}description`), literal(`optimise internal resources used by the organisation e.g. resource usage`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}InternalResourceOptimisation`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}InternalResourceOptimisation`), namedNode(`${rdfs}label`), literal(`Internal Resource Optimisation`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}InternalResourceOptimisation`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}OptimisationForController`), namedNode(ns1)),
        quad(namedNode(`${ns1}InternalResourceOptimisation`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Job`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Job`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Job`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Job`), namedNode(`${dcterms}description`), literal(`Information about professional jobs`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Job`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Job`), namedNode(`${rdfs}label`), literal(`Job`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Job`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Professional`), namedNode(ns1)),
        quad(namedNode(`${ns1}Job`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Job`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}KnowledgeBelief`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}KnowledgeBelief`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}KnowledgeBelief`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}KnowledgeBelief`), namedNode(`${dcterms}description`), literal(`Information about knowledge and beliefs`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}KnowledgeBelief`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}KnowledgeBelief`), namedNode(`${rdfs}label`), literal(`Knowledge and Beliefs`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}KnowledgeBelief`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Internal`), namedNode(ns1)),
        quad(namedNode(`${ns1}KnowledgeBelief`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}KnowledgeBelief`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}LargeScaleProcessing`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}LargeScaleProcessing`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}LargeScaleProcessing`), namedNode(`${dcterms}creator`), literal(`Piero Bonatti`), namedNode(ns1)),
        quad(namedNode(`${ns1}LargeScaleProcessing`), namedNode(`${dcterms}description`), literal(`Processing that takes place at large scales`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LargeScaleProcessing`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}LargeScaleProcessing`), namedNode(`${rdfs}label`), literal(`Large Scale Processing`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LargeScaleProcessing`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LargeScaleProcessing`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalBasis`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalBasis`), namedNode(`${dcterms}description`), literal(`The Legal basis used to justify processing of personal data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalBasis`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalBasis`), namedNode(`${rdfs}label`), literal(`Legal Basis`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalBasis`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalBasis`), namedNode(`${rdfs}comment`), literal(`Legal basis (plural: legal bases) are defined by legislations and regulations, whose applicability is usually restricted to specific jurisdictions.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalBasis`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalCompliance`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalCompliance`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalCompliance`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalCompliance`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalCompliance`), namedNode(`${dcterms}description`), literal(`fulfil obligations or requirements towards achieving compliance with law or regulations.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalCompliance`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalCompliance`), namedNode(`${rdfs}label`), literal(`Legal Compliance`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalCompliance`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Purpose`), namedNode(ns1)),
        quad(namedNode(`${ns1}LegalCompliance`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LifeHistory`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}LifeHistory`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}LifeHistory`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}LifeHistory`), namedNode(`${dcterms}description`), literal(`Information about personal history regarding events or activities - including  their occurences that might be directly related or have had an influence (e.g. World War, 9/11)`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LifeHistory`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}LifeHistory`), namedNode(`${rdfs}label`), literal(`Life History`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LifeHistory`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Historical`), namedNode(ns1)),
        quad(namedNode(`${ns1}LifeHistory`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LifeHistory`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Like`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Like`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Like`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Like`), namedNode(`${dcterms}description`), literal(`Information about likes or preferences regarding attractions.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Like`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Like`), namedNode(`${rdfs}label`), literal(`Like`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Like`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Interest`), namedNode(ns1)),
        quad(namedNode(`${ns1}Like`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Like`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}LinkClicked`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}LinkClicked`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}LinkClicked`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}LinkClicked`), namedNode(`${dcterms}description`), literal(`Information about the links that an individual has clicked.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LinkClicked`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}LinkClicked`), namedNode(`${rdfs}label`), literal(`LinkClicked`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LinkClicked`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}Navigation`), namedNode(ns1)),
        quad(namedNode(`${ns1}LinkClicked`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Behavioral`), namedNode(ns1)),
        quad(namedNode(`${ns1}LinkClicked`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LinkClicked`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}LoanRecord`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}LoanRecord`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}LoanRecord`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}LoanRecord`), namedNode(`${dcterms}description`), literal(`Information about loans, whether applied, provided or rejected, and its history`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LoanRecord`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}LoanRecord`), namedNode(`${rdfs}label`), literal(`Loan Record`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LoanRecord`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transactional`), namedNode(ns1)),
        quad(namedNode(`${ns1}LoanRecord`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}LoanRecord`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}MACAddress`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}MACAddress`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}MACAddress`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}MACAddress`), namedNode(`${dcterms}description`), literal(`Information about the Media Access Control (MAC) address of a device`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MACAddress`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}MACAddress`), namedNode(`${rdfs}label`), literal(`MAC Address`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MACAddress`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}DeviceBased`), namedNode(ns1)),
        quad(namedNode(`${ns1}MACAddress`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MACAddress`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}MakeAvailable`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}MakeAvailable`), namedNode(`${dcterms}description`), literal(`to transform or publish data to be used`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MakeAvailable`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}MakeAvailable`), namedNode(`${rdfs}label`), literal(`Make Available`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MakeAvailable`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Disclose`), namedNode(ns1)),
        quad(namedNode(`${ns1}MakeAvailable`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MakeAvailable`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}MaritalStatus`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}MaritalStatus`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}MaritalStatus`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}MaritalStatus`), namedNode(`${dcterms}description`), literal(`Information about marital status and history`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MaritalStatus`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}MaritalStatus`), namedNode(`${rdfs}label`), literal(`Marital Status`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MaritalStatus`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PublicLife`), namedNode(ns1)),
        quad(namedNode(`${ns1}MaritalStatus`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MaritalStatus`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Marriage`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Marriage`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Marriage`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Marriage`), namedNode(`${dcterms}description`), literal(`Information about marriage(s).`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Marriage`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Marriage`), namedNode(`${rdfs}label`), literal(`Marriage`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Marriage`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}FamilyStructure`), namedNode(ns1)),
        quad(namedNode(`${ns1}Marriage`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Marriage`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}MatchingCombining`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}MatchingCombining`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}MatchingCombining`), namedNode(`${dcterms}creator`), literal(`Piero Bonatti`), namedNode(ns1)),
        quad(namedNode(`${ns1}MatchingCombining`), namedNode(`${dcterms}description`), literal(`Processing that involves matching and combining of personal data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MatchingCombining`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}MatchingCombining`), namedNode(`${rdfs}label`), literal(`Matching and Combining`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MatchingCombining`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MatchingCombining`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}MentalHealth`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}MentalHealth`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}MentalHealth`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}MentalHealth`), namedNode(`${dcterms}description`), literal(`Information about mental health.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MentalHealth`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}MentalHealth`), namedNode(`${rdfs}label`), literal(`Mental Health`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MentalHealth`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Health`), namedNode(ns1)),
        quad(namedNode(`${ns1}MentalHealth`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}MentalHealth`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Move`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Move`), namedNode(`${dcterms}description`), literal(`to move data from one location to another including deleting the original copy`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Move`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Move`), namedNode(`${rdfs}label`), literal(`Move`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Move`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns11}Move`), namedNode(ns1)),
        quad(namedNode(`${ns1}Move`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transfer`), namedNode(ns1)),
        quad(namedNode(`${ns1}Move`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Move`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns12}processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transfer`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Transfer`), namedNode(`${dcterms}description`), literal(`to move data from one place to another`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Transfer`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transfer`), namedNode(`${rdfs}label`), literal(`Transfer`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Transfer`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns11}Transfer`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transfer`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transfer`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Transfer`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns12}processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}NDA`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}NDA`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}NDA`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}NDA`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}NDA`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}NDA`), namedNode(`${dcterms}description`), literal(`Non-disclosure Agreements e.g. preserving confidentiality of information`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}NDA`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}NDA`), namedNode(`${rdfs}label`), literal(`Non-Disclosure Agreement (NDA)`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}NDA`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}LegalAgreement`), namedNode(ns1)),
        quad(namedNode(`${ns1}NDA`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Name`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Name`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Name`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Name`), namedNode(`${dcterms}description`), literal(`Information about names associated or used as given name or nickname.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Name`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Name`), namedNode(`${rdfs}label`), literal(`Name`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Name`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Identifying`), namedNode(ns1)),
        quad(namedNode(`${ns1}Name`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Name`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}NonCommercialResearch`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}NonCommercialResearch`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}NonCommercialResearch`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}NonCommercialResearch`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}NonCommercialResearch`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}NonCommercialResearch`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}NonCommercialResearch`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}NonCommercialResearch`), namedNode(`${dcterms}description`), literal(`conduct research in a non-commercial setting e.g. for a non-profit-organisation (NGO)`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}NonCommercialResearch`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}NonCommercialResearch`), namedNode(`${rdfs}label`), literal(`Non-Commercial Research`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}NonCommercialResearch`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ResearchAndDevelopment`), namedNode(ns1)),
        quad(namedNode(`${ns1}NonCommercialResearch`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}OfficialID`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}OfficialID`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}OfficialID`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}OfficialID`), namedNode(`${dcterms}description`), literal(`Information about an official identifier or identification document`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}OfficialID`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}OfficialID`), namedNode(`${rdfs}label`), literal(`Official ID`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}OfficialID`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}Government`), namedNode(ns1)),
        quad(namedNode(`${ns1}OfficialID`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Identifying`), namedNode(ns1)),
        quad(namedNode(`${ns1}OfficialID`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}OfficialID`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Offspring`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Offspring`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Offspring`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Offspring`), namedNode(`${dcterms}description`), literal(`Information about offspring(s).`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Offspring`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Offspring`), namedNode(`${rdfs}label`), literal(`Offspring`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Offspring`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}FamilyStructure`), namedNode(ns1)),
        quad(namedNode(`${ns1}Offspring`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Offspring`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Opinion`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Opinion`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Opinion`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Opinion`), namedNode(`${dcterms}description`), literal(`Information about opinions`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Opinion`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Opinion`), namedNode(`${rdfs}label`), literal(`Opinion`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Opinion`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Preference`), namedNode(ns1)),
        quad(namedNode(`${ns1}Opinion`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Opinion`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForConsumer`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForConsumer`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForConsumer`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForConsumer`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForConsumer`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForConsumer`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForConsumer`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForConsumer`), namedNode(`${dcterms}description`), literal(`optimise activities and services for the consumer or user`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForConsumer`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForConsumer`), namedNode(`${rdfs}label`), literal(`Optimisation for Consumer`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForConsumer`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns6}Custom`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForConsumer`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ServiceOptimization`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimisationForConsumer`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceOptimization`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceOptimization`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceOptimization`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceOptimization`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceOptimization`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceOptimization`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceOptimization`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceOptimization`), namedNode(`${dcterms}description`), literal(`optimise service or activity`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceOptimization`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceOptimization`), namedNode(`${rdfs}label`), literal(`Service Optimization`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceOptimization`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Purpose`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceOptimization`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimiseUserInterface`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimiseUserInterface`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimiseUserInterface`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimiseUserInterface`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimiseUserInterface`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimiseUserInterface`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimiseUserInterface`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimiseUserInterface`), namedNode(`${dcterms}description`), literal(`optimise interfaces presented to the user`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimiseUserInterface`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimiseUserInterface`), namedNode(`${rdfs}label`), literal(`Optimise User Interface`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimiseUserInterface`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}OptimisationForConsumer`), namedNode(ns1)),
        quad(namedNode(`${ns1}OptimiseUserInterface`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalOrganisationalMeasure`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalOrganisationalMeasure`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalOrganisationalMeasure`), namedNode(`${dcterms}description`), literal(`The Technical and Organisational measures used.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalOrganisationalMeasure`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalOrganisationalMeasure`), namedNode(`${rdfs}label`), literal(`Technical and Organisational Measure`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalOrganisationalMeasure`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}TechnicalOrganisationalMeasure`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Organise`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Organise`), namedNode(`${dcterms}description`), literal(`to organize data for arranging or classifying`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Organise`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Organise`), namedNode(`${rdfs}label`), literal(`Organise`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Organise`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Organise`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Organise`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}PIA`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PIA`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PIA`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}PIA`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}PIA`), namedNode(`${dcterms}description`), literal(`Carrying out an impact assessment regarding privacy risks`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PIA`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PIA`), namedNode(`${rdfs}label`), literal(`Privacy Impact Assessment`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PIA`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ImpactAssessment`), namedNode(ns1)),
        quad(namedNode(`${ns1}PIA`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PINCode`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PINCode`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}PINCode`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PINCode`), namedNode(`${dcterms}description`), literal(`Information about Personal identification number (PIN), which is usually used in the process of authenticating the individual as a user accessing a system.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PINCode`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PINCode`), namedNode(`${rdfs}label`), literal(`PIN Code`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PINCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Authenticating`), namedNode(ns1)),
        quad(namedNode(`${ns1}PINCode`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PINCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Parent`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Parent`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Parent`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Parent`), namedNode(`${dcterms}description`), literal(`Information about parent(s).`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Parent`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Parent`), namedNode(`${rdfs}label`), literal(`Parent`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Parent`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}FamilyStructure`), namedNode(ns1)),
        quad(namedNode(`${ns1}Parent`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Parent`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Password`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Password`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Password`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Password`), namedNode(`${dcterms}description`), literal(`Information about password used in the process of authenticating the individual as a user accessing a system.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Password`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Password`), namedNode(`${rdfs}label`), literal(`Password`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Password`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Authenticating`), namedNode(ns1)),
        quad(namedNode(`${ns1}Password`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Password`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Payment`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Payment`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Payment`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}Payment`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}Payment`), namedNode(`${dcterms}description`), literal(`process users’ payment transactions.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Payment`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Payment`), namedNode(`${rdfs}label`), literal(`Payment`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Payment`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ServiceProvision`), namedNode(ns1)),
        quad(namedNode(`${ns1}Payment`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCard`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCard`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCard`), namedNode(`${dcterms}description`), literal(`Information about payment card such as Credit Card, Debit Card.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCard`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCard`), namedNode(`${rdfs}label`), literal(`Payment Card`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCard`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}FinancialAccount`), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCard`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCard`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns14), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardExpiry`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardExpiry`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardExpiry`), namedNode(`${dcterms}description`), literal(`Information about payment card expiry such as a date.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardExpiry`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardExpiry`), namedNode(`${rdfs}label`), literal(`Payment Card Expiry`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardExpiry`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PaymentCard`), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardExpiry`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PaymentCardExpiry`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns14), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataHandling`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataHandling`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataHandling`), namedNode(`${dcterms}creator`), literal(`Javier Ferenandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataHandling`), namedNode(`${dcterms}description`), literal(`A high-level Class to describe 'data handling'. This can consist of personal data being processed for a purpose, involving entities, using technical and organisational, applicable risks, rights, and legal basis.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataHandling`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataHandling`), namedNode(`${rdfs}label`), literal(`Personal Data Handling`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataHandling`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalDataHandling`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalPossession`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalPossession`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalPossession`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalPossession`), namedNode(`${dcterms}description`), literal(`Information about personal possessions.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalPossession`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalPossession`), namedNode(`${rdfs}label`), literal(`Personal Possession`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalPossession`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Ownership`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalPossession`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalPossession`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedAdvertising`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedAdvertising`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedAdvertising`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedAdvertising`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedAdvertising`), namedNode(`${dcterms}description`), literal(`provide personalised advertising`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedAdvertising`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedAdvertising`), namedNode(`${rdfs}label`), literal(`Personalised Advertising`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedAdvertising`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Advertising`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedAdvertising`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ServicePersonalization`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedAdvertising`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedBenefits`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedBenefits`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedBenefits`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedBenefits`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedBenefits`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedBenefits`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedBenefits`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedBenefits`), namedNode(`${dcterms}description`), literal(`personalise benefits received by the user`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedBenefits`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedBenefits`), namedNode(`${rdfs}label`), literal(`Personalised Benefits`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedBenefits`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ServicePersonalization`), namedNode(ns1)),
        quad(namedNode(`${ns1}PersonalisedBenefits`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Personality`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Personality`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Personality`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Personality`), namedNode(`${dcterms}description`), literal(`Information about personality (e.g., categorization in terms of the Big Five personality traits)`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Personality`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Personality`), namedNode(`${rdfs}label`), literal(`Personality`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Personality`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Behavioral`), namedNode(ns1)),
        quad(namedNode(`${ns1}Personality`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Personality`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhilosophicalBelief`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PhilosophicalBelief`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhilosophicalBelief`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhilosophicalBelief`), namedNode(`${dcterms}description`), literal(`Information about philosophical beliefs.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PhilosophicalBelief`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhilosophicalBelief`), namedNode(`${rdfs}label`), literal(`Philosophical Belief`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PhilosophicalBelief`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhilosophicalBelief`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}KnowledgeBelief`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhilosophicalBelief`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PhilosophicalBelief`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalAddress`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalAddress`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalAddress`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalAddress`), namedNode(`${dcterms}description`), literal(`Information about physical address.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalAddress`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalAddress`), namedNode(`${rdfs}label`), literal(`Physical Address`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalAddress`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Contact`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalAddress`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalAddress`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalHealth`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalHealth`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalHealth`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalHealth`), namedNode(`${dcterms}description`), literal(`Information about physical health.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalHealth`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalHealth`), namedNode(`${rdfs}label`), literal(`Physical Health`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalHealth`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Health`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalHealth`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalHealth`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalTrait`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalTrait`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalTrait`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalTrait`), namedNode(`${dcterms}description`), literal(`Information about defining traits or features regarding the body.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalTrait`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalTrait`), namedNode(`${rdfs}label`), literal(`Physical Trait`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalTrait`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Demographic`), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalTrait`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PhysicalTrait`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Picture`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Picture`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Picture`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Picture`), namedNode(`${dcterms}description`), literal(`Information about visual representation or image e.g. profile photo.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Picture`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Picture`), namedNode(`${rdfs}label`), literal(`Picture`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Picture`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Identifying`), namedNode(ns1)),
        quad(namedNode(`${ns1}Picture`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Picture`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Piercing`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Piercing`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Piercing`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Piercing`), namedNode(`${dcterms}description`), literal(`Information about piercings`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Piercing`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Piercing`), namedNode(`${rdfs}label`), literal(`Piercing`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Piercing`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PhysicalCharacteristic`), namedNode(ns1)),
        quad(namedNode(`${ns1}Piercing`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Piercing`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}PoliticalAffiliation`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PoliticalAffiliation`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}PoliticalAffiliation`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PoliticalAffiliation`), namedNode(`${dcterms}description`), literal(`Information about political affiliation and history`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PoliticalAffiliation`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PoliticalAffiliation`), namedNode(`${rdfs}label`), literal(`Political Affiliation`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PoliticalAffiliation`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}Political`), namedNode(ns1)),
        quad(namedNode(`${ns1}PoliticalAffiliation`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(ns1)),
        quad(namedNode(`${ns1}PoliticalAffiliation`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PublicLife`), namedNode(ns1)),
        quad(namedNode(`${ns1}PoliticalAffiliation`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PoliticalAffiliation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Prescription`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Prescription`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Prescription`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Prescription`), namedNode(`${dcterms}description`), literal(`Information about medical and pharmaceutical prescriptions`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Prescription`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Prescription`), namedNode(`${rdfs}label`), literal(`Prescription`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Prescription`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}MedicalHealth`), namedNode(ns1)),
        quad(namedNode(`${ns1}Prescription`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Prescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDefault`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDefault`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDefault`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDefault`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDefault`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDefault`), namedNode(`${dcterms}description`), literal(`Practices regarding selecting appropriate data protection and privacy measures as the 'default' in an activity or service`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDefault`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDefault`), namedNode(`${rdfs}label`), literal(`Privacy by Default`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDefault`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}GuidelinesPrinciple`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDefault`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDesign`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDesign`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDesign`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDesign`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDesign`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDesign`), namedNode(`${dcterms}description`), literal(`Practices regarding incorporating data protection and privacy in the design of information and services`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDesign`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDesign`), namedNode(`${rdfs}label`), literal(`Privacy by Design`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDesign`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}RiskManagementProcedure`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyByDesign`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskManagementProcedure`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskManagementProcedure`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskManagementProcedure`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskManagementProcedure`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskManagementProcedure`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskManagementProcedure`), namedNode(`${dcterms}description`), literal(`Risk management refers to a coordinated set of activities and methods that is used to direct an organization and to control the many risks that can affect its ability to achieve objectives.  The term risk management also refers to the programme that is used to manage risk. This programme includes risk management principles, a risk management framework, and a risk management process.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskManagementProcedure`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskManagementProcedure`), namedNode(`${rdfs}label`), literal(`Risk Management Procedure`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskManagementProcedure`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}OrganisationalMeasure`), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskManagementProcedure`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskManagementProcedure`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns24}iso-31000-risk-management.html`), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskManagementProcedure`), namedNode(`${rdfs}comment`), literal(`Data Protection Impact Assessments as per GDPR art 35, other Privacy Impact Assessments, threat severity assessment https://www.cnil.fr/en/privacy-impact-assessment-pia`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyPreference`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyPreference`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyPreference`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyPreference`), namedNode(`${dcterms}description`), literal(`Information about privacy preferences`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyPreference`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyPreference`), namedNode(`${rdfs}label`), literal(`Privacy Preference`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyPreference`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Preference`), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyPreference`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PrivacyPreference`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Proclivitie`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Proclivitie`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Proclivitie`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Proclivitie`), namedNode(`${dcterms}description`), literal(`Information about proclivities in a sexual context`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Proclivitie`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Proclivitie`), namedNode(`${rdfs}label`), literal(`Proclivitie`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Proclivitie`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Sexual`), namedNode(ns1)),
        quad(namedNode(`${ns1}Proclivitie`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Proclivitie`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalCertification`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalCertification`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalCertification`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalCertification`), namedNode(`${dcterms}description`), literal(`Information about professional certifications`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalCertification`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalCertification`), namedNode(`${rdfs}label`), literal(`Professional Certification`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalCertification`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Professional`), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalCertification`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalCertification`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalEvaluation`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalEvaluation`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalEvaluation`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalEvaluation`), namedNode(`${dcterms}description`), literal(`Information about professional evaluations`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalEvaluation`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalEvaluation`), namedNode(`${rdfs}label`), literal(`Professional Evaluation`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalEvaluation`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Professional`), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalEvaluation`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalEvaluation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalInterview`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalInterview`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalInterview`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalInterview`), namedNode(`${dcterms}description`), literal(`Information about professional interviews`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalInterview`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalInterview`), namedNode(`${rdfs}label`), literal(`Professional Interview`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalInterview`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Professional`), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalInterview`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ProfessionalInterview`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Profiling`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Profiling`), namedNode(`${dcterms}description`), literal(`to create a profile that describes or represents a person`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Profiling`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Profiling`), namedNode(`${rdfs}label`), literal(`Profiling`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Profiling`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Use`), namedNode(ns1)),
        quad(namedNode(`${ns1}Profiling`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Profiling`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymise`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymise`), namedNode(`${dcterms}description`), literal(`to replace personal identifiable information by artificial identifiers`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymise`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymise`), namedNode(`${rdfs}label`), literal(`Pseudo-Anonymise`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymise`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transform`), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymise`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PseudoAnonymise`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Purchase`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Purchase`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Purchase`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Purchase`), namedNode(`${dcterms}description`), literal(`Information about purchases such as items bought e.g. grocery or clothing`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Purchase`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Purchase`), namedNode(`${rdfs}label`), literal(`Purchase`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Purchase`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}Purchase`), namedNode(ns1)),
        quad(namedNode(`${ns1}Purchase`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transactional`), namedNode(ns1)),
        quad(namedNode(`${ns1}Purchase`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Purchase`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}PurchasesAndSpendingHabit`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}PurchasesAndSpendingHabit`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}PurchasesAndSpendingHabit`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}PurchasesAndSpendingHabit`), namedNode(`${dcterms}description`), literal(`Information about analysis of purchases made and money spent expressed as a habit e.g. monthly shopping trends`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PurchasesAndSpendingHabit`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}PurchasesAndSpendingHabit`), namedNode(`${rdfs}label`), literal(`Purchases and Spending Habit`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PurchasesAndSpendingHabit`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transactional`), namedNode(ns1)),
        quad(namedNode(`${ns1}PurchasesAndSpendingHabit`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}PurchasesAndSpendingHabit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Race`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Race`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Race`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Race`), namedNode(`${dcterms}description`), literal(`Information about race or recial history.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Race`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Race`), namedNode(`${rdfs}label`), literal(`Race`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Race`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(ns1)),
        quad(namedNode(`${ns1}Race`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Ethnicity`), namedNode(ns1)),
        quad(namedNode(`${ns1}Race`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Race`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Record`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Record`), namedNode(`${dcterms}description`), literal(`to make a record (especially media)`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Record`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Record`), namedNode(`${rdfs}label`), literal(`Record`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Record`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Obtain`), namedNode(ns1)),
        quad(namedNode(`${ns1}Record`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Record`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Reference`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Reference`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Reference`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Reference`), namedNode(`${dcterms}description`), literal(`Information about references in the professional context`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Reference`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Reference`), namedNode(`${rdfs}label`), literal(`Reference`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Reference`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Professional`), namedNode(ns1)),
        quad(namedNode(`${ns1}Reference`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Reference`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}RegistrationAuthentication`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}RegistrationAuthentication`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}RegistrationAuthentication`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}RegistrationAuthentication`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}RegistrationAuthentication`), namedNode(`${dcterms}description`), literal(`register, authenticate, and identify in context of a service.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}RegistrationAuthentication`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}RegistrationAuthentication`), namedNode(`${rdfs}label`), literal(`Registration and Authentication`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}RegistrationAuthentication`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ServiceProvision`), namedNode(ns1)),
        quad(namedNode(`${ns1}RegistrationAuthentication`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}RegularityOfRecertification`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}RegularityOfRecertification`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}RegularityOfRecertification`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}RegularityOfRecertification`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}RegularityOfRecertification`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}RegularityOfRecertification`), namedNode(`${dcterms}description`), literal(`Policy regarding repetition or renewal of existing certification(s)`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}RegularityOfRecertification`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}RegularityOfRecertification`), namedNode(`${rdfs}label`), literal(`Regularity of Re-certification`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}RegularityOfRecertification`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}RiskManagementProcedure`), namedNode(ns1)),
        quad(namedNode(`${ns1}RegularityOfRecertification`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Relationship`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Relationship`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Relationship`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Relationship`), namedNode(`${dcterms}description`), literal(`Information about relationships and relationship history.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Relationship`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Relationship`), namedNode(`${rdfs}label`), literal(`Relationship`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Relationship`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Family`), namedNode(ns1)),
        quad(namedNode(`${ns1}Relationship`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Relationship`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Religion`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Religion`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Religion`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Religion`), namedNode(`${dcterms}description`), literal(`Information about religion, religious inclinations, and religious history.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Religion`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Religion`), namedNode(`${rdfs}label`), literal(`Religion`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Religion`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(ns1)),
        quad(namedNode(`${ns1}Religion`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PublicLife`), namedNode(ns1)),
        quad(namedNode(`${ns1}Religion`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Religion`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}ReligiousBelief`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}ReligiousBelief`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}ReligiousBelief`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}ReligiousBelief`), namedNode(`${dcterms}description`), literal(`Information about religion and religious beliefs.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ReligiousBelief`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}ReligiousBelief`), namedNode(`${rdfs}label`), literal(`Religious Belief`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ReligiousBelief`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}SpecialCategoryPersonalData`), namedNode(ns1)),
        quad(namedNode(`${ns1}ReligiousBelief`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}KnowledgeBelief`), namedNode(ns1)),
        quad(namedNode(`${ns1}ReligiousBelief`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ReligiousBelief`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Representative`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Representative`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Representative`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}Representative`), namedNode(`${dcterms}creator`), literal(`Georg Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}Representative`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}Representative`), namedNode(`${dcterms}description`), literal(`A representative of a legal entity`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Representative`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Representative`), namedNode(`${rdfs}label`), literal(`Representative`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Representative`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}LegalEntity`), namedNode(ns1)),
        quad(namedNode(`${ns1}Representative`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Representative`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns25}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Restrict`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Restrict`), namedNode(`${dcterms}description`), literal(`to apply a restriction on the processsing of specific records`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Restrict`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Restrict`), namedNode(`${rdfs}label`), literal(`Restrict`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Restrict`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transform`), namedNode(ns1)),
        quad(namedNode(`${ns1}Restrict`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Restrict`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Retina`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Retina`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Retina`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Retina`), namedNode(`${dcterms}description`), literal(`Information about retina and the retinal patterns.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Retina`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Retina`), namedNode(`${rdfs}label`), literal(`Retina`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Retina`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Biometric`), namedNode(ns1)),
        quad(namedNode(`${ns1}Retina`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Retina`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Retrieve`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Retrieve`), namedNode(`${dcterms}description`), literal(`to retrieve data, often in an automated manner`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Retrieve`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Retrieve`), namedNode(`${rdfs}label`), literal(`Retrieve`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Retrieve`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Use`), namedNode(ns1)),
        quad(namedNode(`${ns1}Retrieve`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Retrieve`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Risk`), namedNode(`${dcterms}created`), literal(`2020-11-18`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Risk`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Risk`), namedNode(`${dcterms}description`), literal(`A risk or possibility or uncertainty of negative effects, impacts, or consequences.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Risk`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Risk`), namedNode(`${rdfs}label`), literal(`Risk`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Risk`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Risk`), namedNode(`${rdfs}comment`), literal(`Risks can be associated with one or more different concepts such as purpose, processing, personal data, technical or organisational measure.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskMitigationMeasure`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskMitigationMeasure`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskMitigationMeasure`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskMitigationMeasure`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskMitigationMeasure`), namedNode(`${dcterms}description`), literal(`Measures intended to mitigate, minimise, or prevent risk.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskMitigationMeasure`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskMitigationMeasure`), namedNode(`${rdfs}label`), literal(`Risk Mitigation Measure`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskMitigationMeasure`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}TechnicalOrganisationalMeasure`), namedNode(ns1)),
        quad(namedNode(`${ns1}RiskMitigationMeasure`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}RoomNumber`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}RoomNumber`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}RoomNumber`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}RoomNumber`), namedNode(`${dcterms}description`), literal(`Information about location expressed as Room number or similar numbering systems`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}RoomNumber`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}RoomNumber`), namedNode(`${rdfs}label`), literal(`Room Number`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}RoomNumber`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Location`), namedNode(ns1)),
        quad(namedNode(`${ns1}RoomNumber`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}RoomNumber`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Salary`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Salary`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Salary`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Salary`), namedNode(`${dcterms}description`), literal(`Information about salary`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Salary`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Salary`), namedNode(`${rdfs}label`), literal(`Salary`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Salary`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Professional`), namedNode(ns1)),
        quad(namedNode(`${ns1}Salary`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Salary`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sale`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Sale`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sale`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sale`), namedNode(`${dcterms}description`), literal(`Information about sales e.g. selling of goods or services`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Sale`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sale`), namedNode(`${rdfs}label`), literal(`Sale`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Sale`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transactional`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sale`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Sale`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}School`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}School`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}School`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}School`), namedNode(`${dcterms}description`), literal(`Information about school such as name of school, conduct, or grades obtained.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}School`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}School`), namedNode(`${rdfs}label`), literal(`School`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}School`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Professional`), namedNode(ns1)),
        quad(namedNode(`${ns1}School`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}School`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Seal`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Seal`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}Seal`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Seal`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}Seal`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}Seal`), namedNode(`${dcterms}description`), literal(`A seal or a mark indicating proof of certification to some certification or standard`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Seal`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Seal`), namedNode(`${rdfs}label`), literal(`Seal`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Seal`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}CertificationSeal`), namedNode(ns1)),
        quad(namedNode(`${ns1}Seal`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SecretText`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}SecretText`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}SecretText`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}SecretText`), namedNode(`${dcterms}description`), literal(`Information about secret text used in the process of authenticating the individual as a user accessing a system, e.g., when recovering a lost password.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SecretText`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}SecretText`), namedNode(`${rdfs}label`), literal(`Secret Text`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SecretText`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Authenticating`), namedNode(ns1)),
        quad(namedNode(`${ns1}SecretText`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SecretText`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sector`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Sector`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sector`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sector`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sector`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sector`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sector`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sector`), namedNode(`${dcterms}description`), literal(`The 'sector' or 'domain' of a purpose e.g. Agriculture, Advertising`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Sector`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sector`), namedNode(`${rdfs}label`), literal(`Sector`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Sector`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Sector`), namedNode(`${rdfs}comment`), literal(`There are various sector codes used commonly to indicate the domain of an organisation or business. Examples include NACE (EU), ISIC (UN), SIC and NAICS (USA).`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SellDataToThirdParties`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}SellDataToThirdParties`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellDataToThirdParties`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellDataToThirdParties`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellDataToThirdParties`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellDataToThirdParties`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellDataToThirdParties`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellDataToThirdParties`), namedNode(`${dcterms}description`), literal(`sell data or information to third parties`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SellDataToThirdParties`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellDataToThirdParties`), namedNode(`${rdfs}label`), literal(`Sell Data to Third Parties`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SellDataToThirdParties`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}CommercialInterest`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellDataToThirdParties`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SellInsightsFromData`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}SellInsightsFromData`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellInsightsFromData`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellInsightsFromData`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellInsightsFromData`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellInsightsFromData`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellInsightsFromData`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellInsightsFromData`), namedNode(`${dcterms}description`), literal(`sell or commercially provide insights obtained from analysis of data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SellInsightsFromData`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellInsightsFromData`), namedNode(`${rdfs}label`), literal(`Sell Insights from Data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SellInsightsFromData`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}CommercialInterest`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellInsightsFromData`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SellProductsToDataSubject`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}SellProductsToDataSubject`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellProductsToDataSubject`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellProductsToDataSubject`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellProductsToDataSubject`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellProductsToDataSubject`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellProductsToDataSubject`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellProductsToDataSubject`), namedNode(`${dcterms}description`), literal(`sell products or services`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SellProductsToDataSubject`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellProductsToDataSubject`), namedNode(`${rdfs}label`), literal(`Sell Products to Data Subject`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SellProductsToDataSubject`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}CommercialInterest`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellProductsToDataSubject`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SellTargettedAdvertisements`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}SellTargettedAdvertisements`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellTargettedAdvertisements`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellTargettedAdvertisements`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellTargettedAdvertisements`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellTargettedAdvertisements`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellTargettedAdvertisements`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellTargettedAdvertisements`), namedNode(`${dcterms}description`), literal(`sell or provide targetted advertisements`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SellTargettedAdvertisements`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellTargettedAdvertisements`), namedNode(`${rdfs}label`), literal(`Sell Targetted Advertisements`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SellTargettedAdvertisements`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}CommercialInterest`), namedNode(ns1)),
        quad(namedNode(`${ns1}SellTargettedAdvertisements`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceConsumptionBehavior`), namedNode(`${dcterms}created`), literal(`2019-11-26`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceConsumptionBehavior`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceConsumptionBehavior`), namedNode(`${dcterms}creator`), literal(`Rudy Jacob`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceConsumptionBehavior`), namedNode(`${dcterms}description`), literal(`Information about the consumption of a service, e.g. time and duration of consumption.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceConsumptionBehavior`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceConsumptionBehavior`), namedNode(`${rdfs}label`), literal(`Service Consumption Behavior`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceConsumptionBehavior`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Behavioral`), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceConsumptionBehavior`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ServiceConsumptionBehavior`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns18), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualHistory`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualHistory`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualHistory`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualHistory`), namedNode(`${dcterms}description`), literal(`Information about sexual history`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualHistory`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualHistory`), namedNode(`${rdfs}label`), literal(`Sexual History`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualHistory`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Sexual`), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualHistory`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualHistory`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualPreference`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualPreference`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualPreference`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualPreference`), namedNode(`${dcterms}description`), literal(`Information about sexual preferences`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualPreference`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualPreference`), namedNode(`${rdfs}label`), literal(`Sexual Preference`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualPreference`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Sexual`), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualPreference`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SexualPreference`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Share`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Share`), namedNode(`${dcterms}description`), literal(`to give data (or a portion of it) to others`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Share`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Share`), namedNode(`${rdfs}label`), literal(`Share`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Share`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Disclose`), namedNode(ns1)),
        quad(namedNode(`${ns1}Share`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Share`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sibling`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Sibling`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sibling`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sibling`), namedNode(`${dcterms}description`), literal(`Information about sibling(s).`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Sibling`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sibling`), namedNode(`${rdfs}label`), literal(`Sibling`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Sibling`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}FamilyStructure`), namedNode(ns1)),
        quad(namedNode(`${ns1}Sibling`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Sibling`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}SingleSignOn`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}SingleSignOn`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}SingleSignOn`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}SingleSignOn`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}SingleSignOn`), namedNode(`${dcterms}description`), literal(`Use of credentials or processes that enable using one set of credentials to authenticate multiple contexts.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SingleSignOn`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}SingleSignOn`), namedNode(`${rdfs}label`), literal(`Single Sign On`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SingleSignOn`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}AuthenticationProtocols`), namedNode(ns1)),
        quad(namedNode(`${ns1}SingleSignOn`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SkinTone`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}SkinTone`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}SkinTone`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}SkinTone`), namedNode(`${dcterms}description`), literal(`Information about skin tone`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SkinTone`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}SkinTone`), namedNode(`${rdfs}label`), literal(`Skin Tone`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SkinTone`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PhysicalCharacteristic`), namedNode(ns1)),
        quad(namedNode(`${ns1}SkinTone`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SkinTone`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaCommunication`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaCommunication`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaCommunication`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaCommunication`), namedNode(`${dcterms}description`), literal(`Information about social media communication, including the communication itself and metadata.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaCommunication`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaCommunication`), namedNode(`${rdfs}label`), literal(`Social Media Communication`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaCommunication`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}Social`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaCommunication`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Communication`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaCommunication`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaCommunication`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaMarketing`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaMarketing`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaMarketing`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaMarketing`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaMarketing`), namedNode(`${dcterms}description`), literal(`market through and on social media.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaMarketing`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaMarketing`), namedNode(`${rdfs}label`), literal(`Social Media`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaMarketing`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Marketing`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialMediaMarketing`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialStatus`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialStatus`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialStatus`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialStatus`), namedNode(`${dcterms}description`), literal(`Information about social status`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialStatus`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialStatus`), namedNode(`${rdfs}label`), literal(`Social Status`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialStatus`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PublicLife`), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialStatus`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SocialStatus`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}StaffTraining`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}StaffTraining`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}StaffTraining`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}StaffTraining`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}StaffTraining`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}StaffTraining`), namedNode(`${dcterms}description`), literal(`Practices and policies regarding training of staff members`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StaffTraining`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}StaffTraining`), namedNode(`${rdfs}label`), literal(`Staff Training`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StaffTraining`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}RiskManagementProcedure`), namedNode(ns1)),
        quad(namedNode(`${ns1}StaffTraining`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDeletion`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDeletion`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDeletion`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDeletion`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDeletion`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDeletion`), namedNode(`${dcterms}description`), literal(`Deletion or Erasure of data including any deletion guarantees`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDeletion`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDeletion`), namedNode(`${rdfs}label`), literal(`Storage Deletion`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDeletion`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}StorageRestriction`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDeletion`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestriction`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestriction`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestriction`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestriction`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestriction`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestriction`), namedNode(`${dcterms}description`), literal(`Restrictions required or followed regarding storage of data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestriction`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestriction`), namedNode(`${rdfs}label`), literal(`Storage Restriction`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestriction`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}TechnicalMeasure`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestriction`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDuration`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDuration`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDuration`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDuration`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDuration`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDuration`), namedNode(`${dcterms}description`), literal(`Duration or temporal entity denoting limitation on storage of personal data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDuration`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDuration`), namedNode(`${rdfs}label`), literal(`Storage Duration`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDuration`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}StorageRestriction`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageDuration`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageLocation`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageLocation`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageLocation`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageLocation`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageLocation`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageLocation`), namedNode(`${dcterms}description`), literal(`Location or goespatial scope where the data is stored`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageLocation`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageLocation`), namedNode(`${rdfs}label`), literal(`Storage Location`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageLocation`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}StorageRestriction`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageLocation`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestoration`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestoration`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestoration`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestoration`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestoration`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestoration`), namedNode(`${dcterms}description`), literal(`Regularity and temporal span of data restoration/backup mechanisms that guarantee that data is preserved`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestoration`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestoration`), namedNode(`${rdfs}label`), literal(`Storage Restoration`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestoration`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}StorageRestriction`), namedNode(ns1)),
        quad(namedNode(`${ns1}StorageRestoration`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Store`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Store`), namedNode(`${dcterms}description`), literal(`to keep data for future use`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Store`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Store`), namedNode(`${rdfs}label`), literal(`Store`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Store`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Processing`), namedNode(ns1)),
        quad(namedNode(`${ns1}Store`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Store`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Structure`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Structure`), namedNode(`${dcterms}description`), literal(`to arrange data according to a structure`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Structure`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Structure`), namedNode(`${rdfs}label`), literal(`Structure`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Structure`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Organise`), namedNode(ns1)),
        quad(namedNode(`${ns1}Structure`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Structure`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}SystematicMonitoring`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}SystematicMonitoring`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}SystematicMonitoring`), namedNode(`${dcterms}creator`), literal(`Piero Bonatti`), namedNode(ns1)),
        quad(namedNode(`${ns1}SystematicMonitoring`), namedNode(`${dcterms}description`), literal(`Processing that involves systematic monitoring of individuals`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SystematicMonitoring`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}SystematicMonitoring`), namedNode(`${rdfs}label`), literal(`Systematic Monitoring`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SystematicMonitoring`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}SystematicMonitoring`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}TVViewingBehavior`), namedNode(`${dcterms}created`), literal(`2019-11-26`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}TVViewingBehavior`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}TVViewingBehavior`), namedNode(`${dcterms}creator`), literal(`Rudy Jacob`), namedNode(ns1)),
        quad(namedNode(`${ns1}TVViewingBehavior`), namedNode(`${dcterms}description`), literal(`Information about TV viewing behavior, such as timestamps of channel change, duration of viewership, content consumed`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}TVViewingBehavior`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}TVViewingBehavior`), namedNode(`${rdfs}label`), literal(`TV Viewing Behavior`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}TVViewingBehavior`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ServiceConsumptionBehavior`), namedNode(ns1)),
        quad(namedNode(`${ns1}TVViewingBehavior`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}TVViewingBehavior`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns18), namedNode(ns1)),
        quad(namedNode(`${ns1}Tattoo`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Tattoo`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Tattoo`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Tattoo`), namedNode(`${dcterms}description`), literal(`Information about tattoos`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Tattoo`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Tattoo`), namedNode(`${rdfs}label`), literal(`Tattoo`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Tattoo`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PhysicalCharacteristic`), namedNode(ns1)),
        quad(namedNode(`${ns1}Tattoo`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Tattoo`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Tax`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Tax`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Tax`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Tax`), namedNode(`${dcterms}description`), literal(`Information about financial tax e.g. tax records or tax due`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Tax`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Tax`), namedNode(`${rdfs}label`), literal(`Tax`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Tax`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transactional`), namedNode(ns1)),
        quad(namedNode(`${ns1}Tax`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Tax`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}TelephoneNumber`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}TelephoneNumber`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}TelephoneNumber`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}TelephoneNumber`), namedNode(`${dcterms}description`), literal(`Information about telephone number.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}TelephoneNumber`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}TelephoneNumber`), namedNode(`${rdfs}label`), literal(`Telephone Number`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}TelephoneNumber`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Contact`), namedNode(ns1)),
        quad(namedNode(`${ns1}TelephoneNumber`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}TelephoneNumber`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}ThirdParty`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}ThirdParty`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}ThirdParty`), namedNode(`${dcterms}description`), literal(`A ‘third party’ means a natural or legal person, public authority, agency or body other than the data subject, controller, processor and persons who, under the direct authority of the controller or processor, are authorised to process personal data;`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ThirdParty`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}ThirdParty`), namedNode(`${rdfs}label`), literal(`Third Party`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ThirdParty`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Recipient`), namedNode(ns1)),
        quad(namedNode(`${ns1}ThirdParty`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}ThirdParty`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns26}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}Thought`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Thought`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Thought`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Thought`), namedNode(`${dcterms}description`), literal(`Information about thoughts`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Thought`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Thought`), namedNode(`${rdfs}label`), literal(`Thought`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Thought`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}KnowledgeBelief`), namedNode(ns1)),
        quad(namedNode(`${ns1}Thought`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Thought`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transaction`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Transaction`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transaction`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transaction`), namedNode(`${dcterms}description`), literal(`Information about financial transactions e.g. bank transfers`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Transaction`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transaction`), namedNode(`${rdfs}label`), literal(`Transaction`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Transaction`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Transactional`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transaction`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Transaction`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transmit`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Transmit`), namedNode(`${dcterms}description`), literal(`to send out data`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Transmit`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transmit`), namedNode(`${rdfs}label`), literal(`Transmit`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Transmit`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Disclose`), namedNode(ns1)),
        quad(namedNode(`${ns1}Transmit`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Transmit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns9}oj`), namedNode(ns1)),
        quad(namedNode(`${ns1}UID`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}UID`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}UID`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}UID`), namedNode(`${dcterms}description`), literal(`Information about unique identifiers.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}UID`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}UID`), namedNode(`${rdfs}label`), literal(`UID`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}UID`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns10}UniqueId`), namedNode(ns1)),
        quad(namedNode(`${ns1}UID`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Identifying`), namedNode(ns1)),
        quad(namedNode(`${ns1}UID`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}UID`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}UsageAnalytics`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}UsageAnalytics`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}UsageAnalytics`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}UsageAnalytics`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}UsageAnalytics`), namedNode(`${dcterms}description`), literal(`calculate, analyse, and report user behaviour and events for a service or product.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}UsageAnalytics`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}UsageAnalytics`), namedNode(`${rdfs}label`), literal(`Analytics`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}UsageAnalytics`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ServiceProvision`), namedNode(ns1)),
        quad(namedNode(`${ns1}UsageAnalytics`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}UserInterfacePersonalisation`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}UserInterfacePersonalisation`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}UserInterfacePersonalisation`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns1}UserInterfacePersonalisation`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}UserInterfacePersonalisation`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}UserInterfacePersonalisation`), namedNode(`${dcterms}creator`), literal(`Javier Fernandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}UserInterfacePersonalisation`), namedNode(`${dcterms}creator`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns1}UserInterfacePersonalisation`), namedNode(`${dcterms}description`), literal(`personalise interfaces presented to the user`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}UserInterfacePersonalisation`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}UserInterfacePersonalisation`), namedNode(`${rdfs}label`), literal(`User Interface Personalisation`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}UserInterfacePersonalisation`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}ServicePersonalization`), namedNode(ns1)),
        quad(namedNode(`${ns1}UserInterfacePersonalisation`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Username`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Username`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Username`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Username`), namedNode(`${dcterms}description`), literal(`Information about usernames.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Username`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Username`), namedNode(`${rdfs}label`), literal(`Username`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Username`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Identifying`), namedNode(ns1)),
        quad(namedNode(`${ns1}Username`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Username`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceCommunicationRecording`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceCommunicationRecording`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceCommunicationRecording`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceCommunicationRecording`), namedNode(`${dcterms}description`), literal(`Information about vocal recorded communication (e.g. telephony, VoIP)`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceCommunicationRecording`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceCommunicationRecording`), namedNode(`${rdfs}label`), literal(`Voice Communication Recording`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceCommunicationRecording`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Communication`), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceCommunicationRecording`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceCommunicationRecording`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceMail`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceMail`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceMail`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceMail`), namedNode(`${dcterms}description`), literal(`Information about voice mail messages.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceMail`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceMail`), namedNode(`${rdfs}label`), literal(`Voice Mail`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceMail`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Communication`), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceMail`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}VoiceMail`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}VulnerableDataSubject`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}VulnerableDataSubject`), namedNode(`${dcterms}creator`), literal(`Georg Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}VulnerableDataSubject`), namedNode(`${dcterms}creator`), literal(`Harshvardhan Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}VulnerableDataSubject`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}VulnerableDataSubject`), namedNode(`${dcterms}description`), literal(`Data Subjects which should be considered 'vulnerable' and therefore would require additional measures and safeguards`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}VulnerableDataSubject`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}VulnerableDataSubject`), namedNode(`${rdfs}label`), literal(`Vulnerable Data Subject`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}VulnerableDataSubject`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}DataSubject`), namedNode(ns1)),
        quad(namedNode(`${ns1}VulnerableDataSubject`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Weight`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}Weight`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}Weight`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}Weight`), namedNode(`${dcterms}description`), literal(`Information about physical weight`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Weight`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}Weight`), namedNode(`${rdfs}label`), literal(`Weight`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Weight`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}PhysicalCharacteristic`), namedNode(ns1)),
        quad(namedNode(`${ns1}Weight`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}Weight`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}WorkHistory`), namedNode(`${dcterms}created`), literal(`2019-06-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}WorkHistory`), namedNode(`${dcterms}creator`), literal(`Fajar Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns1}WorkHistory`), namedNode(`${dcterms}creator`), literal(`Elmar Kiesling; Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}WorkHistory`), namedNode(`${dcterms}description`), literal(`Information about work history in a professional context`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}WorkHistory`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns1)),
        quad(namedNode(`${ns1}WorkHistory`), namedNode(`${rdfs}label`), literal(`Work History`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}WorkHistory`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns1}Professional`), namedNode(ns1)),
        quad(namedNode(`${ns1}WorkHistory`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}WorkHistory`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns8}Categories-of-Personal-Information.pdf`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAddress`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAddress`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAddress`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAddress`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAddress`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J.Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAddress`), namedNode(`${dcterms}description`), literal(`Specifies address of a legal entity such as street address or pin code`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAddress`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAddress`), namedNode(`${rdfs}label`), literal(`has address`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAddress`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAlgorithmicLogic`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAlgorithmicLogic`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAlgorithmicLogic`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAlgorithmicLogic`), namedNode(`${dcterms}creator`), literal(`Georg P. Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAlgorithmicLogic`), namedNode(`${dcterms}description`), literal(`Indicates the logic used  in procdessing such as for automated decision making`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAlgorithmicLogic`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAlgorithmicLogic`), namedNode(`${rdfs}label`), literal(`has algorithmic logic`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasAlgorithmicLogic`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsentNotice`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsentNotice`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsentNotice`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsentNotice`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsentNotice`), namedNode(`${dcterms}description`), literal(`Specifies the notice provided in context of consent`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsentNotice`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsentNotice`), namedNode(`${rdfs}label`), literal(`has consent notice`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsentNotice`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsentNotice`), namedNode(`${rdfs}comment`), literal(`The actual notice that the Data Subject received to consent to, either a text or link to a document, which should be usable to decide whether the form or consent was compliant to legislation, e.g. documenting how the user has been informed about rights and implications (such as, right to data portability,right to recitffy, right to erasure, right to restrict processing, right to object, rights regarding automated decision making or profiling, processors, third parties, sub-processors, outside-EEA transfers, automated decision-making, or other necessary details of the privacy-policy). Can be TextOrDocumentOrURI.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsequences`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsequences`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsequences`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsequences`), namedNode(`${dcterms}creator`), literal(`Georg P. Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsequences`), namedNode(`${dcterms}description`), literal(`Indicates consequences of processing such as for those for Data Subjects in relation to automated decision making`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsequences`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsequences`), namedNode(`${rdfs}label`), literal(`has consequences`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasConsequences`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasContact`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasContact`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasContact`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasContact`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasContact`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J.Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasContact`), namedNode(`${dcterms}description`), literal(`Specifies contact details of a legal entity such as phone  or email`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasContact`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasContact`), namedNode(`${rdfs}label`), literal(`has contact`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasContact`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasContext`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasContext`), namedNode(`${dcterms}description`), literal(`Indiciates a purpose is restricted to the specified context(s)`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasContext`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasContext`), namedNode(`${rdfs}label`), literal(`has context`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasContext`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasContext`), namedNode(`${rdfs}domain`), namedNode(`${ns1}Purpose`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasContext`), namedNode(`${rdfs}range`), namedNode(`${ns1}Context`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataController`), namedNode(`${dcterms}created`), literal(`2019-04-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataController`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataController`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataController`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataController`), namedNode(`${dcterms}creator`), literal(`Javier Ferenandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataController`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataController`), namedNode(`${dcterms}description`), literal(`Indicates association with a Data Controller.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataController`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataController`), namedNode(`${rdfs}label`), literal(`has data controller`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataController`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataController`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSource`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSource`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSource`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSource`), namedNode(`${dcterms}creator`), literal(`Georg P. Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSource`), namedNode(`${dcterms}description`), literal(`Indicates the source or origin of data being processed`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSource`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSource`), namedNode(`${rdfs}label`), literal(`has data source`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSource`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSubject`), namedNode(`${dcterms}created`), literal(`2019-04-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSubject`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSubject`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSubject`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSubject`), namedNode(`${dcterms}creator`), literal(`Javier Ferenandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSubject`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSubject`), namedNode(`${dcterms}description`), literal(`Indicates association with a specific Data Subject or a group or category of Data Subjects.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSubject`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSubject`), namedNode(`${rdfs}label`), literal(`has data subject`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSubject`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDataSubject`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDuration`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDuration`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDuration`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDuration`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDuration`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDuration`), namedNode(`${dcterms}description`), literal(`Indicates information about duration`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDuration`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDuration`), namedNode(`${rdfs}label`), literal(`has duration`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDuration`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasDuration`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns18), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiry`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiry`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiry`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiry`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiry`), namedNode(`${dcterms}description`), literal(`Generic property specifying when or under which condition(s) the consent will expire`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiry`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiry`), namedNode(`${rdfs}label`), literal(`has expiry`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiry`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryCondition`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryCondition`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryCondition`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryCondition`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryCondition`), namedNode(`${dcterms}description`), literal(`Specifies the condition or event that determines the expiry of consent`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryCondition`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryCondition`), namedNode(`${rdfs}label`), literal(`has expiry condition`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryCondition`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryCondition`), namedNode(`${rdfs}comment`), literal(`Can be TextOrDocumentOrURI`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryCondition`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns1}expiry`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryTime`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryTime`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryTime`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryTime`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryTime`), namedNode(`${dcterms}description`), literal(`Specifies the expiry time or duration for consent`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryTime`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryTime`), namedNode(`${rdfs}label`), literal(`has expiry time`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryTime`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryTime`), namedNode(`${rdfs}range`), namedNode(`${time}TemporalEntity`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasExpiryTime`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns1}expiry`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasHumanInvolvement`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasHumanInvolvement`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasHumanInvolvement`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasHumanInvolvement`), namedNode(`${dcterms}creator`), literal(`Georg P. Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasHumanInvolvement`), namedNode(`${dcterms}description`), literal(`Indicates Involvement of humans in processing such as within automated decision making process`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasHumanInvolvement`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasHumanInvolvement`), namedNode(`${rdfs}label`), literal(`has human involvement`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasHumanInvolvement`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasHumanInvolvement`), namedNode(`${rdfs}comment`), literal(`Human involvement is also relevant to 'human in the loop'`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasIdentifier`), namedNode(`${dcterms}created`), literal(`2020-11-25`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasIdentifier`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasIdentifier`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasIdentifier`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasIdentifier`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J.Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasIdentifier`), namedNode(`${dcterms}description`), literal(`Specifies an identifier for the entity such as registeration number or official ID`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasIdentifier`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasIdentifier`), namedNode(`${rdfs}label`), literal(`has identifier`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasIdentifier`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLegalBasis`), namedNode(`${dcterms}created`), literal(`2019-04-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLegalBasis`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLegalBasis`), namedNode(`${dcterms}creator`), literal(`Javier Ferenandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLegalBasis`), namedNode(`${dcterms}description`), literal(`Indicates applicability of a Legal Basis.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLegalBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLegalBasis`), namedNode(`${rdfs}label`), literal(`has legal basis`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLegalBasis`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLegalBasis`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLocation`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLocation`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLocation`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLocation`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLocation`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLocation`), namedNode(`${dcterms}description`), literal(`Indicates information about location`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLocation`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLocation`), namedNode(`${rdfs}label`), literal(`has location`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLocation`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasLocation`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns18), namedNode(ns1)),
        quad(namedNode(`${ns1}hasName`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasName`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasName`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasName`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasName`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J.Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasName`), namedNode(`${dcterms}description`), literal(`Specifies name of a legal entity`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasName`), namedNode(`${rdfs}label`), literal(`has name`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasName`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPersonalDataCategory`), namedNode(`${dcterms}created`), literal(`2019-04-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPersonalDataCategory`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPersonalDataCategory`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPersonalDataCategory`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPersonalDataCategory`), namedNode(`${dcterms}creator`), literal(`Javier Ferenandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPersonalDataCategory`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPersonalDataCategory`), namedNode(`${dcterms}description`), literal(`Indicates association with a Personal Data Category.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPersonalDataCategory`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPersonalDataCategory`), namedNode(`${rdfs}label`), literal(`has personal data category`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPersonalDataCategory`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPersonalDataCategory`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns18), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPersonalDataCategory`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProcessing`), namedNode(`${dcterms}created`), literal(`2019-04-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProcessing`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProcessing`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProcessing`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProcessing`), namedNode(`${dcterms}creator`), literal(`Javier Ferenandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProcessing`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProcessing`), namedNode(`${dcterms}description`), literal(`Indicates association with a Processing (of personal data) instance or category.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProcessing`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProcessing`), namedNode(`${rdfs}label`), literal(`has processing`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProcessing`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProcessing`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns18), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProcessing`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionBy`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionBy`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionBy`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionBy`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionBy`), namedNode(`${dcterms}description`), literal(`Specifies the entity that provisioned or provided consent`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionBy`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionBy`), namedNode(`${rdfs}label`), literal(`has provision by`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionBy`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionBy`), namedNode(`${rdfs}comment`), literal(`Normally this would be the dataSubject, but in some exceptional cases, the consent might be given on behalf by someone else, e.g. parents of minors.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionBy`), namedNode(`${rdfs}range`), namedNode(`${ns1}LegalEntity`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionByJustification`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionByJustification`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionByJustification`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionByJustification`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionByJustification`), namedNode(`${dcterms}description`), literal(`Specifies the justification for entity providing consent`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionByJustification`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionByJustification`), namedNode(`${rdfs}label`), literal(`has provision by justification`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionByJustification`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionByJustification`), namedNode(`${rdfs}comment`), literal(`This field can be used to proivde a justification why the provision was provided by another DataSubject or legal entity,  e.g. declariing the relationship (parent, guardian), in combination with the field provisionBy`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionMethod`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionMethod`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionMethod`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionMethod`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionMethod`), namedNode(`${dcterms}description`), literal(`Specifies the method by which consent was provisioned or provided`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionMethod`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionMethod`), namedNode(`${rdfs}label`), literal(`has provision method`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionMethod`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionMethod`), namedNode(`${rdfs}comment`), literal(`Can be used to record information of how consent was provided e.g. by a click to a form, in writing, etc., by logging into a system and confirm per email, or with some additional authentication, etc.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionTime`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionTime`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionTime`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionTime`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionTime`), namedNode(`${dcterms}description`), literal(`Specifies the instant in time when consent was given`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionTime`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionTime`), namedNode(`${rdfs}label`), literal(`has provision time`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionTime`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasProvisionTime`), namedNode(`${rdfs}range`), namedNode(`${time}Instant`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPurpose`), namedNode(`${dcterms}created`), literal(`2019-04-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPurpose`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPurpose`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPurpose`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPurpose`), namedNode(`${dcterms}creator`), literal(`Javier Ferenandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPurpose`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPurpose`), namedNode(`${dcterms}description`), literal(`Indicates assocation with a Purpose (of processing personal data).`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPurpose`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPurpose`), namedNode(`${rdfs}label`), literal(`has purpose`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPurpose`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPurpose`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns18), namedNode(ns1)),
        quad(namedNode(`${ns1}hasPurpose`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRecipient`), namedNode(`${dcterms}created`), literal(`2019-04-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRecipient`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRecipient`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRecipient`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRecipient`), namedNode(`${dcterms}creator`), literal(`Javier Ferenandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRecipient`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRecipient`), namedNode(`${dcterms}description`), literal(`Indicates a recipient of personal data.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRecipient`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRecipient`), namedNode(`${rdfs}label`), literal(`has recipient`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRecipient`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRecipient`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns18), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRecipient`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRepresentative`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRepresentative`), namedNode(`${dcterms}creator`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRepresentative`), namedNode(`${dcterms}creator`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRepresentative`), namedNode(`${dcterms}creator`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRepresentative`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J.Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRepresentative`), namedNode(`${dcterms}description`), literal(`Specifies representative of the legal entity`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRepresentative`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRepresentative`), namedNode(`${rdfs}label`), literal(`has representative`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRepresentative`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRight`), namedNode(`${dcterms}created`), literal(`2020-11-18`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRight`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRight`), namedNode(`${dcterms}description`), literal(`Indicates applicability of a Right.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRight`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRight`), namedNode(`${rdfs}label`), literal(`has right`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRight`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRisk`), namedNode(`${dcterms}created`), literal(`2020-11-18`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRisk`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRisk`), namedNode(`${dcterms}description`), literal(`Indicates applicability of a Risk.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRisk`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRisk`), namedNode(`${rdfs}label`), literal(`has risk`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasRisk`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasSector`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasSector`), namedNode(`${dcterms}description`), literal(`Indicates the purpose is associated with activities in the indicated (Economic) Sector(s)`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasSector`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasSector`), namedNode(`${rdfs}label`), literal(`has sector`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasSector`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasSector`), namedNode(`${rdfs}domain`), namedNode(`${ns1}Context`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasSector`), namedNode(`${rdfs}range`), namedNode(`${ns1}Sector`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasStorage`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasStorage`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasStorage`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasStorage`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasStorage`), namedNode(`${dcterms}creator`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasStorage`), namedNode(`${dcterms}description`), literal(`Indicates information about storage`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasStorage`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasStorage`), namedNode(`${rdfs}label`), literal(`has storage`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasStorage`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasStorage`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns18), namedNode(ns1)),
        quad(namedNode(`${ns1}hasTechnicalOrganisationalMeasure`), namedNode(`${dcterms}created`), literal(`2019-04-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasTechnicalOrganisationalMeasure`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasTechnicalOrganisationalMeasure`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasTechnicalOrganisationalMeasure`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasTechnicalOrganisationalMeasure`), namedNode(`${dcterms}creator`), literal(`Javier Ferenandez`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasTechnicalOrganisationalMeasure`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasTechnicalOrganisationalMeasure`), namedNode(`${dcterms}description`), literal(`Indicates use of a Technical or Organisational measure.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasTechnicalOrganisationalMeasure`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasTechnicalOrganisationalMeasure`), namedNode(`${rdfs}label`), literal(`has technical and organisational measure`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasTechnicalOrganisationalMeasure`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasTechnicalOrganisationalMeasure`), namedNode(`${dcterms}modified`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalBy`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalBy`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalBy`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalBy`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalBy`), namedNode(`${dcterms}description`), literal(`Specifies the entity that withdrew consent`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalBy`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalBy`), namedNode(`${rdfs}label`), literal(`has withdrawal by`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalBy`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalBy`), namedNode(`${rdfs}comment`), literal(`Normally this would be the dataSubject, but in some exceptional cases, the consent might be withdraawn on behalf by someone else, e.g. parents of minors.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalBy`), namedNode(`${rdfs}range`), namedNode(`${ns1}LegalEntity`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalByJustification`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalByJustification`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalByJustification`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalByJustification`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalByJustification`), namedNode(`${dcterms}description`), literal(`Specifies the justification for entity withdrawing consent`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalByJustification`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalByJustification`), namedNode(`${rdfs}label`), literal(`has withdrawal by justification`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalByJustification`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalByJustification`), namedNode(`${rdfs}comment`), literal(`This field can be used to proivde a justification why the weithdrawal was done by another DataSubject or legal entity, e.g. declariing the relationship (parent, guardian), in combination with the field withdrawalBy`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalMethod`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalMethod`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalMethod`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalMethod`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalMethod`), namedNode(`${dcterms}description`), literal(`Specifries the method by which consent can be/has been withdrawn`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalMethod`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalMethod`), namedNode(`${rdfs}label`), literal(`has withdrawal method`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalMethod`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalMethod`), namedNode(`${rdfs}comment`), literal(`Can be used to record information of how to withdraw consent, e.g. by a click to a form, in writing, etc., by logging into a system and confirm per email, or with some additional authentication, etc.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalTime`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalTime`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalTime`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalTime`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalTime`), namedNode(`${dcterms}description`), literal(`Specifies the instant in time when consent was withdrawn`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalTime`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalTime`), namedNode(`${rdfs}label`), literal(`has withdrawal time`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalTime`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}hasWithdrawalTime`), namedNode(`${rdfs}range`), namedNode(`${time}Instant`), namedNode(ns1)),
        quad(namedNode(`${ns1}isExplicit`), namedNode(`${dcterms}created`), literal(`2019-04-05`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}isExplicit`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}isExplicit`), namedNode(`${dcterms}creator`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns1}isExplicit`), namedNode(`${dcterms}creator`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns1}isExplicit`), namedNode(`${dcterms}description`), literal(`Specifies consent is 'explicit'`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}isExplicit`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}isExplicit`), namedNode(`${rdfs}label`), literal(`is explicit`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}isExplicit`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}isExplicit`), namedNode(`${rdfs}comment`), literal(`The conditions for what is considered 'explicit consent' differ by norms and laws.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}isExplicit`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(ns1)),
        quad(namedNode(`${ns1}measureImplementedBy`), namedNode(`${dcterms}created`), literal(`2019-05-07`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}measureImplementedBy`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns1}measureImplementedBy`), namedNode(`${dcterms}description`), literal(`a generic Property to describe how the measure is implemented`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}measureImplementedBy`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}measureImplementedBy`), namedNode(`${rdfs}label`), literal(`measure implemented by`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}measureImplementedBy`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}mitigatesRisk`), namedNode(`${dcterms}created`), literal(`2020-11-04`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns1}mitigatesRisk`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns1}mitigatesRisk`), namedNode(`${dcterms}description`), literal(`Indicates mitigation of risk(s)`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}mitigatesRisk`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns1)),
        quad(namedNode(`${ns1}mitigatesRisk`), namedNode(`${rdfs}label`), literal(`mitigates risk`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns1}mitigatesRisk`), namedNode(`${vs}term_status`), literal(`accepted`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}created`), literal(`2019-06-18`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}creator`), literal(`Axel Polleres`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}creator`), literal(`Harshvardhan J. Pandit`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}description`), literal(`The Data Privacy Vocabulary (DPV) provides terms (classes and properties) to represent information about legally compliant personal data handling, which includes purposes, processing, personal data, technical and organisational measures.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${rdf}type`), namedNode(`${owl}Ontology`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}modified`), literal(`2021-01-14`, namedNode(`${xsd}date`)), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}abstract`), literal(`The Data Privacy Vocabulary (DPV) provides terms (classes and properties) to represent information about legally compliant personal data handling, which includes purposes, processing, personal data, technical and organisational measures.`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}contributor`), literal(`Elmar Kiesling`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}contributor`), literal(`Simon Steyskal`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}contributor`), literal(`Mark Lizar`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}contributor`), literal(`Rob Brennan`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}contributor`), literal(`Beatriz Esteves`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}contributor`), literal(`Georg P Krog`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}contributor`), literal(`Paul Ryan`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}contributor`), literal(`Piero Bonatti`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}contributor`), literal(`Bud Bruegger`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}contributor`), literal(`Bert Bos`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}contributor`), literal(`Eva Schlehahn`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}contributor`), literal(`Fajar J. Ekaputra`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}contributor`), literal(`Javier D. Fernández`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}contributor`), literal(`Ramisa Gachpaz Hamed`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}contributor`), literal(`Rigo Wenning`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}source`), namedNode(ns14), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${dcterms}title`), literal(`Data Privacy Vocabulary`, 'en'), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${vann}preferredNamespacePrefix`), literal(`dpv`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${vann}preferredNamespaceUri`), literal(`https://w3.org/ns/dpv`), namedNode(ns1)),
        quad(namedNode(`${ns28}dpv`), namedNode(`${owl}versionInfo`), literal(`0.2`), namedNode(ns1)),
    ];
};
