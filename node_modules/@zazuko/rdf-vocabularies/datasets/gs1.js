"use strict";
/* This file was automatically generated. Do not edit by hand. */
Object.defineProperty(exports, "__esModule", { value: true });
const { dc11, rdf, owl, ns4, vs, ns6, ns7, xsd, vann, schema, rdfs, skos, ns13, ns14, gr, vcard, foaf, wgs } = {
    'dc11': 'http://purl.org/dc/elements/1.1/',
    'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'owl': 'http://www.w3.org/2002/07/owl#',
    'ns4': 'https://gs1.org/voc/',
    'vs': 'http://www.w3.org/2003/06/sw-vocab-status/ns#',
    'ns6': 'http://purl.org/vocommons/voaf#',
    'ns7': 'https://www.gs1.org/',
    'xsd': 'http://www.w3.org/2001/XMLSchema#',
    'vann': 'http://purl.org/vocab/vann/',
    'schema': 'http://schema.org/',
    'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
    'skos': 'http://www.w3.org/2004/02/skos/core#',
    'ns13': 'http://apps.gs1.org/GDD/bms/Version2_8/Pages/',
    'ns14': 'http://apps.gs1.org/GDD/Pages/',
    'gr': 'http://purl.org/goodrelations/v1#',
    'vcard': 'http://www.w3.org/2006/vcard/ns#',
    'foaf': 'http://xmlns.com/foaf/0.1/',
    'wgs': 'http://www.w3.org/2003/01/geo/wgs84_pos#'
};
exports.default = ({ blankNode, literal, namedNode, quad }) => {
    const blankNodes = [];
    for (let i = 0; i < 9; i++) {
        blankNodes.push(blankNode());
    }
    return [
        quad(namedNode(`${dc11}date`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(ns4)),
        quad(namedNode(`${dc11}description`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(ns4)),
        quad(namedNode(`${dc11}title`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(ns4)),
        quad(namedNode(`${vs}term_status`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(ns4)),
        quad(namedNode(ns4), namedNode(`${rdf}type`), namedNode(`${ns6}Vocabulary`), namedNode(ns4)),
        quad(namedNode(ns4), namedNode(`${rdf}type`), namedNode(`${owl}Ontology`), namedNode(ns4)),
        quad(namedNode(ns4), namedNode(`${dc11}title`), literal(`GS1 Vocabulary`), namedNode(ns4)),
        quad(namedNode(ns4), namedNode(`${dc11}contributors`), literal(`Eric Kauz, Mark Harrison, Phil Archer`), namedNode(ns4)),
        quad(namedNode(ns4), namedNode(`${dc11}creator`), namedNode(ns7), namedNode(ns4)),
        quad(namedNode(ns4), namedNode(`${dc11}description:`), literal(`The GS1 RDF vocabulary, described using W3C RDF Schema and the Web Ontology Language. The vocabulary builds on and refers to schema.org where appropriate.`, 'en'), namedNode(ns4)),
        quad(namedNode(ns4), namedNode(`${dc11}identifier:`), literal(`GS1 Vocabulary`), namedNode(ns4)),
        quad(namedNode(ns4), namedNode(`${dc11}issued:`), literal(`2017-11-20`, namedNode(`${xsd}date`)), namedNode(ns4)),
        quad(namedNode(ns4), namedNode(`${dc11}lastModified`), literal(`2020-03-05`, namedNode(`${xsd}date`)), namedNode(ns4)),
        quad(namedNode(ns4), namedNode(vann), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(ns4), namedNode(vann), literal(`gs1`), namedNode(ns4)),
        quad(namedNode(ns4), namedNode(`${ns6}extends`), namedNode(schema), namedNode(ns4)),
        quad(namedNode(ns4), namedNode(`${ns6}hasEquivalencesWith`), namedNode(schema), namedNode(ns4)),
        quad(namedNode(ns4), namedNode(`${ns6}specializes`), namedNode(schema), namedNode(ns4)),
        quad(namedNode(ns4), namedNode(`${schema}license`), literal(`data:text/html;charset=UTF-8,<p>GS1&reg;, under its IP Policy, seeks to avoid uncertainty regarding intellectual property claims by requiring the participants in the Work Groups that developed this vocabulary to agree to grant to GS1 members a royalty-free licence or a RAND licence to Necessary Claims, as that term is defined in the GS1 IP Policy. Furthermore, attention is drawn to the possibility that an implementation of one or more features of this vocabulary may be the subject of a patent or other intellectual property     right that does not involve a Necessary Claim. Any such patent or other intellectual property right is not subject to the licencing obligations of GS1. Moreover, the agreement to grant licences provided under the GS1 IP Policy does not include IP rights and any claims of third parties who were not participants in the Work Groups. Accordingly, GS1 recommends that any organisation developing an implementation designed to be in conformance with this vocabulary should determine whether there are any     patents that may encompass a specific implementation that the organisation is developing in compliance with the vocabulary and whether a licence under a patent or other intellectual property right is needed. Such a determination of a need for licencing should be made in view of the details of the specific system designed by the organisation in consultation with their own patent counsel. THIS DOCUMENT IS PROVIDED &quot;AS IS&quot; WITH NO WARRANTIES WHATSOEVER, INCLUDING ANY WARRANTY OF MERCHANTABILITY, NONINFRINGMENT, FITNESS FOR PARTICULAR PURPOSE, OR ANY WARRANTY OTHER WISE ARISING OUT OF THIS SPECIFICATION. GS1 disclaims all liability for any damages arising from use or misuse of this vocabulary, whether special, indirect, consequential, or compensatory damages, and including liability for infringement of any intellectual property     rights, relating to use of information in or reliance upon this document. GS1 retains the right to make changes to this vocabulary at any time, without notice. GS1 makes no warranty for the use of this vocabulary and assumes no responsibility for any errors which may appear in the vocabulary, nor does it make a commitment to update the     information contained herein. GS1 and the GS1 logo are registered trademarks of GS1 AISBL.</p><p>Copyright 2015-2019 GS1 AISBL</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at <a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; target=&quot;blank&quot;>http://www.apache.org/licenses/LICENSE-2.0</a>.<p><p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>`), namedNode(ns4)),
        quad(namedNode(ns4), namedNode(`${owl}versionInfo`), literal(`1.3`), namedNode(ns4)),
        quad(namedNode(`${ns4}AI`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(ns4)),
        quad(namedNode(`${ns4}AI`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}AI`), namedNode(`${rdfs}comment`), literal(`A Data Type that corresponds to GS1 Application Identifiers defined in the GS1 General Specifications`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AI`), namedNode(`${rdfs}comment`), literal(`An application identifier defined by GS1, such as "01" for GTIN, "10" for batch/lot etc. Although they are all numeric, they are strings, not integers. Each AI has an associated value space that typically restricts the characters that can be used, the length and, in some cases a checkbit. The full list of AIs is maintained at https://www.gs1.org/standards/barcodes/application-identifiers.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AI`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}AI`), namedNode(`${rdfs}label`), literal(`Application identifier`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AI`), namedNode(`${rdfs}label`), literal(`GS1 Application Identifier`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AdditionalProductClassificationDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}AdditionalProductClassificationDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}AdditionalProductClassificationDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}AdditionalProductClassificationDetails`), namedNode(`${rdfs}comment`), literal(`A product classification for the product other than the Global Product Classification(GPC brick value).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AdditionalProductClassificationDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}AdditionalProductClassificationDetails`), namedNode(`${rdfs}label`), literal(`Additional Product Classification Details`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AdditionalProductClassificationDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}AdditiveDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}AdditiveDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}AdditiveDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}AdditiveDetails`), namedNode(`${rdfs}comment`), literal(`A set of details about one of the additives within the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AdditiveDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}AdditiveDetails`), namedNode(`${rdfs}label`), literal(`Additive Details`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AdditiveDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenDetails`), namedNode(`${rdfs}comment`), literal(`Details of an allergen for a product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenDetails`), namedNode(`${rdfs}label`), literal(`Allergen Details`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-ALMONDS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-ALMONDS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of almond and almond products as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-ALMONDS`), namedNode(`${rdfs}label`), literal(`Almond and Almond Products`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-ALMONDS`), namedNode(`${skos}prefLabel`), literal(`ALMONDS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-ALMONDS`), namedNode(`${ns4}originalCodeValue`), literal(`SA`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns13}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:AllergenTypeCodeList&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode`), namedNode(`${rdfs}label`), literal(`Allergen Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-ALPHA_ISOMETHYL_IONONE`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-ALPHA_ISOMETHYL_IONONE`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Alpha-Isomethyl Ionone as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-ALPHA_ISOMETHYL_IONONE`), namedNode(`${rdfs}label`), literal(`Alpha-Isomethyl Ionone`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-ALPHA_ISOMETHYL_IONONE`), namedNode(`${skos}prefLabel`), literal(`ALPHA_ISOMETHYL_IONONE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-ALPHA_ISOMETHYL_IONONE`), namedNode(`${ns4}originalCodeValue`), literal(`AI`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-AMYLCINNAMYL_ALCOHOL`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-AMYLCINNAMYL_ALCOHOL`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Amylcinnamyl Alcohol as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-AMYLCINNAMYL_ALCOHOL`), namedNode(`${rdfs}label`), literal(`Amylcinnamyl Alcohol`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-AMYLCINNAMYL_ALCOHOL`), namedNode(`${skos}prefLabel`), literal(`AMYLCINNAMYL_ALCOHOL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-AMYLCINNAMYL_ALCOHOL`), namedNode(`${ns4}originalCodeValue`), literal(`AA`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-AMYL_CINNAMAL`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-AMYL_CINNAMAL`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Amyl Cinnamal as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-AMYL_CINNAMAL`), namedNode(`${rdfs}label`), literal(`Amyl Cinnamal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-AMYL_CINNAMAL`), namedNode(`${skos}prefLabel`), literal(`AMYL_CINNAMAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-AMYL_CINNAMAL`), namedNode(`${ns4}originalCodeValue`), literal(`AL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-ANISE_ALCOHOL`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-ANISE_ALCOHOL`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Anise Alcohol as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-ANISE_ALCOHOL`), namedNode(`${rdfs}label`), literal(`Anise Alcohol`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-ANISE_ALCOHOL`), namedNode(`${skos}prefLabel`), literal(`ANISE_ALCOHOL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-ANISE_ALCOHOL`), namedNode(`${ns4}originalCodeValue`), literal(`AH`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BARLEY`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BARLEY`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Barley and barley products (glutencontaining grain) as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BARLEY`), namedNode(`${rdfs}label`), literal(`Barley and Barley Products`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BARLEY`), namedNode(`${skos}prefLabel`), literal(`BARLEY`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BARLEY`), namedNode(`${ns4}originalCodeValue`), literal(`GB`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_ALCOHOL`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_ALCOHOL`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Benzyl Alcohol as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_ALCOHOL`), namedNode(`${rdfs}label`), literal(`Benzyl Alcohol`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_ALCOHOL`), namedNode(`${skos}prefLabel`), literal(`BENZYL_ALCOHOL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_ALCOHOL`), namedNode(`${ns4}originalCodeValue`), literal(`BA`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_BENZOATE`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_BENZOATE`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Benzyl Benzoate as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_BENZOATE`), namedNode(`${rdfs}label`), literal(`Benzyl Benzoate`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_BENZOATE`), namedNode(`${skos}prefLabel`), literal(`BENZYL_BENZOATE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_BENZOATE`), namedNode(`${ns4}originalCodeValue`), literal(`BB`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_CINNAMATE`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_CINNAMATE`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Benzyl Cinnamate as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_CINNAMATE`), namedNode(`${rdfs}label`), literal(`Benzyl Cinnamate.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_CINNAMATE`), namedNode(`${skos}prefLabel`), literal(`BENZYL_CINNAMATE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_CINNAMATE`), namedNode(`${ns4}originalCodeValue`), literal(`BI`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_SALICYLATE`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_SALICYLATE`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Benzyl Salicylate as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_SALICYLATE`), namedNode(`${rdfs}label`), literal(`Benzyl Salicylate`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_SALICYLATE`), namedNode(`${skos}prefLabel`), literal(`BENZYL_SALICYLATE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BENZYL_SALICYLATE`), namedNode(`${ns4}originalCodeValue`), literal(`BS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BRAZIL_NUTS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BRAZIL_NUTS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of brazil nut and brazil nut products as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BRAZIL_NUTS`), namedNode(`${rdfs}label`), literal(`Brazil Nut and Brazil Nut Products`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BRAZIL_NUTS`), namedNode(`${skos}prefLabel`), literal(`BRAZIL_NUTS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BRAZIL_NUTS`), namedNode(`${ns4}originalCodeValue`), literal(`SR`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BUTYLPHENYL_METHYLPROPIONATE`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BUTYLPHENYL_METHYLPROPIONATE`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Butylphenyl Methylpropionate as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BUTYLPHENYL_METHYLPROPIONATE`), namedNode(`${rdfs}label`), literal(`Butylphenyl Methylpropionate.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BUTYLPHENYL_METHYLPROPIONATE`), namedNode(`${skos}prefLabel`), literal(`BUTYLPHENYL_METHYLPROPIONATE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-BUTYLPHENYL_METHYLPROPIONATE`), namedNode(`${ns4}originalCodeValue`), literal(`BE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CARROTS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CARROTS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of carrot and their derivatives in the product, as listed in as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CARROTS`), namedNode(`${rdfs}label`), literal(`Carrot and Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CARROTS`), namedNode(`${skos}prefLabel`), literal(`CARROTS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CARROTS`), namedNode(`${ns4}originalCodeValue`), literal(`NW`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CASHEW_NUTS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CASHEW_NUTS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of cashew and cashew products as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CASHEW_NUTS`), namedNode(`${rdfs}label`), literal(`Cashew and Cashew Products`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CASHEW_NUTS`), namedNode(`${skos}prefLabel`), literal(`CASHEW_NUTS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CASHEW_NUTS`), namedNode(`${ns4}originalCodeValue`), literal(`SC`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CELERY`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CELERY`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of celery or their derivatives in the product, as listed in as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CELERY`), namedNode(`${rdfs}label`), literal(`Celery or Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CELERY`), namedNode(`${skos}prefLabel`), literal(`CELERY`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CELERY`), namedNode(`${ns4}originalCodeValue`), literal(`BC`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CEREALS_CONTAINING_GLUTEN`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CEREALS_CONTAINING_GLUTEN`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Cereals containing gluten and their derivatives in the product, as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CEREALS_CONTAINING_GLUTEN`), namedNode(`${rdfs}label`), literal(`Cereals Containing Gluten and Their Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CEREALS_CONTAINING_GLUTEN`), namedNode(`${skos}prefLabel`), literal(`CEREALS_CONTAINING_GLUTEN`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CEREALS_CONTAINING_GLUTEN`), namedNode(`${ns4}originalCodeValue`), literal(`AW`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CINNAMAL`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CINNAMAL`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Cinnamal as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CINNAMAL`), namedNode(`${rdfs}label`), literal(`Cinnamal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CINNAMAL`), namedNode(`${skos}prefLabel`), literal(`CINNAMAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CINNAMAL`), namedNode(`${ns4}originalCodeValue`), literal(`CL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CINNAMYL_ALCOHOL`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CINNAMYL_ALCOHOL`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Cinnamyl Alcohol as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CINNAMYL_ALCOHOL`), namedNode(`${rdfs}label`), literal(`Cinnamyl Alcohol`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CINNAMYL_ALCOHOL`), namedNode(`${skos}prefLabel`), literal(`CINNAMYL_ALCOHOL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CINNAMYL_ALCOHOL`), namedNode(`${ns4}originalCodeValue`), literal(`CA`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CITRAL`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CITRAL`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Citral as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CITRAL`), namedNode(`${rdfs}label`), literal(`Citral`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CITRAL`), namedNode(`${skos}prefLabel`), literal(`CITRAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CITRAL`), namedNode(`${ns4}originalCodeValue`), literal(`CT`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CITRONELLOL`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CITRONELLOL`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Citronellol as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CITRONELLOL`), namedNode(`${rdfs}label`), literal(`Citronellol`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CITRONELLOL`), namedNode(`${skos}prefLabel`), literal(`CITRONELLOL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CITRONELLOL`), namedNode(`${ns4}originalCodeValue`), literal(`CN`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-COCOA`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-COCOA`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of cocoa and their derivatives in the product, as listed in as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-COCOA`), namedNode(`${rdfs}label`), literal(`Cocoa and Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-COCOA`), namedNode(`${skos}prefLabel`), literal(`COCOA`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-COCOA`), namedNode(`${ns4}originalCodeValue`), literal(`NC`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CORIANDER`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CORIANDER`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of coriander and their derivatives in the product, as listed in as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CORIANDER`), namedNode(`${rdfs}label`), literal(`Coriander Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CORIANDER`), namedNode(`${skos}prefLabel`), literal(`CORIANDER`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CORIANDER`), namedNode(`${ns4}originalCodeValue`), literal(`NK`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CORN`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CORN`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of corn and their derivatives in the product, as listed in as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CORN`), namedNode(`${rdfs}label`), literal(`Corn and Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CORN`), namedNode(`${skos}prefLabel`), literal(`CORN`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CORN`), namedNode(`${ns4}originalCodeValue`), literal(`NM`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-COUMARIN`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-COUMARIN`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Coumarin as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-COUMARIN`), namedNode(`${rdfs}label`), literal(`Coumarin`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-COUMARIN`), namedNode(`${skos}prefLabel`), literal(`COUMARIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-COUMARIN`), namedNode(`${ns4}originalCodeValue`), literal(`CO`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CRUSTACEANS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CRUSTACEANS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Crustaceans and their derivatives in the product, as listed as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CRUSTACEANS`), namedNode(`${rdfs}label`), literal(`Crustaceans and Their Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CRUSTACEANS`), namedNode(`${skos}prefLabel`), literal(`CRUSTACEANS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-CRUSTACEANS`), namedNode(`${ns4}originalCodeValue`), literal(`AC`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EGGS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EGGS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of eggs and their derivatives in the product, as listed as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EGGS`), namedNode(`${rdfs}label`), literal(`Eggs and Their Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EGGS`), namedNode(`${skos}prefLabel`), literal(`EGGS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EGGS`), namedNode(`${ns4}originalCodeValue`), literal(`AE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EUGENOL`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EUGENOL`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Eugenol as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EUGENOL`), namedNode(`${rdfs}label`), literal(`Eugenol`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EUGENOL`), namedNode(`${skos}prefLabel`), literal(`EUGENOL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EUGENOL`), namedNode(`${ns4}originalCodeValue`), literal(`EG`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EVERNIA_FURFURACEA`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EVERNIA_FURFURACEA`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Evernia Furfuracea as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EVERNIA_FURFURACEA`), namedNode(`${rdfs}label`), literal(`Evernia Furfuracea`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EVERNIA_FURFURACEA`), namedNode(`${skos}prefLabel`), literal(`EVERNIA_FURFURACEA`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EVERNIA_FURFURACEA`), namedNode(`${ns4}originalCodeValue`), literal(`EV`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EVERNIA_PRUNASTRI`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EVERNIA_PRUNASTRI`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Evernia Prunastri as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EVERNIA_PRUNASTRI`), namedNode(`${rdfs}label`), literal(`Evernia Prunastri`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EVERNIA_PRUNASTRI`), namedNode(`${skos}prefLabel`), literal(`EVERNIA_PRUNASTRI`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-EVERNIA_PRUNASTRI`), namedNode(`${ns4}originalCodeValue`), literal(`EP`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-FARNESOL`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-FARNESOL`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Farnesol as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-FARNESOL`), namedNode(`${rdfs}label`), literal(`Farnesol`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-FARNESOL`), namedNode(`${skos}prefLabel`), literal(`FARNESOL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-FARNESOL`), namedNode(`${ns4}originalCodeValue`), literal(`FA`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-FISH`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-FISH`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Fish and their derivatives in the product, as listed in as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-FISH`), namedNode(`${rdfs}label`), literal(`Fish and Their Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-FISH`), namedNode(`${skos}prefLabel`), literal(`FISH`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-FISH`), namedNode(`${ns4}originalCodeValue`), literal(`AF`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-GERANIOL`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-GERANIOL`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Geraniol as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-GERANIOL`), namedNode(`${rdfs}label`), literal(`Geraniol`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-GERANIOL`), namedNode(`${skos}prefLabel`), literal(`GERANIOL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-GERANIOL`), namedNode(`${ns4}originalCodeValue`), literal(`GE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-GLUTEN`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-GLUTEN`), namedNode(`${rdfs}comment`), literal(`Refers to the presense of other gluten containing grain and gluten containing grain products as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-GLUTEN`), namedNode(`${rdfs}label`), literal(`Gluten`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-GLUTEN`), namedNode(`${skos}prefLabel`), literal(`GLUTEN`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-GLUTEN`), namedNode(`${ns4}originalCodeValue`), literal(`AX`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HAZELNUTS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HAZELNUTS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of hazelnut and hazelnut products as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HAZELNUTS`), namedNode(`${rdfs}label`), literal(`Hazelnut and Hazelnut Products`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HAZELNUTS`), namedNode(`${skos}prefLabel`), literal(`HAZELNUTS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HAZELNUTS`), namedNode(`${ns4}originalCodeValue`), literal(`SH`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HEXYL_CINNAMAL`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HEXYL_CINNAMAL`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Hexyl Cinnamal as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HEXYL_CINNAMAL`), namedNode(`${rdfs}label`), literal(`Hexyl Cinnamal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HEXYL_CINNAMAL`), namedNode(`${skos}prefLabel`), literal(`HEXYL_CINNAMAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HEXYL_CINNAMAL`), namedNode(`${ns4}originalCodeValue`), literal(`HX`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HYDROXYCITRONELLAL`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HYDROXYCITRONELLAL`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Hydroxycitronellal as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HYDROXYCITRONELLAL`), namedNode(`${rdfs}label`), literal(`Hydroxycitronellal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HYDROXYCITRONELLAL`), namedNode(`${skos}prefLabel`), literal(`HYDROXYCITRONELLAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HYDROXYCITRONELLAL`), namedNode(`${ns4}originalCodeValue`), literal(`HY`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HYDROXYISOHEXYL_3-CYCLOHEXENE_CARBOXALDEHYDE_ISOEUGENOL_LIMONENE_LINAL`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HYDROXYISOHEXYL_3-CYCLOHEXENE_CARBOXALDEHYDE_ISOEUGENOL_LIMONENE_LINAL`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Hydroxyisohexyl 3-Cyclohexene Carboxaldehyde Isoeugenol Limonene Linal as listed in the regulations specified in AllergenSpecificationAgency and llergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HYDROXYISOHEXYL_3-CYCLOHEXENE_CARBOXALDEHYDE_ISOEUGENOL_LIMONENE_LINAL`), namedNode(`${rdfs}label`), literal(`Hydroxyisohexyl 3-Cyclohexene Carboxaldehyde Isoeugenol Limonene Linal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HYDROXYISOHEXYL_3-CYCLOHEXENE_CARBOXALDEHYDE_ISOEUGENOL_LIMONENE_LINAL`), namedNode(`${skos}prefLabel`), literal(`HYDROXYISOHEXYL_3-CYCLOHEXENE_CARBOXALDEHYDE_ISOEUGENOL_LIMONENE_LINAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-HYDROXYISOHEXYL_3-CYCLOHEXENE_CARBOXALDEHYDE_ISOEUGENOL_LIMONENE_LINAL`), namedNode(`${ns4}originalCodeValue`), literal(`HC`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-KAMUT`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-KAMUT`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of kamut and kamut products (glutencontaining grain) as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-KAMUT`), namedNode(`${rdfs}label`), literal(`Kamut and Kamut Products`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-KAMUT`), namedNode(`${skos}prefLabel`), literal(`KAMUT`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-KAMUT`), namedNode(`${ns4}originalCodeValue`), literal(`GK`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-LACTOSE`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-LACTOSE`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of lactose as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-LACTOSE`), namedNode(`${rdfs}label`), literal(`Lactose`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-LACTOSE`), namedNode(`${skos}prefLabel`), literal(`LACTOSE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-LACTOSE`), namedNode(`${ns4}originalCodeValue`), literal(`ML`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-LUPINE`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-LUPINE`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Lupine and their derivatives in the product, as listed in as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-LUPINE`), namedNode(`${rdfs}label`), literal(`Lupine and Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-LUPINE`), namedNode(`${skos}prefLabel`), literal(`LUPINE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-LUPINE`), namedNode(`${ns4}originalCodeValue`), literal(`NL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MACADAMIA_NUTS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MACADAMIA_NUTS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of macadamia nut and macadamia nut products as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MACADAMIA_NUTS`), namedNode(`${rdfs}label`), literal(`Macadamia Nut and Macadamia Nut Products`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MACADAMIA_NUTS`), namedNode(`${skos}prefLabel`), literal(`MACADAMIA_NUTS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MACADAMIA_NUTS`), namedNode(`${ns4}originalCodeValue`), literal(`SM`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-METHYL_2_OCTYNOATE`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-METHYL_2_OCTYNOATE`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of Methyl 2-Octynoate as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-METHYL_2_OCTYNOATE`), namedNode(`${rdfs}label`), literal(`Methyl 2-Octynoate`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-METHYL_2_OCTYNOATE`), namedNode(`${skos}prefLabel`), literal(`METHYL_2_OCTYNOATE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-METHYL_2_OCTYNOATE`), namedNode(`${ns4}originalCodeValue`), literal(`MO`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MILK`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MILK`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of milk and their derivatives in the product, as listed in as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MILK`), namedNode(`${rdfs}label`), literal(`Milk and Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MILK`), namedNode(`${skos}prefLabel`), literal(`MILK`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MILK`), namedNode(`${ns4}originalCodeValue`), literal(`AM`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MOLLUSCS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MOLLUSCS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of molluscs and their derivatives in the product, as listed in as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MOLLUSCS`), namedNode(`${rdfs}label`), literal(`Molluscs and Their Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MOLLUSCS`), namedNode(`${skos}prefLabel`), literal(`MOLLUSCS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MOLLUSCS`), namedNode(`${ns4}originalCodeValue`), literal(`UM`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MUSTARD`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MUSTARD`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of mustard or their derivatives in the product, as listed in as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MUSTARD`), namedNode(`${rdfs}label`), literal(`Mustard and Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MUSTARD`), namedNode(`${skos}prefLabel`), literal(`MUSTARD`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-MUSTARD`), namedNode(`${ns4}originalCodeValue`), literal(`BM`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-NO_DECLARED_ALLERGENS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-NO_DECLARED_ALLERGENS`), namedNode(`${rdfs}comment`), literal(`Does not contain declaration obligatory allergens as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-NO_DECLARED_ALLERGENS`), namedNode(`${rdfs}label`), literal(`No Declaration Obligatory Allergens`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-NO_DECLARED_ALLERGENS`), namedNode(`${skos}prefLabel`), literal(`NO_DECLARED_ALLERGENS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-NO_DECLARED_ALLERGENS`), namedNode(`${ns4}originalCodeValue`), literal(`X99`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-OAT`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-OAT`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of oat and oat products (gluten containing grain) as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-OAT`), namedNode(`${rdfs}label`), literal(`Oat and Oat Products`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-OAT`), namedNode(`${skos}prefLabel`), literal(`OAT`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-OAT`), namedNode(`${ns4}originalCodeValue`), literal(`GO`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PEANUTS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PEANUTS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of peanuts and their derivatives in the product, as listed in as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PEANUTS`), namedNode(`${rdfs}label`), literal(`Peanuts and Their Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PEANUTS`), namedNode(`${skos}prefLabel`), literal(`PEANUTS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PEANUTS`), namedNode(`${ns4}originalCodeValue`), literal(`AP`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PEAS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PEAS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of peas and pea products as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PEAS`), namedNode(`${rdfs}label`), literal(`Peas and Pea Products`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PEAS`), namedNode(`${skos}prefLabel`), literal(`PEAS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PEAS`), namedNode(`${ns4}originalCodeValue`), literal(`NE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PECAN_NUTS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PECAN_NUTS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of pecan nut and pecan nut products as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PECAN_NUTS`), namedNode(`${rdfs}label`), literal(`Pecan Nut and Pecan Nut`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PECAN_NUTS`), namedNode(`${skos}prefLabel`), literal(`PECAN_NUTS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PECAN_NUTS`), namedNode(`${ns4}originalCodeValue`), literal(`SP`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PISTACHIOS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PISTACHIOS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of pistachio and pistachio products as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PISTACHIOS`), namedNode(`${rdfs}label`), literal(`Pistachio and Pistachio Products`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PISTACHIOS`), namedNode(`${skos}prefLabel`), literal(`PISTACHIOS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-PISTACHIOS`), namedNode(`${ns4}originalCodeValue`), literal(`ST`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-POD_FRUITS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-POD_FRUITS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of pod fruits and their derivatives in the product, as listed in as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-POD_FRUITS`), namedNode(`${rdfs}label`), literal(`Pod Fruits Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-POD_FRUITS`), namedNode(`${skos}prefLabel`), literal(`POD_FRUITS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-POD_FRUITS`), namedNode(`${ns4}originalCodeValue`), literal(`NP`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-QUEENSLAND_NUTS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-QUEENSLAND_NUTS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of queensland nut and queensland nut products as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-QUEENSLAND_NUTS`), namedNode(`${rdfs}label`), literal(`Queensland Nut and Queensland Nut Products`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-QUEENSLAND_NUTS`), namedNode(`${skos}prefLabel`), literal(`QUEENSLAND_NUTS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-QUEENSLAND_NUTS`), namedNode(`${ns4}originalCodeValue`), literal(`SQ`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-RYE`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-RYE`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of rye and their derivatives in the product, as listed in as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-RYE`), namedNode(`${rdfs}label`), literal(`Rye and Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-RYE`), namedNode(`${skos}prefLabel`), literal(`RYE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-RYE`), namedNode(`${ns4}originalCodeValue`), literal(`NR`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SESAME_SEEDS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SESAME_SEEDS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of sesame seeds or their derivatives in the product, as listed in as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SESAME_SEEDS`), namedNode(`${rdfs}label`), literal(`Sesame Seeds or Their Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SESAME_SEEDS`), namedNode(`${skos}prefLabel`), literal(`SESAME_SEEDS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SESAME_SEEDS`), namedNode(`${ns4}originalCodeValue`), literal(`AS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SOYBEANS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SOYBEANS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of soybeans and their derivatives in the product, as listed in as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SOYBEANS`), namedNode(`${rdfs}label`), literal(`Soybeans and Their Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SOYBEANS`), namedNode(`${skos}prefLabel`), literal(`SOYBEANS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SOYBEANS`), namedNode(`${ns4}originalCodeValue`), literal(`AY`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SPELT`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SPELT`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of spelt and spelt products (gluten containing grain) as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SPELT`), namedNode(`${rdfs}label`), literal(`Spelt and Spelt Products`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SPELT`), namedNode(`${skos}prefLabel`), literal(`SPELT`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SPELT`), namedNode(`${ns4}originalCodeValue`), literal(`GS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SULPHUR_DIOXIDE`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SULPHUR_DIOXIDE`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of sulphur dioxide and sulphites as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SULPHUR_DIOXIDE`), namedNode(`${rdfs}label`), literal(`Sulphur Dioxide and Sulphites`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SULPHUR_DIOXIDE`), namedNode(`${skos}prefLabel`), literal(`SULPHUR_DIOXIDE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-SULPHUR_DIOXIDE`), namedNode(`${ns4}originalCodeValue`), literal(`AU`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-TREE_NUTS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-TREE_NUTS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of tree nuts and their derivatives in the product, as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName. Tree nuts can include almonds, hazelnut, walnut, cashews, etc.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-TREE_NUTS`), namedNode(`${rdfs}label`), literal(`Tree Nuts and Their Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-TREE_NUTS`), namedNode(`${skos}prefLabel`), literal(`TREE_NUTS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-TREE_NUTS`), namedNode(`${ns4}originalCodeValue`), literal(`AN`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-TREE_NUT_TRACES`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-TREE_NUT_TRACES`), namedNode(`${rdfs}comment`), literal(`Contains Traces of Tree Nuts, i.e. almonds, various kinds of tree nuts.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-TREE_NUT_TRACES`), namedNode(`${rdfs}label`), literal(`Traces of Tree Nuts`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-TREE_NUT_TRACES`), namedNode(`${skos}prefLabel`), literal(`TREE_NUT_TRACES`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-TREE_NUT_TRACES`), namedNode(`${ns4}originalCodeValue`), literal(`TN`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-WALNUTS`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-WALNUTS`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of walnut and walnut products as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-WALNUTS`), namedNode(`${rdfs}label`), literal(`Walnut and Walnut Products`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-WALNUTS`), namedNode(`${skos}prefLabel`), literal(`WALNUTS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-WALNUTS`), namedNode(`${ns4}originalCodeValue`), literal(`SW`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-WHEAT`), namedNode(`${rdf}type`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-WHEAT`), namedNode(`${rdfs}comment`), literal(`Refers to the presence of wheat and their derivatives in the product, as listed in the regulations specified in AllergenSpecificationAgency and AllergenSpecificationName`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-WHEAT`), namedNode(`${rdfs}label`), literal(`Wheat and Their Derivatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-WHEAT`), namedNode(`${skos}prefLabel`), literal(`WHEAT`), namedNode(ns4)),
        quad(namedNode(`${ns4}AllergenTypeCode-WHEAT`), namedNode(`${ns4}originalCodeValue`), literal(`UW`), namedNode(ns4)),
        quad(namedNode(`${ns4}TypeCode`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}TypeCode`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}TypeCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}TypeCode`), namedNode(`${rdfs}comment`), literal(`A code list.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TypeCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}TypeCode`), namedNode(`${rdfs}label`), literal(`Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TypeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-BELLY`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-BELLY`), namedNode(`${rdfs}label`), literal(`Belly`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-BELLY`), namedNode(`${skos}prefLabel`), literal(`BELLY`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode`), namedNode(`${rdfs}label`), literal(`Anatomical Form Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-BLOOD`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-BLOOD`), namedNode(`${rdfs}label`), literal(`Blood`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-BLOOD`), namedNode(`${skos}prefLabel`), literal(`BLOOD`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-BONE`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-BONE`), namedNode(`${rdfs}label`), literal(`Bone`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-BONE`), namedNode(`${skos}prefLabel`), literal(`BONE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-BRAIN`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-BRAIN`), namedNode(`${rdfs}label`), literal(`Brain`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-BRAIN`), namedNode(`${skos}prefLabel`), literal(`BRAIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-CARCASS_NONPOULTRY`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-CARCASS_NONPOULTRY`), namedNode(`${rdfs}label`), literal(`Carcass Nonpoultry`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-CARCASS_NONPOULTRY`), namedNode(`${skos}prefLabel`), literal(`CARCASS_NONPOULTRY`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-DIAPHRAM`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-DIAPHRAM`), namedNode(`${rdfs}label`), literal(`Diaphram`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-DIAPHRAM`), namedNode(`${skos}prefLabel`), literal(`DIAPHRAM`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-ESOPHAGUS`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-ESOPHAGUS`), namedNode(`${rdfs}label`), literal(`Esophagus`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-ESOPHAGUS`), namedNode(`${skos}prefLabel`), literal(`ESOPHAGUS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-FAT`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-FAT`), namedNode(`${rdfs}label`), literal(`Fat`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-FAT`), namedNode(`${skos}prefLabel`), literal(`FAT`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-FEET`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-FEET`), namedNode(`${rdfs}label`), literal(`Feet`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-FEET`), namedNode(`${skos}prefLabel`), literal(`FEET`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-FOREQUARTER`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-FOREQUARTER`), namedNode(`${rdfs}label`), literal(`Forequarter`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-FOREQUARTER`), namedNode(`${skos}prefLabel`), literal(`FOREQUARTER`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-GIZZARD`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-GIZZARD`), namedNode(`${rdfs}label`), literal(`Gizzard`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-GIZZARD`), namedNode(`${skos}prefLabel`), literal(`GIZZARD`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-HEAD`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-HEAD`), namedNode(`${rdfs}label`), literal(`Head`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-HEAD`), namedNode(`${skos}prefLabel`), literal(`HEAD`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-HEADMEAT_CHEEKMEAT`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-HEADMEAT_CHEEKMEAT`), namedNode(`${rdfs}label`), literal(`Headmeat Cheekmeat`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-HEADMEAT_CHEEKMEAT`), namedNode(`${skos}prefLabel`), literal(`HEADMEAT_CHEEKMEAT`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-HEART`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-HEART`), namedNode(`${rdfs}label`), literal(`Heart`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-HEART`), namedNode(`${skos}prefLabel`), literal(`HEART`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-HINDQUARTER`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-HINDQUARTER`), namedNode(`${rdfs}label`), literal(`Hindquarter`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-HINDQUARTER`), namedNode(`${skos}prefLabel`), literal(`HINDQUARTER`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-HORN`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-HORN`), namedNode(`${rdfs}label`), literal(`Horn`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-HORN`), namedNode(`${skos}prefLabel`), literal(`HORN`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-INTESTINE_LARGE`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-INTESTINE_LARGE`), namedNode(`${rdfs}label`), literal(`Intestine Large`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-INTESTINE_LARGE`), namedNode(`${skos}prefLabel`), literal(`INTESTINE_LARGE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-INTESTINE_SMALL`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-INTESTINE_SMALL`), namedNode(`${rdfs}label`), literal(`Intenstine Small`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-INTESTINE_SMALL`), namedNode(`${skos}prefLabel`), literal(`INTESTINE_SMALL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-KIDNEY`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-KIDNEY`), namedNode(`${rdfs}label`), literal(`Kidney`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-KIDNEY`), namedNode(`${skos}prefLabel`), literal(`KIDNEY`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-LIPS`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-LIPS`), namedNode(`${rdfs}label`), literal(`Lips`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-LIPS`), namedNode(`${skos}prefLabel`), literal(`LIPS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-LIVER`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-LIVER`), namedNode(`${rdfs}label`), literal(`Liver`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-LIVER`), namedNode(`${skos}prefLabel`), literal(`LIVER`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-LUNGS`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-LUNGS`), namedNode(`${rdfs}label`), literal(`Lungs`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-LUNGS`), namedNode(`${skos}prefLabel`), literal(`LUNGS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-MIXED_OFFAL`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-MIXED_OFFAL`), namedNode(`${rdfs}label`), literal(`Mixed Offal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-MIXED_OFFAL`), namedNode(`${skos}prefLabel`), literal(`MIXED_OFFAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-MIXED_PARTS_FOR_GROUNDING_MINCING`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-MIXED_PARTS_FOR_GROUNDING_MINCING`), namedNode(`${rdfs}label`), literal(`Mixed Parts For Grounding or Mincing`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-MIXED_PARTS_FOR_GROUNDING_MINCING`), namedNode(`${skos}prefLabel`), literal(`MIXED_PARTS_FOR_GROUNDING_MINCING`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-NECK`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-NECK`), namedNode(`${rdfs}label`), literal(`Neck`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-NECK`), namedNode(`${skos}prefLabel`), literal(`NECK`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-PANCREAS`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-PANCREAS`), namedNode(`${rdfs}label`), literal(`Pancreas`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-PANCREAS`), namedNode(`${skos}prefLabel`), literal(`PANCREAS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-SKIN`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-SKIN`), namedNode(`${rdfs}label`), literal(`Skin`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-SKIN`), namedNode(`${skos}prefLabel`), literal(`SKIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-STOMACH`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-STOMACH`), namedNode(`${rdfs}label`), literal(`Stomach`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-STOMACH`), namedNode(`${skos}prefLabel`), literal(`STOMACH`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-TAIL`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-TAIL`), namedNode(`${rdfs}label`), literal(`Tail`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-TAIL`), namedNode(`${skos}prefLabel`), literal(`TAIL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-TENDONS`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-TENDONS`), namedNode(`${rdfs}label`), literal(`Tendons`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-TENDONS`), namedNode(`${skos}prefLabel`), literal(`TENDONS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-TESTICLES`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-TESTICLES`), namedNode(`${rdfs}label`), literal(`Testicles`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-TESTICLES`), namedNode(`${skos}prefLabel`), literal(`TESTICLES`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-THYMUS`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-THYMUS`), namedNode(`${rdfs}label`), literal(`Thymus`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-THYMUS`), namedNode(`${skos}prefLabel`), literal(`THYMUS`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-TONGUE`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-TONGUE`), namedNode(`${rdfs}label`), literal(`Tongue`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-TONGUE`), namedNode(`${skos}prefLabel`), literal(`TONGUE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-TRIPE`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-TRIPE`), namedNode(`${rdfs}label`), literal(`Tripe`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-TRIPE`), namedNode(`${skos}prefLabel`), literal(`TRIPE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-UNCLASSIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-UNCLASSIFIED`), namedNode(`${rdfs}label`), literal(`Unclassified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-UNCLASSIFIED`), namedNode(`${skos}prefLabel`), literal(`UNCLASSIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-UNIDENTIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-UNIDENTIFIED`), namedNode(`${rdfs}label`), literal(`Unidentified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-UNIDENTIFIED`), namedNode(`${skos}prefLabel`), literal(`UNIDENTIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_BIRD`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_BIRD`), namedNode(`${rdfs}label`), literal(`Whole Bird`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_BIRD`), namedNode(`${skos}prefLabel`), literal(`WHOLE_BIRD`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_NONPOULTRY_MEATPART_PIECE`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_NONPOULTRY_MEATPART_PIECE`), namedNode(`${rdfs}label`), literal(`Whole Muscle Nonpoultry Meatpart Piece`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_NONPOULTRY_MEATPART_PIECE`), namedNode(`${skos}prefLabel`), literal(`WHOLE_MUSCLE_NONPOULTRY_MEATPART_PIECE`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_POULTRY_PART`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_POULTRY_PART`), namedNode(`${rdfs}label`), literal(`Whole Muscle Poultry Part`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_POULTRY_PART`), namedNode(`${skos}prefLabel`), literal(`WHOLE_MUSCLE_POULTRY_PART`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_PRIMAL`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_PRIMAL`), namedNode(`${rdfs}label`), literal(`Whole Muscle Primal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_PRIMAL`), namedNode(`${skos}prefLabel`), literal(`WHOLE_MUSCLE_PRIMAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_RIBCUT`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_RIBCUT`), namedNode(`${rdfs}label`), literal(`Whole Muscle Ribcut`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_RIBCUT`), namedNode(`${skos}prefLabel`), literal(`WHOLE_MUSCLE_RIBCUT`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_ROASTCUT`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_ROASTCUT`), namedNode(`${rdfs}label`), literal(`Whole Muscle Roast Cut`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_ROASTCUT`), namedNode(`${skos}prefLabel`), literal(`WHOLE_MUSCLE_ROASTCUT`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_SLICE_CHOPCUT`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_SLICE_CHOPCUT`), namedNode(`${rdfs}label`), literal(`Whole Muscle Slice Chopcut`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_SLICE_CHOPCUT`), namedNode(`${skos}prefLabel`), literal(`WHOLE_MUSCLE_SLICE_CHOPCUT`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_SLICE_CUTLET`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_SLICE_CUTLET`), namedNode(`${rdfs}label`), literal(`Whole Muscle Slice Cutlet`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_SLICE_CUTLET`), namedNode(`${skos}prefLabel`), literal(`WHOLE_MUSCLE_SLICE_CUTLET`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_STEAK_CHOPCUT`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_STEAK_CHOPCUT`), namedNode(`${rdfs}label`), literal(`Whole Muscle Steak Chop-cut`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_STEAK_CHOPCUT`), namedNode(`${skos}prefLabel`), literal(`WHOLE_MUSCLE_STEAK_CHOPCUT`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_SUBPRIMAL`), namedNode(`${rdf}type`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_SUBPRIMAL`), namedNode(`${rdfs}label`), literal(`Whole Muscle Subprimal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AnatomicalFormCode-WHOLE_MUSCLE_SUBPRIMAL`), namedNode(`${skos}prefLabel`), literal(`WHOLE_MUSCLE_SUBPRIMAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}AwardPrizeDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}AwardPrizeDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}AwardPrizeDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}AwardPrizeDetails`), namedNode(`${rdfs}comment`), literal(`Describes a prize or award won by a product or organization.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AwardPrizeDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}AwardPrizeDetails`), namedNode(`${rdfs}label`), literal(`Award Prize`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}AwardPrizeDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}Beverage`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Beverage`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Beverage`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}Beverage`), namedNode(`${rdfs}comment`), literal(`Any potable liquid.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Beverage`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}Beverage`), namedNode(`${rdfs}label`), literal(`Beverage`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Beverage`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(`${rdfs}comment`), literal(`A food, beverage or tobacco product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(`${rdfs}label`), literal(`Food Beverage Tobacco Product`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}Brand`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Brand`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Brand`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}Brand`), namedNode(`${rdfs}comment`), literal(`Information on brands and sub-brands for a product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Brand`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}Brand`), namedNode(`${rdfs}label`), literal(`Brand`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Brand`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}Brand`), namedNode(`${skos}exactMatch`), namedNode(`${schema}Brand`), namedNode(ns4)),
        quad(namedNode(`${ns4}CertificationDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}CertificationDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}CertificationDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}CertificationDetails`), namedNode(`${rdfs}comment`), literal(`Information about the type of certification issued by a certifying body.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}CertificationDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}CertificationDetails`), namedNode(`${rdfs}label`), literal(`Certification`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}CertificationDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode-EXTRA_HARD`), namedNode(`${rdf}type`), namedNode(`${ns4}CheeseFirmnessCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode-EXTRA_HARD`), namedNode(`${rdfs}label`), literal(`Extra Hard`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode-EXTRA_HARD`), namedNode(`${skos}prefLabel`), literal(`EXTRA_HARD`), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode`), namedNode(`${rdfs}label`), literal(`Cheese Firmness Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode-FIRM_SEMIHARD`), namedNode(`${rdf}type`), namedNode(`${ns4}CheeseFirmnessCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode-FIRM_SEMIHARD`), namedNode(`${rdfs}label`), literal(`Firm Semi Hard`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode-FIRM_SEMIHARD`), namedNode(`${skos}prefLabel`), literal(`FIRM_SEMIHARD`), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode-HARD`), namedNode(`${rdf}type`), namedNode(`${ns4}CheeseFirmnessCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode-HARD`), namedNode(`${rdfs}label`), literal(`Hard`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode-HARD`), namedNode(`${skos}prefLabel`), literal(`HARD`), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode-SOFT`), namedNode(`${rdf}type`), namedNode(`${ns4}CheeseFirmnessCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode-SOFT`), namedNode(`${rdfs}label`), literal(`Soft`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode-SOFT`), namedNode(`${skos}prefLabel`), literal(`SOFT`), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode-UNIDENTIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}CheeseFirmnessCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode-UNIDENTIFIED`), namedNode(`${rdfs}label`), literal(`Unidentified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}CheeseFirmnessCode-UNIDENTIFIED`), namedNode(`${skos}prefLabel`), literal(`UNIDENTIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}Clothing`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Clothing`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Clothing`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}Clothing`), namedNode(`${rdfs}comment`), literal(` A product that is worn on the body.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Clothing`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}Clothing`), namedNode(`${rdfs}label`), literal(`Clothing`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Clothing`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}WearableProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}WearableProduct`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}WearableProduct`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}WearableProduct`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}WearableProduct`), namedNode(`${rdfs}comment`), literal(`Products that are worn on the body.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}WearableProduct`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}WearableProduct`), namedNode(`${rdfs}label`), literal(`Wearable Product`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}WearableProduct`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeDetails`), namedNode(`${rdfs}comment`), literal(`A set of colour code details (colour code, party controlling the code list) for the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeDetails`), namedNode(`${rdfs}label`), literal(`Colour Code Details`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-BUYER`), namedNode(`${rdf}type`), namedNode(`${ns4}ColourCodeListCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-BUYER`), namedNode(`${rdfs}comment`), literal(`Assigned by buyer.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-BUYER`), namedNode(`${rdfs}label`), literal(`Assigned by Buyer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-BUYER`), namedNode(`${skos}prefLabel`), literal(`BUYER`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-BUYER`), namedNode(`${ns4}originalCodeValue`), literal(`6`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeListCode`), namedNode(`${rdfs}label`), literal(`Colour Code List Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeListCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-IFPS`), namedNode(`${rdf}type`), namedNode(`${ns4}ColourCodeListCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-IFPS`), namedNode(`${rdfs}comment`), literal(`International Federation for Produce Standards.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-IFPS`), namedNode(`${rdfs}label`), literal(`International Federation for Produce Standards`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-IFPS`), namedNode(`${skos}prefLabel`), literal(`IFPS`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-IFPS`), namedNode(`${ns4}originalCodeValue`), literal(`11`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-NCS`), namedNode(`${rdf}type`), namedNode(`${ns4}ColourCodeListCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-NCS`), namedNode(`${rdfs}comment`), literal(`Natural Colour System.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-NCS`), namedNode(`${rdfs}label`), literal(`Natural Colour System`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-NCS`), namedNode(`${skos}prefLabel`), literal(`NCS`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-NCS`), namedNode(`${ns4}originalCodeValue`), literal(`10`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-NRF`), namedNode(`${rdf}type`), namedNode(`${ns4}ColourCodeListCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-NRF`), namedNode(`${rdfs}comment`), literal(`National Retail Federation.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-NRF`), namedNode(`${rdfs}label`), literal(`National Retail Federation.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-NRF`), namedNode(`${skos}prefLabel`), literal(`NRF`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-NRF`), namedNode(`${ns4}originalCodeValue`), literal(`1`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_HEXACHROME`), namedNode(`${rdf}type`), namedNode(`${ns4}ColourCodeListCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_HEXACHROME`), namedNode(`${rdfs}comment`), literal(`Pantone Hexachrome.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_HEXACHROME`), namedNode(`${rdfs}label`), literal(`Pantone Hexachrome`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_HEXACHROME`), namedNode(`${skos}prefLabel`), literal(`PANTONE_HEXACHROME`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_HEXACHROME`), namedNode(`${ns4}originalCodeValue`), literal(`4`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_MATCHING`), namedNode(`${rdf}type`), namedNode(`${ns4}ColourCodeListCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_MATCHING`), namedNode(`${rdfs}comment`), literal(`Pantone Matching System.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_MATCHING`), namedNode(`${rdfs}label`), literal(`Pantone Matching System`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_MATCHING`), namedNode(`${skos}prefLabel`), literal(`PANTONE_MATCHING`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_MATCHING`), namedNode(`${ns4}originalCodeValue`), literal(`2`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_PROCESS_COLOUR`), namedNode(`${rdf}type`), namedNode(`${ns4}ColourCodeListCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_PROCESS_COLOUR`), namedNode(`${rdfs}comment`), literal(`Pantone Process Colour System.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_PROCESS_COLOUR`), namedNode(`${rdfs}label`), literal(`Pantone Process Colour System`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_PROCESS_COLOUR`), namedNode(`${skos}prefLabel`), literal(`PANTONE_PROCESS_COLOUR`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_PROCESS_COLOUR`), namedNode(`${ns4}originalCodeValue`), literal(`3`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_TEXTILE`), namedNode(`${rdf}type`), namedNode(`${ns4}ColourCodeListCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_TEXTILE`), namedNode(`${rdfs}comment`), literal(`Pantone Textile. Same as GS1 ColourCodeList Code 5`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_TEXTILE`), namedNode(`${rdfs}label`), literal(`Pantone Textile`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_TEXTILE`), namedNode(`${skos}prefLabel`), literal(`PANTONE_TEXTILE`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-PANTONE_TEXTILE`), namedNode(`${ns4}originalCodeValue`), literal(`5`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-RAL`), namedNode(`${rdf}type`), namedNode(`${ns4}ColourCodeListCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-RAL`), namedNode(`${rdfs}comment`), literal(`Farbsystem RAL Colour System.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-RAL`), namedNode(`${rdfs}label`), literal(`Farbsystem RAL Colour System`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-RAL`), namedNode(`${skos}prefLabel`), literal(`RAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-RAL`), namedNode(`${ns4}originalCodeValue`), literal(`9`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-SELLER`), namedNode(`${rdf}type`), namedNode(`${ns4}ColourCodeListCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-SELLER`), namedNode(`${rdfs}comment`), literal(`Assigned by seller.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-SELLER`), namedNode(`${rdfs}label`), literal(`Assigned by Seller`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-SELLER`), namedNode(`${skos}prefLabel`), literal(`SELLER`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-SELLER`), namedNode(`${ns4}originalCodeValue`), literal(`7`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-WWS`), namedNode(`${rdf}type`), namedNode(`${ns4}ColourCodeListCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-WWS`), namedNode(`${rdfs}comment`), literal(`Waren Wirtschafts System.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-WWS`), namedNode(`${rdfs}label`), literal(`Waren Wirtschafts System`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-WWS`), namedNode(`${skos}prefLabel`), literal(`WWS`), namedNode(ns4)),
        quad(namedNode(`${ns4}ColourCodeList-WWS`), namedNode(`${ns4}originalCodeValue`), literal(`8`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-ADULT`), namedNode(`${rdf}type`), namedNode(`${ns4}ConsumerLifestageCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-ADULT`), namedNode(`${rdfs}label`), literal(`Suitable for Adults`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-ADULT`), namedNode(`${skos}prefLabel`), literal(`ADULT`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode`), namedNode(`${rdfs}label`), literal(`Consumer Lifestage Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-ALL_AGES`), namedNode(`${rdf}type`), namedNode(`${ns4}ConsumerLifestageCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-ALL_AGES`), namedNode(`${rdfs}label`), literal(`Suitable for All Ages`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-ALL_AGES`), namedNode(`${skos}prefLabel`), literal(`ALL_AGES`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-BABY_INFANT`), namedNode(`${rdf}type`), namedNode(`${ns4}ConsumerLifestageCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-BABY_INFANT`), namedNode(`${rdfs}label`), literal(`Suitable for Babies/Infants`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-BABY_INFANT`), namedNode(`${skos}prefLabel`), literal(`BABY_INFANT`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-CHILD_1_To_2_YEARS`), namedNode(`${rdf}type`), namedNode(`${ns4}ConsumerLifestageCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-CHILD_1_To_2_YEARS`), namedNode(`${rdfs}label`), literal(`Suitable for Children One to Two Years Old`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-CHILD_1_To_2_YEARS`), namedNode(`${skos}prefLabel`), literal(`CHILD_1_To_2_YEARS`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-CHILD_2_YEARS_ONWARDS`), namedNode(`${rdf}type`), namedNode(`${ns4}ConsumerLifestageCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-CHILD_2_YEARS_ONWARDS`), namedNode(`${rdfs}label`), literal(`Suitable for Children 2 Plus Years of Age`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-CHILD_2_YEARS_ONWARDS`), namedNode(`${skos}prefLabel`), literal(`CHILD_2_YEARS_ONWARDS`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-UNCLASSIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}ConsumerLifestageCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-UNCLASSIFIED`), namedNode(`${rdfs}label`), literal(`Unclassified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-UNCLASSIFIED`), namedNode(`${skos}prefLabel`), literal(`UNCLASSIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-UNIDENTIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}ConsumerLifestageCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-UNIDENTIFIED`), namedNode(`${rdfs}label`), literal(`Unidentified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerLifestageCode-UNIDENTIFIED`), namedNode(`${skos}prefLabel`), literal(`UNIDENTIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-BTC`), namedNode(`${rdf}type`), namedNode(`${ns4}ConsumerSalesConditionsCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-BTC`), namedNode(`${rdfs}comment`), literal(`Products that are sold without a prescription but must be distributed through a pharmacy.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-BTC`), namedNode(`${rdfs}label`), literal(`Behind the Counter`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-BTC`), namedNode(`${skos}prefLabel`), literal(`BTC`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns13}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:ConsumerSalesConditionCodeList&release=2`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode`), namedNode(`${rdfs}label`), literal(`Consumer Sales Conditions Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-OTC`), namedNode(`${rdf}type`), namedNode(`${ns4}ConsumerSalesConditionsCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-OTC`), namedNode(`${rdfs}comment`), literal(`Products that may be sold without a prescription. These products are generally available without restrictions.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-OTC`), namedNode(`${rdfs}label`), literal(`Over the Counter`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-OTC`), namedNode(`${skos}prefLabel`), literal(`OTC`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-PRESCRIPTION_REQUIRED`), namedNode(`${rdf}type`), namedNode(`${ns4}ConsumerSalesConditionsCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-PRESCRIPTION_REQUIRED`), namedNode(`${rdfs}comment`), literal(`Product may only be sold or dispensed under the direction of a prescription.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-PRESCRIPTION_REQUIRED`), namedNode(`${rdfs}label`), literal(`Prescription Required`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-PRESCRIPTION_REQUIRED`), namedNode(`${skos}prefLabel`), literal(`PRESCRIPTION_REQUIRED`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-RESTRICTED_TO_SELL_16`), namedNode(`${rdf}type`), namedNode(`${ns4}ConsumerSalesConditionsCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-RESTRICTED_TO_SELL_16`), namedNode(`${rdfs}comment`), literal(`Based upon legal regulatory restrictions it is illegal to sell the product to anyone under the age of 16 years old.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-RESTRICTED_TO_SELL_16`), namedNode(`${rdfs}label`), literal(`Restricted To Sell 16`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-RESTRICTED_TO_SELL_16`), namedNode(`${skos}prefLabel`), literal(`RESTRICTED_TO_SELL_16`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-RESTRICTED_TO_SELL_18`), namedNode(`${rdf}type`), namedNode(`${ns4}ConsumerSalesConditionsCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-RESTRICTED_TO_SELL_18`), namedNode(`${rdfs}comment`), literal(`Based upon legal regulatory restrictions it is illegal to sell the product to anyone under the age of 18 years old.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-RESTRICTED_TO_SELL_18`), namedNode(`${rdfs}label`), literal(`Restricted To Sell 18`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-RESTRICTED_TO_SELL_18`), namedNode(`${skos}prefLabel`), literal(`RESTRICTED_TO_SELL_18`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-RESTRICTED_TO_SELL_21`), namedNode(`${rdf}type`), namedNode(`${ns4}ConsumerSalesConditionsCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-RESTRICTED_TO_SELL_21`), namedNode(`${rdfs}comment`), literal(`Based upon legal regulatory restrictions it is illegal to sell the product to anyone under the age of 21 years old.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-RESTRICTED_TO_SELL_21`), namedNode(`${rdfs}label`), literal(`Restricted To Sell 21`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ConsumerSalesConditionsCode-RESTRICTED_TO_SELL_21`), namedNode(`${skos}prefLabel`), literal(`RESTRICTED_TO_SELL_21`), namedNode(ns4)),
        quad(namedNode(`${ns4}ContactPoint`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}ContactPoint`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}ContactPoint`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}ContactPoint`), namedNode(`${rdfs}comment`), literal(`Information on an individual or department acting as point of contact for an organiation.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ContactPoint`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}ContactPoint`), namedNode(`${rdfs}label`), literal(`Contact`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ContactPoint`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}ContactPoint`), namedNode(`${skos}exactMatch`), namedNode(`${schema}ContactPoint`), namedNode(ns4)),
        quad(namedNode(`${ns4}Country`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Country`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Country`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}Country`), namedNode(`${rdfs}comment`), literal(`Country is a complex data type that indicates a country and a country subdivision.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Country`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}Country`), namedNode(`${rdfs}label`), literal(`Country`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Country`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}Country`), namedNode(`${skos}exactMatch`), namedNode(`${schema}Country`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-COELIAC`), namedNode(`${rdf}type`), namedNode(`${ns4}DietTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-COELIAC`), namedNode(`${rdfs}comment`), literal(`Denotes a product that can be safely consumed by a person with coeliac disease. Coeliac disease is caused by a reaction to gladin (a gluten protein found in wheat) and similar proteins found in other crops.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-COELIAC`), namedNode(`${rdfs}label`), literal(`Coeliac`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-COELIAC`), namedNode(`${skos}prefLabel`), literal(`COELIAC`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode`), namedNode(`${rdfs}label`), literal(`Diet Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-DIETETIC`), namedNode(`${rdf}type`), namedNode(`${ns4}DietTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-DIETETIC`), namedNode(`${rdfs}comment`), literal(`Denotes a product that is specially prepared or processed for people on restrictive diets.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-DIETETIC`), namedNode(`${rdfs}label`), literal(`Dietetic`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-DIETETIC`), namedNode(`${skos}prefLabel`), literal(`DIETETIC`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-FREE_FROM_GLUTEN`), namedNode(`${rdf}type`), namedNode(`${ns4}DietTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-FREE_FROM_GLUTEN`), namedNode(`${rdfs}comment`), literal(`Denotes a product that can be used in a gluten free diet, as specified by the appropriate authority within a target market.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-FREE_FROM_GLUTEN`), namedNode(`${rdfs}label`), literal(`Free From Gluten`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-FREE_FROM_GLUTEN`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_GLUTEN`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-HALAL`), namedNode(`${rdf}type`), namedNode(`${ns4}DietTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-HALAL`), namedNode(`${rdfs}comment`), literal(`Denotes selling or serving food ritually fit according to Islamic dietary laws.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-HALAL`), namedNode(`${rdfs}label`), literal(`Halal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-HALAL`), namedNode(`${skos}prefLabel`), literal(`HALAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-KOSHER`), namedNode(`${rdf}type`), namedNode(`${ns4}DietTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-KOSHER`), namedNode(`${rdfs}comment`), literal(`Denotes selling or serving food ritually fit according to Jewish dietary laws.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-KOSHER`), namedNode(`${rdfs}label`), literal(`Kosher`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-KOSHER`), namedNode(`${skos}prefLabel`), literal(`KOSHER`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-ORGANIC`), namedNode(`${rdf}type`), namedNode(`${ns4}DietTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-ORGANIC`), namedNode(`${rdfs}comment`), literal(`Denotes a food product that was produced with the use of feed or fertiliser of plant or animal origin, without employment of chemically formulated fertilisers, growth stimulants, antibiotics or pesticides.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-ORGANIC`), namedNode(`${rdfs}label`), literal(`Organic`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-ORGANIC`), namedNode(`${skos}prefLabel`), literal(`ORGANIC`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-VEGAN`), namedNode(`${rdf}type`), namedNode(`${ns4}DietTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-VEGAN`), namedNode(`${rdfs}comment`), literal(`Denotes a food product which contains no animal food or dairy products.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-VEGAN`), namedNode(`${rdfs}label`), literal(`Vegan`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-VEGAN`), namedNode(`${skos}prefLabel`), literal(`VEGAN`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-VEGETARIAN`), namedNode(`${rdf}type`), namedNode(`${ns4}DietTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-VEGETARIAN`), namedNode(`${rdfs}comment`), literal(`Denotes a product that contains no meat, fish or other animal products.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-VEGETARIAN`), namedNode(`${rdfs}label`), literal(`Vegetarian`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-VEGETARIAN`), namedNode(`${skos}prefLabel`), literal(`VEGETARIAN`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-WITHOUT_BEEF`), namedNode(`${rdf}type`), namedNode(`${ns4}DietTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-WITHOUT_BEEF`), namedNode(`${rdfs}comment`), literal(`Denotes a product that contains no beef or beef-products. Beef is considered to be a taboo food product by some religions most notable Hinduism, Buddhism and Jainism.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-WITHOUT_BEEF`), namedNode(`${rdfs}label`), literal(`Without Beef`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-WITHOUT_BEEF`), namedNode(`${skos}prefLabel`), literal(`WITHOUT_BEEF`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-WITHOUT_PORK`), namedNode(`${rdf}type`), namedNode(`${ns4}DietTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-WITHOUT_PORK`), namedNode(`${rdfs}comment`), literal(`Denotes a product that contains no pork meat.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-WITHOUT_PORK`), namedNode(`${rdfs}label`), literal(`Without Pork`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCode-WITHOUT_PORK`), namedNode(`${skos}prefLabel`), literal(`WITHOUT_PORK`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCodeDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCodeDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCodeDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCodeDetails`), namedNode(`${rdfs}comment`), literal(`A set of diet type code details (diet type code and diet type sub code) for the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCodeDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCodeDetails`), namedNode(`${rdfs}label`), literal(`Diet Type Code Details`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DietTypeCodeDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}Discount`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Discount`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Discount`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}Discount`), namedNode(`${rdfs}comment`), literal(`Provides information on a discount applicable to an offer for example 2 percent.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Discount`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}Discount`), namedNode(`${rdfs}label`), literal(`Discount`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-BOGO`), namedNode(`${rdf}type`), namedNode(`${ns4}DiscountTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-BOGO`), namedNode(`${rdfs}comment`), literal(`Buy one item and get the second item free of charge`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-BOGO`), namedNode(`${rdfs}label`), literal(`BOGO`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-BOGO`), namedNode(`${skos}prefLabel`), literal(`BOGO`), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode`), namedNode(`${rdfs}label`), literal(`Discount Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-DISCOUNTED_ITEM`), namedNode(`${rdf}type`), namedNode(`${ns4}DiscountTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-DISCOUNTED_ITEM`), namedNode(`${rdfs}comment`), literal(`A discount on the item expressed as an amount (value and currency)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-DISCOUNTED_ITEM`), namedNode(`${rdfs}label`), literal(`Discounted Item`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-DISCOUNTED_ITEM`), namedNode(`${skos}prefLabel`), literal(`DISCOUNTED_ITEM`), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-FREE_GIFT`), namedNode(`${rdf}type`), namedNode(`${ns4}DiscountTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-FREE_GIFT`), namedNode(`${rdfs}comment`), literal(`A gift given to a consumer as part of a promotional contingent on the consumer making a purchase of another item or items.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-FREE_GIFT`), namedNode(`${rdfs}label`), literal(`Free Gift`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-FREE_GIFT`), namedNode(`${skos}prefLabel`), literal(`FREE_GIFT`), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-FREE_SHIPPING`), namedNode(`${rdf}type`), namedNode(`${ns4}DiscountTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-FREE_SHIPPING`), namedNode(`${rdfs}comment`), literal(`No charge for shipping.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-FREE_SHIPPING`), namedNode(`${rdfs}label`), literal(`Free Shipping`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-FREE_SHIPPING`), namedNode(`${skos}prefLabel`), literal(`FREE_SHIPPING`), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-OTHER`), namedNode(`${rdf}type`), namedNode(`${ns4}DiscountTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-OTHER`), namedNode(`${rdfs}comment`), literal(`A discount other than the ones on this list.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-OTHER`), namedNode(`${rdfs}label`), literal(`Other`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-OTHER`), namedNode(`${skos}prefLabel`), literal(`OTHER`), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-PERCENTAGE_OFF`), namedNode(`${rdf}type`), namedNode(`${ns4}DiscountTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-PERCENTAGE_OFF`), namedNode(`${rdfs}comment`), literal(`A percentage off the product price.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-PERCENTAGE_OFF`), namedNode(`${rdfs}label`), literal(`Percentage Off`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}DiscountTypeCode-PERCENTAGE_OFF`), namedNode(`${skos}prefLabel`), literal(`PERCENTAGE_OFF`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodAndBeveragePreparationInformation`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodAndBeveragePreparationInformation`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodAndBeveragePreparationInformation`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodAndBeveragePreparationInformation`), namedNode(`${rdfs}comment`), literal(`Food and Beverage Preparation Information is a complex data type that indicates a preparation state code and preparation instructions.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodAndBeveragePreparationInformation`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodAndBeveragePreparationInformation`), namedNode(`${rdfs}label`), literal(`Food and Beverage Preparation Information`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodAndBeveragePreparationInformation`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageRefrigerationClaimCode-CAN_BE_REFRIGERATED`), namedNode(`${rdf}type`), namedNode(`${ns4}FoodBeverageRefrigerationClaimCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageRefrigerationClaimCode-CAN_BE_REFRIGERATED`), namedNode(`${rdfs}label`), literal(`Can Be Refrigerated.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageRefrigerationClaimCode-CAN_BE_REFRIGERATED`), namedNode(`${skos}prefLabel`), literal(`CAN_BE_REFRIGERATED`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageRefrigerationClaimCode`), namedNode(`${rdfs}label`), literal(`Food Beverage Refrigeration Claim Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageRefrigerationClaimCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageRefrigerationClaimCode-MUST_BE_REFRIGERATED`), namedNode(`${rdf}type`), namedNode(`${ns4}FoodBeverageRefrigerationClaimCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageRefrigerationClaimCode-MUST_BE_REFRIGERATED`), namedNode(`${rdfs}label`), literal(`Must Be Refrigerated.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageRefrigerationClaimCode-MUST_BE_REFRIGERATED`), namedNode(`${skos}prefLabel`), literal(`MUST_BE_REFRIGERATED`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageRefrigerationClaimCode-SHELF_STABLE`), namedNode(`${rdf}type`), namedNode(`${ns4}FoodBeverageRefrigerationClaimCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageRefrigerationClaimCode-SHELF_STABLE`), namedNode(`${rdfs}label`), literal(`Shelf Stable.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageRefrigerationClaimCode-SHELF_STABLE`), namedNode(`${skos}prefLabel`), literal(`SHELF_STABLE`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageRefrigerationClaimCode-UNIDENTIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}FoodBeverageRefrigerationClaimCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageRefrigerationClaimCode-UNIDENTIFIED`), namedNode(`${rdfs}label`), literal(`Unidentified.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageRefrigerationClaimCode-UNIDENTIFIED`), namedNode(`${skos}prefLabel`), literal(`UNIDENTIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-ANY_MEAL`), namedNode(`${rdf}type`), namedNode(`${ns4}FoodBeverageTargetUseCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-ANY_MEAL`), namedNode(`${rdfs}label`), literal(`Any Meal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-ANY_MEAL`), namedNode(`${skos}prefLabel`), literal(`ANY_MEAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode`), namedNode(`${rdfs}label`), literal(`Food Beverage Target Use Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-BREAKFAST`), namedNode(`${rdf}type`), namedNode(`${ns4}FoodBeverageTargetUseCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-BREAKFAST`), namedNode(`${rdfs}label`), literal(`Breakfast`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-BREAKFAST`), namedNode(`${skos}prefLabel`), literal(`BREAKFAST`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-MAIN_MEAL`), namedNode(`${rdf}type`), namedNode(`${ns4}FoodBeverageTargetUseCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-MAIN_MEAL`), namedNode(`${rdfs}label`), literal(`Main Meal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-MAIN_MEAL`), namedNode(`${skos}prefLabel`), literal(`MAIN_MEAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-PORTABLE_MEAL`), namedNode(`${rdf}type`), namedNode(`${ns4}FoodBeverageTargetUseCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-PORTABLE_MEAL`), namedNode(`${rdfs}label`), literal(`Portable Meal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-PORTABLE_MEAL`), namedNode(`${skos}prefLabel`), literal(`PORTABLE_MEAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-SNACK`), namedNode(`${rdf}type`), namedNode(`${ns4}FoodBeverageTargetUseCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-SNACK`), namedNode(`${rdfs}label`), literal(`Snack`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-SNACK`), namedNode(`${skos}prefLabel`), literal(`SNACK`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-UNCLASSIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}FoodBeverageTargetUseCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-UNCLASSIFIED`), namedNode(`${rdfs}label`), literal(`Unclassified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTargetUseCode-UNCLASSIFIED`), namedNode(`${skos}prefLabel`), literal(`UNCLASSIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTobaccoIngredientDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTobaccoIngredientDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTobaccoIngredientDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTobaccoIngredientDetails`), namedNode(`${rdfs}comment`), literal(`Food Beverage Tobacco Ingredient is a complex data type that includes an ingredient statement and details.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTobaccoIngredientDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTobaccoIngredientDetails`), namedNode(`${rdfs}label`), literal(`Food Beverage Tobacco Ingredient`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FoodBeverageTobaccoIngredientDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}Product`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Product`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Product`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}Product`), namedNode(`${rdfs}comment`), literal(`Any item (product or service) upon which there is a need to retrieve pre-defined information and that may be priced, or ordered, or invoiced at any point in any supply chain.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Product`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}Product`), namedNode(`${rdfs}label`), literal(`Product`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Product`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}Product`), namedNode(`${skos}exactMatch`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}Footwear`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Footwear`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Footwear`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}Footwear`), namedNode(`${rdfs}comment`), literal(` Outerwear that is worn on the feet such as shoes or boots.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Footwear`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}Footwear`), namedNode(`${rdfs}label`), literal(`Footwear`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Footwear`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}WearableProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-MULTIPLE_FASTENING`), namedNode(`${rdf}type`), namedNode(`${ns4}FootwearFasteningTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-MULTIPLE_FASTENING`), namedNode(`${rdfs}label`), literal(`Multiple Fastenings`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-MULTIPLE_FASTENING`), namedNode(`${skos}prefLabel`), literal(`MULTIPLE_FASTENING`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode`), namedNode(`${rdfs}label`), literal(`Footwear Fastening Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-SHOE_LACE`), namedNode(`${rdf}type`), namedNode(`${ns4}FootwearFasteningTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-SHOE_LACE`), namedNode(`${rdfs}label`), literal(`Shoe Lace`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-SHOE_LACE`), namedNode(`${skos}prefLabel`), literal(`SHOE_LACE`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-SLIP_ON_WITHOUT_ELASTIC`), namedNode(`${rdf}type`), namedNode(`${ns4}FootwearFasteningTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-SLIP_ON_WITHOUT_ELASTIC`), namedNode(`${rdfs}label`), literal(`Slip On Without Elastic`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-SLIP_ON_WITHOUT_ELASTIC`), namedNode(`${skos}prefLabel`), literal(`SLIP_ON_WITHOUT_ELASTIC`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-SLIP_ON_WITH_ELASTIC`), namedNode(`${rdf}type`), namedNode(`${ns4}FootwearFasteningTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-SLIP_ON_WITH_ELASTIC`), namedNode(`${rdfs}label`), literal(`Slip On With Elastic`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-SLIP_ON_WITH_ELASTIC`), namedNode(`${skos}prefLabel`), literal(`SLIP_ON_WITH_ELASTIC`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-STRAP`), namedNode(`${rdf}type`), namedNode(`${ns4}FootwearFasteningTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-STRAP`), namedNode(`${rdfs}label`), literal(`Strap`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-STRAP`), namedNode(`${skos}prefLabel`), literal(`STRAP`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-UNCLASSIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}FootwearFasteningTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-UNCLASSIFIED`), namedNode(`${rdfs}label`), literal(`Unclassified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-UNCLASSIFIED`), namedNode(`${skos}prefLabel`), literal(`UNCLASSIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-UNIDENTIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}FootwearFasteningTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-UNIDENTIFIED`), namedNode(`${rdfs}label`), literal(`Unidentified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-UNIDENTIFIED`), namedNode(`${skos}prefLabel`), literal(`UNIDENTIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-VELCRO`), namedNode(`${rdf}type`), namedNode(`${ns4}FootwearFasteningTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-VELCRO`), namedNode(`${rdfs}label`), literal(`Velcro`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FootwearFasteningTypeCode-VELCRO`), namedNode(`${skos}prefLabel`), literal(`VELCRO`), namedNode(ns4)),
        quad(namedNode(`${ns4}FreshOrSeawaterFarmedCode-FRESHWATER_FARMED`), namedNode(`${rdf}type`), namedNode(`${ns4}FreshOrSeawaterFarmedCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FreshOrSeawaterFarmedCode-FRESHWATER_FARMED`), namedNode(`${rdfs}label`), literal(`Freshwater Farmed`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FreshOrSeawaterFarmedCode-FRESHWATER_FARMED`), namedNode(`${skos}prefLabel`), literal(`FRESHWATER_FARMED`), namedNode(ns4)),
        quad(namedNode(`${ns4}FreshOrSeawaterFarmedCode`), namedNode(`${rdfs}label`), literal(`Fresh Or Seawater Farmed Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FreshOrSeawaterFarmedCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FreshOrSeawaterFarmedCode-SEAWATER_FARMED`), namedNode(`${rdf}type`), namedNode(`${ns4}FreshOrSeawaterFarmedCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FreshOrSeawaterFarmedCode-SEAWATER_FARMED`), namedNode(`${rdfs}label`), literal(`Seawater Farmed`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FreshOrSeawaterFarmedCode-SEAWATER_FARMED`), namedNode(`${skos}prefLabel`), literal(`SEAWATER_FARMED`), namedNode(ns4)),
        quad(namedNode(`${ns4}FreshOrSeawaterFarmedCode-UNCLASSIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}FreshOrSeawaterFarmedCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FreshOrSeawaterFarmedCode-UNCLASSIFIED`), namedNode(`${rdfs}label`), literal(`Unclassified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FreshOrSeawaterFarmedCode-UNCLASSIFIED`), namedNode(`${skos}prefLabel`), literal(`UNCLASSIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}FreshOrSeawaterFarmedCode-UNIDENTIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}FreshOrSeawaterFarmedCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}FreshOrSeawaterFarmedCode-UNIDENTIFIED`), namedNode(`${rdfs}label`), literal(`Unidentified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FreshOrSeawaterFarmedCode-UNIDENTIFIED`), namedNode(`${skos}prefLabel`), literal(`UNIDENTIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}FruitsVegetables`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}FruitsVegetables`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}FruitsVegetables`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}FruitsVegetables`), namedNode(`${rdfs}comment`), literal(`Contains properties related specifically to fruit and vegetable products.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FruitsVegetables`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}FruitsVegetables`), namedNode(`${rdfs}label`), literal(`Fruits and Vegetables`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}FruitsVegetables`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}GeoCoordinates`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}GeoCoordinates`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}GeoCoordinates`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}GeoCoordinates`), namedNode(`${rdfs}comment`), literal(`The geographic coordinates of a place or event.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GeoCoordinates`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}GeoCoordinates`), namedNode(`${rdfs}label`), literal(`GeoCoordinates`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GeoCoordinates`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}GeoCoordinates`), namedNode(`${skos}exactMatch`), namedNode(`${schema}GeoCoordinates`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-CAGE_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-CAGE_FREE`), namedNode(`${rdfs}comment`), literal(`Animal is not confined to a cage.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-CAGE_FREE`), namedNode(`${rdfs}label`), literal(`Cage Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-CAGE_FREE`), namedNode(`${skos}prefLabel`), literal(`CAGE_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:GrowingMethodCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode`), namedNode(`${rdfs}label`), literal(`Growing Method Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-CLONED_FOODS`), namedNode(`${rdf}type`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-CLONED_FOODS`), namedNode(`${rdfs}comment`), literal(`Product is a result of genetic engineering.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-CLONED_FOODS`), namedNode(`${rdfs}label`), literal(`Cloned Food`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-CLONED_FOODS`), namedNode(`${skos}prefLabel`), literal(`CLONED_FOODS`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-CONVENTIONAL`), namedNode(`${rdf}type`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-CONVENTIONAL`), namedNode(`${rdfs}comment`), literal(`Foods grown non-organically, either indoors or outdoors without any special processes.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-CONVENTIONAL`), namedNode(`${rdfs}label`), literal(`Conventional`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-CONVENTIONAL`), namedNode(`${skos}prefLabel`), literal(`CONVENTIONAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-FARM_RAISED`), namedNode(`${rdf}type`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-FARM_RAISED`), namedNode(`${rdfs}comment`), literal(`Animal is raised on a farm.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-FARM_RAISED`), namedNode(`${rdfs}label`), literal(`Farm Raised`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-FARM_RAISED`), namedNode(`${skos}prefLabel`), literal(`FARM_RAISED`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-FIELD_GROWN`), namedNode(`${rdf}type`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-FIELD_GROWN`), namedNode(`${rdfs}comment`), literal(`Plants Grown Outdoors`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-FIELD_GROWN`), namedNode(`${rdfs}label`), literal(`Field Grown`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-FIELD_GROWN`), namedNode(`${skos}prefLabel`), literal(`FIELD_GROWN`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-FLY_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-FLY_FREE`), namedNode(`${rdfs}comment`), literal(`Citrus Grown in an area certified to be free of all Caribbean Fruit Flies based on trappings`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-FLY_FREE`), namedNode(`${rdfs}label`), literal(`Fly Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-FLY_FREE`), namedNode(`${skos}prefLabel`), literal(`FLY_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-FREE_RANGE`), namedNode(`${rdf}type`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-FREE_RANGE`), namedNode(`${rdfs}comment`), literal(`A method that animals are allowed to roam with little restriction to their movements.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-FREE_RANGE`), namedNode(`${rdfs}label`), literal(`Free Range`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-FREE_RANGE`), namedNode(`${skos}prefLabel`), literal(`FREE_RANGE`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-GRASS_FED`), namedNode(`${rdf}type`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-GRASS_FED`), namedNode(`${rdfs}comment`), literal(`Animal is predominately fed grass or forage.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-GRASS_FED`), namedNode(`${rdfs}label`), literal(`Grass Fed`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-GRASS_FED`), namedNode(`${skos}prefLabel`), literal(`GRASS_FED`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-GREENHOUSE`), namedNode(`${rdf}type`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-GREENHOUSE`), namedNode(`${rdfs}comment`), literal(`Plants that are grown and cultivated in an indoor covered place.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-GREENHOUSE`), namedNode(`${rdfs}label`), literal(`Greenhouse`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-GREENHOUSE`), namedNode(`${skos}prefLabel`), literal(`GREENHOUSE`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-HUMANELY_RAISED`), namedNode(`${rdf}type`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-HUMANELY_RAISED`), namedNode(`${rdfs}comment`), literal(`A process where animals are raised such that the welfare of the animal is a foremost concern.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-HUMANELY_RAISED`), namedNode(`${rdfs}label`), literal(`Humanely Raised`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-HUMANELY_RAISED`), namedNode(`${skos}prefLabel`), literal(`HUMANELY_RAISED`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-HYDROPONIC`), namedNode(`${rdf}type`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-HYDROPONIC`), namedNode(`${rdfs}comment`), literal(`Plants grown using mineral nutrient solutions instead of soil.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-HYDROPONIC`), namedNode(`${rdfs}label`), literal(`Hydroponic`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-HYDROPONIC`), namedNode(`${skos}prefLabel`), literal(`HYDROPONIC`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-INTEGRATED_PEST_MANAGEMENT`), namedNode(`${rdf}type`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-INTEGRATED_PEST_MANAGEMENT`), namedNode(`${rdfs}comment`), literal(`(IPM) Plants grown using a pest control strategy that uses an array of complimentary methods: mechanical devices, physical devices, genetic, biological, legal, cultural management and chemical management. These methods are done in three stages: prevention, observation, and intervention. It is an ecological approach with a main goal of significantly reducing or eliminating the use of pesticides.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-INTEGRATED_PEST_MANAGEMENT`), namedNode(`${rdfs}label`), literal(`Integrated Pest Management`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-INTEGRATED_PEST_MANAGEMENT`), namedNode(`${skos}prefLabel`), literal(`INTEGRATED_PEST_MANAGEMENT`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-ORGANIC`), namedNode(`${rdf}type`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-ORGANIC`), namedNode(`${rdfs}comment`), literal(`Foods grown organically, either indoors or outdoors.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-ORGANIC`), namedNode(`${rdfs}label`), literal(`Organic`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-ORGANIC`), namedNode(`${skos}prefLabel`), literal(`ORGANIC`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-SHADE_GROWN`), namedNode(`${rdf}type`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-SHADE_GROWN`), namedNode(`${rdfs}comment`), literal(`Produce which has been grown under shade or grown under cloth.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-SHADE_GROWN`), namedNode(`${rdfs}label`), literal(`Shade Grown`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-SHADE_GROWN`), namedNode(`${skos}prefLabel`), literal(`SHADE_GROWN`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-SUSTAINABLE`), namedNode(`${rdf}type`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-SUSTAINABLE`), namedNode(`${rdfs}label`), literal(`Sustainable`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-SUSTAINABLE`), namedNode(`${skos}prefLabel`), literal(`SUSTAINABLE`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-SUSTAINABLE`), namedNode(`${rdfs}comemnt`), literal(`A method of growing a resource so that the resource is not depleted or permanently damaged`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-WILD`), namedNode(`${rdf}type`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-WILD`), namedNode(`${rdfs}comment`), literal(`The animal or plant was not inhibited or prohibited from roving, wandering, and not tamed or domesticated.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-WILD`), namedNode(`${rdfs}label`), literal(`Wild`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}GrowingMethodCode-WILD`), namedNode(`${skos}prefLabel`), literal(`WILD`), namedNode(ns4)),
        quad(namedNode(`${ns4}LevelOfContainmentCode-CONTAINS`), namedNode(`${rdf}type`), namedNode(`${ns4}LevelOfContainmentCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}LevelOfContainmentCode-CONTAINS`), namedNode(`${rdfs}comment`), literal(`Intentionally included in the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}LevelOfContainmentCode-CONTAINS`), namedNode(`${rdfs}label`), literal(`Contains`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}LevelOfContainmentCode-CONTAINS`), namedNode(`${skos}prefLabel`), literal(`CONTAINS`), namedNode(ns4)),
        quad(namedNode(`${ns4}LevelOfContainmentCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns13}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:LevelOfContainmentCodeList&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}LevelOfContainmentCode`), namedNode(`${rdfs}label`), literal(`Level Of Containment Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}LevelOfContainmentCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}LevelOfContainmentCode-FREE_FROM`), namedNode(`${rdf}type`), namedNode(`${ns4}LevelOfContainmentCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}LevelOfContainmentCode-FREE_FROM`), namedNode(`${rdfs}comment`), literal(`The product is free from the indicated substance.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}LevelOfContainmentCode-FREE_FROM`), namedNode(`${rdfs}label`), literal(`Free From`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}LevelOfContainmentCode-FREE_FROM`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM`), namedNode(ns4)),
        quad(namedNode(`${ns4}LevelOfContainmentCode-MAY_CONTAIN`), namedNode(`${rdf}type`), namedNode(`${ns4}LevelOfContainmentCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}LevelOfContainmentCode-MAY_CONTAIN`), namedNode(`${rdfs}comment`), literal(`The substance is not intentionally included, but due to shared production facilities or other reasons, the product may contain the substance.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}LevelOfContainmentCode-MAY_CONTAIN`), namedNode(`${rdfs}label`), literal(`May Contain`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}LevelOfContainmentCode-MAY_CONTAIN`), namedNode(`${skos}prefLabel`), literal(`MAY_CONTAIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}MaturationMethodCode-JET_FRESH`), namedNode(`${rdf}type`), namedNode(`${ns4}MaturationMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}MaturationMethodCode-JET_FRESH`), namedNode(`${rdfs}comment`), literal(`Freshly picked and immediately packed and shipped at mature stage and flown to destination for adequate distribution (i.e. imports from South America, Africa or Europe). Flown by jet to market; the carton will be labelled Jet Fresh, when applicable, stickered Jet Fresh. For the produce industry, most common with berries, stone fruits and pineapples.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MaturationMethodCode-JET_FRESH`), namedNode(`${rdfs}label`), literal(`Jet Fresh`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MaturationMethodCode-JET_FRESH`), namedNode(`${skos}prefLabel`), literal(`JET_FRESH`), namedNode(ns4)),
        quad(namedNode(`${ns4}MaturationMethodCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:MaturationMethodCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}MaturationMethodCode`), namedNode(`${rdfs}label`), literal(`Maturation Method Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MaturationMethodCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}MaturationMethodCode-PRECONDITIONED`), namedNode(`${rdf}type`), namedNode(`${ns4}MaturationMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}MaturationMethodCode-PRECONDITIONED`), namedNode(`${rdfs}comment`), literal(`Product stored at proper temperature prior to shipment to allow ripening and/or colouring, adequate for distribution and/or consumption. Pre-conditioned product is matured to a specific maturity level as a result of ripening through either temperature, gas treatment, humidity or any combination thereof.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MaturationMethodCode-PRECONDITIONED`), namedNode(`${rdfs}label`), literal(`Preconditioned`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MaturationMethodCode-PRECONDITIONED`), namedNode(`${skos}prefLabel`), literal(`PRECONDITIONED`), namedNode(ns4)),
        quad(namedNode(`${ns4}MaturationMethodCode-TREE_VINE_RIPE`), namedNode(`${rdf}type`), namedNode(`${ns4}MaturationMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}MaturationMethodCode-TREE_VINE_RIPE`), namedNode(`${rdfs}comment`), literal(`Product that is picked at optimum maturity or just shy of. It is almost ripe or ready to eat. This fruit will be shipped immediately (imported = flown) from the pack-house and stickered as Tree or Vine Ripe.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MaturationMethodCode-TREE_VINE_RIPE`), namedNode(`${rdfs}label`), literal(`Tree Vine Ripe`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MaturationMethodCode-TREE_VINE_RIPE`), namedNode(`${skos}prefLabel`), literal(`TREE_VINE_RIPE`), namedNode(ns4)),
        quad(namedNode(`${ns4}MeasurementPrecisionCode-APPROXIMATELY`), namedNode(`${rdf}type`), namedNode(`${ns4}MeasurementPrecisionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}MeasurementPrecisionCode-APPROXIMATELY`), namedNode(`${rdfs}comment`), literal(`The method used to analyse the products resulted in approximate value of the nutritional content.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MeasurementPrecisionCode-APPROXIMATELY`), namedNode(`${rdfs}label`), literal(`Approximately`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MeasurementPrecisionCode-APPROXIMATELY`), namedNode(`${skos}prefLabel`), literal(`APPROXIMATELY`), namedNode(ns4)),
        quad(namedNode(`${ns4}MeasurementPrecisionCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:MeasurementPrecisionCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}MeasurementPrecisionCode`), namedNode(`${rdfs}label`), literal(`Measurement Precision Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MeasurementPrecisionCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}MeasurementPrecisionCode-EXACT`), namedNode(`${rdf}type`), namedNode(`${ns4}MeasurementPrecisionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}MeasurementPrecisionCode-EXACT`), namedNode(`${rdfs}comment`), literal(`The method used to analyse the products resulted in exact value of the nutritional content.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MeasurementPrecisionCode-EXACT`), namedNode(`${rdfs}label`), literal(`Exact`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MeasurementPrecisionCode-EXACT`), namedNode(`${skos}prefLabel`), literal(`EXACT`), namedNode(ns4)),
        quad(namedNode(`${ns4}MeasurementPrecisionCode-LESS_THAN`), namedNode(`${rdf}type`), namedNode(`${ns4}MeasurementPrecisionTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}MeasurementPrecisionCode-LESS_THAN`), namedNode(`${rdfs}comment`), literal(`To indicate presence when the measurement value is too small to be measured precisely (rule states less than 0.5).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MeasurementPrecisionCode-LESS_THAN`), namedNode(`${rdfs}label`), literal(`Less Than`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MeasurementPrecisionCode-LESS_THAN`), namedNode(`${skos}prefLabel`), literal(`LESS_THAN`), namedNode(ns4)),
        quad(namedNode(`${ns4}MeatPoultry`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}MeatPoultry`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}MeatPoultry`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}MeatPoultry`), namedNode(`${rdfs}comment`), literal(`Meat and poultry products.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MeatPoultry`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}MeatPoultry`), namedNode(`${rdfs}label`), literal(`Meat Poultry`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MeatPoultry`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}MilkButterCreamYogurtCheeseEggsSubstitutes`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}MilkButterCreamYogurtCheeseEggsSubstitutes`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}MilkButterCreamYogurtCheeseEggsSubstitutes`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}MilkButterCreamYogurtCheeseEggsSubstitutes`), namedNode(`${rdfs}comment`), literal(`Milk butter cream yogurts cheese eggs and any substitutes for these products.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MilkButterCreamYogurtCheeseEggsSubstitutes`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}MilkButterCreamYogurtCheeseEggsSubstitutes`), namedNode(`${rdfs}label`), literal(`Milk Butter Cream Yogurt Cheese Eggs Substitutes`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}MilkButterCreamYogurtCheeseEggsSubstitutes`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}NonbinaryLogicCode-FALSE`), namedNode(`${rdf}type`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NonbinaryLogicCode-FALSE`), namedNode(`${rdfs}label`), literal(`False`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NonbinaryLogicCode-FALSE`), namedNode(`${skos}prefLabel`), literal(`FALSE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NonbinaryLogicCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:NonBinaryLogicEnumeration&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}NonbinaryLogicCode`), namedNode(`${rdfs}label`), literal(`Nonbinary Logic Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NonbinaryLogicCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NonbinaryLogicCode-NOT_APPLICABLE`), namedNode(`${rdf}type`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NonbinaryLogicCode-NOT_APPLICABLE`), namedNode(`${rdfs}label`), literal(`Not Applicable`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NonbinaryLogicCode-NOT_APPLICABLE`), namedNode(`${skos}prefLabel`), literal(`NOT_APPLICABLE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NonbinaryLogicCode-TRUE`), namedNode(`${rdf}type`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NonbinaryLogicCode-TRUE`), namedNode(`${rdfs}label`), literal(`True`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NonbinaryLogicCode-TRUE`), namedNode(`${skos}prefLabel`), literal(`TRUE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NonbinaryLogicCode-UNSPECIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NonbinaryLogicCode-UNSPECIFIED`), namedNode(`${rdfs}label`), literal(`Unspecified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NonbinaryLogicCode-UNSPECIFIED`), namedNode(`${skos}prefLabel`), literal(`UNSPECIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutrientBasisQuantityCode-BY_MEASURE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutrientBasisQuantityCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutrientBasisQuantityCode-BY_MEASURE`), namedNode(`${rdfs}comment`), literal(`Nutrient measurement is based on a measurement value for example grams or ounces.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutrientBasisQuantityCode-BY_MEASURE`), namedNode(`${rdfs}label`), literal(`By Measure`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutrientBasisQuantityCode-BY_MEASURE`), namedNode(`${skos}prefLabel`), literal(`BY_MEASURE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutrientBasisQuantityCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:NutrientBasisQuantityTypeCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutrientBasisQuantityCode`), namedNode(`${rdfs}label`), literal(`Nutrient Basis Quantity Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutrientBasisQuantityCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutrientBasisQuantityCode-BY_SERVING`), namedNode(`${rdf}type`), namedNode(`${ns4}NutrientBasisQuantityCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutrientBasisQuantityCode-BY_SERVING`), namedNode(`${rdfs}comment`), literal(`Nutrient measurement is based on a specified serving amount.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutrientBasisQuantityCode-BY_SERVING`), namedNode(`${rdfs}label`), literal(`By Serving`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutrientBasisQuantityCode-BY_SERVING`), namedNode(`${skos}prefLabel`), literal(`BY_SERVING`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionMeasurementType`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionMeasurementType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionMeasurementType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionMeasurementType`), namedNode(`${rdfs}comment`), literal(`A class providing nutritional value and intake percent.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionMeasurementType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionMeasurementType`), namedNode(`${rdfs}label`), literal(`Nutrition Measurement Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionMeasurementType`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}QuantitativeValue`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}QuantitativeValue`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}QuantitativeValue`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}QuantitativeValue`), namedNode(`${rdfs}comment`), literal(`A point value or interval for product characteristics and other purposes. A unit of measurement is also specified.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}QuantitativeValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}QuantitativeValue`), namedNode(`${rdfs}label`), literal(`Measurement Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}QuantitativeValue`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}QuantitativeValue`), namedNode(`${skos}exactMatch`), namedNode(`${gr}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}QuantitativeValue`), namedNode(`${skos}exactMatch`), namedNode(`${schema}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ADDITIVE_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ADDITIVE_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is free from additives. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ADDITIVE_FREE`), namedNode(`${rdfs}label`), literal(`Additive Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ADDITIVE_FREE`), namedNode(`${skos}prefLabel`), literal(`ADDITIVE_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:NutritionalClaimTypeCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(`${rdfs}label`), literal(`Nutritional Claim Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ARTIFICIALLY_SWEETENED`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ARTIFICIALLY_SWEETENED`), namedNode(`${rdfs}comment`), literal(`A claim that a food contains artificial sweeteners. Artificial sweeteners are sugar substitutes that are synthetic.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ARTIFICIALLY_SWEETENED`), namedNode(`${rdfs}label`), literal(`Artificially Sweetened`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ARTIFICIALLY_SWEETENED`), namedNode(`${skos}prefLabel`), literal(`ARTIFICIALLY_SWEETENED`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-CHOLESTEROL_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-CHOLESTEROL_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is free from Cholesterol. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-CHOLESTEROL_FREE`), namedNode(`${rdfs}label`), literal(`Cholesterol Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-CHOLESTEROL_FREE`), namedNode(`${skos}prefLabel`), literal(`CHOLESTEROL_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-COLOURING_AGENT_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-COLOURING_AGENT_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is free from colouring agents. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-COLOURING_AGENT_FREE`), namedNode(`${rdfs}label`), literal(`Colouring Agent Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-COLOURING_AGENT_FREE`), namedNode(`${skos}prefLabel`), literal(`COLOURING_AGENT_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-CONTAINS_GLYZYRRHIZIN`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-CONTAINS_GLYZYRRHIZIN`), namedNode(`${rdfs}comment`), literal(`A claim that a food contains glyzyrrhizin. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-CONTAINS_GLYZYRRHIZIN`), namedNode(`${rdfs}label`), literal(`Contains Glyzyrrhizin`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-CONTAINS_GLYZYRRHIZIN`), namedNode(`${skos}prefLabel`), literal(`CONTAINS_GLYZYRRHIZIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-CONTAINS_LIQUORICE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-CONTAINS_LIQUORICE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is contains liquorice. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-CONTAINS_LIQUORICE`), namedNode(`${rdfs}label`), literal(`Contains Liquorice`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-CONTAINS_LIQUORICE`), namedNode(`${skos}prefLabel`), literal(`CONTAINS_LIQUORICE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-CONTAINS_SOY`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-CONTAINS_SOY`), namedNode(`${rdfs}comment`), literal(`A claim that a food contains soy. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-CONTAINS_SOY`), namedNode(`${rdfs}label`), literal(`Contains Soy`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-CONTAINS_SOY`), namedNode(`${skos}prefLabel`), literal(`CONTAINS_SOY`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-EGG_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-EGG_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is free from egg. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-EGG_FREE`), namedNode(`${rdfs}label`), literal(`Egg Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-EGG_FREE`), namedNode(`${skos}prefLabel`), literal(`EGG_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ENERGY_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ENERGY_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is energy-free, and any claim likely to have the same meaning for the consumer, may only be made where the product contains less than 4kcal (17kj)/100ml. In the case of energy-free foods, the term naturally may be used as a prefix to this claim.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ENERGY_FREE`), namedNode(`${rdfs}label`), literal(`Energy Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ENERGY_FREE`), namedNode(`${skos}prefLabel`), literal(`ENERGY_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ENERGY_REDUCED`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ENERGY_REDUCED`), namedNode(`${rdfs}comment`), literal(`A claim that a food is energy-reduced, and any claim likely to have the same meaning for the consumer, may only be made where the energy value is reduced by at least 30%, with an indication of the characteristic(s), which make(s) the food reduced in its total energy value.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ENERGY_REDUCED`), namedNode(`${rdfs}label`), literal(`Energy Reduced`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ENERGY_REDUCED`), namedNode(`${skos}prefLabel`), literal(`ENERGY_REDUCED`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ENRICHED_OR_FORTIFIED_IN_VITAMINS_AND_OR_MINERALS`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ENRICHED_OR_FORTIFIED_IN_VITAMINS_AND_OR_MINERALS`), namedNode(`${rdfs}comment`), literal(`A claim that a food is enriched or fortified in vitamins and/or minerals, and any claim likely to have the same meaning for the consumer, may only be made where the product contains the vitamins and/or minerals in at least a significant amount as defined in the Annex of Directive 90/496/EEC.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ENRICHED_OR_FORTIFIED_IN_VITAMINS_AND_OR_MINERALS`), namedNode(`${rdfs}label`), literal(`Enriched or Fortified in Vitamins Minerals`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-ENRICHED_OR_FORTIFIED_IN_VITAMINS_AND_OR_MINERALS`), namedNode(`${skos}prefLabel`), literal(`ENRICHED_OR_FORTIFIED_IN_VITAMINS_AND_OR_MINERALS`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-FAT_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-FAT_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is fat-free, and any claim likely to have the same meaning for the consumer, may only be made where the product contains no more than 0.5g of fat per 100g or 100ml. However, claims expressed as X% fat-free shall be prohibited. In the case of foods naturally fat-free, the term naturally may be used as a prefix to this claim.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-FAT_FREE`), namedNode(`${rdfs}label`), literal(`Fat Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-FAT_FREE`), namedNode(`${skos}prefLabel`), literal(`FAT_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-FREE_FROM_GLUTEN`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-FREE_FROM_GLUTEN`), namedNode(`${rdfs}comment`), literal(`A claim that a food is free from Gluten. Any claim likely to have the same meaning for the consumer, may only be made where the product contains an amount less than or equal to 20 mg/kg gluten according to the Commission Regulation (EC) No 41/2009`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-FREE_FROM_GLUTEN`), namedNode(`${rdfs}label`), literal(`Free From Gluten`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-FREE_FROM_GLUTEN`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_GLUTEN`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-GUARANTEED_LACTOSE_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-GUARANTEED_LACTOSE_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is regularly analysed to guarantee that the product is free from lactose.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-GUARANTEED_LACTOSE_FREE`), namedNode(`${rdfs}label`), literal(`Guarantee Lactose Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-GUARANTEED_LACTOSE_FREE`), namedNode(`${skos}prefLabel`), literal(`GUARANTEED_LACTOSE_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-HIGH_FIBRE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-HIGH_FIBRE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is high in fibre, and any claim likely to have the same meaning for the consumer, may only be made where the product contains at least 6g of fibre per 100g or at least 3g of fibre per 100 kcal. In the case of foods naturally high in fibre, the term naturally may be used as a prefix to this claim.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-HIGH_FIBRE`), namedNode(`${rdfs}label`), literal(`High Fibre`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-HIGH_FIBRE`), namedNode(`${skos}prefLabel`), literal(`HIGH_FIBRE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-HIGH_PROTEIN`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-HIGH_PROTEIN`), namedNode(`${rdfs}comment`), literal(`A claim that a food is high in protein, and any claim likely to have the same meaning for the consumer, may only be made where at least 20% of the energy value of the food is provided by protein. In the case of foods naturally high in protein, the term naturally may be used as a prefix to this claim.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-HIGH_PROTEIN`), namedNode(`${rdfs}label`), literal(`High Protein`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-HIGH_PROTEIN`), namedNode(`${skos}prefLabel`), literal(`HIGH_PROTEIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-HIGH_VITAMINS_AND_OR_MINERALS`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-HIGH_VITAMINS_AND_OR_MINERALS`), namedNode(`${rdfs}comment`), literal(`A claim that a food is high in vitamins and or minerals, and any claim likely to have the same meaning for the consumer, may only be made where the product contains at least twice the value of source of vitamins and minerals. In case of foods naturally high in vitamins and/or minerals, the term naturally may be used as a prefix to this claim.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-HIGH_VITAMINS_AND_OR_MINERALS`), namedNode(`${rdfs}label`), literal(`High in Vitamins Minerals`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-HIGH_VITAMINS_AND_OR_MINERALS`), namedNode(`${skos}prefLabel`), literal(`HIGH_VITAMINS_AND_OR_MINERALS`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LACTOSE_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LACTOSE_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is free of lactose. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LACTOSE_FREE`), namedNode(`${rdfs}label`), literal(`Lactose Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LACTOSE_FREE`), namedNode(`${skos}prefLabel`), literal(`LACTOSE_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LIGHT_LITE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LIGHT_LITE`), namedNode(`${rdfs}comment`), literal(`A claim stating that a product is light or lite, and any claim likely to have the same meaning for the consumer, shall follow the same conditions as those set for the term reduced; the claim shall also be accompanied by an indication of the characteristic(s) which make the food light or lite.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LIGHT_LITE`), namedNode(`${rdfs}label`), literal(`Light or Lite`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LIGHT_LITE`), namedNode(`${skos}prefLabel`), literal(`LIGHT_LITE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_ENERGY`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_ENERGY`), namedNode(`${rdfs}comment`), literal(`A claim that a food is low in energy, and any claim likely to have the same meaning for the consumer, may only be made where the product contains less than 40 kcal (170 kj)/100g and less than 20kcal (80kj)/100ml. In the case of foods naturally low in energy, the term naturally may be used as a prefix to this claim.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_ENERGY`), namedNode(`${rdfs}label`), literal(`Low Energy`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_ENERGY`), namedNode(`${skos}prefLabel`), literal(`LOW_ENERGY`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_FAT`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_FAT`), namedNode(`${rdfs}comment`), literal(`A claim that a food is low in fat, and any claim likely to have the same meaning for the consumer, may only be made where the product contains no more than 3g of fat per 100g or 1.5g of fat per 100ml. In the case of foods naturally low in fat, the term naturally may be used as a prefix to this claim.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_FAT`), namedNode(`${rdfs}label`), literal(`Low in Fat`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_FAT`), namedNode(`${skos}prefLabel`), literal(`LOW_FAT`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_LACTOSE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_LACTOSE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is low in lactose. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_LACTOSE`), namedNode(`${rdfs}label`), literal(`Low in Lactose`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_LACTOSE`), namedNode(`${skos}prefLabel`), literal(`LOW_LACTOSE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_PROTEIN`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_PROTEIN`), namedNode(`${rdfs}comment`), literal(`A claim that a food contains low levels of protein. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_PROTEIN`), namedNode(`${rdfs}label`), literal(`Low Protein`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_PROTEIN`), namedNode(`${skos}prefLabel`), literal(`LOW_PROTEIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_SATURATED_FAT`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_SATURATED_FAT`), namedNode(`${rdfs}comment`), literal(`A claim that a food is low in saturated fat, and any claim likely to have the same meaning for the consumer, may only be made where the product contains no more than 1.5g of saturates per 100g for solids or, 0.75g of saturates per 100ml for liquids and in either case saturated fat must not provide more than 10% of energy. In the case of foods naturally low in saturated fat, the term naturally may be used as a prefix to this claim.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_SATURATED_FAT`), namedNode(`${rdfs}label`), literal(`Low in Saturated Fat`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_SATURATED_FAT`), namedNode(`${skos}prefLabel`), literal(`LOW_SATURATED_FAT`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_SODIUM_SALT`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_SODIUM_SALT`), namedNode(`${rdfs}comment`), literal(`A claim that a food is low in sodium, and any claim likely to have the same meaning for the consumer, may only be made where the product contains no more than 0.12g of sodium, or the equivalent value for salt, per 100g or per 100ml. In the case of foods naturally low in sodium, the term naturally may be used as a prefix to this claim.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_SODIUM_SALT`), namedNode(`${rdfs}label`), literal(`Low in Sodium`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_SODIUM_SALT`), namedNode(`${skos}prefLabel`), literal(`LOW_SODIUM_SALT`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_SUGARS`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_SUGARS`), namedNode(`${rdfs}comment`), literal(`A claim that a food is low in sugars, and any claim likely to have the same meaning for the consumer, may only be made where the product contains no more than 5g of sugars per 100g or 100ml. In the case of foods naturally low in sugars, the term naturally may be used as a prefix to this claim.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_SUGARS`), namedNode(`${rdfs}label`), literal(`Low in sugars`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-LOW_SUGARS`), namedNode(`${skos}prefLabel`), literal(`LOW_SUGARS`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-MILK_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-MILK_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is free from milk. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-MILK_FREE`), namedNode(`${rdfs}label`), literal(`Milk Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-MILK_FREE`), namedNode(`${skos}prefLabel`), literal(`MILK_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-MILK_PROTEIN_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-MILK_PROTEIN_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is free from milk proteins. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-MILK_PROTEIN_FREE`), namedNode(`${rdfs}label`), literal(`Milk Protein Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-MILK_PROTEIN_FREE`), namedNode(`${skos}prefLabel`), literal(`MILK_PROTEIN_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-NATURAL_SOURCE_OF_VITAMINS_AND_OR_MINERALS`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-NATURAL_SOURCE_OF_VITAMINS_AND_OR_MINERALS`), namedNode(`${rdfs}comment`), literal(`A claim that a food is a natural source of vitamins and/or minerals, and any claim likely to have the same meaning for the consumer, may only be made where the product contains at least 15% of the recommended daily allowance specified in the Annex of Council Directive 90/496/EEC per 100 g or 100 ml.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-NATURAL_SOURCE_OF_VITAMINS_AND_OR_MINERALS`), namedNode(`${rdfs}label`), literal(`Natural Source of Vitamins Minerals`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-NATURAL_SOURCE_OF_VITAMINS_AND_OR_MINERALS`), namedNode(`${skos}prefLabel`), literal(`NATURAL_SOURCE_OF_VITAMINS_AND_OR_MINERALS`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-NON_ALCOHOLIC`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-NON_ALCOHOLIC`), namedNode(`${rdfs}comment`), literal(`A claim that a food contains no alcohol. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-NON_ALCOHOLIC`), namedNode(`${rdfs}label`), literal(`Non-alcoholic`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-NON_ALCOHOLIC`), namedNode(`${skos}prefLabel`), literal(`NON_ALCOHOLIC`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-NUT_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-NUT_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is free from nuts. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-NUT_FREE`), namedNode(`${rdfs}label`), literal(`Nut Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-NUT_FREE`), namedNode(`${skos}prefLabel`), literal(`NUT_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-PEANUT_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-PEANUT_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is free from peanuts. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-PEANUT_FREE`), namedNode(`${rdfs}label`), literal(`Peanut Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-PEANUT_FREE`), namedNode(`${skos}prefLabel`), literal(`PEANUT_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-PRESERVATIVE_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-PRESERVATIVE_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is free from preservatives. A preservative is a natural or synthetic substance or chemical that is added to products to prevent decomposition by microbial growth or by undesirable chemical changes. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-PRESERVATIVE_FREE`), namedNode(`${rdfs}label`), literal(`Preservative Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-PRESERVATIVE_FREE`), namedNode(`${skos}prefLabel`), literal(`PRESERVATIVE_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SATURATED_FAT_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SATURATED_FAT_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food does not contain saturated fat, and any claim likely to have the same meaning for the consumer, may only be made where the product contains no more than 0.1g of saturated fat per 100g or 100ml. In the case of foods naturally saturated fat-free, the term naturally may be used as a prefix to this claim.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SATURATED_FAT_FREE`), namedNode(`${rdfs}label`), literal(`Saturated Fat Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SATURATED_FAT_FREE`), namedNode(`${skos}prefLabel`), literal(`SATURATED_FAT_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SODIUM_FREE_OR_SALT_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SODIUM_FREE_OR_SALT_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is sodium-free, and any claim likely to have the same meaning for the consumer, may only be made where the product contains no more than 0.005g of sodium, or the equivalent value for salt, per 100g. In the case of foods naturally sodium-free, the term naturally may be used as a prefix to this claim.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SODIUM_FREE_OR_SALT_FREE`), namedNode(`${rdfs}label`), literal(`Sodium of Salt Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SODIUM_FREE_OR_SALT_FREE`), namedNode(`${skos}prefLabel`), literal(`SODIUM_FREE_OR_SALT_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SOURCE_OF_FIBRE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SOURCE_OF_FIBRE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is a source of fibre, and any claim likely to have the same meaning for the consumer, may only be made where the product contains at least 3g of fibre per 100g or at least 1.5g of fibre per 100kcal. In the case of foods that are naturally sources of fibre, the term naturally may be used as a prefix to this claim.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SOURCE_OF_FIBRE`), namedNode(`${rdfs}label`), literal(`Source of Fibre`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SOURCE_OF_FIBRE`), namedNode(`${skos}prefLabel`), literal(`SOURCE_OF_FIBRE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SOURCE_OF_PROTEIN`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SOURCE_OF_PROTEIN`), namedNode(`${rdfs}comment`), literal(`A claim that a food is a source of protein, and any claim likely to have the same meaning for the consumer, may only be made where at least 12% of the energy value of the food is provided by protein. In the case of foods that are naturally sources of protein, the term naturally may be used as a prefix to this claim.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SOURCE_OF_PROTEIN`), namedNode(`${rdfs}label`), literal(`Source of Protein`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SOURCE_OF_PROTEIN`), namedNode(`${skos}prefLabel`), literal(`SOURCE_OF_PROTEIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SOY_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SOY_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is free from Soy. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SOY_FREE`), namedNode(`${rdfs}label`), literal(`Soy Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SOY_FREE`), namedNode(`${skos}prefLabel`), literal(`SOY_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-STRONGLY_SALTED`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-STRONGLY_SALTED`), namedNode(`${rdfs}comment`), literal(`A claim that a food has a high sodium content. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-STRONGLY_SALTED`), namedNode(`${rdfs}label`), literal(`Strongly Salted`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-STRONGLY_SALTED`), namedNode(`${skos}prefLabel`), literal(`STRONGLY_SALTED`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SUGARS_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SUGARS_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is sugars-free, and any claim likely to have the same meaning for the consumer, may only be made where the product contains no more than 0.5g of sugars per 100g or 100ml. In the case of foods naturally sugars-free, the term naturally may be used as a prefix to this claim.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SUGARS_FREE`), namedNode(`${rdfs}label`), literal(`Sugar Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SUGARS_FREE`), namedNode(`${skos}prefLabel`), literal(`SUGARS_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_AGAVE_SYRUP`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_AGAVE_SYRUP`), namedNode(`${rdfs}comment`), literal(`A claim that a food is sweetened with syrup from the Agave plant.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_AGAVE_SYRUP`), namedNode(`${rdfs}label`), literal(`Sweetened With Agave Syrup`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_AGAVE_SYRUP`), namedNode(`${skos}prefLabel`), literal(`SWEETENED_WITH_AGAVE_SYRUP`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_CANE_SUGAR`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_CANE_SUGAR`), namedNode(`${rdfs}comment`), literal(`A claim that a food is sweetened with sugar from sugar cane.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_CANE_SUGAR`), namedNode(`${rdfs}label`), literal(`Sweetened With Came Sugar`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_CANE_SUGAR`), namedNode(`${skos}prefLabel`), literal(`SWEETENED_WITH_CANE_SUGAR`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_CORN_SYRUP`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_CORN_SYRUP`), namedNode(`${rdfs}comment`), literal(`A claim that a food is sweetened with corn syrup.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_CORN_SYRUP`), namedNode(`${rdfs}label`), literal(`Sweetened With Corn Syrup`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_CORN_SYRUP`), namedNode(`${skos}prefLabel`), literal(`SWEETENED_WITH_CORN_SYRUP`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_FRUCTOSE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_FRUCTOSE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is sweetened with fructose.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_FRUCTOSE`), namedNode(`${rdfs}label`), literal(`Sweetened With Fructose`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_FRUCTOSE`), namedNode(`${skos}prefLabel`), literal(`SWEETENED_WITH_FRUCTOSE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_FRUIT_JUICE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_FRUIT_JUICE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is sweetened with fruit juice.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_FRUIT_JUICE`), namedNode(`${rdfs}label`), literal(`Sweetened With Fruit Juice`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_FRUIT_JUICE`), namedNode(`${skos}prefLabel`), literal(`SWEETENED_WITH_FRUIT_JUICE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_FRUIT_SYRUP`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_FRUIT_SYRUP`), namedNode(`${rdfs}comment`), literal(`A claim that a food is sweetened with fruit syrup. Fruit syrup is made from fruit and other ingredients such as sugar, corn syrup and water.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_FRUIT_SYRUP`), namedNode(`${rdfs}label`), literal(`Sweetened With Fruit Syrup`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_FRUIT_SYRUP`), namedNode(`${skos}prefLabel`), literal(`SWEETENED_WITH_FRUIT_SYRUP`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_HONEY`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_HONEY`), namedNode(`${rdfs}comment`), literal(`A claim that a food is sweetened with honey.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_HONEY`), namedNode(`${rdfs}label`), literal(`Sweetened With Honey`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_HONEY`), namedNode(`${skos}prefLabel`), literal(`SWEETENED_WITH_HONEY`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_MALT`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_MALT`), namedNode(`${rdfs}comment`), literal(`A claim that a food is sweetened with malt.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_MALT`), namedNode(`${rdfs}label`), literal(`Sweetened With Malt`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_MALT`), namedNode(`${skos}prefLabel`), literal(`SWEETENED_WITH_MALT`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_RAW_BEET_SUGAR`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_RAW_BEET_SUGAR`), namedNode(`${rdfs}comment`), literal(`A claim that a food is sweetened with raw sugar derived from the sugar beet.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_RAW_BEET_SUGAR`), namedNode(`${rdfs}label`), literal(`Sweetened With Raw Beet Sugar`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_RAW_BEET_SUGAR`), namedNode(`${skos}prefLabel`), literal(`SWEETENED_WITH_RAW_BEET_SUGAR`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_WHITE_SUGAR`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_WHITE_SUGAR`), namedNode(`${rdfs}comment`), literal(`A claim that a food is sweetened with white sugar. White or granulated sugar is refined sugar (pure white crystalline sucrose) ground to granules or grains.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_WHITE_SUGAR`), namedNode(`${rdfs}label`), literal(`Sweetened With White Sugar`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-SWEETENED_WITH_WHITE_SUGAR`), namedNode(`${skos}prefLabel`), literal(`SWEETENED_WITH_WHITE_SUGAR`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-VERY_LOW_GLUTEN`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-VERY_LOW_GLUTEN`), namedNode(`${rdfs}comment`), literal(`A claim that a food contains a low level of gluten which is defined as 21 - 100 mg/kg gluten according to the Commission Regulation (EC) No 41/2009`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-VERY_LOW_GLUTEN`), namedNode(`${rdfs}label`), literal(`Very Low Gluten`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-VERY_LOW_GLUTEN`), namedNode(`${skos}prefLabel`), literal(`VERY_LOW_GLUTEN`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-VERY_LOW_SODIUM_SALT`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-VERY_LOW_SODIUM_SALT`), namedNode(`${rdfs}comment`), literal(`A claim that a food is very low in sodium, and any claim likely to have the same meaning for the consumer, may only be made where the product contains no more than 0.04g of sodium, or the equivalent value for salt, per 100g or per 100 ml. In the case of foods naturally very low in sodium, the term naturally may be used as a prefix to this claim.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-VERY_LOW_SODIUM_SALT`), namedNode(`${rdfs}label`), literal(`Very Low in Sodium Salt`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-VERY_LOW_SODIUM_SALT`), namedNode(`${skos}prefLabel`), literal(`VERY_LOW_SODIUM_SALT`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-WHEAT_FREE`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-WHEAT_FREE`), namedNode(`${rdfs}comment`), literal(`A claim that a food is free from wheat. Note the amount that determines containment or lack of containment is based on target market regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-WHEAT_FREE`), namedNode(`${rdfs}label`), literal(`Wheat Free`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-WHEAT_FREE`), namedNode(`${skos}prefLabel`), literal(`WHEAT_FREE`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-WITH_NO_ADDED_SUGARS`), namedNode(`${rdf}type`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-WITH_NO_ADDED_SUGARS`), namedNode(`${rdfs}comment`), literal(`A claim stating that sugar has not been added to a food, and any claim likely to have the same meaning for the consumer, may only be made where the product does not contain any added mono- or disaccharides or any other food used for its sweetening properties.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-WITH_NO_ADDED_SUGARS`), namedNode(`${rdfs}label`), literal(`No Added Sugar`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}NutritionalClaimTypeCode-WITH_NO_ADDED_SUGARS`), namedNode(`${skos}prefLabel`), literal(`WITH_NO_ADDED_SUGARS`), namedNode(ns4)),
        quad(namedNode(`${ns4}Offer`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Offer`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Offer`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}Offer`), namedNode(`${rdfs}comment`), literal(`An offer to transfer some rights to an item or to provide a service,for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Offer`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}Offer`), namedNode(`${rdfs}label`), literal(`Offer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Offer`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}Offer`), namedNode(`${skos}exactMatch`), namedNode(`${schema}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-COUPON_CODE`), namedNode(`${rdf}type`), namedNode(`${ns4}OfferRedemptionTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-COUPON_CODE`), namedNode(`${rdfs}comment`), literal(`Offer available as a code that can be entered to redeem the coupon or voucher.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-COUPON_CODE`), namedNode(`${rdfs}label`), literal(`Coupon Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-COUPON_CODE`), namedNode(`${skos}prefLabel`), literal(`COUPON_CODE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode`), namedNode(`${rdfs}label`), literal(`Offer Redemption Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-GIFT_CARD`), namedNode(`${rdf}type`), namedNode(`${ns4}OfferRedemptionTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-GIFT_CARD`), namedNode(`${rdfs}comment`), literal(`A prepaid stored-value money card.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-GIFT_CARD`), namedNode(`${rdfs}label`), literal(`Gift Card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-GIFT_CARD`), namedNode(`${skos}prefLabel`), literal(`GIFT_CARD`), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-REBATE`), namedNode(`${rdf}type`), namedNode(`${ns4}OfferRedemptionTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-REBATE`), namedNode(`${rdfs}comment`), literal(`A partial refund upon purchase of a product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-REBATE`), namedNode(`${rdfs}label`), literal(`Rebate`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-REBATE`), namedNode(`${skos}prefLabel`), literal(`REBATE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-SALE`), namedNode(`${rdf}type`), namedNode(`${ns4}OfferRedemptionTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-SALE`), namedNode(`${rdfs}comment`), literal(`Offer available as a reduced sales price on a product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-SALE`), namedNode(`${rdfs}label`), literal(`Sale`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-SALE`), namedNode(`${skos}prefLabel`), literal(`SALE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-SINGLE_USE_CODE`), namedNode(`${rdf}type`), namedNode(`${ns4}OfferRedemptionTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-SINGLE_USE_CODE`), namedNode(`${rdfs}comment`), literal(`Offer available as a code that can be entered once to redeem the coupon.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-SINGLE_USE_CODE`), namedNode(`${rdfs}label`), literal(`Single Use Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OfferRedemptionTypeCode-SINGLE_USE_CODE`), namedNode(`${skos}prefLabel`), literal(`SINGLE_USE_CODE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-BFA`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-BFA`), namedNode(`${rdfs}comment`), literal(`Biological Farmers of Australia`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-BFA`), namedNode(`${rdfs}label`), literal(`Biological Farmers of Australia`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-BFA`), namedNode(`${skos}prefLabel`), literal(`BFA`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:OrganicClaimAgencyCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(`${rdfs}label`), literal(`Organic Claim Agency Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-BIOLAND`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-BIOLAND`), namedNode(`${rdfs}comment`), literal(`Bioland: The leading organic farmers' association in Germany for the economy of organic-based businesses without synthetic pesticides and synthetic chemical nitrogen fertilizer. The animals are kept humanely and processed food carefully. This provides an environmentally sound and sustainable food production. http://www.bioland.de.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-BIOLAND`), namedNode(`${rdfs}label`), literal(`Bioland`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-BIOLAND`), namedNode(`${skos}prefLabel`), literal(`BIOLAND`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-DEMETER_BUND`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-DEMETER_BUND`), namedNode(`${rdfs}comment`), literal(`The Demeter movement as an entrepreneurial network promotes the development of bio-dynamic economy, to secure the livelihoods of the world and to strengthen the positive people in his ministry. In cooperation contribute producers, processors, traders and consumers in partnership to shape the market.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-DEMETER_BUND`), namedNode(`${rdfs}label`), literal(`Demeter-Bund`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-DEMETER_BUND`), namedNode(`${skos}prefLabel`), literal(`DEMETER_BUND`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-DEMETER_INTERNATIONAL`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-DEMETER_INTERNATIONAL`), namedNode(`${rdfs}comment`), literal(`Demeter International Demeter-International e. V. is a non profit organisation and its member organisations work together in the spirit of an international confederation with democratic principles. Membership requires a functioning Demeter certification programme. Same as GS1 Code 16`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-DEMETER_INTERNATIONAL`), namedNode(`${rdfs}label`), literal(`Demeter International`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-DEMETER_INTERNATIONAL`), namedNode(`${skos}prefLabel`), literal(`DEMETER_INTERNATIONAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-ECOLAND`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-ECOLAND`), namedNode(`${rdfs}comment`), literal(`Ecoland is a membership organisation whose members elect a governing Board which is responsible for the design and implementation of the organic certification system.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-ECOLAND`), namedNode(`${rdfs}label`), literal(`Ecoland`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-ECOLAND`), namedNode(`${skos}prefLabel`), literal(`ECOLAND`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-ECOVIN`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-ECOVIN`), namedNode(`${rdfs}comment`), literal(`ECOVIN Federation Organic Viticulture Association: ECOVIN largest merger in 1985 as ecologically-working wine estates in Germany was founded. Approximately 220 member companies currently manage 1,600 hectares of vineyards in 11 German wine-growing areas. Same as GS1 code 14`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-ECOVIN`), namedNode(`${rdfs}label`), literal(`Ecovin`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-ECOVIN`), namedNode(`${skos}prefLabel`), literal(`ECOVIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-EPA`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-EPA`), namedNode(`${rdfs}comment`), literal(`US Environmental Protection Agency. Same as GS1 Code 1`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-EPA`), namedNode(`${rdfs}label`), literal(`US Environmental Protection Agency`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-EPA`), namedNode(`${skos}prefLabel`), literal(`EPA`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-FDA`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-FDA`), namedNode(`${rdfs}comment`), literal(`FDA US Food and Drug Agency`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-FDA`), namedNode(`${rdfs}label`), literal(`FDA US Food and Drug Agency`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-FDA`), namedNode(`${skos}prefLabel`), literal(`FDA`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-FSA`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-FSA`), namedNode(`${rdfs}comment`), literal(`UK Food Standards Agency`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-FSA`), namedNode(`${rdfs}label`), literal(`FSA`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-FSA`), namedNode(`${skos}prefLabel`), literal(`FSA`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-GAA`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-GAA`), namedNode(`${rdfs}comment`), literal(`GAA is a diverse farming association for farmers, processors and traders inside.Focal point is Germany. GAA is a special design for the structure of the organic farming. Biokreis- The Biokreis is an association for organic farming. Currently more than 800 farms, 80 and 200 processors, consumers are members of Biokreis, committed to working together on more than 33,000 for organic and sustainable farming.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-GAA`), namedNode(`${rdfs}label`), literal(`GAA`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-GAA`), namedNode(`${skos}prefLabel`), literal(`GAA`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-IFOA`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-IFOA`), namedNode(`${rdfs}comment`), literal(`International Foundation for Organic Agriculture`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-IFOA`), namedNode(`${rdfs}label`), literal(`International Foundation for Organic Agriculture`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-IFOA`), namedNode(`${skos}prefLabel`), literal(`IFOA`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-IFOAM`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-IFOAM`), namedNode(`${rdfs}comment`), literal(`The International Federation of Organic Agriculture Movements (IFOAM) is a grassroots and democratic organization that currently unites 750 member organizations in 116 countries. Same as GS1 code 15`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-IFOAM`), namedNode(`${rdfs}label`), literal(`International Federation of Organic Agriculture Movements.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-IFOAM`), namedNode(`${skos}prefLabel`), literal(`IFOAM`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-NATURLAND`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-NATURLAND`), namedNode(`${rdfs}comment`), literal(`Naturland - Naturland is active the world over in promoting organic agriculture. Its members are farmers who produce a wide range of valuable products: coffee from Mexico and Peru, olive oil from Greece, tea from the slopes of India's mountains, pineapple and other tropical fruit from Uganda, spices from Sri Lanka. Organic agriculture safeguards the existence of smallholders and helps with the sustainable management of what are often fragile ecosystems. On a global scale, over 50,000 Naturland farmers are cultivating an area of over 142,000 hectares.Same as GS1 Code 12`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-NATURLAND`), namedNode(`${rdfs}label`), literal(`Naturland`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-NATURLAND`), namedNode(`${skos}prefLabel`), literal(`NATURLAND`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-QAI`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-QAI`), namedNode(`${rdfs}comment`), literal(`Quality Assurance International. QAI is a leading USDA-accredited organic product certifying agency.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-QAI`), namedNode(`${rdfs}label`), literal(`Quality Assurance International`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-QAI`), namedNode(`${skos}prefLabel`), literal(`QAI`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-SUDITIROL`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-SUDITIROL`), namedNode(`${rdfs}comment`), literal(`Bioland Association of South Tyrol The Association of South Tyrol is the largest organic association for organic farmers having to farmers in South Tyrol and the only active in association with a national association office Terlan.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-SUDITIROL`), namedNode(`${rdfs}label`), literal(`Sudtirol Bioland`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-SUDITIROL`), namedNode(`${skos}prefLabel`), literal(`SUDITIROL`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-USDA`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-USDA`), namedNode(`${rdfs}comment`), literal(`US Department of Agriculture.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-USDA`), namedNode(`${rdfs}label`), literal(`US Department of Agriculture`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimAgencyCode-USDA`), namedNode(`${skos}prefLabel`), literal(`USDA`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimDetails`), namedNode(`${rdfs}comment`), literal(`A set of organic claim details for the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimDetails`), namedNode(`${rdfs}label`), literal(`Organic Claim Details`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganicClaimDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}Organization`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Organization`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Organization`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}Organization`), namedNode(`${rdfs}comment`), literal(`An Organization is any legal or physical entity involved at any point in any supply chain and upon which there is a need to retrieve predefined information. An Organization is uniquely identified by a Global Location Number (GLN).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Organization`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}Organization`), namedNode(`${rdfs}label`), literal(`Organization`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Organization`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}Organization`), namedNode(`${skos}exactMatch`), namedNode(`${schema}Organization`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-ACCEPTING_PARTY`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-ACCEPTING_PARTY`), namedNode(`${rdfs}comment`), literal(`Organization accepting goods, products, services etc.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-ACCEPTING_PARTY`), namedNode(`${rdfs}label`), literal(`Accepting Organization`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-ACCEPTING_PARTY`), namedNode(`${skos}prefLabel`), literal(`ACCEPTING_PARTY`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:PartyRoleCode&release=2`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType`), namedNode(`${rdfs}label`), literal(`Organization Role Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BILL_OF_LADING_RECIPIENT`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BILL_OF_LADING_RECIPIENT`), namedNode(`${rdfs}comment`), literal(`Organization to receive Bill of Lading.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BILL_OF_LADING_RECIPIENT`), namedNode(`${rdfs}label`), literal(`Bill of Lading Recipient`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BILL_OF_LADING_RECIPIENT`), namedNode(`${skos}prefLabel`), literal(`BILL_OF_LADING_RECIPIENT`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BILL_TO`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BILL_TO`), namedNode(`${rdfs}comment`), literal(`Organization which receives goods and invoice.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BILL_TO`), namedNode(`${rdfs}label`), literal(`Bill To`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BILL_TO`), namedNode(`${skos}prefLabel`), literal(`BILL_TO`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BRAND_OWNER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BRAND_OWNER`), namedNode(`${rdfs}comment`), literal(`The organisation that owns the specifications of the Organization regardless of where and by whom it is manufactured is normally responsible for the allocation of the Global Trade Item Number (GTIN).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BRAND_OWNER`), namedNode(`${rdfs}label`), literal(`Brand Owner`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BRAND_OWNER`), namedNode(`${skos}prefLabel`), literal(`BRAND_OWNER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BREEDER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BREEDER`), namedNode(`${rdfs}comment`), literal(`The organization which breeds the animal.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BREEDER`), namedNode(`${rdfs}label`), literal(`Breeder`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BREEDER`), namedNode(`${skos}prefLabel`), literal(`BREEDER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BROKER_AGENT`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BROKER_AGENT`), namedNode(`${rdfs}comment`), literal(`A person who buys or sells for another entity without having title to the property.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BROKER_AGENT`), namedNode(`${rdfs}label`), literal(`Broker Agent`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BROKER_AGENT`), namedNode(`${skos}prefLabel`), literal(`BROKER_AGENT`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BUYER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BUYER`), namedNode(`${rdfs}comment`), literal(`Organization to which merchandise are sold.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BUYER`), namedNode(`${rdfs}label`), literal(`Buyer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BUYER`), namedNode(`${skos}prefLabel`), literal(`BUYER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BUYERS_AGENT_REPRESENTATIVE`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BUYERS_AGENT_REPRESENTATIVE`), namedNode(`${rdfs}comment`), literal(`Third party who arranged the purchase of merchandise on behalf of the actual buyer.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BUYERS_AGENT_REPRESENTATIVE`), namedNode(`${rdfs}label`), literal(`Buyers Agent Representative`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-BUYERS_AGENT_REPRESENTATIVE`), namedNode(`${skos}prefLabel`), literal(`BUYERS_AGENT_REPRESENTATIVE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CARRIER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CARRIER`), namedNode(`${rdfs}comment`), literal(`A company, which physically transports goods from one place to another.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CARRIER`), namedNode(`${rdfs}label`), literal(`Carrier`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CARRIER`), namedNode(`${skos}prefLabel`), literal(`CARRIER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CENTRAL_PAYMENT_SERVICE`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CENTRAL_PAYMENT_SERVICE`), namedNode(`${rdfs}comment`), literal(`Master of the conveyance. An organization providing central (or consolidated payment) services.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CENTRAL_PAYMENT_SERVICE`), namedNode(`${rdfs}label`), literal(`Central Payment Service`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CENTRAL_PAYMENT_SERVICE`), namedNode(`${skos}prefLabel`), literal(`CENTRAL_PAYMENT_SERVICE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CHECKING_PARTY`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CHECKING_PARTY`), namedNode(`${rdfs}comment`), literal(`Organization or contact designated on behalf of carrier or his agent to establish the actual figures for quantities, weight, volume and/or (cube) measurements of goods or containers which are to appear in the transport contract and on which charges will be based`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CHECKING_PARTY`), namedNode(`${rdfs}label`), literal(`Checking Organization`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CHECKING_PARTY`), namedNode(`${skos}prefLabel`), literal(`CHECKING_PARTY`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CHEQUE_ORDER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CHEQUE_ORDER`), namedNode(`${rdfs}comment`), literal(`Organization to which the cheque will be ordered, when different from the beneficiary.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CHEQUE_ORDER`), namedNode(`${rdfs}label`), literal(`Cheque Order`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CHEQUE_ORDER`), namedNode(`${skos}prefLabel`), literal(`CHEQUE_ORDER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CONSIGNEE`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CONSIGNEE`), namedNode(`${rdfs}comment`), literal(`Organization to which goods are consigned.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CONSIGNEE`), namedNode(`${rdfs}label`), literal(`Consignee.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CONSIGNEE`), namedNode(`${skos}prefLabel`), literal(`CONSIGNEE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CONSOLIDATOR`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CONSOLIDATOR`), namedNode(`${rdfs}comment`), literal(`Organization consolidating various consignments, payments etc.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CONSOLIDATOR`), namedNode(`${rdfs}label`), literal(`Consolidator`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CONSOLIDATOR`), namedNode(`${skos}prefLabel`), literal(`CONSOLIDATOR`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CONSUMER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CONSUMER`), namedNode(`${rdfs}comment`), literal(`The end user of a product or a service.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CONSUMER`), namedNode(`${rdfs}label`), literal(`Consumer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CONSUMER`), namedNode(`${skos}prefLabel`), literal(`CONSUMER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CORPORATE_IDENTITY`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CORPORATE_IDENTITY`), namedNode(`${rdfs}comment`), literal(`Identity of the organization to whom all other parties of the same commercial organization are linked.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CORPORATE_IDENTITY`), namedNode(`${rdfs}label`), literal(`Corporate Identity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CORPORATE_IDENTITY`), namedNode(`${skos}prefLabel`), literal(`CORPORATE_IDENTITY`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CUSTOMS`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CUSTOMS`), namedNode(`${rdfs}comment`), literal(`Identification of customs authority relevant to the transaction or shipment.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CUSTOMS`), namedNode(`${rdfs}label`), literal(`Customs`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CUSTOMS`), namedNode(`${skos}prefLabel`), literal(`CUSTOMS`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CUSTOMS_BROKER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CUSTOMS_BROKER`), namedNode(`${rdfs}comment`), literal(`Organization responsible for the preparation of documents and/or electronic submissions, the calculation on behalf of the client of taxes, duties and excises, and facilitating communication between the importer/exporter and governmental authorities.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CUSTOMS_BROKER`), namedNode(`${rdfs}label`), literal(`Customs Broker`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CUSTOMS_BROKER`), namedNode(`${skos}prefLabel`), literal(`CUSTOMS_BROKER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CUTTER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CUTTER`), namedNode(`${rdfs}comment`), literal(`One engaged in carving meat (In EANCOM as Meat Cutter).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CUTTER`), namedNode(`${rdfs}label`), literal(`Cutter`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-CUTTER`), namedNode(`${skos}prefLabel`), literal(`CUTTER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DECLARANTS_AGENT_REPRESENTATIVE`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DECLARANTS_AGENT_REPRESENTATIVE`), namedNode(`${rdfs}comment`), literal(`Any natural or legal person who makes a declaration to an official body on behalf of another natural or legal person, where legally permitted (CCC).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DECLARANTS_AGENT_REPRESENTATIVE`), namedNode(`${rdfs}label`), literal(`Declarants Agent Representative`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DECLARANTS_AGENT_REPRESENTATIVE`), namedNode(`${skos}prefLabel`), literal(`DECLARANTS_AGENT_REPRESENTATIVE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DELIVERY_PARTY`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DELIVERY_PARTY`), namedNode(`${rdfs}comment`), literal(`Organization to which goods are delivered.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DELIVERY_PARTY`), namedNode(`${rdfs}label`), literal(`Delivery Organization`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DELIVERY_PARTY`), namedNode(`${skos}prefLabel`), literal(`DELIVERY_PARTY`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DESIGNER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DESIGNER`), namedNode(`${rdfs}comment`), literal(`A Organization who designs.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DESIGNER`), namedNode(`${rdfs}label`), literal(`Designer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DESIGNER`), namedNode(`${skos}prefLabel`), literal(`DESIGNER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DESPATCH_PARTY`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DESPATCH_PARTY`), namedNode(`${rdfs}comment`), literal(`Organization where goods are collected or taken over by the carrier.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DESPATCH_PARTY`), namedNode(`${rdfs}label`), literal(`Despatch Organization`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DESPATCH_PARTY`), namedNode(`${skos}prefLabel`), literal(`DESPATCH_PARTY`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DISTRIBUTOR`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DISTRIBUTOR`), namedNode(`${rdfs}comment`), literal(`Organization distributing goods, financial payments or documents.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DISTRIBUTOR`), namedNode(`${rdfs}label`), literal(`Distributor`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DISTRIBUTOR`), namedNode(`${skos}prefLabel`), literal(`DISTRIBUTOR`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DOCK_DOOR`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DOCK_DOOR`), namedNode(`${rdfs}comment`), literal(`A door or collection of doors where trucks or rail cars are loaded (shipping) or unloaded (receiving). Used to load or unload products for logistics.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DOCK_DOOR`), namedNode(`${rdfs}label`), literal(`Dock Door`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-DOCK_DOOR`), namedNode(`${skos}prefLabel`), literal(`DOCK_DOOR`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-EMPTY_EQUIPMENT_DESPATCH_PARTY`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-EMPTY_EQUIPMENT_DESPATCH_PARTY`), namedNode(`${rdfs}comment`), literal(`Organization from whose premises empty equipment will be or has been despatched.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-EMPTY_EQUIPMENT_DESPATCH_PARTY`), namedNode(`${rdfs}label`), literal(`Empty Equipment Despatch Organization`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-EMPTY_EQUIPMENT_DESPATCH_PARTY`), namedNode(`${skos}prefLabel`), literal(`EMPTY_EQUIPMENT_DESPATCH_PARTY`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-EMPTY_EQUIPMENT_RETURN_PARTY`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-EMPTY_EQUIPMENT_RETURN_PARTY`), namedNode(`${rdfs}comment`), literal(`Organization from whose premises empty equipment will be or has been returned.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-EMPTY_EQUIPMENT_RETURN_PARTY`), namedNode(`${rdfs}label`), literal(`Empty Equipment Return Organization`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-EMPTY_EQUIPMENT_RETURN_PARTY`), namedNode(`${skos}prefLabel`), literal(`EMPTY_EQUIPMENT_RETURN_PARTY`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-EQUIPMENT_OWNER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-EQUIPMENT_OWNER`), namedNode(`${rdfs}comment`), literal(`Owner of equipment (container, etc.).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-EQUIPMENT_OWNER`), namedNode(`${rdfs}label`), literal(`Equipment Owner`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-EQUIPMENT_OWNER`), namedNode(`${skos}prefLabel`), literal(`EQUIPMENT_OWNER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-EXPORTER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-EXPORTER`), namedNode(`${rdfs}comment`), literal(`Organization who makes - or on whose behalf a Customs clearing agent or other authorized person makes - an export declaration. This may include a manufacturer, seller or other person. Within a Customs union, consignor may have the same meaning as exporter`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-EXPORTER`), namedNode(`${rdfs}label`), literal(`Exporter`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-EXPORTER`), namedNode(`${skos}prefLabel`), literal(`EXPORTER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-FACTOR`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-FACTOR`), namedNode(`${rdfs}comment`), literal(`An organization that purchases financial receiving instruments e.g. invoices`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-FACTOR`), namedNode(`${rdfs}label`), literal(`Factor`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-FACTOR`), namedNode(`${skos}prefLabel`), literal(`FACTOR`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-FATTENER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-FATTENER`), namedNode(`${rdfs}comment`), literal(`The Organization which fattens the animal.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-FATTENER`), namedNode(`${rdfs}label`), literal(`Fattener`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-FATTENER`), namedNode(`${skos}prefLabel`), literal(`FATTENER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-FREIGHT_FORWARDER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-FREIGHT_FORWARDER`), namedNode(`${rdfs}comment`), literal(`A person or firm that arranges for a pick up or deliver goods by a carrier on instructions of a shipper or consignee from or to a point by various necessary conveyances and common carriers.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-FREIGHT_FORWARDER`), namedNode(`${rdfs}label`), literal(`Freight Forwarder`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-FREIGHT_FORWARDER`), namedNode(`${skos}prefLabel`), literal(`FREIGHT_FORWARDER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-GOODS_OWNER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-GOODS_OWNER`), namedNode(`${rdfs}comment`), literal(`The organization which owns the goods.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-GOODS_OWNER`), namedNode(`${rdfs}label`), literal(`Goods Owner`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-GOODS_OWNER`), namedNode(`${skos}prefLabel`), literal(`GOODS_OWNER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-GROWER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-GROWER`), namedNode(`${rdfs}comment`), literal(`An organization which is responsible for the growth or production of the unit specifically refers to vegetation. This organization may or may not be a producer or packer.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-GROWER`), namedNode(`${rdfs}label`), literal(`Grower`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-GROWER`), namedNode(`${skos}prefLabel`), literal(`GROWER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-HEAD_OFFICE`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-HEAD_OFFICE`), namedNode(`${rdfs}comment`), literal(`The executive or main office of an enterprise.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-HEAD_OFFICE`), namedNode(`${rdfs}label`), literal(`Head Office`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-HEAD_OFFICE`), namedNode(`${skos}prefLabel`), literal(`HEAD_OFFICE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-IMPORTER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-IMPORTER`), namedNode(`${rdfs}comment`), literal(`Organization who makes - or on whose behalf a Customs clearing agent or other authorized person makes - an import declaration. This may include a person who has possession of the goods or to whom the goods are consigned.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-IMPORTER`), namedNode(`${rdfs}label`), literal(`Importer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-IMPORTER`), namedNode(`${skos}prefLabel`), literal(`IMPORTER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INFORMATION_PROVIDER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INFORMATION_PROVIDER`), namedNode(`${rdfs}comment`), literal(`The Organization providing the information contained in the document.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INFORMATION_PROVIDER`), namedNode(`${rdfs}label`), literal(`Information Provider`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INFORMATION_PROVIDER`), namedNode(`${skos}prefLabel`), literal(`INFORMATION_PROVIDER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INSURER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INSURER`), namedNode(`${rdfs}comment`), literal(`A person or company offering insurance policies for premiums.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INSURER`), namedNode(`${rdfs}label`), literal(`Insurer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INSURER`), namedNode(`${skos}prefLabel`), literal(`INSURER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INTERMEDIARY_BANK_1`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INTERMEDIARY_BANK_1`), namedNode(`${rdfs}comment`), literal(`A financial institution between the ordered bank and the beneficiary's bank.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INTERMEDIARY_BANK_1`), namedNode(`${rdfs}label`), literal(`Intermediary Bank 1`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INTERMEDIARY_BANK_1`), namedNode(`${skos}prefLabel`), literal(`INTERMEDIARY_BANK_1`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INTERMEDIARY_BANK_2`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INTERMEDIARY_BANK_2`), namedNode(`${rdfs}comment`), literal(`A financial institution between the ordered bank and the beneficiary's bank.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INTERMEDIARY_BANK_2`), namedNode(`${rdfs}label`), literal(`Intermediary Bank 2`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INTERMEDIARY_BANK_2`), namedNode(`${skos}prefLabel`), literal(`INTERMEDIARY_BANK_2`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INVENTORY_CONTROLLER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INVENTORY_CONTROLLER`), namedNode(`${rdfs}comment`), literal(`To specifically identify the organisation in charge of inventory control.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INVENTORY_CONTROLLER`), namedNode(`${rdfs}label`), literal(`Inventory Controller`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INVENTORY_CONTROLLER`), namedNode(`${skos}prefLabel`), literal(`INVENTORY_CONTROLLER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INVENTORY_REPORTING_PARTY`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INVENTORY_REPORTING_PARTY`), namedNode(`${rdfs}comment`), literal(`Organization reporting inventory information.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INVENTORY_REPORTING_PARTY`), namedNode(`${rdfs}label`), literal(`Inventory Reporting Organization`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INVENTORY_REPORTING_PARTY`), namedNode(`${skos}prefLabel`), literal(`INVENTORY_REPORTING_PARTY`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INVOICEE`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INVOICEE`), namedNode(`${rdfs}comment`), literal(`Organization issuing an invoice.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INVOICEE`), namedNode(`${rdfs}label`), literal(`Invoicee`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-INVOICEE`), namedNode(`${skos}prefLabel`), literal(`INVOICEE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-ISSUER_OF_INVOICE`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-ISSUER_OF_INVOICE`), namedNode(`${rdfs}comment`), literal(`Organization which issues an invoice.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-ISSUER_OF_INVOICE`), namedNode(`${rdfs}label`), literal(`Issuer of Invoice`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-ISSUER_OF_INVOICE`), namedNode(`${skos}prefLabel`), literal(`ISSUER_OF_INVOICE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-LOGISTICS_SERVICE_PROVIDER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-LOGISTICS_SERVICE_PROVIDER`), namedNode(`${rdfs}comment`), literal(`An umbrella term for an entity, which provides a combination of many different logistics services for another entity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-LOGISTICS_SERVICE_PROVIDER`), namedNode(`${rdfs}label`), literal(`Logistics Service Provider`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-LOGISTICS_SERVICE_PROVIDER`), namedNode(`${skos}prefLabel`), literal(`LOGISTICS_SERVICE_PROVIDER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MANUFACTURER_OF_GOODS`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MANUFACTURER_OF_GOODS`), namedNode(`${rdfs}comment`), literal(`Organization who manufactures the goods.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MANUFACTURER_OF_GOODS`), namedNode(`${rdfs}label`), literal(`Manufacturer of Goods`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MANUFACTURER_OF_GOODS`), namedNode(`${skos}prefLabel`), literal(`MANUFACTURER_OF_GOODS`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MANUFACTURING_PLANT`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MANUFACTURING_PLANT`), namedNode(`${rdfs}comment`), literal(`A physical location consisting of one or more buildings with facilities for manufacturing.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MANUFACTURING_PLANT`), namedNode(`${rdfs}label`), literal(`Manufacturing Plant`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MANUFACTURING_PLANT`), namedNode(`${skos}prefLabel`), literal(`MANUFACTURING_PLANT`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MARK_FOR`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MARK_FOR`), namedNode(`${rdfs}comment`), literal(`The ultimate destination of a unit load or transport package of goods where the Ship-To is a different location.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MARK_FOR`), namedNode(`${rdfs}label`), literal(`Mark For`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MARK_FOR`), namedNode(`${skos}prefLabel`), literal(`MARK_FOR`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MESSAGE_FROM`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MESSAGE_FROM`), namedNode(`${rdfs}comment`), literal(`Organization where the message comes from.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MESSAGE_FROM`), namedNode(`${rdfs}label`), literal(`Message From.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MESSAGE_FROM`), namedNode(`${skos}prefLabel`), literal(`MESSAGE_FROM`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MESSAGE_RECIPIENT`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MESSAGE_RECIPIENT`), namedNode(`${rdfs}comment`), literal(`Organization receiving the message.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MESSAGE_RECIPIENT`), namedNode(`${rdfs}label`), literal(`Message Recipient`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MESSAGE_RECIPIENT`), namedNode(`${skos}prefLabel`), literal(`MESSAGE_RECIPIENT`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MINCER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MINCER`), namedNode(`${rdfs}comment`), literal(`One engaged in the cutting or chopping of meat into very small pieces`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MINCER`), namedNode(`${rdfs}label`), literal(`Mincer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-MINCER`), namedNode(`${skos}prefLabel`), literal(`MINCER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-OPERATING_DIVISION`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-OPERATING_DIVISION`), namedNode(`${rdfs}comment`), literal(`An entity that is part of another entity. For example, a Regional Marketing Office. Operating Divisions may have multiple days and times of operation.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-OPERATING_DIVISION`), namedNode(`${rdfs}label`), literal(`Operating Division`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-OPERATING_DIVISION`), namedNode(`${skos}prefLabel`), literal(`OPERATING_DIVISION`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-OPERATOR`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-OPERATOR`), namedNode(`${rdfs}comment`), literal(`A person or persons who own or operate a business establishment, which services consumers directly. For example a restaurant owner as part of a chain or an independent operation.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-OPERATOR`), namedNode(`${rdfs}label`), literal(`Operator`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-OPERATOR`), namedNode(`${skos}prefLabel`), literal(`OPERATOR`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-ORDERING_PARTY`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-ORDERING_PARTY`), namedNode(`${rdfs}comment`), literal(`To be used only if ordering organization and buyer are not identical.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-ORDERING_PARTY`), namedNode(`${rdfs}label`), literal(`Ordering Organization`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-ORDERING_PARTY`), namedNode(`${skos}prefLabel`), literal(`ORDERING_PARTY`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-OWNER_OF_EQUIPMENT`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-OWNER_OF_EQUIPMENT`), namedNode(`${rdfs}comment`), literal(`Organization who owns equipment.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-OWNER_OF_EQUIPMENT`), namedNode(`${rdfs}label`), literal(`Owner of equipment`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-OWNER_OF_EQUIPMENT`), namedNode(`${skos}prefLabel`), literal(`OWNER_OF_EQUIPMENT`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-OWNER_OF_MEANS_OF_TRANSPORT`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-OWNER_OF_MEANS_OF_TRANSPORT`), namedNode(`${rdfs}comment`), literal(`Organization owning the means of transport. Not a synonym of carrier`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-OWNER_OF_MEANS_OF_TRANSPORT`), namedNode(`${rdfs}label`), literal(`Owner of Means of Transport`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-OWNER_OF_MEANS_OF_TRANSPORT`), namedNode(`${skos}prefLabel`), literal(`OWNER_OF_MEANS_OF_TRANSPORT`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_DECLARING_THE_VALUE_ADDED_TAX`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_DECLARING_THE_VALUE_ADDED_TAX`), namedNode(`${rdfs}comment`), literal(`A code to identify the organization who is responsible for declaring the Value Added Tax (VAT) on the sale of goods or services.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_DECLARING_THE_VALUE_ADDED_TAX`), namedNode(`${rdfs}label`), literal(`Organization Declaring the Value Added Tax`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_DECLARING_THE_VALUE_ADDED_TAX`), namedNode(`${skos}prefLabel`), literal(`PARTY_DECLARING_THE_VALUE_ADDED_TAX`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_FOR_WHOM_ITEM_IS_ULTIMATELY_INTENDED`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_FOR_WHOM_ITEM_IS_ULTIMATELY_INTENDED`), namedNode(`${rdfs}label`), literal(`Organization For Whom Item is Ultimately Intended`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_FOR_WHOM_ITEM_IS_ULTIMATELY_INTENDED`), namedNode(`${skos}prefLabel`), literal(`PARTY_FOR_WHOM_ITEM_IS_ULTIMATELY_INTENDED`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_RECEIVING_PRIVATE_DATA`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_RECEIVING_PRIVATE_DATA`), namedNode(`${rdfs}comment`), literal(`The organization who is allowed access to master data information by the data owner when the data is viewed as private.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_RECEIVING_PRIVATE_DATA`), namedNode(`${rdfs}label`), literal(`Organization Receiving Private Data`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_RECEIVING_PRIVATE_DATA`), namedNode(`${skos}prefLabel`), literal(`PARTY_RECEIVING_PRIVATE_DATA`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_RECOVERING_THE_VALUE_ADDED_TAX`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_RECOVERING_THE_VALUE_ADDED_TAX`), namedNode(`${rdfs}comment`), literal(`A code to identify the organization who is eligible to recover the Value Added Tax (VAT) on the sale of goods or services.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_RECOVERING_THE_VALUE_ADDED_TAX`), namedNode(`${rdfs}label`), literal(`Organization Recovering the Value Added Tax`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_RECOVERING_THE_VALUE_ADDED_TAX`), namedNode(`${skos}prefLabel`), literal(`PARTY_RECOVERING_THE_VALUE_ADDED_TAX`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_ALL_DOCUMENTS`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_ALL_DOCUMENTS`), namedNode(`${rdfs}comment`), literal(`An organization which is named to be the recipient of all documents.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_ALL_DOCUMENTS`), namedNode(`${rdfs}label`), literal(`Organization to Receive All Documents`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_ALL_DOCUMENTS`), namedNode(`${skos}prefLabel`), literal(`PARTY_TO_RECEIVE_ALL_DOCUMENTS`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_COMMERCIAL_INVOICE`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_COMMERCIAL_INVOICE`), namedNode(`${rdfs}comment`), literal(`Organization to whom payment for a commercial invoice or bill should be remitted.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_COMMERCIAL_INVOICE`), namedNode(`${rdfs}label`), literal(`Organization to Receive Commercial Invoice`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_COMMERCIAL_INVOICE`), namedNode(`${skos}prefLabel`), literal(`PARTY_TO_RECEIVE_COMMERCIAL_INVOICE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_ELECTRONIC_MEMO_OF_INVOICE`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_ELECTRONIC_MEMO_OF_INVOICE`), namedNode(`${rdfs}comment`), literal(`Organization being informed about invoice issue (via EDI).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_ELECTRONIC_MEMO_OF_INVOICE`), namedNode(`${rdfs}label`), literal(`Organization to Receive Electronic Memo of Invoice`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_ELECTRONIC_MEMO_OF_INVOICE`), namedNode(`${skos}prefLabel`), literal(`PARTY_TO_RECEIVE_ELECTRONIC_MEMO_OF_INVOICE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_FREIGHT_BILL`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_FREIGHT_BILL`), namedNode(`${rdfs}comment`), literal(`Organization to whom the freight bill should be sent.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_FREIGHT_BILL`), namedNode(`${rdfs}label`), literal(`Organization to Receive Freight Bill`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_FREIGHT_BILL`), namedNode(`${skos}prefLabel`), literal(`PARTY_TO_RECEIVE_FREIGHT_BILL`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_REFUND`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_REFUND`), namedNode(`${rdfs}comment`), literal(`Organization to whom a refund is given.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_REFUND`), namedNode(`${rdfs}label`), literal(`Organization to Receive Refund`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PARTY_TO_RECEIVE_REFUND`), namedNode(`${skos}prefLabel`), literal(`PARTY_TO_RECEIVE_REFUND`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PAYEE`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PAYEE`), namedNode(`${rdfs}comment`), literal(`Organization, which receives payment.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PAYEE`), namedNode(`${rdfs}label`), literal(`Payee`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PAYEE`), namedNode(`${skos}prefLabel`), literal(`PAYEE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PAYER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PAYER`), namedNode(`${rdfs}comment`), literal(`Organization which initiates payment.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PAYER`), namedNode(`${rdfs}label`), literal(`Payer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PAYER`), namedNode(`${skos}prefLabel`), literal(`PAYER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-POINT_OF_SALE`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-POINT_OF_SALE`), namedNode(`${rdfs}comment`), literal(`Refers to the retail type checkout where bar code symbols are normally scanned.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-POINT_OF_SALE`), namedNode(`${rdfs}label`), literal(`Point Of Sale`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-POINT_OF_SALE`), namedNode(`${skos}prefLabel`), literal(`POINT_OF_SALE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PRICE_LOCATION_PARTY`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PRICE_LOCATION_PARTY`), namedNode(`${rdfs}comment`), literal(`An organization to which a price for a product is applicable. Within the context of GDSN Price Synchronization, it is also known as the 'Price Location' which is a GLN.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PRICE_LOCATION_PARTY`), namedNode(`${rdfs}label`), literal(`Price Location Organization`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PRICE_LOCATION_PARTY`), namedNode(`${skos}prefLabel`), literal(`PRICE_LOCATION_PARTY`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PROXY`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PROXY`), namedNode(`${rdfs}comment`), literal(`A company that is selected by the Brand Owner to maintain their baseline attributes and Administrative Records in the GDSN.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PROXY`), namedNode(`${rdfs}label`), literal(`Proxy`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PROXY`), namedNode(`${skos}prefLabel`), literal(`PROXY`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PUBLIC_WAREHOUSE`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PUBLIC_WAREHOUSE`), namedNode(`${rdfs}comment`), literal(`A building, or a part of one, where storage space is offered to other companies for compensation (fee), for the storage of their goods, merchandise, etc.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PUBLIC_WAREHOUSE`), namedNode(`${rdfs}label`), literal(`Public Warehouse`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PUBLIC_WAREHOUSE`), namedNode(`${skos}prefLabel`), literal(`PUBLIC_WAREHOUSE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PURCHASE_ORDER_RECEIVER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PURCHASE_ORDER_RECEIVER`), namedNode(`${rdfs}comment`), literal(`The organization that receives the purchase order for the goods or services.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PURCHASE_ORDER_RECEIVER`), namedNode(`${rdfs}label`), literal(`Purchase Order Receiver`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-PURCHASE_ORDER_RECEIVER`), namedNode(`${skos}prefLabel`), literal(`PURCHASE_ORDER_RECEIVER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-REGISTERED_AGENT`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-REGISTERED_AGENT`), namedNode(`${rdfs}comment`), literal(`The organization having legal responsibility for the product in the target market for example a company to which market authorization has been issued.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-REGISTERED_AGENT`), namedNode(`${rdfs}label`), literal(`Registered Agent`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-REGISTERED_AGENT`), namedNode(`${skos}prefLabel`), literal(`REGISTERED_AGENT`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-REMIT_TO`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-REMIT_TO`), namedNode(`${rdfs}comment`), literal(`Organization to whom funds are directed for payment of a commercial invoice.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-REMIT_TO`), namedNode(`${rdfs}label`), literal(`Remit To`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-REMIT_TO`), namedNode(`${skos}prefLabel`), literal(`REMIT_TO`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-RETURNABLE_ASSET_SERVICE_CENTRE`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-RETURNABLE_ASSET_SERVICE_CENTRE`), namedNode(`${rdfs}comment`), literal(`The location where a returnable asset is serviced.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-RETURNABLE_ASSET_SERVICE_CENTRE`), namedNode(`${rdfs}label`), literal(`Returnable Asset Service Centre`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-RETURNABLE_ASSET_SERVICE_CENTRE`), namedNode(`${skos}prefLabel`), literal(`RETURNABLE_ASSET_SERVICE_CENTRE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SELLER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SELLER`), namedNode(`${rdfs}comment`), literal(`Organization which sells products or services to a buyer.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SELLER`), namedNode(`${rdfs}label`), literal(`Seller`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SELLER`), namedNode(`${skos}prefLabel`), literal(`SELLER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SERVICE_PROVIDER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SERVICE_PROVIDER`), namedNode(`${rdfs}comment`), literal(`An organization providing services for another organization (e.g. re-packing supplier's products).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SERVICE_PROVIDER`), namedNode(`${rdfs}label`), literal(`Service Provider`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SERVICE_PROVIDER`), namedNode(`${skos}prefLabel`), literal(`SERVICE_PROVIDER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SHIP_FROM`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SHIP_FROM`), namedNode(`${rdfs}comment`), literal(`Organization from where goods will be or have been shipped.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SHIP_FROM`), namedNode(`${rdfs}label`), literal(`Ship From`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SHIP_FROM`), namedNode(`${skos}prefLabel`), literal(`SHIP_FROM`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SHIP_TO`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SHIP_TO`), namedNode(`${rdfs}comment`), literal(`Organization which receives goods and invoices.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SHIP_TO`), namedNode(`${rdfs}label`), literal(`Ship To`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SHIP_TO`), namedNode(`${skos}prefLabel`), literal(`SHIP_TO`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SLAUGHTERER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SLAUGHTERER`), namedNode(`${rdfs}comment`), literal(`The Organization who has undertaken or will undertake a slaughter.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SLAUGHTERER`), namedNode(`${rdfs}label`), literal(`Slaughterer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SLAUGHTERER`), namedNode(`${skos}prefLabel`), literal(`SLAUGHTERER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-STORE`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-STORE`), namedNode(`${rdfs}comment`), literal(`A physical entity that sells products to a consumer.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-STORE`), namedNode(`${rdfs}label`), literal(`Store`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-STORE`), namedNode(`${skos}prefLabel`), literal(`STORE`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SUBSTITUTE_SUPPLIER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SUBSTITUTE_SUPPLIER`), namedNode(`${rdfs}comment`), literal(`Organization which may be in a position to supply products or services should the main usual supplier be unable to do so.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SUBSTITUTE_SUPPLIER`), namedNode(`${rdfs}label`), literal(`Substitute Supplier`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SUBSTITUTE_SUPPLIER`), namedNode(`${skos}prefLabel`), literal(`SUBSTITUTE_SUPPLIER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SUPPLIER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SUPPLIER`), namedNode(`${rdfs}comment`), literal(`An organization that provides goods or services.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SUPPLIER`), namedNode(`${rdfs}label`), literal(`Supplier`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-SUPPLIER`), namedNode(`${skos}prefLabel`), literal(`SUPPLIER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-TRANSPORTATION_CARRIER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-TRANSPORTATION_CARRIER`), namedNode(`${rdfs}comment`), literal(`Organization undertaking or arranging transport of goods between named points.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-TRANSPORTATION_CARRIER`), namedNode(`${rdfs}label`), literal(`Transportation Carrier`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-TRANSPORTATION_CARRIER`), namedNode(`${skos}prefLabel`), literal(`TRANSPORTATION_CARRIER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-VISITING_ADDRESS`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-VISITING_ADDRESS`), namedNode(`${rdfs}comment`), literal(`An enterprise's physical location where guests are received during set working hours`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-VISITING_ADDRESS`), namedNode(`${rdfs}label`), literal(`Visiting Address`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-VISITING_ADDRESS`), namedNode(`${skos}prefLabel`), literal(`VISITING_ADDRESS`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-WAREHOUSE_AND_OR_DEPOT`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-WAREHOUSE_AND_OR_DEPOT`), namedNode(`${rdfs}comment`), literal(`Industrial department of a company equipped with appropriate equipment and fittings in which goods are stored in appropriate conditions.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-WAREHOUSE_AND_OR_DEPOT`), namedNode(`${rdfs}label`), literal(`Warehouse and or Depot`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-WAREHOUSE_AND_OR_DEPOT`), namedNode(`${skos}prefLabel`), literal(`WAREHOUSE_AND_OR_DEPOT`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-WAREHOUSE_KEEPER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-WAREHOUSE_KEEPER`), namedNode(`${rdfs}comment`), literal(`Organization taking responsibility for goods entered into a warehouse.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-WAREHOUSE_KEEPER`), namedNode(`${rdfs}label`), literal(`Warehouse Keeper`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-WAREHOUSE_KEEPER`), namedNode(`${skos}prefLabel`), literal(`WAREHOUSE_KEEPER`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-WHOLESALER`), namedNode(`${rdf}type`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-WHOLESALER`), namedNode(`${rdfs}comment`), literal(`Seller of articles, often in large quantities, to be retailed by others.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-WHOLESALER`), namedNode(`${rdfs}label`), literal(`WholeSaler`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}OrganizationRoleType-WHOLESALER`), namedNode(`${skos}prefLabel`), literal(`WHOLESALER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingDetails`), namedNode(`${rdfs}comment`), literal(`Details on packaging for a product for example packaging type (bottle), materials, features, recycling, etc..`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingDetails`), namedNode(`${rdfs}label`), literal(`Packaging`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-BASE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-BASE`), namedNode(`${rdfs}comment`), literal(`A general term applied to the support or pedestal of an object.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-BASE`), namedNode(`${rdfs}label`), literal(`Base`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-BASE`), namedNode(`${skos}prefLabel`), literal(`BASE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:PackagingFeatureCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode`), namedNode(`${rdfs}label`), literal(`Packaging Feature Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-BEAM`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-BEAM`), namedNode(`${rdfs}comment`), literal(`Long sturdy piece of squared timber or metal used in house-building etc.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-BEAM`), namedNode(`${rdfs}label`), literal(`Beam`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-BEAM`), namedNode(`${skos}prefLabel`), literal(`BEAM`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-BUNG_SEAL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-BUNG_SEAL`), namedNode(`${rdfs}comment`), literal(`A bung is an apparatus used to seal a container, such as a bottle, barrel or tubes. A bung is partially inserted inside the container to act as a seal. The most common every-day example of a bung is the stopper of a wine bottle.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-BUNG_SEAL`), namedNode(`${rdfs}label`), literal(`Bung Seal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-BUNG_SEAL`), namedNode(`${skos}prefLabel`), literal(`BUNG_SEAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CAP`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CAP`), namedNode(`${rdfs}comment`), literal(`A cap that seals a bottle or other form of packaging.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CAP`), namedNode(`${rdfs}label`), literal(`Cap`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CAP`), namedNode(`${skos}prefLabel`), literal(`CAP`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CARRIER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CARRIER`), namedNode(`${rdfs}comment`), literal(`A device of various types attached to or hung from trolleys to support the load.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CARRIER`), namedNode(`${rdfs}label`), literal(`Carrier`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CARRIER`), namedNode(`${skos}prefLabel`), literal(`CARRIER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CONSUMPTION_UTENSIL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CONSUMPTION_UTENSIL`), namedNode(`${rdfs}comment`), literal(`An item which allows the user to extract and/or consume the content of a container.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CONSUMPTION_UTENSIL`), namedNode(`${rdfs}label`), literal(`Consumption Utensil`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CONSUMPTION_UTENSIL`), namedNode(`${skos}prefLabel`), literal(`CONSUMPTION_UTENSIL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CORE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CORE`), namedNode(`${rdfs}comment`), literal(`A tubular shape around which flexible material such as plastic film or paper are wound for purposes of transport and handling.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CORE`), namedNode(`${rdfs}label`), literal(`Core`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CORE`), namedNode(`${skos}prefLabel`), literal(`CORE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CREEL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CREEL`), namedNode(`${rdfs}comment`), literal(`A creel is a device for holding the required number of roving spools or other supply packages of reinforcement fibers for Fiber Reinforced Plastics manufacturing. This device holds the rovings in the desired position for unwinding in continuous processes like Pultrusion and Filament Winding.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CREEL`), namedNode(`${rdfs}label`), literal(`Creel`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-CREEL`), namedNode(`${skos}prefLabel`), literal(`CREEL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-EDGE_PROTECTION`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-EDGE_PROTECTION`), namedNode(`${rdfs}comment`), literal(`A right-angle piece placed over the outermost perimeter edges of a container to distribute pressure and prevent collapse or cutting from banding, strapping, or handling.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-EDGE_PROTECTION`), namedNode(`${rdfs}label`), literal(`Edge Protection`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-EDGE_PROTECTION`), namedNode(`${skos}prefLabel`), literal(`EDGE_PROTECTION`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-HANDLE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-HANDLE`), namedNode(`${rdfs}comment`), literal(`A grip attached to an object for using or moving the object, usually with the hands.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-HANDLE`), namedNode(`${rdfs}label`), literal(`Handle`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-HANDLE`), namedNode(`${skos}prefLabel`), literal(`HANDLE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-INNER_CONTAINER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-INNER_CONTAINER`), namedNode(`${rdfs}comment`), literal(`Inner Container`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-INNER_CONTAINER`), namedNode(`${rdfs}label`), literal(`Inner Container`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-INNER_CONTAINER`), namedNode(`${skos}prefLabel`), literal(`INNER_CONTAINER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-INTERNAL_DIVIDER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-INTERNAL_DIVIDER`), namedNode(`${rdfs}comment`), literal(`An internal divider is an object, either flat or custom-shaped, used to separate the content of a container or to prevent the content from mixing.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-INTERNAL_DIVIDER`), namedNode(`${rdfs}label`), literal(`Internal Divider`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-INTERNAL_DIVIDER`), namedNode(`${skos}prefLabel`), literal(`INTERNAL_DIVIDER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-LABEL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-LABEL`), namedNode(`${rdfs}comment`), literal(`A label is a piece of paper, polymer, cloth, metal, or other material affixed to a container or article (or printed directly upon it), which usually carries information about the article to.which it has been attached.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-LABEL`), namedNode(`${rdfs}label`), literal(`Label`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-LABEL`), namedNode(`${skos}prefLabel`), literal(`LABEL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-LID`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-LID`), namedNode(`${rdfs}comment`), literal(`In packaging, the top or bottom of a container, usually the part that closes the opening; may also be known as cap, over, or top`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-LID`), namedNode(`${rdfs}label`), literal(`Lid`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-LID`), namedNode(`${skos}prefLabel`), literal(`LID`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-LINER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-LINER`), namedNode(`${rdfs}comment`), literal(`An internal chamber within a container which separates the content of the container from the walls. Inner liners provide additional isolation and protection to the content of a container. Sometimes coatings of certain materials may be applied as an alternative to inner liners.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-LINER`), namedNode(`${rdfs}label`), literal(`Liner`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-LINER`), namedNode(`${skos}prefLabel`), literal(`LINER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-LUG`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-LUG`), namedNode(`${rdfs}comment`), literal(`A small indentation or raised portion on the surface of a bottle, provided as an indexing means for operations such as multi-pass decoration or labeling.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-LUG`), namedNode(`${rdfs}label`), literal(`Lug`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-LUG`), namedNode(`${skos}prefLabel`), literal(`LUG`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-NESTING_EDGE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-NESTING_EDGE`), namedNode(`${rdfs}comment`), literal(`Edges which allow items of the same size to be partially stacked within one another in any direction thus reducing the space required in order to stack them.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-NESTING_EDGE`), namedNode(`${rdfs}label`), literal(`Nesting Edge`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-NESTING_EDGE`), namedNode(`${skos}prefLabel`), literal(`NESTING_EDGE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-PEG`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-PEG`), namedNode(`${rdfs}comment`), literal(`A fastener which allows a product to be hanged.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-PEG`), namedNode(`${rdfs}label`), literal(`Peg`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-PEG`), namedNode(`${skos}prefLabel`), literal(`PEG`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-PULL_OFF_TAB`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-PULL_OFF_TAB`), namedNode(`${rdfs}comment`), literal(`A flexible cover which can be easily removed in order to open a container.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-PULL_OFF_TAB`), namedNode(`${rdfs}label`), literal(`Pull Off Tab`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-PULL_OFF_TAB`), namedNode(`${skos}prefLabel`), literal(`PULL_OFF_TAB`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-RING_HOLDER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-RING_HOLDER`), namedNode(`${rdfs}comment`), literal(`A hollow circular band of material wound around itself.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-RING_HOLDER`), namedNode(`${rdfs}label`), literal(`Ring Holder`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-RING_HOLDER`), namedNode(`${skos}prefLabel`), literal(`RING_HOLDER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-RIVET`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-RIVET`), namedNode(`${rdfs}comment`), literal(`A permanent fastener which consists of a cylindrical shaft with a head on one end and tail which is deformed to fixate the rivet in place.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-RIVET`), namedNode(`${rdfs}label`), literal(`Rivet`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-RIVET`), namedNode(`${skos}prefLabel`), literal(`RIVET`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-SLEEVE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-SLEEVE`), namedNode(`${rdfs}comment`), literal(`A tubular form, open at both ends, that is slipped over an item or package.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-SLEEVE`), namedNode(`${rdfs}label`), literal(`Sleeve`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-SLEEVE`), namedNode(`${skos}prefLabel`), literal(`SLEEVE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-SPOUT`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-SPOUT`), namedNode(`${rdfs}comment`), literal(`A spout is a protruding edge which allows the lifting and pouring of liquids contained within a container.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-SPOUT`), namedNode(`${rdfs}label`), literal(`Spout`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-SPOUT`), namedNode(`${skos}prefLabel`), literal(`SPOUT`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-TAG`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-TAG`), namedNode(`${rdfs}comment`), literal(`A hanging card made of any material which is used to identify or provide additional information of a product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-TAG`), namedNode(`${rdfs}label`), literal(`Tag`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-TAG`), namedNode(`${skos}prefLabel`), literal(`TAG`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-WICKER_OUTER_CONTAINER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-WICKER_OUTER_CONTAINER`), namedNode(`${rdfs}comment`), literal(`An outer container made of wicker which is fitted to the bottle usually a little less than half way up from the bottom of the bottle and is used to hold, hang or support the bottle.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-WICKER_OUTER_CONTAINER`), namedNode(`${rdfs}label`), literal(`Wicker Outer Container`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-WICKER_OUTER_CONTAINER`), namedNode(`${skos}prefLabel`), literal(`WICKER_OUTER_CONTAINER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-WRAP`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-WRAP`), namedNode(`${rdfs}comment`), literal(`A layer of any material which completely enclose a product. A wrap can have many purposes, from providing additional protection to an item to serving as a gift-wrap.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-WRAP`), namedNode(`${rdfs}label`), literal(`Wrap`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFeatureCode-WRAP`), namedNode(`${skos}prefLabel`), literal(`WRAP`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-ANTISEPTIC`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-ANTISEPTIC`), namedNode(`${rdfs}comment`), literal(`The process by which a sterile (aseptic) product (typically food or pharmaceutical) is packaged in a sterile container in a way which maintains sterility.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-ANTISEPTIC`), namedNode(`${rdfs}label`), literal(`Antiseptic`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-ANTISEPTIC`), namedNode(`${skos}prefLabel`), literal(`ANTISEPTIC`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:PackagingFunctionCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode`), namedNode(`${rdfs}label`), literal(`Packaging Function Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-ANTI_TAMPERING`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-ANTI_TAMPERING`), namedNode(`${rdfs}comment`), literal(`A methodology used to hinder, or deter unauthorized access to a device.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-ANTI_TAMPERING`), namedNode(`${rdfs}label`), literal(`Anti-tampering`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-ANTI_TAMPERING`), namedNode(`${skos}prefLabel`), literal(`ANTI_TAMPERING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-COATED`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-COATED`), namedNode(`${rdfs}comment`), literal(`Covered with a material (paraffin, wax) that protects the product or packaging.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-COATED`), namedNode(`${rdfs}label`), literal(`Coated`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-COATED`), namedNode(`${skos}prefLabel`), literal(`COATED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-COMPRESSED`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-COMPRESSED`), namedNode(`${rdfs}comment`), literal(`Content has been pressed together to the maximum possible way.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-COMPRESSED`), namedNode(`${rdfs}label`), literal(`Compressed`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-COMPRESSED`), namedNode(`${skos}prefLabel`), literal(`COMPRESSED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-DISPENSER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-DISPENSER`), namedNode(`${rdfs}comment`), literal(`A device or mechanism to supply or extract contents.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-DISPENSER`), namedNode(`${rdfs}label`), literal(`Dispenser`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-DISPENSER`), namedNode(`${skos}prefLabel`), literal(`DISPENSER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-GIFT_WRAPPED`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-GIFT_WRAPPED`), namedNode(`${rdfs}comment`), literal(`Packaging is wrapped in a decorative way for the purposes of the consumer giving it as a gift.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-GIFT_WRAPPED`), namedNode(`${rdfs}label`), literal(`Gift Wrapped`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-GIFT_WRAPPED`), namedNode(`${skos}prefLabel`), literal(`GIFT_WRAPPED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-ISOTHERMIC`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-ISOTHERMIC`), namedNode(`${rdfs}comment`), literal(`Thermal carry container designed for the carriage of temperature controlled goods such as vaccines, pharmaceuticals, and medicines.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-ISOTHERMIC`), namedNode(`${rdfs}label`), literal(`Isothermic`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-ISOTHERMIC`), namedNode(`${skos}prefLabel`), literal(`ISOTHERMIC`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-MODIFIED_ATMOSPHERE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-MODIFIED_ATMOSPHERE`), namedNode(`${rdfs}comment`), literal(`The practice of modifying the composition of the internal atmosphere of a package, (commonly food packages, and drugs) in order to improve the shelf life.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-MODIFIED_ATMOSPHERE`), namedNode(`${rdfs}label`), literal(`Modified Atmosphere`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-MODIFIED_ATMOSPHERE`), namedNode(`${skos}prefLabel`), literal(`MODIFIED_ATMOSPHERE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-OXYGEN_INFUSED`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-OXYGEN_INFUSED`), namedNode(`${rdfs}comment`), literal(`A barrier packaging material for an infusion solution, i.e., oxygen.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-OXYGEN_INFUSED`), namedNode(`${rdfs}label`), literal(`Oxygen Infused`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-OXYGEN_INFUSED`), namedNode(`${skos}prefLabel`), literal(`OXYGEN_INFUSED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-PEEL_OFF`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-PEEL_OFF`), namedNode(`${rdfs}comment`), literal(`A section of the packaging can be detached with ease in order to have access to the content or product, e.g. peel-off Lids used for packing Milk, Coffee and Cacao Powder.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-PEEL_OFF`), namedNode(`${rdfs}label`), literal(`Peel Off`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-PEEL_OFF`), namedNode(`${skos}prefLabel`), literal(`PEEL_OFF`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-PINPACK`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-PINPACK`), namedNode(`${rdfs}comment`), literal(`The package is equipped to be hung up on a hook.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-PINPACK`), namedNode(`${rdfs}label`), literal(`Pinpack`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-PINPACK`), namedNode(`${skos}prefLabel`), literal(`PINPACK`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-PROTECTED`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-PROTECTED`), namedNode(`${rdfs}comment`), literal(`Functionality to keep from being damaged, attacked, stolen, or injured; guard.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-PROTECTED`), namedNode(`${rdfs}label`), literal(`Protected`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-PROTECTED`), namedNode(`${skos}prefLabel`), literal(`PROTECTED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-REINFORCED`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-REINFORCED`), namedNode(`${rdfs}comment`), literal(`A component is added to a container for a particular application to lend additional support under severe applications.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-REINFORCED`), namedNode(`${rdfs}label`), literal(`Reinforced`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-REINFORCED`), namedNode(`${skos}prefLabel`), literal(`REINFORCED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-SIFT_PROOF`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-SIFT_PROOF`), namedNode(`${rdfs}comment`), literal(`Packaging is designed to prevent leaking of the content specially when it is on powdered or liquid state.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-SIFT_PROOF`), namedNode(`${rdfs}label`), literal(`Sift Proof`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-SIFT_PROOF`), namedNode(`${skos}prefLabel`), literal(`SIFT_PROOF`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-TAMPER_EVIDENT`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-TAMPER_EVIDENT`), namedNode(`${rdfs}comment`), literal(`The packaging is designed to show when there has been some interference with the original sealing or configuration of the packaging.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-TAMPER_EVIDENT`), namedNode(`${rdfs}label`), literal(`Tamper Evident`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-TAMPER_EVIDENT`), namedNode(`${skos}prefLabel`), literal(`TAMPER_EVIDENT`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-WATER_RESISTANT`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-WATER_RESISTANT`), namedNode(`${rdfs}comment`), literal(`Coated with materials that make the packaging impervious to the effects of water.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-WATER_RESISTANT`), namedNode(`${rdfs}label`), literal(`Water Resistant`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingFunctionCode-WATER_RESISTANT`), namedNode(`${skos}prefLabel`), literal(`WATER_RESISTANT`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-APPROVED_BY_ASTHMA_AND_ALLERGY_ASSOC`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-APPROVED_BY_ASTHMA_AND_ALLERGY_ASSOC`), namedNode(`${rdfs}comment`), literal(`Definitions made by the asthma and allergist association.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-APPROVED_BY_ASTHMA_AND_ALLERGY_ASSOC`), namedNode(`${rdfs}label`), literal(`Asthma and Allergist Association`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-APPROVED_BY_ASTHMA_AND_ALLERGY_ASSOC`), namedNode(`${skos}prefLabel`), literal(`APPROVED_BY_ASTHMA_AND_ALLERGY_ASSOC`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns13}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:PackageMarksDietAllergenCodeList&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(`${rdfs}label`), literal(`Packaging Marked Diet Allergen Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-APPROVED_FOR_TUBE_FEEDING`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-APPROVED_FOR_TUBE_FEEDING`), namedNode(`${rdfs}comment`), literal(`The item is physically marked that it is approved for tube feeding by the appropriate authority of the target market.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-APPROVED_FOR_TUBE_FEEDING`), namedNode(`${rdfs}label`), literal(`Approved for Tube Feeding`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-APPROVED_FOR_TUBE_FEEDING`), namedNode(`${skos}prefLabel`), literal(`APPROVED_FOR_TUBE_FEEDING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-BIOLOGICAL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-BIOLOGICAL`), namedNode(`${rdfs}comment`), literal(`Indicates the product has been marked as a biological item which indicates a food product that was produced with the use of feed or fertilizer of plant or animal origin, without employment of chemically formulated fertilizers, growth stimulants, antibiotics or pesticides.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-BIOLOGICAL`), namedNode(`${rdfs}label`), literal(`Biological`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-BIOLOGICAL`), namedNode(`${skos}prefLabel`), literal(`BIOLOGICAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CALORIES_PER_PORTION`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CALORIES_PER_PORTION`), namedNode(`${rdfs}comment`), literal(`Indicates the product has a marking with the calories per portion contained in the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CALORIES_PER_PORTION`), namedNode(`${rdfs}label`), literal(`Calories Per Portion`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CALORIES_PER_PORTION`), namedNode(`${skos}prefLabel`), literal(`CALORIES_PER_PORTION`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CONTAINS_LATEX`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CONTAINS_LATEX`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as containing Latex (rubber).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CONTAINS_LATEX`), namedNode(`${rdfs}label`), literal(`Contains Latex`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CONTAINS_LATEX`), namedNode(`${skos}prefLabel`), literal(`CONTAINS_LATEX`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CONTAINS_PVC`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CONTAINS_PVC`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as containing PVC (Polyvinyl chloride). Phthalate content is unspecified.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CONTAINS_PVC`), namedNode(`${rdfs}label`), literal(`Contains PVC`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CONTAINS_PVC`), namedNode(`${skos}prefLabel`), literal(`CONTAINS_PVC`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CONTAINS_PVC_WITHOUT_PHTHALATES`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CONTAINS_PVC_WITHOUT_PHTHALATES`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as containing PVC (Polyvinyl chloride) without phthalates.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CONTAINS_PVC_WITHOUT_PHTHALATES`), namedNode(`${rdfs}label`), literal(`Contains PVC Without Phthalates`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CONTAINS_PVC_WITHOUT_PHTHALATES`), namedNode(`${skos}prefLabel`), literal(`CONTAINS_PVC_WITHOUT_PHTHALATES`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CONTAINS_PVC_WITH_PHTHALATES`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CONTAINS_PVC_WITH_PHTHALATES`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as containing PVC (Polyvinyl chloride) with phthalates.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CONTAINS_PVC_WITH_PHTHALATES`), namedNode(`${rdfs}label`), literal(`Contains PVC With Phthalates`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-CONTAINS_PVC_WITH_PHTHALATES`), namedNode(`${skos}prefLabel`), literal(`CONTAINS_PVC_WITH_PHTHALATES`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-DIET_PRODUCT_450_800_KCAL_PER_DAY`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-DIET_PRODUCT_450_800_KCAL_PER_DAY`), namedNode(`${rdfs}comment`), literal(`The item is physically marked that it is approved for a 450-800 kilocalorie/day diet by the appropriate authority of the target market.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-DIET_PRODUCT_450_800_KCAL_PER_DAY`), namedNode(`${rdfs}label`), literal(`450-800 Kilocalorie Per Day Diet`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-DIET_PRODUCT_450_800_KCAL_PER_DAY`), namedNode(`${skos}prefLabel`), literal(`DIET_PRODUCT_450_800_KCAL_PER_DAY`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-DIET_PRODUCT_800_1200_KCAL_PER_DAY`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-DIET_PRODUCT_800_1200_KCAL_PER_DAY`), namedNode(`${rdfs}comment`), literal(`The item is physically marked that it is approved for a 800-1200 kilocalorie/day diet by the appropriate authority of the target market.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-DIET_PRODUCT_800_1200_KCAL_PER_DAY`), namedNode(`${rdfs}label`), literal(`800-1200 Kilocalorie Per Day Diet`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-DIET_PRODUCT_800_1200_KCAL_PER_DAY`), namedNode(`${skos}prefLabel`), literal(`DIET_PRODUCT_800_1200_KCAL_PER_DAY`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-GEZONDE_KEUZE_KLAVERTJE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-GEZONDE_KEUZE_KLAVERTJE`), namedNode(`${rdfs}comment`), literal(`Health symbol used in the Netherlands Target Market which indicates that the item is a cholesterol-reducing product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-GEZONDE_KEUZE_KLAVERTJE`), namedNode(`${rdfs}label`), literal(`Gezonde Keuze Klavertje`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-GEZONDE_KEUZE_KLAVERTJE`), namedNode(`${skos}prefLabel`), literal(`GEZONDE_KEUZE_KLAVERTJE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-HALAL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-HALAL`), namedNode(`${rdfs}comment`), literal(`Indicates the product has been marked as Halal which denotes selling or serving food ritually fit according to Islamic dietary laws.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-HALAL`), namedNode(`${rdfs}label`), literal(`Halal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-HALAL`), namedNode(`${skos}prefLabel`), literal(`HALAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-IK_KIES_BEWUST`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-IK_KIES_BEWUST`), namedNode(`${rdfs}comment`), literal(`Conscious choice symbol used in the Netherlands Target Market which may be used for products low in saturated fat, trans fatty acids, sugar and salt.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-IK_KIES_BEWUST`), namedNode(`${rdfs}label`), literal(`Ik Kies Bewust`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-IK_KIES_BEWUST`), namedNode(`${skos}prefLabel`), literal(`IK_KIES_BEWUST`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-KOSHER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-KOSHER`), namedNode(`${rdfs}comment`), literal(`Indicates the product has been marked as Kosher which denotes selling or serving food ritually fit according to Jewish dietary laws.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-KOSHER`), namedNode(`${rdfs}label`), literal(`Kosher`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-KOSHER`), namedNode(`${skos}prefLabel`), literal(`KOSHER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-LACTASE_ENZYME`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-LACTASE_ENZYME`), namedNode(`${rdfs}comment`), literal(`The item is physically marked that it is approved as lactase enzyme by the appropriate authority of the target market.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-LACTASE_ENZYME`), namedNode(`${rdfs}label`), literal(`Lactase Enzyme`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-LACTASE_ENZYME`), namedNode(`${skos}prefLabel`), literal(`LACTASE_ENZYME`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-LOW_ON_PHENYLALANINE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-LOW_ON_PHENYLALANINE`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as containing a low level of phenylalanine as approved by the appropriate authority of the target market.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-LOW_ON_PHENYLALANINE`), namedNode(`${rdfs}label`), literal(`Low in Phenylalanine`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-LOW_ON_PHENYLALANINE`), namedNode(`${skos}prefLabel`), literal(`LOW_ON_PHENYLALANINE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-LOW_ON_SUGAR`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-LOW_ON_SUGAR`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as containing a low level of sugar as approved by the appropriate authority of the target market.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-LOW_ON_SUGAR`), namedNode(`${rdfs}label`), literal(`Low Sugar`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-LOW_ON_SUGAR`), namedNode(`${skos}prefLabel`), literal(`LOW_ON_SUGAR`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-MOTHERS_MILK_SUBSTITUTE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-MOTHERS_MILK_SUBSTITUTE`), namedNode(`${rdfs}comment`), literal(`The item is physically marked that it is approved as substitute mother's milk the appropriate authority of the target market.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-MOTHERS_MILK_SUBSTITUTE`), namedNode(`${rdfs}label`), literal(`Mother's Milk Substitute`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-MOTHERS_MILK_SUBSTITUTE`), namedNode(`${skos}prefLabel`), literal(`MOTHERS_MILK_SUBSTITUTE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-NUTRITION_SUPPLEMENT`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-NUTRITION_SUPPLEMENT`), namedNode(`${rdfs}comment`), literal(`The item is physically marked that it is approved as nutrition supplement by the appropriate authority of the target market.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-NUTRITION_SUPPLEMENT`), namedNode(`${rdfs}label`), literal(`Nutrition Supplement`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-NUTRITION_SUPPLEMENT`), namedNode(`${skos}prefLabel`), literal(`NUTRITION_SUPPLEMENT`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-NYCKELHAL_MARK`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-NYCKELHAL_MARK`), namedNode(`${rdfs}comment`), literal(`Lean product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-NYCKELHAL_MARK`), namedNode(`${rdfs}label`), literal(`Nyckelhal Mark`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-NYCKELHAL_MARK`), namedNode(`${skos}prefLabel`), literal(`NYCKELHAL_MARK`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-VEGETARIAN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-VEGETARIAN`), namedNode(`${rdfs}comment`), literal(`Indicates the product has been marked as vegetarian which denotes a product that contains no meat, fish or other animal products.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-VEGETARIAN`), namedNode(`${rdfs}label`), literal(`Vegetarian`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedDietAllergenCode-VEGETARIAN`), namedNode(`${skos}prefLabel`), literal(`VEGETARIAN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_ARTIFICIAL_COLOURING`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_ARTIFICIAL_COLOURING`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as having no artificial colouring.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_ARTIFICIAL_COLOURING`), namedNode(`${rdfs}label`), literal(`Free From Artificial Colouring`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_ARTIFICIAL_COLOURING`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_ARTIFICIAL_COLOURING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:PackagingMarkedFreeFromCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(`${rdfs}label`), literal(`Packaging Marked Free From Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_ARTIFICIAL_FLAVOURING`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_ARTIFICIAL_FLAVOURING`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as having no artificial flavouring.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_ARTIFICIAL_FLAVOURING`), namedNode(`${rdfs}label`), literal(`Free From Artificial Flavouring`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_ARTIFICIAL_FLAVOURING`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_ARTIFICIAL_FLAVOURING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_ARTIFICIAL_PRESERVATIVES`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_ARTIFICIAL_PRESERVATIVES`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as having no artificial preservatives.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_ARTIFICIAL_PRESERVATIVES`), namedNode(`${rdfs}label`), literal(`Free From Artificial Preservatives`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_ARTIFICIAL_PRESERVATIVES`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_ARTIFICIAL_PRESERVATIVES`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_CHOLESTEROL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_CHOLESTEROL`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as having no Cholesterol.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_CHOLESTEROL`), namedNode(`${rdfs}label`), literal(`Free From Cholesterol`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_CHOLESTEROL`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_CHOLESTEROL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_CLONED_FOOD`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_CLONED_FOOD`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as being free from cloned food.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_CLONED_FOOD`), namedNode(`${rdfs}label`), literal(`Free From Cloned Food`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_CLONED_FOOD`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_CLONED_FOOD`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_DAIRY`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_DAIRY`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as being free from dairy and dairy products, as approved by the appropriate authority of the target market.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_DAIRY`), namedNode(`${rdfs}label`), literal(`Free From Dairy and Dairy Products`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_DAIRY`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_DAIRY`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_EGG`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_EGG`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as free from egg.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_EGG`), namedNode(`${rdfs}label`), literal(`Free From Egg`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_EGG`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_EGG`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_FISH`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_FISH`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as being free from fish.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_FISH`), namedNode(`${rdfs}label`), literal(`Free From Fish`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_FISH`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_FISH`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_GLUTEN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_GLUTEN`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as free from gluten. This level of containment is frequently determined through regulation.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_GLUTEN`), namedNode(`${rdfs}label`), literal(`Free From Gluten`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_GLUTEN`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_GLUTEN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_LACTOSE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_LACTOSE`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as being free of lactose.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_LACTOSE`), namedNode(`${rdfs}label`), literal(`Free Of Lactose`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_LACTOSE`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_LACTOSE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_LATEX`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_LATEX`), namedNode(`${rdfs}comment`), literal(`The item is physically marked being free from Latex (rubber).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_LATEX`), namedNode(`${rdfs}label`), literal(`Free From Latex`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_LATEX`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_LATEX`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_LEGUME_PROTEIN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_LEGUME_PROTEIN`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as being free from legume protein.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_LEGUME_PROTEIN`), namedNode(`${rdfs}label`), literal(`Free From Legume Protein`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_LEGUME_PROTEIN`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_LEGUME_PROTEIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_MILK`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_MILK`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as being free from milk and any of its derivatives.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_MILK`), namedNode(`${rdfs}label`), literal(`Free From Milk`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_MILK`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_MILK`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_MILK_PROTEIN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_MILK_PROTEIN`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as being free from milk protein.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_MILK_PROTEIN`), namedNode(`${rdfs}label`), literal(`Free From Milk Protein`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_MILK_PROTEIN`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_MILK_PROTEIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_NATURAL_GLUTEN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_NATURAL_GLUTEN`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as being naturally free from gluten and not extracted as part of the manufacturing process.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_NATURAL_GLUTEN`), namedNode(`${rdfs}label`), literal(`Naturally Free From Gluten`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_NATURAL_GLUTEN`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_NATURAL_GLUTEN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_PEANUTS`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_PEANUTS`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as being free from peanuts.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_PEANUTS`), namedNode(`${rdfs}label`), literal(`Free From Peanuts`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_PEANUTS`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_PEANUTS`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_PROTEIN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_PROTEIN`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as being free from protein.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_PROTEIN`), namedNode(`${rdfs}label`), literal(`Free from Protein`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_PROTEIN`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_PROTEIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_PVC`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_PVC`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as being free from PVC (Polyvinyl chloride).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_PVC`), namedNode(`${rdfs}label`), literal(`Free from PVC`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_PVC`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_PVC`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_SOYA`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_SOYA`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as being free from soya.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_SOYA`), namedNode(`${rdfs}label`), literal(`Free From Soya`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_SOYA`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_SOYA`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_SUGAR`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_SUGAR`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as being free from sugar.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_SUGAR`), namedNode(`${rdfs}label`), literal(`Free From Sugar`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_SUGAR`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_SUGAR`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_TRANSFAT`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_TRANSFAT`), namedNode(`${rdfs}comment`), literal(`The item is physically marked being free from Trans Fatty Acids (Trans Fat)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_TRANSFAT`), namedNode(`${rdfs}label`), literal(`Free from Trans Fatty Acids`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-FREE_FROM_TRANSFAT`), namedNode(`${skos}prefLabel`), literal(`FREE_FROM_TRANSFAT`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-REDUCED_LACTOSE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-REDUCED_LACTOSE`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as having a reduced amount of lactose`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-REDUCED_LACTOSE`), namedNode(`${rdfs}label`), literal(`Reduced Amount of Lactose`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-REDUCED_LACTOSE`), namedNode(`${skos}prefLabel`), literal(`REDUCED_LACTOSE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-REDUCED_PROTEIN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-REDUCED_PROTEIN`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as containing a low level of protein.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-REDUCED_PROTEIN`), namedNode(`${rdfs}label`), literal(`Low Level of Protein`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-REDUCED_PROTEIN`), namedNode(`${skos}prefLabel`), literal(`REDUCED_PROTEIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-REDUCED_TRANSFAT`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-REDUCED_TRANSFAT`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as having a reduced amount of transfats (unsaturated).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-REDUCED_TRANSFAT`), namedNode(`${rdfs}label`), literal(`Reduced Amount of Transfats`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-REDUCED_TRANSFAT`), namedNode(`${skos}prefLabel`), literal(`REDUCED_TRANSFAT`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-VERY_LOW_GLUTEN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-VERY_LOW_GLUTEN`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as a very low amount of gluten. Very low is frequently determined through regulation for example, per EU Regulation (EC) No 41/2009 [of 20 January 2009], this is defined as containing between 20 and 100 mg/kg).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-VERY_LOW_GLUTEN`), namedNode(`${rdfs}label`), literal(`Very Low Amount of Gluten`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-VERY_LOW_GLUTEN`), namedNode(`${skos}prefLabel`), literal(`VERY_LOW_GLUTEN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-WITHOUT_ADDED_SALT`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-WITHOUT_ADDED_SALT`), namedNode(`${rdfs}comment`), literal(`The item is physically marked that no salt has been added when manufacturing the product but it still can contain salt that is naturally part of the ingredients, as approved by the appropriate authority of the target market.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-WITHOUT_ADDED_SALT`), namedNode(`${rdfs}label`), literal(`Without Added Salt`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-WITHOUT_ADDED_SALT`), namedNode(`${skos}prefLabel`), literal(`WITHOUT_ADDED_SALT`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-WITHOUT_ADDED_SUGAR`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-WITHOUT_ADDED_SUGAR`), namedNode(`${rdfs}comment`), literal(`The item is physically marked that no sugar has been added when manufacturing the product but it still can contain sugars that are naturally part of the ingredients, as approved by the appropriate authority of the target market.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-WITHOUT_ADDED_SUGAR`), namedNode(`${rdfs}label`), literal(`Without Added Sugar`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-WITHOUT_ADDED_SUGAR`), namedNode(`${skos}prefLabel`), literal(`WITHOUT_ADDED_SUGAR`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-WITHOUT_ADDED_SWEETENER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-WITHOUT_ADDED_SWEETENER`), namedNode(`${rdfs}comment`), literal(`The item is physically marked that no sweetener has been added when manufacturing the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-WITHOUT_ADDED_SWEETENER`), namedNode(`${rdfs}label`), literal(`Without Added Sweetener`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedFreeFromCode-WITHOUT_ADDED_SWEETENER`), namedNode(`${skos}prefLabel`), literal(`WITHOUT_ADDED_SWEETENER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-AMA_ORGANIC_SEAL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-AMA_ORGANIC_SEAL`), namedNode(`${rdfs}comment`), literal(`Austria Ministry of Agriculture Organic Label, AMA Marketing licenses the AMA organic logo. Red, white and black indicates the majority of ingredients are of Austrian origin.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-AMA_ORGANIC_SEAL`), namedNode(`${rdfs}label`), literal(`Austria Ministry of Agriculture Organic Label`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-AMA_ORGANIC_SEAL`), namedNode(`${skos}prefLabel`), literal(`AMA_ORGANIC_SEAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:PackagingMarkedLabelAccreditationCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(`${rdfs}label`), literal(`Packaging Marked Label Accreditation Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-AUS_KAUP_ESTONIA`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-AUS_KAUP_ESTONIA`), namedNode(`${rdfs}comment`), literal(`Used to specify Estonia Meat in their product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-AUS_KAUP_ESTONIA`), namedNode(`${rdfs}label`), literal(`Aus Kaup Estonia`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-AUS_KAUP_ESTONIA`), namedNode(`${skos}prefLabel`), literal(`AUS_KAUP_ESTONIA`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BDIH_LOGO`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BDIH_LOGO`), namedNode(`${rdfs}label`), literal(`BDIH Germany guidelines for Certified Natural Cosmetics`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BDIH_LOGO`), namedNode(`${skos}prefLabel`), literal(`BDIH_LOGO`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BETER_LEVEN_1_STER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BETER_LEVEN_1_STER`), namedNode(`${rdfs}comment`), literal(`The one-star Beter Leven (better life) mark indicates that the product comes from a company that cares that animals are kept according to the minimal requirements for sanitation and well-being for the cattle industry.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BETER_LEVEN_1_STER`), namedNode(`${rdfs}label`), literal(`Beter Leven One Star Mark`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BETER_LEVEN_1_STER`), namedNode(`${skos}prefLabel`), literal(`BETER_LEVEN_1_STER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BETER_LEVEN_2_STER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BETER_LEVEN_2_STER`), namedNode(`${rdfs}comment`), literal(`The two-star Beter Leven (better life) mark indicates that the product comes from a company that provides for a higher well-being of animals than that established by the minimal requirements for sanitation and well-being for the cattle industry, yet the conditions are inferior to those of Biological-class products.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BETER_LEVEN_2_STER`), namedNode(`${rdfs}label`), literal(`Beter Leven Two Star Mark`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BETER_LEVEN_2_STER`), namedNode(`${skos}prefLabel`), literal(`BETER_LEVEN_2_STER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BETER_LEVEN_3_STER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BETER_LEVEN_3_STER`), namedNode(`${rdfs}comment`), literal(`The three-star Beter Leven (better life) mark is awarded to products that come from companies that excel in keeping animals according to top guidelines for Biological-class products. In some cases this mark is accompanied by an EKO indication.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BETER_LEVEN_3_STER`), namedNode(`${rdfs}label`), literal(`Beter Leven Three Star Mark`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BETER_LEVEN_3_STER`), namedNode(`${skos}prefLabel`), literal(`BETER_LEVEN_3_STER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BIO_AUSTRIA_LABEL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BIO_AUSTRIA_LABEL`), namedNode(`${rdfs}label`), literal(`Bio Austria`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BIO_AUSTRIA_LABEL`), namedNode(`${skos}prefLabel`), literal(`BIO_AUSTRIA_LABEL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BIO_LABEL_GERMAN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BIO_LABEL_GERMAN`), namedNode(`${rdfs}label`), literal(`German national organic certification label (Bio-Siegel)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BIO_LABEL_GERMAN`), namedNode(`${skos}prefLabel`), literal(`BIO_LABEL_GERMAN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BIO_SUISSE_BUD_SEAL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BIO_SUISSE_BUD_SEAL`), namedNode(`${rdfs}label`), literal(`Represents interests of Swiss organic farmers`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BIO_SUISSE_BUD_SEAL`), namedNode(`${skos}prefLabel`), literal(`BIO_SUISSE_BUD_SEAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BLUE_ANGEL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BLUE_ANGEL`), namedNode(`${rdfs}comment`), literal(`The Blue Angel is awarded to companies as kind of a reward for their commitment to environmental protection. They use it to professionally promote their eco-friendly products in the market. The Blue Angel is an ecological beacon showing the consumer the way to the ecologically superior product and promotes environmentally conscious consumption.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BLUE_ANGEL`), namedNode(`${rdfs}label`), literal(`Blue Angel`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BLUE_ANGEL`), namedNode(`${skos}prefLabel`), literal(`BLUE_ANGEL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BORD_BIA_APPROVED`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BORD_BIA_APPROVED`), namedNode(`${rdfs}comment`), literal(`The Bord Bia Approved logo is awarded to a company which has been audited by Bord Bia to verify that processes, from farm to fork, comply with the highest Quality Assurance Standards. These standards include animal welfare, traceability, environment, safety, feed, water, testing, inspection, hygiene and good manufacturing practice. Bord Bia Approved is awarded to a company where all the ingredients including meat content satisfy the Bord Bia requirements.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BORD_BIA_APPROVED`), namedNode(`${rdfs}label`), literal(`Bord Bia Approved Logo`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BORD_BIA_APPROVED`), namedNode(`${skos}prefLabel`), literal(`BORD_BIA_APPROVED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BORD_BIA_APPROVED_MEAT`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BORD_BIA_APPROVED_MEAT`), namedNode(`${rdfs}comment`), literal(`Bord Bia Approved - Meat Content Only applies to companies where only the meat content satisfies certain conditions detailed in the Bord Bia requirements document.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BORD_BIA_APPROVED_MEAT`), namedNode(`${rdfs}label`), literal(`Bord Bia Approved - Meat Content Only`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BORD_BIA_APPROVED_MEAT`), namedNode(`${skos}prefLabel`), literal(`BORD_BIA_APPROVED_MEAT`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BRA_MILJOVAL_LABEL_SWEDISH`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BRA_MILJOVAL_LABEL_SWEDISH`), namedNode(`${rdfs}comment`), literal(`Bra Miljoval Bra is the ecolabel of SSNC. It is referred to as Good Environmental Choice in English. SSNC started ecolabelling.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BRA_MILJOVAL_LABEL_SWEDISH`), namedNode(`${rdfs}label`), literal(`Bra Miljoval`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-BRA_MILJOVAL_LABEL_SWEDISH`), namedNode(`${skos}prefLabel`), literal(`BRA_MILJOVAL_LABEL_SWEDISH`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-CROSSED_GRAIN_SYMBOL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-CROSSED_GRAIN_SYMBOL`), namedNode(`${rdfs}comment`), literal(`Crossed grain logo is a trademark owned and administered by Coeliac. It is a worldwide symbol for safe gluten-free foods. Each country has their own Coeliac`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-CROSSED_GRAIN_SYMBOL`), namedNode(`${rdfs}label`), literal(`Crossed grain logo`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-CROSSED_GRAIN_SYMBOL`), namedNode(`${skos}prefLabel`), literal(`CROSSED_GRAIN_SYMBOL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-DEMETER_LABEL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-DEMETER_LABEL`), namedNode(`${rdfs}comment`), literal(`Demeter International trademark for products of certified biodynamic production.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-DEMETER_LABEL`), namedNode(`${rdfs}label`), literal(`Demeter International Trademark`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-DEMETER_LABEL`), namedNode(`${skos}prefLabel`), literal(`DEMETER_LABEL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-ECOCERT_CERTIFICATE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-ECOCERT_CERTIFICATE`), namedNode(`${rdfs}comment`), literal(`ECOCERT is a certification body for sustainable development.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-ECOCERT_CERTIFICATE`), namedNode(`${rdfs}label`), literal(`ECOCERT Certification`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-ECOCERT_CERTIFICATE`), namedNode(`${skos}prefLabel`), literal(`ECOCERT_CERTIFICATE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-ECO_LABEL_LADYBUG`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-ECO_LABEL_LADYBUG`), namedNode(`${rdfs}comment`), literal(`This is a Finnish label used by the Organic union, which represents the entire Finnish organic industry, consumers and producers in a common interest group. They work as a neutral voice in various working groups and consultations, and prepare position papers and presentations. The Federation also organizes training events and professional seminars. The Organic Federation also publishes the magazine Organic.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-ECO_LABEL_LADYBUG`), namedNode(`${rdfs}label`), literal(`Eco Label Ladybug`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-ECO_LABEL_LADYBUG`), namedNode(`${skos}prefLabel`), literal(`ECO_LABEL_LADYBUG`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EC_NATIONAL_HEALTH_MARK`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EC_NATIONAL_HEALTH_MARK`), namedNode(`${rdfs}comment`), literal(`The package is physically marked with EC National Health Mark. The EC National Health Mark is the health mark for specific hygiene regulations for food of animal origin. The regulation (EC) Nr. 853/2004 of 29. April 2004 of the European Parliament on hygiene rules for food of animal origin demands that companies handling products of animal origin are authorised according to this regulation. The official body responsible for this authorisation assigns a health mark to the food producing company`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EC_NATIONAL_HEALTH_MARK`), namedNode(`${rdfs}label`), literal(`EC National Health Mark`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EC_NATIONAL_HEALTH_MARK`), namedNode(`${skos}prefLabel`), literal(`EC_NATIONAL_HEALTH_MARK`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EESTI_OKOMARK`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EESTI_OKOMARK`), namedNode(`${rdfs}comment`), literal(`Estonian Eco Label: Ministry of Agriculture Okomark (Label of Organic Food).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EESTI_OKOMARK`), namedNode(`${rdfs}label`), literal(`EESTI OKOMARK (Label of Organic Food)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EESTI_OKOMARK`), namedNode(`${skos}prefLabel`), literal(`EESTI_OKOMARK`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EESTI_PARIM_TOIDUAINE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EESTI_PARIM_TOIDUAINE`), namedNode(`${rdfs}comment`), literal(`Best Food Association of Estonia Food Industry http://www.toiduliit.ee/. An organisation that supports and promote Estonian food industry and economy, and contribute to a balanced and appropriate ethics to members of a favourable business environment for development.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EESTI_PARIM_TOIDUAINE`), namedNode(`${rdfs}label`), literal(`Best Food Association of Estonia Food Industry`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EESTI_PARIM_TOIDUAINE`), namedNode(`${skos}prefLabel`), literal(`EESTI_PARIM_TOIDUAINE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EKO`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EKO`), namedNode(`${rdfs}comment`), literal(`This symbol stands for organic production certified by Skal that meets the requirements of the EU-regulation for organic production. Skal is the inspection body for the organic production in the Netherlands.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EKO`), namedNode(`${rdfs}label`), literal(`Skal EKO Label`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EKO`), namedNode(`${skos}prefLabel`), literal(`EKO`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EU_ECO_LABEL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EU_ECO_LABEL`), namedNode(`${rdfs}comment`), literal(`The item is physically marked with the European Union Eco label a European environmental initiative supported by the European Commission.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EU_ECO_LABEL`), namedNode(`${rdfs}label`), literal(`European Union Eco Label`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EU_ECO_LABEL`), namedNode(`${skos}prefLabel`), literal(`EU_ECO_LABEL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EU_ORGANIC_FARMING`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EU_ORGANIC_FARMING`), namedNode(`${rdfs}comment`), literal(`New EU organic logo the EU introduced a new organic logo to ensure consumer protection and common standards.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EU_ORGANIC_FARMING`), namedNode(`${rdfs}label`), literal(`EU Organic Farming Logo`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-EU_ORGANIC_FARMING`), namedNode(`${skos}prefLabel`), literal(`EU_ORGANIC_FARMING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-FAIR_TRADE_MARK`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-FAIR_TRADE_MARK`), namedNode(`${rdfs}comment`), literal(`The Fair Trade Mark certifies that products meet the social, economic and environmental International Fair trade Standards. The Fair Trade Mark is usually supported by a local Fair Trade Labelling Organization and certifies products not companies. It does not cover the companies or organizations selling the product`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-FAIR_TRADE_MARK`), namedNode(`${rdfs}label`), literal(`The Fair Trade Mark`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-FAIR_TRADE_MARK`), namedNode(`${skos}prefLabel`), literal(`FAIR_TRADE_MARK`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-FALKEN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-FALKEN`), namedNode(`${rdfs}label`), literal(`Falken`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-FALKEN`), namedNode(`${skos}prefLabel`), literal(`FALKEN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-FINNISH_HEART_SYMBOL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-FINNISH_HEART_SYMBOL`), namedNode(`${rdfs}comment`), literal(`The heart symbol to inform the consumer at one glance that the product marked with this symbol is a preferred choice in its product group with regard to fat and sodium. Finnish Heart Association.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-FINNISH_HEART_SYMBOL`), namedNode(`${rdfs}label`), literal(`Finnish Heart Symbol`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-FINNISH_HEART_SYMBOL`), namedNode(`${skos}prefLabel`), literal(`FINNISH_HEART_SYMBOL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-FOREST_STEWARDSHIP_COUNCIL_LABEL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-FOREST_STEWARDSHIP_COUNCIL_LABEL`), namedNode(`${rdfs}comment`), literal(`The item is physically marked with the Forest Stewardship Council label.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-FOREST_STEWARDSHIP_COUNCIL_LABEL`), namedNode(`${rdfs}label`), literal(`Forest Stewardship Council Label`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-FOREST_STEWARDSHIP_COUNCIL_LABEL`), namedNode(`${skos}prefLabel`), literal(`FOREST_STEWARDSHIP_COUNCIL_LABEL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GMO_MARKED`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GMO_MARKED`), namedNode(`${rdfs}comment`), literal(`The item is physically marked as of genetically modified origin.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GMO_MARKED`), namedNode(`${rdfs}label`), literal(`GMO Marked`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GMO_MARKED`), namedNode(`${skos}prefLabel`), literal(`GMO_MARKED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GOODS_FROM_FINLAND_BLUE_SWAN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GOODS_FROM_FINLAND_BLUE_SWAN`), namedNode(`${rdfs}label`), literal(`Finfood Suomen Ruokatieto Ry`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GOODS_FROM_FINLAND_BLUE_SWAN`), namedNode(`${skos}prefLabel`), literal(`GOODS_FROM_FINLAND_BLUE_SWAN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GREEN_DOT`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GREEN_DOT`), namedNode(`${rdfs}label`), literal(`Green Dot`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GREEN_DOT`), namedNode(`${skos}prefLabel`), literal(`GREEN_DOT`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GREEN_RESTAURANT_ASSOCIATION_ENDORSED`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GREEN_RESTAURANT_ASSOCIATION_ENDORSED`), namedNode(`${rdfs}comment`), literal(`The item is physically marked with the Green Restaurant Association Endorsed symbol.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GREEN_RESTAURANT_ASSOCIATION_ENDORSED`), namedNode(`${rdfs}label`), literal(`Green Restaurant Association Endorsed symbol`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GREEN_RESTAURANT_ASSOCIATION_ENDORSED`), namedNode(`${skos}prefLabel`), literal(`GREEN_RESTAURANT_ASSOCIATION_ENDORSED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GREEN_SEAL_CERTIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GREEN_SEAL_CERTIFIED`), namedNode(`${rdfs}comment`), literal(`The item is physically marked with the Green Seal Certified symbol.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GREEN_SEAL_CERTIFIED`), namedNode(`${rdfs}label`), literal(`Green Seal Certified Symbol`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GREEN_SEAL_CERTIFIED`), namedNode(`${skos}prefLabel`), literal(`GREEN_SEAL_CERTIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GUARANTEED_IRISH`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GUARANTEED_IRISH`), namedNode(`${rdfs}comment`), literal(`Ireland: The Guaranteed Irish symbol makes shopping for Irish products and services a lot easier. Shoppers know that when they buy a product or service featuring the guaranteed Irish logo they are supporting Irish companies and safeguarding Irish jobs.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GUARANTEED_IRISH`), namedNode(`${rdfs}label`), literal(`Guaranteed Irish Symbol`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-GUARANTEED_IRISH`), namedNode(`${skos}prefLabel`), literal(`GUARANTEED_IRISH`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-KRAV_MARK`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-KRAV_MARK`), namedNode(`${rdfs}label`), literal(`KRAV Mark`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-KRAV_MARK`), namedNode(`${skos}prefLabel`), literal(`KRAV_MARK`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-LABEL_OF_THE_ALLERGY_AND_ASTHMA_FEDERATION`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-LABEL_OF_THE_ALLERGY_AND_ASTHMA_FEDERATION`), namedNode(`${rdfs}comment`), literal(`Allergy and Asthma Federation is a non-profit public health organisation. Our aim is to improve quality of life of the allergy and asthma patients.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-LABEL_OF_THE_ALLERGY_AND_ASTHMA_FEDERATION`), namedNode(`${rdfs}label`), literal(`Allergy and Asthma Federation`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-LABEL_OF_THE_ALLERGY_AND_ASTHMA_FEDERATION`), namedNode(`${skos}prefLabel`), literal(`LABEL_OF_THE_ALLERGY_AND_ASTHMA_FEDERATION`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-LEAPING_BUNNY`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-LEAPING_BUNNY`), namedNode(`${rdfs}comment`), literal(`The Coalition for Consumer Information on Cosmetics (CCIC) Leaping Bunny Program administers a cruelty-free standard and the internationally recognized Leaping Bunny Logo for companies producing cosmetic, personal care, and household products. The Leaping Bunny Program provides the best assurance that no new animal testing is used in any phase of product development by the company, its laboratories, or suppliers.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-LEAPING_BUNNY`), namedNode(`${rdfs}label`), literal(`Leaping Bunny Program`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-LEAPING_BUNNY`), namedNode(`${skos}prefLabel`), literal(`LEAPING_BUNNY`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-LOODUSSOBRALIK_TOODE_ESTONIA`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-LOODUSSOBRALIK_TOODE_ESTONIA`), namedNode(`${rdfs}comment`), literal(`Eco-friendly product The sign eco-friendly product is designed to make environmentally friendly products on store shelves more as significant. When it comes to food shall be used for agriculture, natural farming methods. No use of mineral fertilizers, insect control and plant poisons.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-LOODUSSOBRALIK_TOODE_ESTONIA`), namedNode(`${rdfs}label`), literal(`Loodussobralik Toode Estonia`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-LOODUSSOBRALIK_TOODE_ESTONIA`), namedNode(`${skos}prefLabel`), literal(`LOODUSSOBRALIK_TOODE_ESTONIA`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-LOVE_IRISH_FOOD`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-LOVE_IRISH_FOOD`), namedNode(`${rdfs}comment`), literal(`Love Irish Food - a promotional label printed on the product packaging to indicate to the consumer that the food is manufactured in Ireland using Irish ingredients.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-LOVE_IRISH_FOOD`), namedNode(`${rdfs}label`), literal(`Love Irish Food`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-LOVE_IRISH_FOOD`), namedNode(`${skos}prefLabel`), literal(`LOVE_IRISH_FOOD`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-MADE_IN_FINLAND_FLAG_WITH_KEY`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-MADE_IN_FINLAND_FLAG_WITH_KEY`), namedNode(`${rdfs}comment`), literal(`Made in Finland Products that are made in Finland Avainlippu (Key Flag) Suomalaisen Tyon`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-MADE_IN_FINLAND_FLAG_WITH_KEY`), namedNode(`${rdfs}label`), literal(`Made in Finland`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-MADE_IN_FINLAND_FLAG_WITH_KEY`), namedNode(`${skos}prefLabel`), literal(`MADE_IN_FINLAND_FLAG_WITH_KEY`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-MARINE_STEWARDSHIP_COUNCIL_LABEL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-MARINE_STEWARDSHIP_COUNCIL_LABEL`), namedNode(`${rdfs}label`), literal(`Marine Stewardship Council label`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-MARINE_STEWARDSHIP_COUNCIL_LABEL`), namedNode(`${skos}prefLabel`), literal(`MARINE_STEWARDSHIP_COUNCIL_LABEL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-MAX_HAVELAAR`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-MAX_HAVELAAR`), namedNode(`${rdfs}comment`), literal(`Fair trade symbol used in the Netherlands Target Market awarded to manufacturers which contribute to improving the living and working conditions of small farmers and agricultural workers in disadvantaged regions.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-MAX_HAVELAAR`), namedNode(`${rdfs}label`), literal(`Max Havelaar`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-MAX_HAVELAAR`), namedNode(`${skos}prefLabel`), literal(`MAX_HAVELAAR`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-NATRUE_LABEL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-NATRUE_LABEL`), namedNode(`${rdfs}comment`), literal(`The NATRUE Label guarantees that the products that carry it are made only with natural and organic ingredients, through soft manufacturing processes and environmentally friendly practices. The NATRUE Label is awarded by NATRUE, a non-profit organisation committed to promote and protect high standards of quality and environmental integrity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-NATRUE_LABEL`), namedNode(`${rdfs}label`), literal(`NATRUE Label`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-NATRUE_LABEL`), namedNode(`${skos}prefLabel`), literal(`NATRUE_LABEL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-NYCKELHALET`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-NYCKELHALET`), namedNode(`${rdfs}comment`), literal(`The green key hole is to be put on the healthy foods in Sweden, Denmark, and Norway within certain product groups in order to make it easier for the customers to make a healthy choice. http://www.norden.org/`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-NYCKELHALET`), namedNode(`${rdfs}label`), literal(`Green Key Hole`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-NYCKELHALET`), namedNode(`${skos}prefLabel`), literal(`NYCKELHALET`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-OEKO_TEX_LABEL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-OEKO_TEX_LABEL`), namedNode(`${rdfs}comment`), literal(`Confidence in textiles. This has been the motto of the independent test institutes of the International Oeko-Tex Association since 1992, with their tests for harmful substances according to Oeko-Tex Standard 100 for textile products of all types which pose no risk whatsoever to health.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-OEKO_TEX_LABEL`), namedNode(`${rdfs}label`), literal(`Confidence in Textiles Oeko-Tex`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-OEKO_TEX_LABEL`), namedNode(`${skos}prefLabel`), literal(`OEKO_TEX_LABEL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-OFFICIAL_ECO_LABEL_SUN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-OFFICIAL_ECO_LABEL_SUN`), namedNode(`${rdfs}comment`), literal(`Luomo Sun Sign Denotes controlled organic production. The official label of the Finnish inspection authorities; owned by the Ministry of Agriculture and Forestry.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-OFFICIAL_ECO_LABEL_SUN`), namedNode(`${rdfs}label`), literal(`Luomo Sun Sign`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-OFFICIAL_ECO_LABEL_SUN`), namedNode(`${skos}prefLabel`), literal(`OFFICIAL_ECO_LABEL_SUN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-PEFC`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-PEFC`), namedNode(`${rdfs}comment`), literal(`Programme for Endorsement of Forest Certification (PEFCC_ is an international non-profit, non-governmental organisation dedicated to promoting Sustainable Forest Management (SFM) through independent third-party certification`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-PEFC`), namedNode(`${rdfs}label`), literal(`Programme for Endorsement of Forest Certification`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-PEFC`), namedNode(`${skos}prefLabel`), literal(`PEFC`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-PROTECTED_DESIGNATION_OF_ORIGIN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-PROTECTED_DESIGNATION_OF_ORIGIN`), namedNode(`${rdfs}comment`), literal(`The Protected designation of origin is the name of an area, a specific place or, in exceptional cases, the name of a country, used as a designation for an agricultural product or a foodstuff, the entire product must be traditionally and ENTIRELY manufactured (prepared, processed AND produced) within the specific region and thus acquire unique properties. Protected Geographical Status (PGS) is a legal framework defined in European Union law to protect the names of regional foods.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-PROTECTED_DESIGNATION_OF_ORIGIN`), namedNode(`${rdfs}label`), literal(`Protected Designation of Origin`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-PROTECTED_DESIGNATION_OF_ORIGIN`), namedNode(`${skos}prefLabel`), literal(`PROTECTED_DESIGNATION_OF_ORIGIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-PROTECTED_GEOGRAPHICAL_INDICATION`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-PROTECTED_GEOGRAPHICAL_INDICATION`), namedNode(`${rdfs}comment`), literal(`The Protected geographical indication is the name of an area, a specific place or, in exceptional cases, the name of a country, used as a description of an agricultural product or a foodstuff, the entire product must be traditionally and at least PARTIALLY manufactured (prepared, processed OR produced) within the specific region and thus acquire unique properties. Protected Geographical Status (PGS) is a legal framework[1] defined in European Union law to protect the names of regional foods.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-PROTECTED_GEOGRAPHICAL_INDICATION`), namedNode(`${rdfs}label`), literal(`Protected Geographical Indication`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-PROTECTED_GEOGRAPHICAL_INDICATION`), namedNode(`${skos}prefLabel`), literal(`PROTECTED_GEOGRAPHICAL_INDICATION`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-PROTECTED_HARVEST_CERTIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-PROTECTED_HARVEST_CERTIFIED`), namedNode(`${rdfs}comment`), literal(`The item is physically marked with the Protected Harvest Certified symbol.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-PROTECTED_HARVEST_CERTIFIED`), namedNode(`${rdfs}label`), literal(`Protected Harvest Certified Symbol`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-PROTECTED_HARVEST_CERTIFIED`), namedNode(`${skos}prefLabel`), literal(`PROTECTED_HARVEST_CERTIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-QUALITY_MARK_IRELAND`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-QUALITY_MARK_IRELAND`), namedNode(`${rdfs}comment`), literal(`Control IMO Organic farming is an alternative, environmentally friendly method of food production. It forbids the use of chemicals and requires production methods that respect animal welfare and do not damage the environment. The term organic can only be used on food labels in Ireland if the food product meets strict Irish and EU organic standards and is licensed by an approved certification body.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-QUALITY_MARK_IRELAND`), namedNode(`${rdfs}label`), literal(`Quality Mark Ireland`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-QUALITY_MARK_IRELAND`), namedNode(`${skos}prefLabel`), literal(`QUALITY_MARK_IRELAND`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-RAINFOREST_ALLIANCE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-RAINFOREST_ALLIANCE`), namedNode(`${rdfs}comment`), literal(`The item is physically marked with the Rainforest Alliance Certified symbol.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-RAINFOREST_ALLIANCE`), namedNode(`${rdfs}label`), literal(`Rainforest Alliance Certified Symbol`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-RAINFOREST_ALLIANCE`), namedNode(`${skos}prefLabel`), literal(`RAINFOREST_ALLIANCE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SCHARRELVLEES`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SCHARRELVLEES`), namedNode(`${rdfs}comment`), literal(`A symbol used in the Netherlands Target Market intended for meat based products which guarantees that the animals has been growth without the use of antibiotics.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SCHARRELVLEES`), namedNode(`${rdfs}label`), literal(`Scharrelvlees`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SCHARRELVLEES`), namedNode(`${skos}prefLabel`), literal(`SCHARRELVLEES`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SOIL_ASSOCIATION_ORGANIC_SYMBOL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SOIL_ASSOCIATION_ORGANIC_SYMBOL`), namedNode(`${rdfs}comment`), literal(`The Soil Association Organic Symbol is a symbol used in the UK to show that products meet a strict set of organic standards that protect health, sustainability and the environment.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SOIL_ASSOCIATION_ORGANIC_SYMBOL`), namedNode(`${rdfs}label`), literal(`Soil Association Organic Symbol`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SOIL_ASSOCIATION_ORGANIC_SYMBOL`), namedNode(`${skos}prefLabel`), literal(`SOIL_ASSOCIATION_ORGANIC_SYMBOL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SUSTAINABLE_PALM_OIL_RSPO`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SUSTAINABLE_PALM_OIL_RSPO`), namedNode(`${rdfs}comment`), literal(`In response to the urgent and pressing global call for sustainably produced palm oil, the Roundtable on Sustainable Palm Oil (RSPO) was formed in 2004 with the objective of promoting the growth and use of sustainable oil palm products through credible global standards and engagement of stakeholders.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SUSTAINABLE_PALM_OIL_RSPO`), namedNode(`${rdfs}label`), literal(`Sustainably Produced Palm Oil`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SUSTAINABLE_PALM_OIL_RSPO`), namedNode(`${skos}prefLabel`), literal(`SUSTAINABLE_PALM_OIL_RSPO`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SVANEN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SVANEN`), namedNode(`${rdfs}comment`), literal(`The Swan is the Nordic environmental label. It was established by the Nordic Council of Ministers in 1989 and Denmark joined in 1997. The Swan is used in all Nordic countries, i.e. Denmark, Norway, Sweden, Finland and Iceland.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SVANEN`), namedNode(`${rdfs}label`), literal(`Svanen`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SVANEN`), namedNode(`${skos}prefLabel`), literal(`SVANEN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SWEDISH_SEAL_OF_QUALITY`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SWEDISH_SEAL_OF_QUALITY`), namedNode(`${rdfs}comment`), literal(`The item is physically marked with the Swedish Seal of Quality label which intends to guarantee the responsibility for the environment of the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SWEDISH_SEAL_OF_QUALITY`), namedNode(`${rdfs}label`), literal(`Swedish Seal of Quality Label`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-SWEDISH_SEAL_OF_QUALITY`), namedNode(`${skos}prefLabel`), literal(`SWEDISH_SEAL_OF_QUALITY`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-TRADITIONAL_SPECIALTY_GUARANTEED`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-TRADITIONAL_SPECIALTY_GUARANTEED`), namedNode(`${rdfs}comment`), literal(`The Traditional specialty guaranteed is a trademark for an agricultural product or a foodstuff, which has a certain feature or a set of features, setting it clearly apart from other similar products or foodstuffs belonging to the same category. The product or foodstuff must be manufactured using traditional ingredients or must be characteristic for its traditional composition, production process, or processing reflecting a traditional type of manufacturing or processing.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-TRADITIONAL_SPECIALTY_GUARANTEED`), namedNode(`${rdfs}label`), literal(`Traditional Specialty Guaranteed`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-TRADITIONAL_SPECIALTY_GUARANTEED`), namedNode(`${skos}prefLabel`), literal(`TRADITIONAL_SPECIALTY_GUARANTEED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-TUNNUSTATUD_EESTI_MAITSE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-TUNNUSTATUD_EESTI_MAITSE`), namedNode(`${rdfs}comment`), literal(`Approved Estonian Taste - Quality/Tradition/Origin/Traceability for Estonian products. All raw materials must be 100% Estonian. Estonian Chamber of Agriculture and Commerce.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-TUNNUSTATUD_EESTI_MAITSE`), namedNode(`${rdfs}label`), literal(`Approved Estonian Taste`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-TUNNUSTATUD_EESTI_MAITSE`), namedNode(`${skos}prefLabel`), literal(`TUNNUSTATUD_EESTI_MAITSE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-TUNNUSTATUD_MAITSE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-TUNNUSTATUD_MAITSE`), namedNode(`${rdfs}comment`), literal(`Approved Taste label (designed as a barn swallow) denoting Estonian origin and high quality was introduced. This label has been given to products for Food quality and safety. Estonian Chamber of Agriculture and Commerce (ECAC).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-TUNNUSTATUD_MAITSE`), namedNode(`${rdfs}label`), literal(`Tunnustatud Maitse`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-TUNNUSTATUD_MAITSE`), namedNode(`${skos}prefLabel`), literal(`TUNNUSTATUD_MAITSE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-UNIQUELY_FINNISH`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-UNIQUELY_FINNISH`), namedNode(`${rdfs}comment`), literal(`Uniquely Finnish http://www.maakuntienparhaat.fi/en/ The Uniquely Finnish label is a national quality label for small entrepreneurs. ProAgria Association of Rural Advisory Centres grants the label to qualified foodstuff, handicraft and rural tourism companies based on applications.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-UNIQUELY_FINNISH`), namedNode(`${rdfs}label`), literal(`Uniquely Finnish`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-UNIQUELY_FINNISH`), namedNode(`${skos}prefLabel`), literal(`UNIQUELY_FINNISH`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-USDA`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-USDA`), namedNode(`${rdfs}label`), literal(`US Department of Agriculture`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-USDA`), namedNode(`${skos}prefLabel`), literal(`USDA`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-UTZ_CERTIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-UTZ_CERTIFIED`), namedNode(`${rdfs}comment`), literal(`A certification which is intended to assure the social and environmental quality in coffee production. Coffee based products may be marked with this certification.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-UTZ_CERTIFIED`), namedNode(`${rdfs}label`), literal(`UTZ Certified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-UTZ_CERTIFIED`), namedNode(`${skos}prefLabel`), literal(`UTZ_CERTIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-VAELG_FULDKORN_FORST`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-VAELG_FULDKORN_FORST`), namedNode(`${rdfs}comment`), literal(`Grain based foods (bread, breakfast products, baking articles etc.) which have got a high content of whole grain will be puffed with a nutritional puff from the beginning of 2009: Please choose whole grain first.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-VAELG_FULDKORN_FORST`), namedNode(`${rdfs}label`), literal(`Vaelg Fuldkorn forst`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-VAELG_FULDKORN_FORST`), namedNode(`${skos}prefLabel`), literal(`VAELG_FULDKORN_FORST`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-WWF_PANDA_LABEL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-WWF_PANDA_LABEL`), namedNode(`${rdfs}comment`), literal(`Products that support the World Wildlife Federation.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-WWF_PANDA_LABEL`), namedNode(`${rdfs}label`), literal(`World Wildlife Federation Panda`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMarkedLabelAccreditationCode-WWF_PANDA_LABEL`), namedNode(`${skos}prefLabel`), literal(`WWF_PANDA_LABEL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialDetails`), namedNode(`${rdfs}comment`), literal(`Information on any material used for packaging.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialDetails`), namedNode(`${rdfs}label`), literal(`Packaging Material Details`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CERAMIC`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CERAMIC`), namedNode(`${rdfs}label`), literal(`Ceramic`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CERAMIC`), namedNode(`${skos}prefLabel`), literal(`CERAMIC`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:PackagingMaterialTypeCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(`${rdfs}label`), literal(`Packaging Material Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CLOTH_OR_FABRIC`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CLOTH_OR_FABRIC`), namedNode(`${rdfs}label`), literal(`Cloth of Fabric`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CLOTH_OR_FABRIC`), namedNode(`${skos}prefLabel`), literal(`CLOTH_OR_FABRIC`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-COMPOSITE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-COMPOSITE`), namedNode(`${rdfs}label`), literal(`Composite`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-COMPOSITE`), namedNode(`${skos}prefLabel`), literal(`COMPOSITE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CORRUGATED_BOARD_DOUBLE_WALL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CORRUGATED_BOARD_DOUBLE_WALL`), namedNode(`${rdfs}label`), literal(`Corrugated Board Double Wall`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CORRUGATED_BOARD_DOUBLE_WALL`), namedNode(`${skos}prefLabel`), literal(`CORRUGATED_BOARD_DOUBLE_WALL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CORRUGATED_BOARD_OTHER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CORRUGATED_BOARD_OTHER`), namedNode(`${rdfs}label`), literal(`Corrugated Board Other`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CORRUGATED_BOARD_OTHER`), namedNode(`${skos}prefLabel`), literal(`CORRUGATED_BOARD_OTHER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CORRUGATED_BOARD_SINGLE_WALL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CORRUGATED_BOARD_SINGLE_WALL`), namedNode(`${rdfs}label`), literal(`Corrugated Board Single Wall`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CORRUGATED_BOARD_SINGLE_WALL`), namedNode(`${skos}prefLabel`), literal(`CORRUGATED_BOARD_SINGLE_WALL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CORRUGATED_BOARD_TRIPLE_WALL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CORRUGATED_BOARD_TRIPLE_WALL`), namedNode(`${rdfs}label`), literal(`Corrugated Board Triple Wall`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-CORRUGATED_BOARD_TRIPLE_WALL`), namedNode(`${skos}prefLabel`), literal(`CORRUGATED_BOARD_TRIPLE_WALL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_BURLAP`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_BURLAP`), namedNode(`${rdfs}label`), literal(`Fibre Burlap`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_BURLAP`), namedNode(`${skos}prefLabel`), literal(`FIBRE_BURLAP`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_COTTON`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_COTTON`), namedNode(`${rdfs}label`), literal(`Fibre Cotton`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_COTTON`), namedNode(`${skos}prefLabel`), literal(`FIBRE_COTTON`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_FLAX`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_FLAX`), namedNode(`${rdfs}label`), literal(`Fibre Flax`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_FLAX`), namedNode(`${skos}prefLabel`), literal(`FIBRE_FLAX`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_HEMP`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_HEMP`), namedNode(`${rdfs}label`), literal(`Fibre Hemp`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_HEMP`), namedNode(`${skos}prefLabel`), literal(`FIBRE_HEMP`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_JUTE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_JUTE`), namedNode(`${rdfs}label`), literal(`Fibre Jute`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_JUTE`), namedNode(`${skos}prefLabel`), literal(`FIBRE_JUTE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_OTHER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_OTHER`), namedNode(`${rdfs}label`), literal(`Fibre Other`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FIBRE_OTHER`), namedNode(`${skos}prefLabel`), literal(`FIBRE_OTHER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FOAM`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FOAM`), namedNode(`${rdfs}label`), literal(`Foam`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-FOAM`), namedNode(`${skos}prefLabel`), literal(`FOAM`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-GLASS`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-GLASS`), namedNode(`${rdfs}label`), literal(`Glass`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-GLASS`), namedNode(`${skos}prefLabel`), literal(`GLASS`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-GLASS_COLOURED`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-GLASS_COLOURED`), namedNode(`${rdfs}label`), literal(`Glass Coloured`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-GLASS_COLOURED`), namedNode(`${skos}prefLabel`), literal(`GLASS_COLOURED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-LAMINATED_CARTON`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-LAMINATED_CARTON`), namedNode(`${rdfs}label`), literal(`Laminated Carton`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-LAMINATED_CARTON`), namedNode(`${skos}prefLabel`), literal(`LAMINATED_CARTON`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_ALUMINUM`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_ALUMINUM`), namedNode(`${rdfs}label`), literal(`Metal Aluminum`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_ALUMINUM`), namedNode(`${skos}prefLabel`), literal(`METAL_ALUMINUM`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_BRASS`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_BRASS`), namedNode(`${rdfs}label`), literal(`Metal Brass`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_BRASS`), namedNode(`${skos}prefLabel`), literal(`METAL_BRASS`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_IRON`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_IRON`), namedNode(`${rdfs}label`), literal(`Metal Iron`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_IRON`), namedNode(`${skos}prefLabel`), literal(`METAL_IRON`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_LEAD`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_LEAD`), namedNode(`${rdfs}label`), literal(`Metal Lead`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_LEAD`), namedNode(`${skos}prefLabel`), literal(`METAL_LEAD`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_OTHER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_OTHER`), namedNode(`${rdfs}label`), literal(`Metal Other`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_OTHER`), namedNode(`${skos}prefLabel`), literal(`METAL_OTHER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_STAINLESS_STEEL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_STAINLESS_STEEL`), namedNode(`${rdfs}label`), literal(`Metal Stainless Steel`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_STAINLESS_STEEL`), namedNode(`${skos}prefLabel`), literal(`METAL_STAINLESS_STEEL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_STEEL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_STEEL`), namedNode(`${rdfs}label`), literal(`Metal Steel`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_STEEL`), namedNode(`${skos}prefLabel`), literal(`METAL_STEEL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_TIN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_TIN`), namedNode(`${rdfs}label`), literal(`Metal Tin`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-METAL_TIN`), namedNode(`${skos}prefLabel`), literal(`METAL_TIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-MINERAL_CALCIUM_CARBONATE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-MINERAL_CALCIUM_CARBONATE`), namedNode(`${rdfs}label`), literal(`Mineral Calcium Carbonate`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-MINERAL_CALCIUM_CARBONATE`), namedNode(`${skos}prefLabel`), literal(`MINERAL_CALCIUM_CARBONATE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-MINERAL_OTHER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-MINERAL_OTHER`), namedNode(`${rdfs}label`), literal(`Mineral Other`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-MINERAL_OTHER`), namedNode(`${skos}prefLabel`), literal(`MINERAL_OTHER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-MINERAL_TALC`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-MINERAL_TALC`), namedNode(`${rdfs}label`), literal(`Mineral Talc`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-MINERAL_TALC`), namedNode(`${skos}prefLabel`), literal(`MINERAL_TALC`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-NATURAL_RUBBER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-NATURAL_RUBBER`), namedNode(`${rdfs}label`), literal(`Natural Rubber`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-NATURAL_RUBBER`), namedNode(`${skos}prefLabel`), literal(`NATURAL_RUBBER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-OTHER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-OTHER`), namedNode(`${rdfs}label`), literal(`Other`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-OTHER`), namedNode(`${skos}prefLabel`), literal(`OTHER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_CORRUGATED`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_CORRUGATED`), namedNode(`${rdfs}label`), literal(`Paper Corrugated`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_CORRUGATED`), namedNode(`${skos}prefLabel`), literal(`PAPER_CORRUGATED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_MOLDED_PULP`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_MOLDED_PULP`), namedNode(`${rdfs}label`), literal(`Paper Molded Pulp`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_MOLDED_PULP`), namedNode(`${skos}prefLabel`), literal(`PAPER_MOLDED_PULP`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_OTHER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_OTHER`), namedNode(`${rdfs}label`), literal(`Paper Other`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_OTHER`), namedNode(`${skos}prefLabel`), literal(`PAPER_OTHER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_PAPER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_PAPER`), namedNode(`${rdfs}label`), literal(`Paper`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_PAPER`), namedNode(`${skos}prefLabel`), literal(`PAPER_PAPER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_PAPERBOARD`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_PAPERBOARD`), namedNode(`${rdfs}label`), literal(`Paper Paperboard`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_PAPERBOARD`), namedNode(`${skos}prefLabel`), literal(`PAPER_PAPERBOARD`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_RAYON`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_RAYON`), namedNode(`${rdfs}label`), literal(`Paper Rayon`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PAPER_RAYON`), namedNode(`${skos}prefLabel`), literal(`PAPER_RAYON`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PLASTIC_BIOPLASTIC`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PLASTIC_BIOPLASTIC`), namedNode(`${rdfs}label`), literal(`Plastic Bioplastic`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PLASTIC_BIOPLASTIC`), namedNode(`${skos}prefLabel`), literal(`PLASTIC_BIOPLASTIC`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PLASTIC_OTHER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PLASTIC_OTHER`), namedNode(`${rdfs}label`), literal(`Plastic Other`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PLASTIC_OTHER`), namedNode(`${skos}prefLabel`), literal(`PLASTIC_OTHER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PLASTIC_THERMOPLASTICS`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PLASTIC_THERMOPLASTICS`), namedNode(`${rdfs}label`), literal(`Plastic Thermoplastics`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-PLASTIC_THERMOPLASTICS`), namedNode(`${skos}prefLabel`), literal(`PLASTIC_THERMOPLASTICS`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_CELLULOSE_ACETATE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_CELLULOSE_ACETATE`), namedNode(`${rdfs}label`), literal(`Polymer Cellulose Acetate`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_CELLULOSE_ACETATE`), namedNode(`${skos}prefLabel`), literal(`POLYMER_CELLULOSE_ACETATE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_EPOXY`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_EPOXY`), namedNode(`${rdfs}label`), literal(`Polymer Epoxy`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_EPOXY`), namedNode(`${skos}prefLabel`), literal(`POLYMER_EPOXY`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_EVA`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_EVA`), namedNode(`${rdfs}label`), literal(`Polymer Eva`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_EVA`), namedNode(`${skos}prefLabel`), literal(`POLYMER_EVA`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_EVOH`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_EVOH`), namedNode(`${rdfs}label`), literal(`Polymer EVOH`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_EVOH`), namedNode(`${skos}prefLabel`), literal(`POLYMER_EVOH`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_HDPE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_HDPE`), namedNode(`${rdfs}label`), literal(`Polymer HDPE`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_HDPE`), namedNode(`${skos}prefLabel`), literal(`POLYMER_HDPE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_LDPE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_LDPE`), namedNode(`${rdfs}label`), literal(`Polymer LDPE`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_LDPE`), namedNode(`${skos}prefLabel`), literal(`POLYMER_LDPE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_LLDPE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_LLDPE`), namedNode(`${rdfs}label`), literal(`Polymer LLDPE`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_LLDPE`), namedNode(`${skos}prefLabel`), literal(`POLYMER_LLDPE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_MDPE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_MDPE`), namedNode(`${rdfs}label`), literal(`Polymer MDPE`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_MDPE`), namedNode(`${skos}prefLabel`), literal(`POLYMER_MDPE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_NYLON`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_NYLON`), namedNode(`${rdfs}label`), literal(`Polymer Nylon`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_NYLON`), namedNode(`${skos}prefLabel`), literal(`POLYMER_NYLON`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_OTHER`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_OTHER`), namedNode(`${rdfs}label`), literal(`Polymer Other`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_OTHER`), namedNode(`${skos}prefLabel`), literal(`POLYMER_OTHER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PAN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PAN`), namedNode(`${rdfs}label`), literal(`Polymer PAN`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PAN`), namedNode(`${skos}prefLabel`), literal(`POLYMER_PAN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PC`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PC`), namedNode(`${rdfs}label`), literal(`Polymer PC`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PC`), namedNode(`${skos}prefLabel`), literal(`POLYMER_PC`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PCL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PCL`), namedNode(`${rdfs}label`), literal(`Polymer PCL`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PCL`), namedNode(`${skos}prefLabel`), literal(`POLYMER_PCL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PE`), namedNode(`${rdfs}label`), literal(`Polymer PE`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PE`), namedNode(`${skos}prefLabel`), literal(`POLYMER_PE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PEN`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PEN`), namedNode(`${rdfs}label`), literal(`Polymer PEN`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PEN`), namedNode(`${skos}prefLabel`), literal(`POLYMER_PEN`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PET`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PET`), namedNode(`${rdfs}label`), literal(`Polymer PET`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PET`), namedNode(`${skos}prefLabel`), literal(`POLYMER_PET`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PHA`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PHA`), namedNode(`${rdfs}label`), literal(`Polymer PHA`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PHA`), namedNode(`${skos}prefLabel`), literal(`POLYMER_PHA`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PLA`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PLA`), namedNode(`${rdfs}label`), literal(`Polymer PLA`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PLA`), namedNode(`${skos}prefLabel`), literal(`POLYMER_PLA`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PP`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PP`), namedNode(`${rdfs}label`), literal(`Polymer PP`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PP`), namedNode(`${skos}prefLabel`), literal(`POLYMER_PP`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PS`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PS`), namedNode(`${rdfs}label`), literal(`Polymer PS`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PS`), namedNode(`${skos}prefLabel`), literal(`POLYMER_PS`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PU`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PU`), namedNode(`${rdfs}label`), literal(`Polymer PU`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PU`), namedNode(`${skos}prefLabel`), literal(`POLYMER_PU`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PVA`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PVA`), namedNode(`${rdfs}label`), literal(`Polymer PVA`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PVA`), namedNode(`${skos}prefLabel`), literal(`POLYMER_PVA`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PVC`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PVC`), namedNode(`${rdfs}label`), literal(`Polymer PVC`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PVC`), namedNode(`${skos}prefLabel`), literal(`POLYMER_PVC`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PVDC`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PVDC`), namedNode(`${rdfs}label`), literal(`Polymer PVDC`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_PVDC`), namedNode(`${skos}prefLabel`), literal(`POLYMER_PVDC`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_TPS`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_TPS`), namedNode(`${rdfs}label`), literal(`Polymer TPS`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingMaterialTypeCode-POLYMER_TPS`), namedNode(`${skos}prefLabel`), literal(`POLYMER_TPS`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode-COMPOSTABLE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingRecyclingProcessTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode-COMPOSTABLE`), namedNode(`${rdfs}comment`), literal(`Packaging that can biodegrade generating a relatively homogeneous and stable humus-like substance.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode-COMPOSTABLE`), namedNode(`${rdfs}label`), literal(`Compostable`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode-COMPOSTABLE`), namedNode(`${skos}prefLabel`), literal(`COMPOSTABLE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:PackagingRecyclingProcessTypeCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode`), namedNode(`${rdfs}label`), literal(`Packaging Recycling Process Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode-ENERGY_RECOVERABLE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingRecyclingProcessTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode-ENERGY_RECOVERABLE`), namedNode(`${rdfs}comment`), literal(`Packaging which allows for a net calorific gain in energy recovery operations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode-ENERGY_RECOVERABLE`), namedNode(`${rdfs}label`), literal(`Energy Recoverable`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode-ENERGY_RECOVERABLE`), namedNode(`${skos}prefLabel`), literal(`ENERGY_RECOVERABLE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode-RECYCLABLE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingRecyclingProcessTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode-RECYCLABLE`), namedNode(`${rdfs}comment`), literal(`Packaging material and format which can be diverted from the waste stream through available processes and programmes and can be collected, processed and returned to use in the form of raw materials or products.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode-RECYCLABLE`), namedNode(`${rdfs}label`), literal(`Recyclable`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode-RECYCLABLE`), namedNode(`${skos}prefLabel`), literal(`RECYCLABLE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode-REUSABLE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingRecyclingProcessTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode-REUSABLE`), namedNode(`${rdfs}comment`), literal(`Packaging that has been conceived and designed to accomplished within its life cycle a certain number of trips, rotations or uses for the same purpose for which it was conceived.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode-REUSABLE`), namedNode(`${rdfs}label`), literal(`Reusable`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingProcessTypeCode-REUSABLE`), namedNode(`${skos}prefLabel`), literal(`REUSABLE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode-ALKO`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingRecyclingSchemeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode-ALKO`), namedNode(`${rdfs}comment`), literal(`Alko inc. is an independent, entirely State-owned company. Alko is administered and supervised by the Ministry of Social Affairs and Health. They have own recycling system for alcohol products bottles called Alko. This is a recycling system used in Finland`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode-ALKO`), namedNode(`${rdfs}label`), literal(`Alko Inc`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode-ALKO`), namedNode(`${skos}prefLabel`), literal(`ALKO`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:PackagingRecyclingSchemeCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode`), namedNode(`${rdfs}label`), literal(`Packaging Recycling Scheme Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode-A_PULLO`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingRecyclingSchemeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode-A_PULLO`), namedNode(`${rdfs}comment`), literal(`PALPA stands for Suomen Palautuspakkaus Oy. PALPA administers the recycling of beverage containers and promotes recycling in Finland. A-pullo is one of the recycling systems. PALPA is the administrator. This is a recycling system used in Finland.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode-A_PULLO`), namedNode(`${rdfs}label`), literal(`A Pullo`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode-A_PULLO`), namedNode(`${skos}prefLabel`), literal(`A_PULLO`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode-EKO_PULLO`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingRecyclingSchemeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode-EKO_PULLO`), namedNode(`${rdfs}comment`), literal(`PALPA Standas for Suomen Palautuspakkaus Oy. PALPA administers the recycling of beverage containers and promotes recycling in Finland. EKO-pullo is one of the recycling systems PALPA is administer. This is a recycling system used in Finland.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode-EKO_PULLO`), namedNode(`${rdfs}label`), literal(`EKO Pullo`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode-EKO_PULLO`), namedNode(`${skos}prefLabel`), literal(`EKO_PULLO`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode-PALPA`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingRecyclingSchemeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode-PALPA`), namedNode(`${rdfs}comment`), literal(`PALPA stands for Suomen Palautuspakkaus Oy. PALPA administers the recycling of beverage containers and promotes recycling in Finland. PALPA is on of the recycling systems PALPA is administer. This is a recycling system used in Finland.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode-PALPA`), namedNode(`${rdfs}label`), literal(`PALPA`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingRecyclingSchemeCode-PALPA`), namedNode(`${skos}prefLabel`), literal(`PALPA`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-BAR`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingShapeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-BAR`), namedNode(`${rdfs}comment`), literal(`A relatively long, evenly shaped piece of some solid substance`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-BAR`), namedNode(`${rdfs}label`), literal(`Bar`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-BAR`), namedNode(`${skos}prefLabel`), literal(`BAR`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:PackagingShapeCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode`), namedNode(`${rdfs}label`), literal(`Packaging Shape Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-COIL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingShapeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-COIL`), namedNode(`${rdfs}comment`), literal(`A spiral structure made by winding a material into a series of loops. A coil may or may not have a spindle around which the loops are formed.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-COIL`), namedNode(`${rdfs}label`), literal(`Coil`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-COIL`), namedNode(`${skos}prefLabel`), literal(`COIL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-CONE`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingShapeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-CONE`), namedNode(`${rdfs}comment`), literal(`A cone is a three-dimensional geometric shape that tapers smoothly from a flat, round base to a point.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-CONE`), namedNode(`${rdfs}label`), literal(`Cone`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-CONE`), namedNode(`${skos}prefLabel`), literal(`CONE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-CYLINDRICAL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingShapeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-CYLINDRICAL`), namedNode(`${rdfs}comment`), literal(`A long shape that has a circular base and an equally-sized circular top.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-CYLINDRICAL`), namedNode(`${rdfs}label`), literal(`Cylindrical`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-CYLINDRICAL`), namedNode(`${skos}prefLabel`), literal(`CYLINDRICAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-POLYGON`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingShapeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-POLYGON`), namedNode(`${rdfs}comment`), literal(`A plane figure that is bounded by a closed path or circuit composed of a finite sequence of equally-sized straight line segments. A polygon may have a varying number of segments or faces resulting in different configurations, for example a 5-faced polygon: pentagon, 6-faced: hexagon, 8-faced: octagon, 12-faced: dodecahedron, etc.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-POLYGON`), namedNode(`${rdfs}label`), literal(`Polygon`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-POLYGON`), namedNode(`${skos}prefLabel`), literal(`POLYGON`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-RECTANGULAR`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingShapeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-RECTANGULAR`), namedNode(`${rdfs}comment`), literal(`A closed planar quadrilateral with four right angles.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-RECTANGULAR`), namedNode(`${rdfs}label`), literal(`Rectangular`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-RECTANGULAR`), namedNode(`${skos}prefLabel`), literal(`RECTANGULAR`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-SPHERICAL`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingShapeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-SPHERICAL`), namedNode(`${rdfs}comment`), literal(`A perfectly round geometrical object in three-dimensional space, such as the shape of a round ball. Like a circle in two dimensions, a perfect sphere is completely symmetrical around its centre, with all points on the surface lying the same distance from the centre point.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-SPHERICAL`), namedNode(`${rdfs}label`), literal(`Spherical`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-SPHERICAL`), namedNode(`${skos}prefLabel`), literal(`SPHERICAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-TABLET`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingShapeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-TABLET`), namedNode(`${rdfs}comment`), literal(`The result of different materials being compressed into a solid block usually of small dimensions.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-TABLET`), namedNode(`${rdfs}label`), literal(`Tablet`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-TABLET`), namedNode(`${skos}prefLabel`), literal(`TABLET`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-UNSPECIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}PackagingShapeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-UNSPECIFIED`), namedNode(`${rdfs}comment`), literal(`Shape is not currently specified in the list. To be used as a temporary means until a specific missing value is added to the list.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-UNSPECIFIED`), namedNode(`${rdfs}label`), literal(`Unspecified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PackagingShapeCode-UNSPECIFIED`), namedNode(`${skos}prefLabel`), literal(`UNSPECIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BANKERS_DRAFT`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BANKERS_DRAFT`), namedNode(`${rdfs}comment`), literal(`Issue of a banker's draft in payment of the funds.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BANKERS_DRAFT`), namedNode(`${rdfs}label`), literal(`Bankers Draft`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BANKERS_DRAFT`), namedNode(`${skos}prefLabel`), literal(`BANKERS_DRAFT`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod`), namedNode(`${rdfs}comment`), literal(`A code indicating an accepted method of payment`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:PaymentMethod&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod`), namedNode(`${rdfs}label`), literal(`Payment Method Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BANK_CHEQUE`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BANK_CHEQUE`), namedNode(`${rdfs}comment`), literal(`Payment by a pre-printed form, which has been completed by a financial institution, on which instructions are given to an account holder (a bank or building society) to pay a stated sum to a named recipient.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BANK_CHEQUE`), namedNode(`${rdfs}label`), literal(`Bank Cheque`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BANK_CHEQUE`), namedNode(`${skos}prefLabel`), literal(`BANK_CHEQUE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BANK_GIRO`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BANK_GIRO`), namedNode(`${rdfs}comment`), literal(`The payment was originally made by bankgiro.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BANK_GIRO`), namedNode(`${rdfs}label`), literal(`Bank Giro`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BANK_GIRO`), namedNode(`${skos}prefLabel`), literal(`BANK_GIRO`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BOOKENTRY_CREDIT`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BOOKENTRY_CREDIT`), namedNode(`${rdfs}comment`), literal(`House Credit.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BOOKENTRY_CREDIT`), namedNode(`${rdfs}label`), literal(`Book Entry Credit`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BOOKENTRY_CREDIT`), namedNode(`${skos}prefLabel`), literal(`BOOKENTRY_CREDIT`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BOOKENTRY_DEBIT`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BOOKENTRY_DEBIT`), namedNode(`${rdfs}comment`), literal(`House Debit.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BOOKENTRY_DEBIT`), namedNode(`${rdfs}label`), literal(`Book Entry Debit`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BOOKENTRY_DEBIT`), namedNode(`${skos}prefLabel`), literal(`BOOKENTRY_DEBIT`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BOP`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BOP`), namedNode(`${rdfs}label`), literal(`BOP`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BOP`), namedNode(`${skos}prefLabel`), literal(`BOP`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-BOP`), namedNode(`${rdfs}coment`), literal(`Payment by balance of payments`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CASH`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CASH`), namedNode(`${rdfs}comment`), literal(`Payment by currency (including bills and coins) in circulation, including checking account deposits.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CASH`), namedNode(`${rdfs}label`), literal(`Cash`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CASH`), namedNode(`${skos}prefLabel`), literal(`CASH`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CERTIFIED_CHEQUE`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CERTIFIED_CHEQUE`), namedNode(`${rdfs}comment`), literal(`Payment by a pre-printed form stamped with the paying bank's certification on which instructions are given to an account holder (a bank or building society) to pay a stated sum to a named recipient .`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CERTIFIED_CHEQUE`), namedNode(`${rdfs}label`), literal(`Certified Cheque`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CERTIFIED_CHEQUE`), namedNode(`${skos}prefLabel`), literal(`CERTIFIED_CHEQUE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CHEQUE`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CHEQUE`), namedNode(`${rdfs}comment`), literal(`Payment by a pre-printed form on which instructions are given to an account holder (a bank or building society) to pay a stated sum to a named recipient.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CHEQUE`), namedNode(`${rdfs}label`), literal(`Cheque`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CHEQUE`), namedNode(`${skos}prefLabel`), literal(`CHEQUE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD`), namedNode(`${rdfs}comment`), literal(`Payment by means of a card issued by a bank or other financial institution.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD`), namedNode(`${rdfs}label`), literal(`Credit Card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD`), namedNode(`${skos}prefLabel`), literal(`CREDIT_CARD`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_AMEX`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_AMEX`), namedNode(`${rdfs}comment`), literal(`Payment by American Express credit card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_AMEX`), namedNode(`${rdfs}label`), literal(`American Express Credit Card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_AMEX`), namedNode(`${skos}prefLabel`), literal(`CREDIT_CARD_AMEX`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_DINERS_CLUB`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_DINERS_CLUB`), namedNode(`${rdfs}comment`), literal(`Payment by Diners Club credit card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_DINERS_CLUB`), namedNode(`${rdfs}label`), literal(`Diners Club Credit Card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_DINERS_CLUB`), namedNode(`${skos}prefLabel`), literal(`CREDIT_CARD_DINERS_CLUB`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_DISCOVER`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_DISCOVER`), namedNode(`${rdfs}comment`), literal(`Payment by Discover credit card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_DISCOVER`), namedNode(`${rdfs}label`), literal(`Discover Credit Card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_DISCOVER`), namedNode(`${skos}prefLabel`), literal(`CREDIT_CARD_DISCOVER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_MASTERCARD`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_MASTERCARD`), namedNode(`${rdfs}comment`), literal(`Payment by Mastercard credit card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_MASTERCARD`), namedNode(`${rdfs}label`), literal(`Mastercard Credit Card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_MASTERCARD`), namedNode(`${skos}prefLabel`), literal(`CREDIT_CARD_MASTERCARD`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_VISA`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_VISA`), namedNode(`${rdfs}comment`), literal(`Payment by Visa credit card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_VISA`), namedNode(`${rdfs}label`), literal(`Visa Credit Card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-CREDIT_CARD_VISA`), namedNode(`${skos}prefLabel`), literal(`CREDIT_CARD_VISA`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD`), namedNode(`${rdfs}comment`), literal(`The amount is to be, or has been, directly debited to the customer's bank account through a bank card.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD`), namedNode(`${rdfs}label`), literal(`Debit Card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD`), namedNode(`${skos}prefLabel`), literal(`DEBIT_CARD`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD_MAESTRO`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD_MAESTRO`), namedNode(`${rdfs}comment`), literal(`Payment by Maestro debit card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD_MAESTRO`), namedNode(`${rdfs}label`), literal(`Maestro Debit Card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD_MAESTRO`), namedNode(`${skos}prefLabel`), literal(`DEBIT_CARD_MAESTRO`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD_MASTERCARD`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD_MASTERCARD`), namedNode(`${rdfs}comment`), literal(`Payment by Mastercard debit card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD_MASTERCARD`), namedNode(`${rdfs}label`), literal(`Mastercard Debit Card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD_MASTERCARD`), namedNode(`${skos}prefLabel`), literal(`DEBIT_CARD_MASTERCARD`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD_VISA`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD_VISA`), namedNode(`${rdfs}comment`), literal(`Payment by Visa debit card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD_VISA`), namedNode(`${rdfs}label`), literal(`Visa Debit Card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD_VISA`), namedNode(`${skos}prefLabel`), literal(`DEBIT_CARD_VISA`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD_VISA_ELECTRON`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD_VISA_ELECTRON`), namedNode(`${rdfs}comment`), literal(`Payment by Visa Electron debit card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD_VISA_ELECTRON`), namedNode(`${rdfs}label`), literal(`Visa Electron Debit Card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-DEBIT_CARD_VISA_ELECTRON`), namedNode(`${skos}prefLabel`), literal(`DEBIT_CARD_VISA_ELECTRON`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ELECTRONIC_CREDIT_ACH`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ELECTRONIC_CREDIT_ACH`), namedNode(`${rdfs}comment`), literal(`A credit transaction made through the automated clearing house system`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ELECTRONIC_CREDIT_ACH`), namedNode(`${rdfs}label`), literal(`Electronic Credit ACH`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ELECTRONIC_CREDIT_ACH`), namedNode(`${skos}prefLabel`), literal(`ELECTRONIC_CREDIT_ACH`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ELECTRONIC_DEBIT_ACH`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ELECTRONIC_DEBIT_ACH`), namedNode(`${rdfs}comment`), literal(`A debit transaction made through the automated clearing house system.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ELECTRONIC_DEBIT_ACH`), namedNode(`${rdfs}label`), literal(`Electronic Debit ACH`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ELECTRONIC_DEBIT_ACH`), namedNode(`${skos}prefLabel`), literal(`ELECTRONIC_DEBIT_ACH`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-FED_WIRE_NON_REPETITIVE`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-FED_WIRE_NON_REPETITIVE`), namedNode(`${rdfs}comment`), literal(`Fedwire is a real time gross settlement funds transfer system operated by the Federal Reserve Banks that enables financial institutions to electronically transfer funds between its participants.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-FED_WIRE_NON_REPETITIVE`), namedNode(`${rdfs}label`), literal(`Fedwire Non-repetitive`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-FED_WIRE_NON_REPETITIVE`), namedNode(`${skos}prefLabel`), literal(`FED_WIRE_NON_REPETITIVE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-FED_WIRE_REPETITIVE`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-FED_WIRE_REPETITIVE`), namedNode(`${rdfs}comment`), literal(`Repetitive Fedwire is a real time gross settlement funds transfer system operated by the Federal Reserve Banks that enables financial institutions to electronically transfer funds between its participants. Repetitive wire transfers are sent by the same party to the same recipient through the same financial institution with the same wiring instructions`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-FED_WIRE_REPETITIVE`), namedNode(`${rdfs}label`), literal(`Fedwire Repetitive`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-FED_WIRE_REPETITIVE`), namedNode(`${skos}prefLabel`), literal(`FED_WIRE_REPETITIVE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-INTERNATIONAL_WIRE`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-INTERNATIONAL_WIRE`), namedNode(`${rdfs}comment`), literal(`Payment by international wire transfer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-INTERNATIONAL_WIRE`), namedNode(`${rdfs}label`), literal(`International Wire`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-INTERNATIONAL_WIRE`), namedNode(`${skos}prefLabel`), literal(`INTERNATIONAL_WIRE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-LETTER_OF_CREDIT`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-LETTER_OF_CREDIT`), namedNode(`${rdfs}comment`), literal(`The financial operation is a letter of credit.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-LETTER_OF_CREDIT`), namedNode(`${rdfs}label`), literal(`Letter of Credit`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-LETTER_OF_CREDIT`), namedNode(`${skos}prefLabel`), literal(`LETTER_OF_CREDIT`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ONLINE_PAYMENT`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ONLINE_PAYMENT`), namedNode(`${rdfs}comment`), literal(`Payment by online payment mechanisms`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ONLINE_PAYMENT`), namedNode(`${rdfs}label`), literal(`Online Payment`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ONLINE_PAYMENT`), namedNode(`${skos}prefLabel`), literal(`ONLINE_PAYMENT`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ONLINE_PAYMENT_APPLE_PAY`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ONLINE_PAYMENT_APPLE_PAY`), namedNode(`${rdfs}comment`), literal(`Online payment via Apple Pay`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ONLINE_PAYMENT_APPLE_PAY`), namedNode(`${rdfs}label`), literal(`Apple Pay`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ONLINE_PAYMENT_APPLE_PAY`), namedNode(`${skos}prefLabel`), literal(`ONLINE_PAYMENT_APPLE_PAY`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ONLINE_PAYMENT_GOOGLE_WALLET`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ONLINE_PAYMENT_GOOGLE_WALLET`), namedNode(`${rdfs}comment`), literal(`Online payment via Google Wallet`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ONLINE_PAYMENT_GOOGLE_WALLET`), namedNode(`${rdfs}label`), literal(`Google Wallet`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ONLINE_PAYMENT_GOOGLE_WALLET`), namedNode(`${skos}prefLabel`), literal(`ONLINE_PAYMENT_GOOGLE_WALLET`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ONLINE_PAYMENT_PAYPAL`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ONLINE_PAYMENT_PAYPAL`), namedNode(`${rdfs}comment`), literal(`Online payment via PayPal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ONLINE_PAYMENT_PAYPAL`), namedNode(`${rdfs}label`), literal(`PayPal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-ONLINE_PAYMENT_PAYPAL`), namedNode(`${skos}prefLabel`), literal(`ONLINE_PAYMENT_PAYPAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-POSTGIRO`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-POSTGIRO`), namedNode(`${rdfs}comment`), literal(`The financial operation has been done by postgiro.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-POSTGIRO`), namedNode(`${rdfs}label`), literal(`Postgiro`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-POSTGIRO`), namedNode(`${skos}prefLabel`), literal(`POSTGIRO`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-WIRE_TRANSFER_CREDIT`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-WIRE_TRANSFER_CREDIT`), namedNode(`${rdfs}comment`), literal(`Payment by wire transfer credit`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-WIRE_TRANSFER_CREDIT`), namedNode(`${rdfs}label`), literal(`Wire Transfer Credit`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-WIRE_TRANSFER_CREDIT`), namedNode(`${skos}prefLabel`), literal(`WIRE_TRANSFER_CREDIT`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-WIRE_TRANSFER_DEBIT`), namedNode(`${rdf}type`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-WIRE_TRANSFER_DEBIT`), namedNode(`${rdfs}comment`), literal(`Payment by wire transfer debit`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-WIRE_TRANSFER_DEBIT`), namedNode(`${rdfs}label`), literal(`Wire Transfer Debit`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PaymentMethod-WIRE_TRANSFER_DEBIT`), namedNode(`${skos}prefLabel`), literal(`WIRE_TRANSFER_DEBIT`), namedNode(ns4)),
        quad(namedNode(`${ns4}Place`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Place`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Place`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}Place`), namedNode(`${rdfs}comment`), literal(`Entities that have a somewhat fixed, physical location.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Place`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}Place`), namedNode(`${rdfs}label`), literal(`Place`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Place`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}Place`), namedNode(`${skos}broadMatch`), namedNode(`${schema}Place`), namedNode(ns4)),
        quad(namedNode(`${ns4}PostalAddress`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}PostalAddress`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}PostalAddress`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}PostalAddress`), namedNode(`${rdfs}comment`), literal(`The location at which a particular organization or person may be found or reached.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PostalAddress`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}PostalAddress`), namedNode(`${rdfs}label`), literal(`Address`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PostalAddress`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}PostalAddress`), namedNode(`${skos}exactMatch`), namedNode(`${schema}PostalAddress`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-AS_DRAINED`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-AS_DRAINED`), namedNode(`${rdfs}comment`), literal(`The state of the product after it has been separated from any liquid within the package. For example, a can of apricots in syrup would have a different nutritional composition if the apricots are consumed with the syrup rather than if the syrup is drained before consuming the apricots (because of the high sugar and energy content of the syrup).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-AS_DRAINED`), namedNode(`${rdfs}label`), literal(`As Drained`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-AS_DRAINED`), namedNode(`${skos}prefLabel`), literal(`AS_DRAINED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode`), namedNode(`${rdfs}comment`), literal(`A code indicating a method of preparation of a food or beverage product`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:PreparationTypeCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode`), namedNode(`${rdfs}label`), literal(`Preparation Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BAKE`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BAKE`), namedNode(`${rdfs}comment`), literal(`Cooking food in an oven by dry heat applied evenly throughout the oven`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BAKE`), namedNode(`${rdfs}label`), literal(`Bake`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BAKE`), namedNode(`${skos}prefLabel`), literal(`BAKE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BARBECUE`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BARBECUE`), namedNode(`${rdfs}comment`), literal(`Method of cooking meat with the heat and hot gasses of a fire`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BARBECUE`), namedNode(`${rdfs}label`), literal(`Barbecue`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BARBECUE`), namedNode(`${skos}prefLabel`), literal(`BARBECUE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BLANCH`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BLANCH`), namedNode(`${rdfs}comment`), literal(`Food preparation wherein the food substance is rapidly plunged into boiling water and then removed after a brief, timed interval and then plunged into iced water or placed under cold running water`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BLANCH`), namedNode(`${rdfs}label`), literal(`Blanch`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BLANCH`), namedNode(`${skos}prefLabel`), literal(`BLANCH`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BLIND_BAKE`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BLIND_BAKE`), namedNode(`${rdfs}comment`), literal(`Baking a pie crust or other pastry without the filling`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BLIND_BAKE`), namedNode(`${rdfs}label`), literal(`Blind Bake`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BLIND_BAKE`), namedNode(`${skos}prefLabel`), literal(`BLIND_BAKE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BOIL`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BOIL`), namedNode(`${rdfs}comment`), literal(`Cooking food in boiling water, or other water-based liquid such as stock or milk`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BOIL`), namedNode(`${rdfs}label`), literal(`Boil`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BOIL`), namedNode(`${skos}prefLabel`), literal(`BOIL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BRAISE`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BRAISE`), namedNode(`${rdfs}comment`), literal(`Cooking with moist heat, typically in a covered pot with a small amount of liquid`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BRAISE`), namedNode(`${rdfs}label`), literal(`Braise`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BRAISE`), namedNode(`${skos}prefLabel`), literal(`BRAISE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BROIL`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BROIL`), namedNode(`${rdfs}comment`), literal(`Cooking food with high heat with the heat applied directly to the food, most commonly from above. Heat transfer to the food is primarily via radiant heat`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BROIL`), namedNode(`${rdfs}label`), literal(`Broil`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-BROIL`), namedNode(`${skos}prefLabel`), literal(`BROIL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-DEEP_FRY`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-DEEP_FRY`), namedNode(`${rdfs}comment`), literal(`Cooking method whereby food is submerged in hot oil or fat.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-DEEP_FRY`), namedNode(`${rdfs}label`), literal(`Deep Fry`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-DEEP_FRY`), namedNode(`${skos}prefLabel`), literal(`DEEP_FRY`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-DOUBLE_STEAM`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-DOUBLE_STEAM`), namedNode(`${rdfs}comment`), literal(`Cooking technique to prepare delicate food such as bird nests, shark fins etc. The food is covered with water and put in a covered ceramic jar`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-DOUBLE_STEAM`), namedNode(`${rdfs}label`), literal(`Double Steam`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-DOUBLE_STEAM`), namedNode(`${skos}prefLabel`), literal(`DOUBLE_STEAM`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-FREEZE`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-FREEZE`), namedNode(`${rdfs}comment`), literal(`Convert the product from room temperature to a frozen state.Simple`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-FREEZE`), namedNode(`${rdfs}label`), literal(`Freeze`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-FREEZE`), namedNode(`${skos}prefLabel`), literal(`FREEZE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-FRY`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-FRY`), namedNode(`${rdfs}comment`), literal(`Cooking of food in fat.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-FRY`), namedNode(`${rdfs}label`), literal(`Fry`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-FRY`), namedNode(`${skos}prefLabel`), literal(`FRY`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-GRIDDLE_FRY`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-GRIDDLE_FRY`), namedNode(`${rdfs}comment`), literal(`Form of cooking where the food is fried with its own fat.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-GRIDDLE_FRY`), namedNode(`${rdfs}label`), literal(`Griddle Fry`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-GRIDDLE_FRY`), namedNode(`${skos}prefLabel`), literal(`GRIDDLE_FRY`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-GRILL`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-GRILL`), namedNode(`${rdfs}comment`), literal(`Form of cooking that involves direct heat. The definition varies widely by region and culture`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-GRILL`), namedNode(`${rdfs}label`), literal(`Grill`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-GRILL`), namedNode(`${skos}prefLabel`), literal(`GRILL`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-HEAT_AND_SERVE`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-HEAT_AND_SERVE`), namedNode(`${rdfs}comment`), literal(`Prepare the item by simply heating or warming to a desired temperature or visual state prior to serving`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-HEAT_AND_SERVE`), namedNode(`${rdfs}label`), literal(`Heat and Serve`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-HEAT_AND_SERVE`), namedNode(`${skos}prefLabel`), literal(`HEAT_AND_SERVE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-MICROWAVE`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-MICROWAVE`), namedNode(`${rdfs}comment`), literal(`Cooking food by employing microwave radiation`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-MICROWAVE`), namedNode(`${rdfs}label`), literal(`Microwave`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-MICROWAVE`), namedNode(`${skos}prefLabel`), literal(`MICROWAVE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-PAN_FRY`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-PAN_FRY`), namedNode(`${rdfs}comment`), literal(`Form of frying characterised by the use of less cooking oil than deep frying`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-PAN_FRY`), namedNode(`${rdfs}label`), literal(`Pan Fry`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-PAN_FRY`), namedNode(`${skos}prefLabel`), literal(`PAN_FRY`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-POACH`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-POACH`), namedNode(`${rdfs}comment`), literal(`Cooking food by gently simmering food in liquid, generally water, stock or wine`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-POACH`), namedNode(`${rdfs}label`), literal(`Poach`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-POACH`), namedNode(`${skos}prefLabel`), literal(`POACH`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-PREPARED`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-PREPARED`), namedNode(`${rdfs}comment`), literal(`The state of the product after preparation (e.g. after adding milk or water).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-PREPARED`), namedNode(`${rdfs}label`), literal(`Prepared`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-PREPARED`), namedNode(`${skos}prefLabel`), literal(`PREPARED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-PRESSURE_COOK`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-PRESSURE_COOK`), namedNode(`${rdfs}comment`), literal(`Method of cooking in a sealed vessel that does not permit air or liquids to escape below a preset pressure`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-PRESSURE_COOK`), namedNode(`${rdfs}label`), literal(`Pressure Cook`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-PRESSURE_COOK`), namedNode(`${skos}prefLabel`), literal(`PRESSURE_COOK`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-PRESSURE_FRY`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-PRESSURE_FRY`), namedNode(`${rdfs}comment`), literal(`Meat and cooking oil are brought to high temperatures while pressure is held high enough that the water within is prevented from boiling off`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-PRESSURE_FRY`), namedNode(`${rdfs}label`), literal(`Pressure Fry`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-PRESSURE_FRY`), namedNode(`${skos}prefLabel`), literal(`PRESSURE_FRY`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-READY_TO_DRINK`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-READY_TO_DRINK`), namedNode(`${rdfs}comment`), literal(`No Preparation. The product is ready for use after being taken out of the packaging (if packaging exists) without the need of any further action prior to consumption or use`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-READY_TO_DRINK`), namedNode(`${rdfs}label`), literal(`Ready To Drink`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-READY_TO_DRINK`), namedNode(`${skos}prefLabel`), literal(`READY_TO_DRINK`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-READY_TO_EAT`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-READY_TO_EAT`), namedNode(`${rdfs}comment`), literal(`Besides unpacking no additional preparation required.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-READY_TO_EAT`), namedNode(`${rdfs}label`), literal(`Ready To Eat`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-READY_TO_EAT`), namedNode(`${skos}prefLabel`), literal(`READY_TO_EAT`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-RECONSTITUTE`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-RECONSTITUTE`), namedNode(`${rdfs}comment`), literal(`Restore a dry or concentrated food to its original strength or consistency by adding water.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-RECONSTITUTE`), namedNode(`${rdfs}label`), literal(`Reconstitute`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-RECONSTITUTE`), namedNode(`${skos}prefLabel`), literal(`RECONSTITUTE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-REFRIGERATE`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-REFRIGERATE`), namedNode(`${rdfs}comment`), literal(`Convert the product from room temperature to a chilled state.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-REFRIGERATE`), namedNode(`${rdfs}label`), literal(`Refrigerate`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-REFRIGERATE`), namedNode(`${skos}prefLabel`), literal(`REFRIGERATE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-ROAST`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-ROAST`), namedNode(`${rdfs}comment`), literal(`Cooking method that uses dry heat, whether an open flame, oven, or other heat source.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-ROAST`), namedNode(`${rdfs}label`), literal(`Roast.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-ROAST`), namedNode(`${skos}prefLabel`), literal(`ROAST`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-ROTISSERIE`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-ROTISSERIE`), namedNode(`${rdfs}comment`), literal(`Style of roasting where meat is skewered on a spit and revolves over a flame`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-ROTISSERIE`), namedNode(`${rdfs}label`), literal(`Rotisserie`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-ROTISSERIE`), namedNode(`${skos}prefLabel`), literal(`ROTISSERIE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-SAUTE`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-SAUTE`), namedNode(`${rdfs}comment`), literal(`Cooking food using a small amount of fat in a shallow pan over relatively high heat`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-SAUTE`), namedNode(`${rdfs}label`), literal(`Saute`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-SAUTE`), namedNode(`${skos}prefLabel`), literal(`SAUTE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-SEAR`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-SEAR`), namedNode(`${rdfs}comment`), literal(`Technique used in grilling, roasting, braising, sauteing, etc. That cooks the surface of the food (usually meat, poultry or fish) at high temperature so that a caramelised crust forms`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-SEAR`), namedNode(`${rdfs}label`), literal(`Sear`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-SEAR`), namedNode(`${skos}prefLabel`), literal(`SEAR`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-SIMMER`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-SIMMER`), namedNode(`${rdfs}comment`), literal(`Cook food by heating it in water kept just below the boiling point (same as coddling)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-SIMMER`), namedNode(`${rdfs}label`), literal(`Simmer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-SIMMER`), namedNode(`${skos}prefLabel`), literal(`SIMMER`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-SMOKE`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-SMOKE`), namedNode(`${rdfs}comment`), literal(`Process of curing, cooking, or seasoning food by exposing it for long periods of time to the smoke from a wood fire`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-SMOKE`), namedNode(`${rdfs}label`), literal(`Smoke`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-SMOKE`), namedNode(`${skos}prefLabel`), literal(`SMOKE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-STEAM`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-STEAM`), namedNode(`${rdfs}comment`), literal(`Cooking by first boiling the water so it will evaporate into steam, then the steam will carry heat to the food, thus achieving heating the food`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-STEAM`), namedNode(`${rdfs}label`), literal(`Steam`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-STEAM`), namedNode(`${skos}prefLabel`), literal(`STEAM`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-STEW`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-STEW`), namedNode(`${rdfs}comment`), literal(`Preparing meat cut into smaller pieces or cubes by simmering it in liquid, usually together with vegetables`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-STEW`), namedNode(`${rdfs}label`), literal(`Stew`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-STEW`), namedNode(`${skos}prefLabel`), literal(`STEW`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-STIR_FRY`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-STIR_FRY`), namedNode(`${rdfs}comment`), literal(`Chinese cooking technique used because of its fast cooking speed`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-STIR_FRY`), namedNode(`${rdfs}label`), literal(`Stir Fry`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-STIR_FRY`), namedNode(`${skos}prefLabel`), literal(`STIR_FRY`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-THAW`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-THAW`), namedNode(`${rdfs}comment`), literal(`Convert the product from a frozen state to a chilled or room temperature state.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-THAW`), namedNode(`${rdfs}label`), literal(`Thaw`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-THAW`), namedNode(`${skos}prefLabel`), literal(`THAW`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-UNPREPARED`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-UNPREPARED`), namedNode(`${rdfs}comment`), literal(`The initial state of the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-UNPREPARED`), namedNode(`${rdfs}label`), literal(`Unprepared`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-UNPREPARED`), namedNode(`${skos}prefLabel`), literal(`UNPREPARED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-UNSPECIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-UNSPECIFIED`), namedNode(`${rdfs}comment`), literal(`Unknown, not applicable`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-UNSPECIFIED`), namedNode(`${rdfs}label`), literal(`Unknown`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreparationTypeCode-UNSPECIFIED`), namedNode(`${skos}prefLabel`), literal(`UNSPECIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-ACIDIFICATION`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-ACIDIFICATION`), namedNode(`${rdfs}comment`), literal(`Dropping pH of food`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-ACIDIFICATION`), namedNode(`${rdfs}label`), literal(`Acidification`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-ACIDIFICATION`), namedNode(`${skos}prefLabel`), literal(`ACIDIFICATION`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:PreservationTechniqueTypeCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode`), namedNode(`${rdfs}label`), literal(`Preservation Technique Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-ALCOHOL_CURING`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-ALCOHOL_CURING`), namedNode(`${rdfs}comment`), literal(`Treatment of food by adding alcohol in order to preserve the product`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-ALCOHOL_CURING`), namedNode(`${rdfs}label`), literal(`Alcohol Curing`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-ALCOHOL_CURING`), namedNode(`${skos}prefLabel`), literal(`ALCOHOL_CURING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-ATTESTED_MILK`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-ATTESTED_MILK`), namedNode(`${rdfs}comment`), literal(`Raw Milk (without heat treatment)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-ATTESTED_MILK`), namedNode(`${rdfs}label`), literal(`Attested Milk`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-ATTESTED_MILK`), namedNode(`${skos}prefLabel`), literal(`ATTESTED_MILK`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-BOILING`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-BOILING`), namedNode(`${rdfs}comment`), literal(`Cooking`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-BOILING`), namedNode(`${rdfs}label`), literal(`Cooking`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-BOILING`), namedNode(`${skos}prefLabel`), literal(`BOILING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-BRINING`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-BRINING`), namedNode(`${rdfs}comment`), literal(`Water saturating or strongly impregnating with salt`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-BRINING`), namedNode(`${rdfs}label`), literal(`Brining`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-BRINING`), namedNode(`${skos}prefLabel`), literal(`BRINING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-CANNING`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-CANNING`), namedNode(`${rdfs}comment`), literal(`Preserved in a sealed airtight container, usually made of tin-coated iron`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-CANNING`), namedNode(`${rdfs}label`), literal(`Canning`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-CANNING`), namedNode(`${skos}prefLabel`), literal(`CANNING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-COLD_SMOKE_CURING`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-COLD_SMOKE_CURING`), namedNode(`${rdfs}comment`), literal(`To smoke the food at between 70 degrees to 90 degrees F.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-COLD_SMOKE_CURING`), namedNode(`${rdfs}label`), literal(`Cold Smoke Curing`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-COLD_SMOKE_CURING`), namedNode(`${skos}prefLabel`), literal(`COLD_SMOKE_CURING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-CONSERVE`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-CONSERVE`), namedNode(`${rdfs}comment`), literal(`Keep from harm or damage`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-CONSERVE`), namedNode(`${rdfs}label`), literal(`Conserve`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-CONSERVE`), namedNode(`${skos}prefLabel`), literal(`CONSERVE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-DEHYDRATION`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-DEHYDRATION`), namedNode(`${rdfs}comment`), literal(`To remove water from food`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-DEHYDRATION`), namedNode(`${rdfs}label`), literal(`Dehydration`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-DEHYDRATION`), namedNode(`${skos}prefLabel`), literal(`DEHYDRATION`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-DRYING`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-DRYING`), namedNode(`${rdfs}comment`), literal(`Making with moisture having evaporated, drained away`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-DRYING`), namedNode(`${rdfs}label`), literal(`Drying`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-DRYING`), namedNode(`${skos}prefLabel`), literal(`DRYING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-FERMENTATION`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-FERMENTATION`), namedNode(`${rdfs}comment`), literal(`Any of a group of chemical reactions induced by living or nonliving ferments that split complex organic compounds into relatively simple substance`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-FERMENTATION`), namedNode(`${rdfs}label`), literal(`Fermentation`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-FERMENTATION`), namedNode(`${skos}prefLabel`), literal(`FERMENTATION`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-FREEZE_DRYING`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-FREEZE_DRYING`), namedNode(`${rdfs}comment`), literal(`Preserving food by freezing and then drying in a vacuum`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-FREEZE_DRYING`), namedNode(`${rdfs}label`), literal(`Freeze Drying`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-FREEZE_DRYING`), namedNode(`${skos}prefLabel`), literal(`FREEZE_DRYING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-FREEZING`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-FREEZING`), namedNode(`${rdfs}comment`), literal(`Turning into ice or another solid by cold`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-FREEZING`), namedNode(`${rdfs}label`), literal(`Freezing`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-FREEZING`), namedNode(`${skos}prefLabel`), literal(`FREEZING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-HIGH_TEMPERATURE_TREATED_MILK`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-HIGH_TEMPERATURE_TREATED_MILK`), namedNode(`${rdfs}comment`), literal(`Legally also pasteurisation, MHD for longer (about 2 to 3 weeks), ESL-milk`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-HIGH_TEMPERATURE_TREATED_MILK`), namedNode(`${rdfs}label`), literal(`High Temperature Treated Milk`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-HIGH_TEMPERATURE_TREATED_MILK`), namedNode(`${skos}prefLabel`), literal(`HIGH_TEMPERATURE_TREATED_MILK`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-HOT_SMOKE_CURING`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-HOT_SMOKE_CURING`), namedNode(`${rdfs}comment`), literal(`Hot-smoking partially or totally cooks the food by treating it at temperatures ranging from 100 degrees to 190 degrees F.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-HOT_SMOKE_CURING`), namedNode(`${rdfs}label`), literal(`Hot Smoke Curing`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-HOT_SMOKE_CURING`), namedNode(`${skos}prefLabel`), literal(`HOT_SMOKE_CURING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-IONISATION`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-IONISATION`), namedNode(`${rdfs}comment`), literal(`To convert into an ion or ions`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-IONISATION`), namedNode(`${rdfs}label`), literal(`Ionisation`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-IONISATION`), namedNode(`${skos}prefLabel`), literal(`IONISATION`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-IRRADIATION`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-IRRADIATION`), namedNode(`${rdfs}comment`), literal(`Food irradiation is the process of exposing food to ionising radiation in order to disinfest, sterilise, or preserve food.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-IRRADIATION`), namedNode(`${rdfs}label`), literal(`Irradiation`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-IRRADIATION`), namedNode(`${skos}prefLabel`), literal(`IRRADIATION`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-PASTEURISATION`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-PASTEURISATION`), namedNode(`${rdfs}comment`), literal(`Partially sterilisation by heating`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-PASTEURISATION`), namedNode(`${rdfs}label`), literal(`Pasteurisation`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-PASTEURISATION`), namedNode(`${skos}prefLabel`), literal(`PASTEURISATION`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-QUICK_FREEZING`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-QUICK_FREEZING`), namedNode(`${rdfs}comment`), literal(`Freezing (food) rapidly so as to preserve its qualities`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-QUICK_FREEZING`), namedNode(`${rdfs}label`), literal(`Quick Freezing`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-QUICK_FREEZING`), namedNode(`${skos}prefLabel`), literal(`QUICK_FREEZING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-SALT_CURING`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-SALT_CURING`), namedNode(`${rdfs}comment`), literal(`Preserving by using a salt brine`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-SALT_CURING`), namedNode(`${rdfs}label`), literal(`Salt Curing`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-SALT_CURING`), namedNode(`${skos}prefLabel`), literal(`SALT_CURING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-SOUS_VIDE`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-SOUS_VIDE`), namedNode(`${rdfs}comment`), literal(`Low temperature long time cooking under vacuum`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-SOUS_VIDE`), namedNode(`${rdfs}label`), literal(`Sous Vide`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-SOUS_VIDE`), namedNode(`${skos}prefLabel`), literal(`SOUS_VIDE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-STERILISATION`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-STERILISATION`), namedNode(`${rdfs}comment`), literal(`A process that effectively kills or eliminates transmissibleagents (such as fungi, bacteria, viruses, spore forms, etc.).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-STERILISATION`), namedNode(`${rdfs}label`), literal(`Sterilisation`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-STERILISATION`), namedNode(`${skos}prefLabel`), literal(`STERILISATION`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-SUGAR_CURING`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-SUGAR_CURING`), namedNode(`${rdfs}comment`), literal(`Treatment of food by adding sugar in order to preserve the product`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-SUGAR_CURING`), namedNode(`${rdfs}label`), literal(`Sugar Curing`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-SUGAR_CURING`), namedNode(`${skos}prefLabel`), literal(`SUGAR_CURING`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-ULTRA_HIGH_TEMPERATURE`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-ULTRA_HIGH_TEMPERATURE`), namedNode(`${rdfs}comment`), literal(`Ultra heat treated (especially for milk)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-ULTRA_HIGH_TEMPERATURE`), namedNode(`${rdfs}label`), literal(`Ultra High Temperature`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-ULTRA_HIGH_TEMPERATURE`), namedNode(`${skos}prefLabel`), literal(`ULTRA_HIGH_TEMPERATURE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-UNDER_MODIFIED_ATMOSPHERE`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-UNDER_MODIFIED_ATMOSPHERE`), namedNode(`${rdfs}comment`), literal(`Packed with a gas with protective proprieties`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-UNDER_MODIFIED_ATMOSPHERE`), namedNode(`${rdfs}label`), literal(`Under Modified Atmosphere`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-UNDER_MODIFIED_ATMOSPHERE`), namedNode(`${skos}prefLabel`), literal(`UNDER_MODIFIED_ATMOSPHERE`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-VACUUM_PACKED`), namedNode(`${rdf}type`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-VACUUM_PACKED`), namedNode(`${rdfs}comment`), literal(`Sealed after the partial removal of air`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-VACUUM_PACKED`), namedNode(`${rdfs}label`), literal(`Vacuum Packed`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PreservationTechniqueCode-VACUUM_PACKED`), namedNode(`${skos}prefLabel`), literal(`VACUUM_PACKED`), namedNode(ns4)),
        quad(namedNode(`${ns4}PriceSpecification`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}PriceSpecification`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}PriceSpecification`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}PriceSpecification`), namedNode(`${rdfs}comment`), literal(`A structured value representing a monetary amount, consisting of a value and currency code.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PriceSpecification`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}PriceSpecification`), namedNode(`${rdfs}label`), literal(`Price Specification`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}PriceSpecification`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}PriceSpecification`), namedNode(`${skos}exactMatch`), namedNode(`${schema}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldDetails`), namedNode(`${rdfs}comment`), literal(`A grouping of properties related to the yield of a food or beverage product according to a specified type of preparation.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldDetails`), namedNode(`${rdfs}label`), literal(`Product Yield Details`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode-AFTER_COOKING`), namedNode(`${rdf}type`), namedNode(`${ns4}ProductYieldTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode-AFTER_COOKING`), namedNode(`${rdfs}comment`), literal(`Weight or volume of food product after it has been prepared.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode-AFTER_COOKING`), namedNode(`${rdfs}label`), literal(`After Cooking`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode-AFTER_COOKING`), namedNode(`${skos}prefLabel`), literal(`AFTER_COOKING`), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:ProductYieldTypeCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode`), namedNode(`${rdfs}label`), literal(`Product Yield Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode-AFTER_DILUTION`), namedNode(`${rdf}type`), namedNode(`${ns4}ProductYieldTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode-AFTER_DILUTION`), namedNode(`${rdfs}comment`), literal(`Volume of food product after a fluid has been added.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode-AFTER_DILUTION`), namedNode(`${rdfs}label`), literal(`After Dilution`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode-AFTER_DILUTION`), namedNode(`${skos}prefLabel`), literal(`AFTER_DILUTION`), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode-DRAINED_WEIGHT`), namedNode(`${rdf}type`), namedNode(`${ns4}ProductYieldTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode-DRAINED_WEIGHT`), namedNode(`${rdfs}comment`), literal(`Weight of food product after the fluid in which the food product was preserved has been removed.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode-DRAINED_WEIGHT`), namedNode(`${rdfs}label`), literal(`Drained Weight`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode-DRAINED_WEIGHT`), namedNode(`${skos}prefLabel`), literal(`DRAINED_WEIGHT`), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode-UNSPECIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}ProductYieldTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode-UNSPECIFIED`), namedNode(`${rdfs}comment`), literal(`Product yield type is unknown or irrelevant`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode-UNSPECIFIED`), namedNode(`${rdfs}label`), literal(`Unspecified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ProductYieldTypeCode-UNSPECIFIED`), namedNode(`${skos}prefLabel`), literal(`UNSPECIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileDetails`), namedNode(`${rdfs}comment`), literal(`Provides URL and other information on a referenced electronic file.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileDetails`), namedNode(`${rdfs}label`), literal(`Referenced File`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${schema}MediaObject`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-DIET_CERTIFICATE`), namedNode(`${rdf}type`), namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-DIET_CERTIFICATE`), namedNode(`${rdfs}comment`), literal(`Link to a website or file containing a diet certificate granted to the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-DIET_CERTIFICATE`), namedNode(`${rdfs}label`), literal(`Diet Certificate`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-DIET_CERTIFICATE`), namedNode(`${skos}prefLabel`), literal(`DIET_CERTIFICATE`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:ReferencedFileTypeCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(`${rdfs}label`), literal(`Referenced File Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-DOCUMENT`), namedNode(`${rdf}type`), namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-DOCUMENT`), namedNode(`${rdfs}comment`), literal(`Link to a document or text file containing product information. Examples of this type could be an instruction manual, assembly guide, or warranty document.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-DOCUMENT`), namedNode(`${rdfs}label`), literal(`Document`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-DOCUMENT`), namedNode(`${skos}prefLabel`), literal(`DOCUMENT`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-GROUP_CHARACTERISTIC_SHEET`), namedNode(`${rdf}type`), namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-GROUP_CHARACTERISTIC_SHEET`), namedNode(`${rdfs}label`), literal(`Group Characteristics Sheet`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-GROUP_CHARACTERISTIC_SHEET`), namedNode(`${skos}prefLabel`), literal(`GROUP_CHARACTERISTIC_SHEET`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-LOGO`), namedNode(`${rdf}type`), namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-LOGO`), namedNode(`${rdfs}comment`), literal(`Link to a file containing the Manufacturer or Brand Logo(s) associated with the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-LOGO`), namedNode(`${rdfs}label`), literal(`Logo`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-LOGO`), namedNode(`${skos}prefLabel`), literal(`LOGO`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-MARKETING_INFORMATION`), namedNode(`${rdf}type`), namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-MARKETING_INFORMATION`), namedNode(`${rdfs}comment`), literal(`Link to a file with product information associated with selling a product or service.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-MARKETING_INFORMATION`), namedNode(`${rdfs}label`), literal(`Marketing Information`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-MARKETING_INFORMATION`), namedNode(`${skos}prefLabel`), literal(`MARKETING_INFORMATION`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-OUT_OF_PACKAGE_IMAGE`), namedNode(`${rdf}type`), namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-OUT_OF_PACKAGE_IMAGE`), namedNode(`${rdfs}comment`), literal(`Link to an image of an item out of its packaging and, if necessary, assembled ready for use by the end user. This type of file is subject the current version of the GDSN Product Image Specification Standard.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-OUT_OF_PACKAGE_IMAGE`), namedNode(`${rdfs}label`), literal(`Out of Package Image`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-OUT_OF_PACKAGE_IMAGE`), namedNode(`${skos}prefLabel`), literal(`OUT_OF_PACKAGE_IMAGE`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-PLANOGRAM`), namedNode(`${rdf}type`), namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-PLANOGRAM`), namedNode(`${rdfs}comment`), literal(`Link to a file illustrating how and where retail products should be displayed.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-PLANOGRAM`), namedNode(`${rdfs}label`), literal(`Planogram`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-PLANOGRAM`), namedNode(`${skos}prefLabel`), literal(`PLANOGRAM`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-PRODUCT_LABEL_IMAGE`), namedNode(`${rdf}type`), namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-PRODUCT_LABEL_IMAGE`), namedNode(`${rdfs}comment`), literal(`Link to a file containing a visual representation of the product label.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-PRODUCT_LABEL_IMAGE`), namedNode(`${rdfs}label`), literal(`Product Label Image`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-PRODUCT_LABEL_IMAGE`), namedNode(`${skos}prefLabel`), literal(`PRODUCT_LABEL_IMAGE`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-SAFETY_DATA_SHEET`), namedNode(`${rdf}type`), namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-SAFETY_DATA_SHEET`), namedNode(`${rdfs}comment`), literal(`Link to a file containing the product's Safety Data Sheet (SDS). This file can be either an image or a document`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-SAFETY_DATA_SHEET`), namedNode(`${rdfs}label`), literal(`Safety Data Sheet`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-SAFETY_DATA_SHEET`), namedNode(`${skos}prefLabel`), literal(`SAFETY_DATA_SHEET`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-SAFETY_SUMMARY_SHEET`), namedNode(`${rdf}type`), namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-SAFETY_SUMMARY_SHEET`), namedNode(`${rdfs}comment`), literal(`A link to a summary sheet document that is available to workers to understand how to deal with chemicals in an emergency situation.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-SAFETY_SUMMARY_SHEET`), namedNode(`${rdfs}label`), literal(`Safety Summary Sheet`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-SAFETY_SUMMARY_SHEET`), namedNode(`${skos}prefLabel`), literal(`SAFETY_SUMMARY_SHEET`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-TRADE_ITEM_DESCRIPTION`), namedNode(`${rdf}type`), namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-TRADE_ITEM_DESCRIPTION`), namedNode(`${rdfs}comment`), literal(`Identifies the reference to an external description of a product. The link (e.g. URL) to the external description. will be in the appropriate attribute`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-TRADE_ITEM_DESCRIPTION`), namedNode(`${rdfs}label`), literal(`Trade Item Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-TRADE_ITEM_DESCRIPTION`), namedNode(`${skos}prefLabel`), literal(`TRADE_ITEM_DESCRIPTION`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-VIDEO`), namedNode(`${rdf}type`), namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-VIDEO`), namedNode(`${rdfs}comment`), literal(`Link to a file containing a video clip which is relevant to the product. Examples are commercials, trailers, or instructional/ how to use video files.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-VIDEO`), namedNode(`${rdfs}label`), literal(`Video`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-VIDEO`), namedNode(`${skos}prefLabel`), literal(`VIDEO`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-WARRANTY_INFORMATION`), namedNode(`${rdf}type`), namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-WARRANTY_INFORMATION`), namedNode(`${rdfs}comment`), literal(`Link to a file with information associated with any guarantee given by a company stating that a product is reliable and free from known defects and that the seller will, without charge, repair or replace defective parts within a given time limit and under certain conditions.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-WARRANTY_INFORMATION`), namedNode(`${rdfs}label`), literal(`Warranty Information`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-WARRANTY_INFORMATION`), namedNode(`${skos}prefLabel`), literal(`WARRANTY_INFORMATION`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-WEBSITE`), namedNode(`${rdf}type`), namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-WEBSITE`), namedNode(`${rdfs}comment`), literal(`Link to a website containing product or manufacturer information.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-WEBSITE`), namedNode(`${rdfs}label`), literal(`Website`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReferencedFileTypeCode-WEBSITE`), namedNode(`${skos}prefLabel`), literal(`WEBSITE`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReturnablePackageDepositDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReturnablePackageDepositDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReturnablePackageDepositDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}ReturnablePackageDepositDetails`), namedNode(`${rdfs}comment`), literal(`Details of the deposit for returnable packaging for a product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReturnablePackageDepositDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}ReturnablePackageDepositDetails`), namedNode(`${rdfs}label`), literal(`Returnable Package Deposit Details`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ReturnablePackageDepositDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}Seafood`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Seafood`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}Seafood`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}Seafood`), namedNode(`${rdfs}comment`), literal(`Seafood Products including fish and shellfish.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Seafood`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}Seafood`), namedNode(`${rdfs}label`), literal(`Seafood`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}Seafood`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-ALL_YEAR`), namedNode(`${rdf}type`), namedNode(`${ns4}SeasonParameterCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-ALL_YEAR`), namedNode(`${rdfs}comment`), literal(`All Year`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-ALL_YEAR`), namedNode(`${rdfs}label`), literal(`All Year`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-ALL_YEAR`), namedNode(`${skos}prefLabel`), literal(`ALL_YEAR`), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:SeasonParameterCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode`), namedNode(`${rdfs}label`), literal(`Season Parameter Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-AUTUMN`), namedNode(`${rdf}type`), namedNode(`${ns4}SeasonParameterCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-AUTUMN`), namedNode(`${rdfs}comment`), literal(`For products that are seasonal in nature and apply to the Autumn selling season only`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-AUTUMN`), namedNode(`${rdfs}label`), literal(`Autumn`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-AUTUMN`), namedNode(`${skos}prefLabel`), literal(`AUTUMN`), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-AUTUMN_WINTER`), namedNode(`${rdf}type`), namedNode(`${ns4}SeasonParameterCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-AUTUMN_WINTER`), namedNode(`${rdfs}comment`), literal(`For products that are seasonal in nature and apply to both the Autumn and Winter selling seasons`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-AUTUMN_WINTER`), namedNode(`${rdfs}label`), literal(`Autumn and Winter`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-AUTUMN_WINTER`), namedNode(`${skos}prefLabel`), literal(`AUTUMN_WINTER`), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-SPRING`), namedNode(`${rdf}type`), namedNode(`${ns4}SeasonParameterCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-SPRING`), namedNode(`${rdfs}comment`), literal(`For products that are seasonal in nature and apply to the Spring selling season only`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-SPRING`), namedNode(`${rdfs}label`), literal(`Spring`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-SPRING`), namedNode(`${skos}prefLabel`), literal(`SPRING`), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-SPRING_SUMMER`), namedNode(`${rdf}type`), namedNode(`${ns4}SeasonParameterCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-SPRING_SUMMER`), namedNode(`${rdfs}comment`), literal(`For products that are seasonal in nature and apply to both the Spring and Summer selling seasons`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-SPRING_SUMMER`), namedNode(`${rdfs}label`), literal(`Spring and Summer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-SPRING_SUMMER`), namedNode(`${skos}prefLabel`), literal(`SPRING_SUMMER`), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-SUMMER`), namedNode(`${rdf}type`), namedNode(`${ns4}SeasonParameterCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-SUMMER`), namedNode(`${rdfs}comment`), literal(`For products that are seasonal in nature and apply to the Summer selling season only`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-SUMMER`), namedNode(`${rdfs}label`), literal(`Summer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-SUMMER`), namedNode(`${skos}prefLabel`), literal(`SUMMER`), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-WINTER`), namedNode(`${rdf}type`), namedNode(`${ns4}SeasonParameterCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-WINTER`), namedNode(`${rdfs}comment`), literal(`For products that are seasonal in nature and apply to the Winter selling season only`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-WINTER`), namedNode(`${rdfs}label`), literal(`Winter`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SeasonParameterCode-WINTER`), namedNode(`${skos}prefLabel`), literal(`WINTER`), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-EXTRA_EXTRA_SHARP`), namedNode(`${rdf}type`), namedNode(`${ns4}SharpnessOfCheeseCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-EXTRA_EXTRA_SHARP`), namedNode(`${rdfs}label`), literal(`Extra Extra Sharp`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-EXTRA_EXTRA_SHARP`), namedNode(`${skos}prefLabel`), literal(`EXTRA_EXTRA_SHARP`), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode`), namedNode(`${rdfs}label`), literal(`Sharpness of Cheese Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-EXTRA_SHARP`), namedNode(`${rdf}type`), namedNode(`${ns4}SharpnessOfCheeseCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-EXTRA_SHARP`), namedNode(`${rdfs}label`), literal(`Extra Sharp`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-EXTRA_SHARP`), namedNode(`${skos}prefLabel`), literal(`EXTRA_SHARP`), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-MILD`), namedNode(`${rdf}type`), namedNode(`${ns4}SharpnessOfCheeseCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-MILD`), namedNode(`${rdfs}label`), literal(`Mild`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-MILD`), namedNode(`${skos}prefLabel`), literal(`MILD`), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-REGULAR`), namedNode(`${rdf}type`), namedNode(`${ns4}SharpnessOfCheeseCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-REGULAR`), namedNode(`${rdfs}label`), literal(`Regular`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-REGULAR`), namedNode(`${skos}prefLabel`), literal(`REGULAR`), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-SHARP`), namedNode(`${rdf}type`), namedNode(`${ns4}SharpnessOfCheeseCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-SHARP`), namedNode(`${rdfs}label`), literal(`Sharp`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-SHARP`), namedNode(`${skos}prefLabel`), literal(`SHARP`), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-UNCLASSIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}SharpnessOfCheeseCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-UNCLASSIFIED`), namedNode(`${rdfs}label`), literal(`Unclassified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SharpnessOfCheeseCode-UNCLASSIFIED`), namedNode(`${skos}prefLabel`), literal(`UNCLASSIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeCodeDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeCodeDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeCodeDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeCodeDetails`), namedNode(`${rdfs}comment`), literal(`A grouping of properties related to the representing the size of a product, by specifying a value from a specified code list.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeCodeDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeCodeDetails`), namedNode(`${rdfs}label`), literal(`Size Code Details`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeCodeDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeDetails`), namedNode(`${rdfs}comment`), literal(`A grouping of properties related to the size of a wearable product`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeDetails`), namedNode(`${rdfs}label`), literal(`Size Details`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-BOYS`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeGroupCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-BOYS`), namedNode(`${rdfs}label`), literal(`Boys`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-BOYS`), namedNode(`${skos}prefLabel`), literal(`BOYS`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:SizeGroupCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode`), namedNode(`${rdfs}label`), literal(`Size Group Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-GIRLS`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeGroupCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-GIRLS`), namedNode(`${rdfs}label`), literal(`Girls`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-GIRLS`), namedNode(`${skos}prefLabel`), literal(`GIRLS`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-INFANTS`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeGroupCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-INFANTS`), namedNode(`${rdfs}label`), literal(`Infants`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-INFANTS`), namedNode(`${skos}prefLabel`), literal(`INFANTS`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-JUNIORS`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeGroupCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-JUNIORS`), namedNode(`${rdfs}label`), literal(`Juniors`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-JUNIORS`), namedNode(`${skos}prefLabel`), literal(`JUNIORS`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-MATERNITY`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeGroupCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-MATERNITY`), namedNode(`${rdfs}label`), literal(`Maternity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-MATERNITY`), namedNode(`${skos}prefLabel`), literal(`MATERNITY`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-MENS`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeGroupCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-MENS`), namedNode(`${rdfs}label`), literal(`Mens`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-MENS`), namedNode(`${skos}prefLabel`), literal(`MENS`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-MENS_TALL`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeGroupCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-MENS_TALL`), namedNode(`${rdfs}label`), literal(`Mens Tall`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-MENS_TALL`), namedNode(`${skos}prefLabel`), literal(`MENS_TALL`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-MISSES`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeGroupCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-MISSES`), namedNode(`${rdfs}label`), literal(`Misses`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-MISSES`), namedNode(`${skos}prefLabel`), literal(`MISSES`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-PETITE`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeGroupCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-PETITE`), namedNode(`${rdfs}label`), literal(`Petite`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-PETITE`), namedNode(`${skos}prefLabel`), literal(`PETITE`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-WOMENS`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeGroupCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-WOMENS`), namedNode(`${rdfs}label`), literal(`Womens`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-WOMENS`), namedNode(`${skos}prefLabel`), literal(`WOMENS`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-WOMENS_TALL`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeGroupCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-WOMENS_TALL`), namedNode(`${rdfs}label`), literal(`Womens Tall`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeGroupCode-WOMENS_TALL`), namedNode(`${skos}prefLabel`), literal(`WOMENS_TALL`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-AUSTRALIA`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeSystemCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-AUSTRALIA`), namedNode(`${rdfs}label`), literal(`Australia`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-AUSTRALIA`), namedNode(`${skos}prefLabel`), literal(`AUSTRALIA`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:SizeSystemCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode`), namedNode(`${rdfs}label`), literal(`Size System Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-CONTINENTAL`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeSystemCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-CONTINENTAL`), namedNode(`${rdfs}label`), literal(`Continental`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-CONTINENTAL`), namedNode(`${skos}prefLabel`), literal(`CONTINENTAL`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-EUROPE`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeSystemCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-EUROPE`), namedNode(`${rdfs}label`), literal(`Europe`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-EUROPE`), namedNode(`${skos}prefLabel`), literal(`EUROPE`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-JAPAN`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeSystemCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-JAPAN`), namedNode(`${rdfs}label`), literal(`Japan`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-JAPAN`), namedNode(`${skos}prefLabel`), literal(`JAPAN`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-MEXICO`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeSystemCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-MEXICO`), namedNode(`${rdfs}label`), literal(`Mexico`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-MEXICO`), namedNode(`${skos}prefLabel`), literal(`MEXICO`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-UK`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeSystemCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-UK`), namedNode(`${rdfs}label`), literal(`UK`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-UK`), namedNode(`${skos}prefLabel`), literal(`UK`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-US`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeSystemCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-US`), namedNode(`${rdfs}label`), literal(`US`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeSystemCode-US`), namedNode(`${skos}prefLabel`), literal(`US`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-BACK`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-BACK`), namedNode(`${rdfs}label`), literal(`Back`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-BACK`), namedNode(`${skos}prefLabel`), literal(`BACK`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:SizeTypeCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode`), namedNode(`${rdfs}label`), literal(`Size Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-CHEST_BUST`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-CHEST_BUST`), namedNode(`${rdfs}comment`), literal(`The measurement around the widest part of the chest/bust.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-CHEST_BUST`), namedNode(`${rdfs}label`), literal(`Chest or Bust`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-CHEST_BUST`), namedNode(`${skos}prefLabel`), literal(`CHEST_BUST`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-COLLAR`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-COLLAR`), namedNode(`${rdfs}label`), literal(`Collar`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-COLLAR`), namedNode(`${skos}prefLabel`), literal(`COLLAR`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-CUP`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-CUP`), namedNode(`${rdfs}label`), literal(`Cup`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-CUP`), namedNode(`${skos}prefLabel`), literal(`CUP`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-HIPS`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-HIPS`), namedNode(`${rdfs}comment`), literal(`The measurement around the fullest part of the hips.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-HIPS`), namedNode(`${rdfs}label`), literal(`Hips`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-HIPS`), namedNode(`${skos}prefLabel`), literal(`HIPS`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-INSEAM`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-INSEAM`), namedNode(`${rdfs}label`), literal(`Inseam`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-INSEAM`), namedNode(`${skos}prefLabel`), literal(`INSEAM`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-LENGTH`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-LENGTH`), namedNode(`${rdfs}label`), literal(`Length`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-LENGTH`), namedNode(`${skos}prefLabel`), literal(`LENGTH`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-ONE_DIMENSION`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-ONE_DIMENSION`), namedNode(`${rdfs}label`), literal(`One Dimension`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-ONE_DIMENSION`), namedNode(`${skos}prefLabel`), literal(`ONE_DIMENSION`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-OUTSIDE_LEG`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-OUTSIDE_LEG`), namedNode(`${rdfs}comment`), literal(`The measurement of the outside leg seam. This is the distance from the waist to the bottom of the trousers.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-OUTSIDE_LEG`), namedNode(`${rdfs}label`), literal(`Outside Leg`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-OUTSIDE_LEG`), namedNode(`${skos}prefLabel`), literal(`OUTSIDE_LEG`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-SLEEVE`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-SLEEVE`), namedNode(`${rdfs}label`), literal(`Sleeve`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-SLEEVE`), namedNode(`${skos}prefLabel`), literal(`SLEEVE`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-WAIST`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-WAIST`), namedNode(`${rdfs}label`), literal(`Waist`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-WAIST`), namedNode(`${skos}prefLabel`), literal(`WAIST`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-WIDTH`), namedNode(`${rdf}type`), namedNode(`${ns4}SizeTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-WIDTH`), namedNode(`${rdfs}label`), literal(`Width`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SizeTypeCode-WIDTH`), namedNode(`${skos}prefLabel`), literal(`WIDTH`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-ALLIGATOR`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-ALLIGATOR`), namedNode(`${rdfs}comment`), literal(`A crocodilian in the genus Alligator of the family Alligatoridae.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-ALLIGATOR`), namedNode(`${rdfs}label`), literal(`Alligator`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-ALLIGATOR`), namedNode(`${skos}prefLabel`), literal(`ALLIGATOR`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns14}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:SourceAnimalCode&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode`), namedNode(`${rdfs}label`), literal(`Source Animal Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-ASS`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-ASS`), namedNode(`${rdfs}comment`), literal(`A domesticated member of the horse family.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-ASS`), namedNode(`${rdfs}label`), literal(`Ass`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-ASS`), namedNode(`${skos}prefLabel`), literal(`ASS`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-BEAR`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-BEAR`), namedNode(`${rdfs}comment`), literal(`Mammals of the family Ursidae.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-BEAR`), namedNode(`${rdfs}label`), literal(`Bear`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-BEAR`), namedNode(`${skos}prefLabel`), literal(`BEAR`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-BEEF_COW`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-BEEF_COW`), namedNode(`${rdfs}comment`), literal(`Cattle raised principally for meat production, other uses include leather and products used in shampoo and cosmetics.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-BEEF_COW`), namedNode(`${rdfs}label`), literal(`Beef Cow`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-BEEF_COW`), namedNode(`${skos}prefLabel`), literal(`BEEF_COW`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-BOAR`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-BOAR`), namedNode(`${rdfs}comment`), literal(`A wild relative of the domestic pig.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-BOAR`), namedNode(`${rdfs}label`), literal(`Boar`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-BOAR`), namedNode(`${skos}prefLabel`), literal(`BOAR`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-BUFFALO`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-BUFFALO`), namedNode(`${rdfs}comment`), literal(`A large bovine animal, frequently used as livestock.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-BUFFALO`), namedNode(`${rdfs}label`), literal(`Buffalo`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-BUFFALO`), namedNode(`${skos}prefLabel`), literal(`BUFFALO`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-CALF`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-CALF`), namedNode(`${rdfs}comment`), literal(`A general term for a juvenile member of any species of domestic cattle which is intentionally raised to be processed at a young age.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-CALF`), namedNode(`${rdfs}label`), literal(`Calf`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-CALF`), namedNode(`${skos}prefLabel`), literal(`CALF`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-CAMEL`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-CAMEL`), namedNode(`${rdfs}comment`), literal(`Even-toed ungulates within the genus Camelus.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-CAMEL`), namedNode(`${rdfs}label`), literal(`Camel`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-CAMEL`), namedNode(`${skos}prefLabel`), literal(`CAMEL`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-CHICKEN`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-CHICKEN`), namedNode(`${rdfs}comment`), literal(`A domesticated fowl.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-CHICKEN`), namedNode(`${rdfs}label`), literal(`Chicken`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-CHICKEN`), namedNode(`${skos}prefLabel`), literal(`CHICKEN`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-COCKEREL`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-COCKEREL`), namedNode(`${rdfs}comment`), literal(`A male chicken.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-COCKEREL`), namedNode(`${rdfs}label`), literal(`Cockerel`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-COCKEREL`), namedNode(`${skos}prefLabel`), literal(`COCKEREL`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-COW`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-COW`), namedNode(`${rdfs}comment`), literal(`A domesticated member of the subfamily Bovinae.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-COW`), namedNode(`${rdfs}label`), literal(`Cow`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-COW`), namedNode(`${skos}prefLabel`), literal(`COW`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-CROCODILE`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-CROCODILE`), namedNode(`${rdfs}comment`), literal(`Any species belonging to the family Crocodylidae.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-CROCODILE`), namedNode(`${rdfs}label`), literal(`Crocodile`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-CROCODILE`), namedNode(`${skos}prefLabel`), literal(`CROCODILE`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-DEER`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-DEER`), namedNode(`${rdfs}comment`), literal(`Ruminant mammals forming the family Cervidae.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-DEER`), namedNode(`${rdfs}label`), literal(`Deer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-DEER`), namedNode(`${skos}prefLabel`), literal(`DEER`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-DOG`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-DOG`), namedNode(`${rdfs}comment`), literal(`A domesticated form of the Wolf, a member of the Canidae family of the order Carnivora.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-DOG`), namedNode(`${rdfs}label`), literal(`Dog`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-DOG`), namedNode(`${skos}prefLabel`), literal(`DOG`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-DUCK`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-DUCK`), namedNode(`${rdfs}comment`), literal(`Aquatic birds, mostly smaller than the swans and geese, and may be found in both fresh water and sea water.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-DUCK`), namedNode(`${rdfs}label`), literal(`Duck`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-DUCK`), namedNode(`${skos}prefLabel`), literal(`DUCK`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-DUCKLING`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-DUCKLING`), namedNode(`${rdfs}comment`), literal(`A young duck.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-DUCKLING`), namedNode(`${rdfs}label`), literal(`Duckling`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-DUCKLING`), namedNode(`${skos}prefLabel`), literal(`DUCKLING`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-FISH`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-FISH`), namedNode(`${rdfs}comment`), literal(`Fresh or sea water fish.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-FISH`), namedNode(`${rdfs}label`), literal(`Fish`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-FISH`), namedNode(`${skos}prefLabel`), literal(`FISH`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-FOWL`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-FOWL`), namedNode(`${rdfs}comment`), literal(`Non-domesticated birds in general but usually refers to birds belonging to one of two biological orders, namely the gamefowl or landfowl and the waterfowl.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-FOWL`), namedNode(`${rdfs}label`), literal(`Fowl`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-FOWL`), namedNode(`${skos}prefLabel`), literal(`FOWL`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-FROG`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-FROG`), namedNode(`${rdfs}comment`), literal(`Amphibians in the order Anura.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-FROG`), namedNode(`${rdfs}label`), literal(`Frog`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-FROG`), namedNode(`${skos}prefLabel`), literal(`FROG`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-GOAT`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-GOAT`), namedNode(`${rdfs}comment`), literal(`A member of the Bovidae family and is closely related to the sheep.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-GOAT`), namedNode(`${rdfs}label`), literal(`Goat`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-GOAT`), namedNode(`${skos}prefLabel`), literal(`GOAT`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-GOOSE`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-GOOSE`), namedNode(`${rdfs}comment`), literal(`A bird belonging to the family Anatidae`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-GOOSE`), namedNode(`${rdfs}label`), literal(`Goose`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-GOOSE`), namedNode(`${skos}prefLabel`), literal(`GOOSE`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-GROUSE`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-GROUSE`), namedNode(`${rdfs}comment`), literal(`A group of birds from the order Galliformes.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-GROUSE`), namedNode(`${rdfs}label`), literal(`Grouse`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-GROUSE`), namedNode(`${skos}prefLabel`), literal(`GROUSE`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-GUINEAFOWL`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-GUINEAFOWL`), namedNode(`${rdfs}comment`), literal(`A family of birds in the Galliformes order`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-GUINEAFOWL`), namedNode(`${rdfs}label`), literal(`Guinea Fowl`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-GUINEAFOWL`), namedNode(`${skos}prefLabel`), literal(`GUINEAFOWL`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-HARE`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-HARE`), namedNode(`${rdfs}comment`), literal(`Leporidaes belonging to the genus Lepus.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-HARE`), namedNode(`${rdfs}label`), literal(`Hare`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-HARE`), namedNode(`${skos}prefLabel`), literal(`HARE`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-HORSE`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-HORSE`), namedNode(`${rdfs}comment`), literal(`a hoofed (ungulate) mammal, a subspecies of one of seven extant species of the family Equidae.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-HORSE`), namedNode(`${rdfs}label`), literal(`Horse`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-HORSE`), namedNode(`${skos}prefLabel`), literal(`HORSE`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-INVERTEBRATE`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-INVERTEBRATE`), namedNode(`${rdfs}comment`), literal(`Fresh or sea water invertebrate.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-INVERTEBRATE`), namedNode(`${rdfs}label`), literal(`Invertebrate`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-INVERTEBRATE`), namedNode(`${skos}prefLabel`), literal(`INVERTEBRATE`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-LAMB`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-LAMB`), namedNode(`${rdfs}comment`), literal(`A young domestic sheep.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-LAMB`), namedNode(`${rdfs}label`), literal(`Lamb`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-LAMB`), namedNode(`${skos}prefLabel`), literal(`LAMB`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-LAND_SNAIL`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-LAND_SNAIL`), namedNode(`${rdfs}comment`), literal(`A member of the molluscan class Gastropoda that have coiled shells in the adult stage and live on land.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-LAND_SNAIL`), namedNode(`${rdfs}label`), literal(`Land Snail`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-LAND_SNAIL`), namedNode(`${skos}prefLabel`), literal(`LAND_SNAIL`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-MILK_COW`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-MILK_COW`), namedNode(`${rdfs}comment`), literal(`Also referred to Milk Cattle, this cow is bred to produce large quantities of Milk, from which dairy products are made.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-MILK_COW`), namedNode(`${rdfs}label`), literal(`Milk Cow`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-MILK_COW`), namedNode(`${skos}prefLabel`), literal(`MILK_COW`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-MOOSE`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-MOOSE`), namedNode(`${rdfs}comment`), literal(`The largest extant species in the deer family.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-MOOSE`), namedNode(`${rdfs}label`), literal(`Moose`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-MOOSE`), namedNode(`${skos}prefLabel`), literal(`MOOSE`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-OSTRICH`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-OSTRICH`), namedNode(`${rdfs}comment`), literal(`Large flightless bird native to Africa.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-OSTRICH`), namedNode(`${rdfs}label`), literal(`Ostrich`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-OSTRICH`), namedNode(`${skos}prefLabel`), literal(`OSTRICH`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-OTHER`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-OTHER`), namedNode(`${rdfs}comment`), literal(`Other animal not specified on this list.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-OTHER`), namedNode(`${rdfs}label`), literal(`Other`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-OTHER`), namedNode(`${skos}prefLabel`), literal(`OTHER`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-PARTRIDGE`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-PARTRIDGE`), namedNode(`${rdfs}comment`), literal(`Medium-sized birds, intermediate between the larger pheasants and the smaller quails.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-PARTRIDGE`), namedNode(`${rdfs}label`), literal(`Partridge`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-PARTRIDGE`), namedNode(`${skos}prefLabel`), literal(`PARTRIDGE`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-PHEASANT`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-PHEASANT`), namedNode(`${rdfs}comment`), literal(`A bird in the subfamily of Phasianidae in the order Galliformes.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-PHEASANT`), namedNode(`${rdfs}label`), literal(`Pheasant`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-PHEASANT`), namedNode(`${skos}prefLabel`), literal(`PHEASANT`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-PIGEON`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-PIGEON`), namedNode(`${rdfs}comment`), literal(`A bird in the family Columbidae.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-PIGEON`), namedNode(`${rdfs}label`), literal(`Pigeon`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-PIGEON`), namedNode(`${skos}prefLabel`), literal(`PIGEON`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-PORK`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-PORK`), namedNode(`${rdfs}comment`), literal(`Meat from the domestic pig`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-PORK`), namedNode(`${rdfs}label`), literal(`Pork`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-PORK`), namedNode(`${skos}prefLabel`), literal(`PORK`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-POUSSIN`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-POUSSIN`), namedNode(`${rdfs}comment`), literal(`A young chicken, less than 28 days old at slaughter`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-POUSSIN`), namedNode(`${rdfs}label`), literal(`Poussin`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-POUSSIN`), namedNode(`${skos}prefLabel`), literal(`POUSSIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-QUAIL`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-QUAIL`), namedNode(`${rdfs}comment`), literal(`Several genus of mid-sized birds in the pheasant family.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-QUAIL`), namedNode(`${rdfs}label`), literal(`Quail`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-QUAIL`), namedNode(`${skos}prefLabel`), literal(`QUAIL`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-RABBIT`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-RABBIT`), namedNode(`${rdfs}comment`), literal(`Small mammals in the family Leporidae of the order Lagomorpha`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-RABBIT`), namedNode(`${rdfs}label`), literal(`Rabbit`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-RABBIT`), namedNode(`${skos}prefLabel`), literal(`RABBIT`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-RAT`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-RAT`), namedNode(`${rdfs}comment`), literal(`Rats are various medium-sized, long-tailed rodents of the superfamily Muroidea.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-RAT`), namedNode(`${rdfs}label`), literal(`Rat`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-RAT`), namedNode(`${skos}prefLabel`), literal(`RAT`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-REINDEER`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-REINDEER`), namedNode(`${rdfs}comment`), literal(`An Arctic and Subarctic-dwelling deer, widespread and numerous across the Arctic and Subarctic.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-REINDEER`), namedNode(`${rdfs}label`), literal(`Reindeer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-REINDEER`), namedNode(`${skos}prefLabel`), literal(`REINDEER`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-ROE_DEER`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-ROE_DEER`), namedNode(`${rdfs}comment`), literal(`A deer species of Europe, Asia Minor, and Caspian coastal regions.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-ROE_DEER`), namedNode(`${rdfs}label`), literal(`Roe Deer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-ROE_DEER`), namedNode(`${skos}prefLabel`), literal(`ROE_DEER`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SHEEP`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SHEEP`), namedNode(`${rdfs}comment`), literal(`Small ruminants, usually with a crimped hair called wool and often with horns forming a lateral spiral.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SHEEP`), namedNode(`${rdfs}label`), literal(`Sheep`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SHEEP`), namedNode(`${skos}prefLabel`), literal(`SHEEP`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SHELLFISH`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SHELLFISH`), namedNode(`${rdfs}comment`), literal(`A fresh or sea water animal, such as a mollusk or crustacean, that has a shell or shell-like exoskeleton.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SHELLFISH`), namedNode(`${rdfs}label`), literal(`Shellfish`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SHELLFISH`), namedNode(`${skos}prefLabel`), literal(`SHELLFISH`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SNAKE`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SNAKE`), namedNode(`${rdfs}comment`), literal(`Elongate legless carnivorous reptiles of the suborder Serpentes.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SNAKE`), namedNode(`${rdfs}label`), literal(`Snake`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SNAKE`), namedNode(`${skos}prefLabel`), literal(`SNAKE`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SNIPE`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SNIPE`), namedNode(`${rdfs}comment`), literal(`Any of nearly 20 wading bird species in three genera in the family Scolopacidae.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SNIPE`), namedNode(`${rdfs}label`), literal(`Snipe`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SNIPE`), namedNode(`${skos}prefLabel`), literal(`SNIPE`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SPARROW`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SPARROW`), namedNode(`${rdfs}comment`), literal(`Small passerine birds in the family Passeridae.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SPARROW`), namedNode(`${rdfs}label`), literal(`Sparrow`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-SPARROW`), namedNode(`${skos}prefLabel`), literal(`SPARROW`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-THRUSH`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-THRUSH`), namedNode(`${rdfs}comment`), literal(`Plump, soft-plumaged, small to medium-sized passerine birds.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-THRUSH`), namedNode(`${rdfs}label`), literal(`Thrush`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-THRUSH`), namedNode(`${skos}prefLabel`), literal(`THRUSH`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-TURKEY`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-TURKEY`), namedNode(`${rdfs}comment`), literal(`A large bird in the genus Meleagris.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-TURKEY`), namedNode(`${rdfs}label`), literal(`Turkey`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-TURKEY`), namedNode(`${skos}prefLabel`), literal(`TURKEY`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-TURTLE`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-TURTLE`), namedNode(`${rdfs}comment`), literal(`Reptiles characterised by a special bony or cartilaginous shell developed from their ribs that acts as a shield.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-TURTLE`), namedNode(`${rdfs}label`), literal(`Turtle`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-TURTLE`), namedNode(`${skos}prefLabel`), literal(`TURTLE`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-WOODCOCK`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-WOODCOCK`), namedNode(`${rdfs}comment`), literal(`The woodcocks are a group of seven or eight very similar living species of wading birds in the genus Scolopax.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-WOODCOCK`), namedNode(`${rdfs}label`), literal(`Woodcock`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-WOODCOCK`), namedNode(`${skos}prefLabel`), literal(`WOODCOCK`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-YAK`), namedNode(`${rdf}type`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-YAK`), namedNode(`${rdfs}comment`), literal(`A long-haired bovine found throughout the Himalayan region of south Central Asia, the Tibetan Plateau and as far north as Mongolia.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-YAK`), namedNode(`${rdfs}label`), literal(`Yak`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SourceAnimalCode-YAK`), namedNode(`${skos}prefLabel`), literal(`YAK`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-AMERICAN_FOOTBALL`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-AMERICAN_FOOTBALL`), namedNode(`${rdfs}label`), literal(`American Football`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-AMERICAN_FOOTBALL`), namedNode(`${skos}prefLabel`), literal(`AMERICAN_FOOTBALL`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode`), namedNode(`${rdfs}label`), literal(`Sporting Activity Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-ARCHERY`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-ARCHERY`), namedNode(`${rdfs}label`), literal(`Archery`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-ARCHERY`), namedNode(`${skos}prefLabel`), literal(`ARCHERY`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-BADMINTON`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-BADMINTON`), namedNode(`${rdfs}label`), literal(`Badminton`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-BADMINTON`), namedNode(`${skos}prefLabel`), literal(`BADMINTON`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-BASEBALL`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-BASEBALL`), namedNode(`${rdfs}label`), literal(`Baseball`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-BASEBALL`), namedNode(`${skos}prefLabel`), literal(`BASEBALL`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-BASKETBALL`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-BASKETBALL`), namedNode(`${rdfs}label`), literal(`Basketball`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-BASKETBALL`), namedNode(`${skos}prefLabel`), literal(`BASKETBALL`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-BOXING`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-BOXING`), namedNode(`${rdfs}label`), literal(`Boxing`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-BOXING`), namedNode(`${skos}prefLabel`), literal(`BOXING`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-CLIMBING`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-CLIMBING`), namedNode(`${rdfs}label`), literal(`Climbing`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-CLIMBING`), namedNode(`${skos}prefLabel`), literal(`CLIMBING`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-CRICKET`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-CRICKET`), namedNode(`${rdfs}label`), literal(`Cricket`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-CRICKET`), namedNode(`${skos}prefLabel`), literal(`CRICKET`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-CYCLING`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-CYCLING`), namedNode(`${rdfs}label`), literal(`Cycling`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-CYCLING`), namedNode(`${skos}prefLabel`), literal(`CYCLING`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-DIVING`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-DIVING`), namedNode(`${rdfs}label`), literal(`Diving`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-DIVING`), namedNode(`${skos}prefLabel`), literal(`DIVING`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-EQUESTRIAN`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-EQUESTRIAN`), namedNode(`${rdfs}label`), literal(`Equestrian`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-EQUESTRIAN`), namedNode(`${skos}prefLabel`), literal(`EQUESTRIAN`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-FENCING`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-FENCING`), namedNode(`${rdfs}label`), literal(`Fencing`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-FENCING`), namedNode(`${skos}prefLabel`), literal(`FENCING`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-FISHING`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-FISHING`), namedNode(`${rdfs}label`), literal(`Fishing`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-FISHING`), namedNode(`${skos}prefLabel`), literal(`FISHING`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-FOOTBALL`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-FOOTBALL`), namedNode(`${rdfs}label`), literal(`Football`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-FOOTBALL`), namedNode(`${skos}prefLabel`), literal(`FOOTBALL`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-GOLF`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-GOLF`), namedNode(`${rdfs}label`), literal(`Golf`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-GOLF`), namedNode(`${skos}prefLabel`), literal(`GOLF`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-GYMNASTICS`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-GYMNASTICS`), namedNode(`${rdfs}label`), literal(`Gymnastics`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-GYMNASTICS`), namedNode(`${skos}prefLabel`), literal(`GYMNASTICS`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-HOCKEY`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-HOCKEY`), namedNode(`${rdfs}label`), literal(`Hockey`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-HOCKEY`), namedNode(`${skos}prefLabel`), literal(`HOCKEY`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-ICE_HOCKEY`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-ICE_HOCKEY`), namedNode(`${rdfs}label`), literal(`Ice Hockey`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-ICE_HOCKEY`), namedNode(`${skos}prefLabel`), literal(`ICE_HOCKEY`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-ICE_SKATING`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-ICE_SKATING`), namedNode(`${rdfs}label`), literal(`Ice Skating`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-ICE_SKATING`), namedNode(`${skos}prefLabel`), literal(`ICE_SKATING`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-MOTOR_CYCLING`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-MOTOR_CYCLING`), namedNode(`${rdfs}label`), literal(`Motor Cycling`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-MOTOR_CYCLING`), namedNode(`${skos}prefLabel`), literal(`MOTOR_CYCLING`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-RUGBY`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-RUGBY`), namedNode(`${rdfs}label`), literal(`Rugby`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-RUGBY`), namedNode(`${skos}prefLabel`), literal(`RUGBY`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-RUNNING`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-RUNNING`), namedNode(`${rdfs}label`), literal(`Running`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-RUNNING`), namedNode(`${skos}prefLabel`), literal(`RUNNING`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-SKIING`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-SKIING`), namedNode(`${rdfs}label`), literal(`Skiing`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-SKIING`), namedNode(`${skos}prefLabel`), literal(`SKIING`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-SQUASH`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-SQUASH`), namedNode(`${rdfs}label`), literal(`Squash`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-SQUASH`), namedNode(`${skos}prefLabel`), literal(`SQUASH`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-SURFING`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-SURFING`), namedNode(`${rdfs}label`), literal(`Surfing`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-SURFING`), namedNode(`${skos}prefLabel`), literal(`SURFING`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-SWIMMING`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-SWIMMING`), namedNode(`${rdfs}label`), literal(`Swimming`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-SWIMMING`), namedNode(`${skos}prefLabel`), literal(`SWIMMING`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-TENNIS`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-TENNIS`), namedNode(`${rdfs}label`), literal(`Tennis`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-TENNIS`), namedNode(`${skos}prefLabel`), literal(`TENNIS`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-UNCLASSIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-UNCLASSIFIED`), namedNode(`${rdfs}label`), literal(`Unclassified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-UNCLASSIFIED`), namedNode(`${skos}prefLabel`), literal(`UNCLASSIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-UNIDENTIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-UNIDENTIFIED`), namedNode(`${rdfs}label`), literal(`Unidentified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}SportingActivityTypeCode-UNIDENTIFIED`), namedNode(`${skos}prefLabel`), literal(`UNIDENTIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetConsumerGenderCode-FEMALE`), namedNode(`${rdf}type`), namedNode(`${ns4}TargetConsumerGenderCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetConsumerGenderCode-FEMALE`), namedNode(`${rdfs}label`), literal(`Female`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetConsumerGenderCode-FEMALE`), namedNode(`${skos}prefLabel`), literal(`FEMALE`), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetConsumerGenderCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns13}clDetails.aspx?semanticURN=urn:gs1:gdd:cl:TargetConsumerGenderList&release=1`), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetConsumerGenderCode`), namedNode(`${rdfs}label`), literal(`Target Consumer Gender Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetConsumerGenderCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetConsumerGenderCode-MALE`), namedNode(`${rdf}type`), namedNode(`${ns4}TargetConsumerGenderCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetConsumerGenderCode-MALE`), namedNode(`${rdfs}label`), literal(`Male`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetConsumerGenderCode-MALE`), namedNode(`${skos}prefLabel`), literal(`MALE`), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetConsumerGenderCode-UNISEX`), namedNode(`${rdf}type`), namedNode(`${ns4}TargetConsumerGenderCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetConsumerGenderCode-UNISEX`), namedNode(`${rdfs}label`), literal(`Unisex`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetConsumerGenderCode-UNISEX`), namedNode(`${skos}prefLabel`), literal(`UNISEX`), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetMarketDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetMarketDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetMarketDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetMarketDetails`), namedNode(`${rdfs}comment`), literal(`A set of target market details (product release date and associated countries) for the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetMarketDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetMarketDetails`), namedNode(`${rdfs}label`), literal(`Target Market Details`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TargetMarketDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}TextileMaterialDetails`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}TextileMaterialDetails`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}TextileMaterialDetails`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}TextileMaterialDetails`), namedNode(`${rdfs}comment`), literal(`Details on the composition of any materials used to make a product using textiles.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TextileMaterialDetails`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}TextileMaterialDetails`), namedNode(`${rdfs}label`), literal(`Textile Material`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TextileMaterialDetails`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}TradeChannelCode-INSTORE_ONLY`), namedNode(`${rdf}type`), namedNode(`${ns4}TradeChannelCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}TradeChannelCode-INSTORE_ONLY`), namedNode(`${rdfs}comment`), literal(`Offer avalilable only in stores.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TradeChannelCode-INSTORE_ONLY`), namedNode(`${rdfs}label`), literal(`Instore Only`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TradeChannelCode-INSTORE_ONLY`), namedNode(`${skos}prefLabel`), literal(`INSTORE_ONLY`), namedNode(ns4)),
        quad(namedNode(`${ns4}TradeChannelCode`), namedNode(`${rdfs}label`), literal(`Trade Channel Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TradeChannelCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}TradeChannelCode-OMNICHANNEL`), namedNode(`${rdf}type`), namedNode(`${ns4}TradeChannelCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}TradeChannelCode-OMNICHANNEL`), namedNode(`${rdfs}comment`), literal(`Offer avalilable both in stores and online.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TradeChannelCode-OMNICHANNEL`), namedNode(`${rdfs}label`), literal(`Omni-channel`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TradeChannelCode-OMNICHANNEL`), namedNode(`${skos}prefLabel`), literal(`OMNICHANNEL`), namedNode(ns4)),
        quad(namedNode(`${ns4}TradeChannelCode-ONLINE_ONLY`), namedNode(`${rdf}type`), namedNode(`${ns4}TradeChannelCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}TradeChannelCode-ONLINE_ONLY`), namedNode(`${rdfs}comment`), literal(`Offer avalilable online only.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TradeChannelCode-ONLINE_ONLY`), namedNode(`${rdfs}label`), literal(`Online Only`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}TradeChannelCode-ONLINE_ONLY`), namedNode(`${skos}prefLabel`), literal(`ONLINE_ONLY`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-CLOSED_TOE_CLOSED_BACK_OPEN_INSTEP`), namedNode(`${rdf}type`), namedNode(`${ns4}UpperTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-CLOSED_TOE_CLOSED_BACK_OPEN_INSTEP`), namedNode(`${rdfs}label`), literal(`Closed Toe Closed Back Open Instep`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-CLOSED_TOE_CLOSED_BACK_OPEN_INSTEP`), namedNode(`${skos}prefLabel`), literal(`CLOSED_TOE_CLOSED_BACK_OPEN_INSTEP`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode`), namedNode(`${rdfs}label`), literal(`Upper Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode`), namedNode(`${rdfs}subClassOf`), namedNode(`${ns4}TypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-CLOSED_TOE_OPEN_BACK`), namedNode(`${rdf}type`), namedNode(`${ns4}UpperTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-CLOSED_TOE_OPEN_BACK`), namedNode(`${rdfs}label`), literal(`Closed Toe Open Back`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-CLOSED_TOE_OPEN_BACK`), namedNode(`${skos}prefLabel`), literal(`CLOSED_TOE_OPEN_BACK`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-CLOSED_TOE_STRAP_BACK`), namedNode(`${rdf}type`), namedNode(`${ns4}UpperTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-CLOSED_TOE_STRAP_BACK`), namedNode(`${rdfs}label`), literal(`Closed Toe Strap Back`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-CLOSED_TOE_STRAP_BACK`), namedNode(`${skos}prefLabel`), literal(`CLOSED_TOE_STRAP_BACK`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-FULLY_CLOSED`), namedNode(`${rdf}type`), namedNode(`${ns4}UpperTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-FULLY_CLOSED`), namedNode(`${rdfs}label`), literal(`Fully Closed`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-FULLY_CLOSED`), namedNode(`${skos}prefLabel`), literal(`FULLY_CLOSED`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-OPEN_TOE_FULLY_CLOSED_BACK`), namedNode(`${rdf}type`), namedNode(`${ns4}UpperTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-OPEN_TOE_FULLY_CLOSED_BACK`), namedNode(`${rdfs}label`), literal(`Open Toe Fully Closed Back`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-OPEN_TOE_FULLY_CLOSED_BACK`), namedNode(`${skos}prefLabel`), literal(`OPEN_TOE_FULLY_CLOSED_BACK`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-OPEN_TOE_OPEN_BACK`), namedNode(`${rdf}type`), namedNode(`${ns4}UpperTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-OPEN_TOE_OPEN_BACK`), namedNode(`${rdfs}label`), literal(`Open Toe Open Back`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-OPEN_TOE_OPEN_BACK`), namedNode(`${skos}prefLabel`), literal(`OPEN_TOE_OPEN_BACK`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-OPEN_TOE_STRAP_BACK`), namedNode(`${rdf}type`), namedNode(`${ns4}UpperTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-OPEN_TOE_STRAP_BACK`), namedNode(`${rdfs}label`), literal(`Open Toe Strap Back`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-OPEN_TOE_STRAP_BACK`), namedNode(`${skos}prefLabel`), literal(`OPEN_TOE_STRAP_BACK`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-UNCLASSIFIED`), namedNode(`${rdf}type`), namedNode(`${ns4}UpperTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-UNCLASSIFIED`), namedNode(`${rdfs}label`), literal(`Unclassified`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}UpperTypeCode-UNCLASSIFIED`), namedNode(`${skos}prefLabel`), literal(`UNCLASSIFIED`), namedNode(ns4)),
        quad(namedNode(`${ns4}WarrantyPromise`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}WarrantyPromise`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(namedNode(`${ns4}WarrantyPromise`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}WarrantyPromise`), namedNode(`${rdfs}comment`), literal(`An assurance that the product is reliable and that repairs or replacement will be done free of charge within a given time limit and under certain conditions in the event of a defect.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}WarrantyPromise`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}WarrantyPromise`), namedNode(`${rdfs}label`), literal(`Warranty`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}WarrantyPromise`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}WarrantyPromise`), namedNode(`${skos}exactMatch`), namedNode(`${schema}WarrantyPromise`), namedNode(ns4)),
        quad(namedNode(`${ns4}acceptedPaymentMethod`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}acceptedPaymentMethod`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}acceptedPaymentMethod`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}acceptedPaymentMethod`), namedNode(`${rdfs}comment`), literal(`Code indicating a means of payment, for example, BANK_CHEQUE, CASH, etc.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}acceptedPaymentMethod`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}acceptedPaymentMethod`), namedNode(`${rdfs}label`), literal(`Accepted Payment Method`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}acceptedPaymentMethod`), namedNode(`${skos}exactMatch`), namedNode(`${schema}acceptedPaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}acceptedPaymentMethod`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}acceptedPaymentMethod`), namedNode(`${rdfs}range`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}activityIdeas`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}activityIdeas`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}activityIdeas`), namedNode(`${rdfs}comment`), literal(`A link to ideas for using the product, particularly with children.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}activityIdeas`), namedNode(`${rdfs}label`), literal(`Activity Ideas`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}activityIdeas`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}activityIdeas`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}activityIdeas`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}activityIdeas`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}linkType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}linkType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}linkType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}linkType`), namedNode(`${rdfs}comment`), literal(`A property representing a link to an online resource that is directly related to the identified item.  More specific link types are defined as subproperties of gs1:linkType`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}linkType`), namedNode(`${rdfs}comment`), literal(`Provides a URL for related information or services. This is not expected to be used directly but provides a super property for all other link types in the GS1 ecosystem.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}linkType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}linkType`), namedNode(`${rdfs}label`), literal(`Link Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}linkType`), namedNode(`${rdfs}label`), literal(`Link type for GS1 Digital Link`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}linkType`), namedNode(`${rdfs}domain`), namedNode(`${owl}Thing`), namedNode(ns4)),
        quad(namedNode(`${ns4}linkType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}linkType`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}linkType`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}linkType`), namedNode(`${skos}altLabel`), literal(`Link Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}linkType`), namedNode(`${skos}relatedMatch`), namedNode(`${schema}mainEntityOfPage`), namedNode(ns4)),
        quad(namedNode(`${ns4}linkType`), namedNode(`${skos}relatedMatch`), namedNode(`${schema}sameAs`), namedNode(ns4)),
        quad(namedNode(`${ns4}linkType`), namedNode(`${skos}broader`), namedNode(`${schema}url`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalOrganizationIdentificationTypeValue`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalOrganizationIdentificationTypeValue`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalOrganizationIdentificationTypeValue`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalOrganizationIdentificationTypeValue`), namedNode(`${rdfs}comment`), literal(`The value associated with the Additional Organization Identification Type Value.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalOrganizationIdentificationTypeValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalOrganizationIdentificationTypeValue`), namedNode(`${rdfs}label`), literal(`Additional Organization Identification Type Value`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalOrganizationIdentificationTypeValue`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Organization`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalOrganizationIdentificationTypeValue`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassification`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassification`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassification`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassification`), namedNode(`${rdfs}comment`), literal(`Relates to a set of additional product classification details`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassification`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassification`), namedNode(`${rdfs}label`), literal(`Has Additional Product Classification`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassification`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassification`), namedNode(`${rdfs}range`), namedNode(`${ns4}AdditionalProductClassificationDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCode`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCode`), namedNode(`${rdfs}comment`), literal(`Code specifying the applied additional product classification scheme.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCode`), namedNode(`${rdfs}label`), literal(`Additional Product Classification Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}AdditionalProductClassificationDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCode`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCodeDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCodeDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCodeDescription`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCodeDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCodeDescription`), namedNode(`${rdfs}comment`), literal(`A description related to  the additional product classification code value.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCodeDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCodeDescription`), namedNode(`${rdfs}label`), literal(`Additional Product Classification Code Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCodeDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}AdditionalProductClassificationDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationCodeDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationValue`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationValue`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationValue`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationValue`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationValue`), namedNode(`${rdfs}comment`), literal(`Code specifying an additional product classification other than the GS1 Global Product Classification. The applied classification scheme is specified as additional information together with the classification value.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationValue`), namedNode(`${rdfs}label`), literal(`Additional Product Classification Value`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationValue`), namedNode(`${rdfs}domain`), namedNode(`${ns4}AdditionalProductClassificationDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductClassificationValue`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductDescription`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductDescription`), namedNode(`${rdfs}comment`), literal(`Additional variants necessary to communicate to the industry to help define the product. Multiple variants can be established for each GTIN for e.g. Style, Colour, and Fragrance .`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductDescription`), namedNode(`${rdfs}label`), literal(`Additional Product Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}additionalProductDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}additive`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}additive`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}additive`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}additive`), namedNode(`${rdfs}comment`), literal(`Relates to details about any additives that a product may contain.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additive`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}additive`), namedNode(`${rdfs}label`), literal(`Has Additive`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additive`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}additive`), namedNode(`${rdfs}range`), namedNode(`${ns4}AdditiveDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveLevelOfContainment`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveLevelOfContainment`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveLevelOfContainment`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveLevelOfContainment`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveLevelOfContainment`), namedNode(`${rdfs}comment`), literal(`Code indicating the level of presence of the additive.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveLevelOfContainment`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveLevelOfContainment`), namedNode(`${rdfs}label`), literal(`Additive Level Of Containment`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveLevelOfContainment`), namedNode(`${rdfs}domain`), namedNode(`${ns4}AdditiveDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveLevelOfContainment`), namedNode(`${rdfs}range`), namedNode(`${ns4}LevelOfContainmentCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveName`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveName`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveName`), namedNode(`${rdfs}comment`), literal(`The name of any additive or genetic modification contained or not contained in the product .`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveName`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveName`), namedNode(`${rdfs}label`), literal(`Additive Name`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveName`), namedNode(`${rdfs}domain`), namedNode(`${ns4}AdditiveDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}additiveName`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}address`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}address`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}address`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}address`), namedNode(`${rdfs}comment`), literal(`The postal address for an organization or place.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}address`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}address`), namedNode(`${rdfs}label`), literal(`Has Postal Address`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}address`), namedNode(`${skos}exactMatch`), namedNode(`${schema}address`), namedNode(ns4)),
        quad(namedNode(`${ns4}address`), namedNode(`${rdfs}domain`), blankNodes[0], namedNode(ns4)),
        quad(namedNode(`${ns4}address`), namedNode(`${rdfs}range`), namedNode(`${ns4}PostalAddress`), namedNode(ns4)),
        quad(blankNodes[0], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(blankNodes[0], namedNode(`${owl}unionOf`), blankNodes[1], namedNode(ns4)),
        quad(namedNode(`${ns4}addressCountry`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressCountry`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressCountry`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressCountry`), namedNode(`${rdfs}comment`), literal(`Code specifying the country (and country subdivision) for the address using ISO 3166-1.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}addressCountry`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}addressCountry`), namedNode(`${rdfs}label`), literal(`Address Country`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}addressCountry`), namedNode(`${skos}exactMatch`), namedNode(`${schema}addressCountry`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressCountry`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PostalAddress`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressCountry`), namedNode(`${rdfs}range`), namedNode(`${ns4}Country`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressLocality`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressLocality`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressLocality`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressLocality`), namedNode(`${rdfs}comment`), literal(`Text specifying the name of the locality, for example a city.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}addressLocality`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}addressLocality`), namedNode(`${rdfs}label`), literal(`Address Locality`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}addressLocality`), namedNode(`${skos}exactMatch`), namedNode(`${schema}addressLocality`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressLocality`), namedNode(`${skos}exactMatch`), namedNode(`${vcard}locality`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressLocality`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PostalAddress`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressLocality`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressRegion`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressRegion`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressRegion`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressRegion`), namedNode(`${rdfs}comment`), literal(`Text specifying a province or state in abbreviated format for example NJ.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}addressRegion`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}addressRegion`), namedNode(`${rdfs}label`), literal(`Province State Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}addressRegion`), namedNode(`${skos}exactMatch`), namedNode(`${schema}addressRegion`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressRegion`), namedNode(`${skos}exactMatch`), namedNode(`${vcard}region`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressRegion`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PostalAddress`), namedNode(ns4)),
        quad(namedNode(`${ns4}addressRegion`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}afterHoursContact`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}afterHoursContact`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}afterHoursContact`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}afterHoursContact`), namedNode(`${rdfs}comment`), literal(`Links to afterhours contact information for an organization.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}afterHoursContact`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}afterHoursContact`), namedNode(`${rdfs}label`), literal(`Has After Hours Contact`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}afterHoursContact`), namedNode(`${skos}broadMatch`), namedNode(`${schema}contactPoint`), namedNode(ns4)),
        quad(namedNode(`${ns4}afterHoursContact`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Organization`), namedNode(ns4)),
        quad(namedNode(`${ns4}afterHoursContact`), namedNode(`${rdfs}range`), namedNode(`${ns4}ContactPoint`), namedNode(ns4)),
        quad(namedNode(`${ns4}afterHoursContact`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}contactPoint`), namedNode(ns4)),
        quad(namedNode(`${ns4}afterHoursContact`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}contactPoint`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactPoint`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactPoint`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactPoint`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactPoint`), namedNode(`${rdfs}comment`), literal(`Links to information about a business location for an organization.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}contactPoint`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}contactPoint`), namedNode(`${rdfs}label`), literal(`Has Business Contact`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}contactPoint`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Organization`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactPoint`), namedNode(`${rdfs}range`), namedNode(`${ns4}ContactPoint`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactPoint`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}contactPoint`), namedNode(ns4)),
        quad(namedNode(`${ns4}alcoholicBeverageSubregion`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}alcoholicBeverageSubregion`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}alcoholicBeverageSubregion`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}alcoholicBeverageSubregion`), namedNode(`${rdfs}comment`), literal(`A legally defined geographical region where the grapes for a wine were grown also known as an appellation. It is recommended to populate this property with an ISO 3166-2 code to indicate country and subdivision.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}alcoholicBeverageSubregion`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}alcoholicBeverageSubregion`), namedNode(`${rdfs}label`), literal(`Alcoholic Beverage Sub-region`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}alcoholicBeverageSubregion`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Beverage`), namedNode(ns4)),
        quad(namedNode(`${ns4}alcoholicBeverageSubregion`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenInfo`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenInfo`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenInfo`), namedNode(`${rdfs}comment`), literal(`A link to a description of the allergens in the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenInfo`), namedNode(`${rdfs}label`), literal(`Allergen information`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenInfo`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenInfo`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenInfo`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenInfo`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenLevelOfContainmentCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenLevelOfContainmentCode`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenLevelOfContainmentCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenLevelOfContainmentCode`), namedNode(`${rdfs}comment`), literal(`Code specifying the level of presence of the allergen.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenLevelOfContainmentCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenLevelOfContainmentCode`), namedNode(`${rdfs}label`), literal(`Allergen Level Of Containment`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenLevelOfContainmentCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}AllergenDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenLevelOfContainmentCode`), namedNode(`${rdfs}range`), namedNode(`${ns4}LevelOfContainmentCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenSpecificationAgency`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenSpecificationAgency`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenSpecificationAgency`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenSpecificationAgency`), namedNode(`${rdfs}comment`), literal(`The agency or other organization that defines or manages the criteria for allergen containment.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenSpecificationAgency`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenSpecificationAgency`), namedNode(`${rdfs}label`), literal(`Allergen Specification Agency`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenSpecificationAgency`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenSpecificationAgency`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenSpecificationName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenSpecificationName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenSpecificationName`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenSpecificationName`), namedNode(`${rdfs}comment`), literal(`Free text field containing the name and version of the regulation or standard that defines the criteria of allergen containment.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenSpecificationName`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenSpecificationName`), namedNode(`${rdfs}label`), literal(`Allergen Specification Name`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenSpecificationName`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenSpecificationName`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenStatement`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenStatement`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenStatement`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenStatement`), namedNode(`${rdfs}comment`), literal(`Textual description of the presence or absence of allergens as governed by local rules and regulations, specified as one string.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenStatement`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenStatement`), namedNode(`${rdfs}label`), literal(`Allergen Statement`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenStatement`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenStatement`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenType`), namedNode(`${rdfs}comment`), literal(`Code specifying the type of allergen.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenType`), namedNode(`${rdfs}label`), literal(`Allergen Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}AllergenDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}allergenType`), namedNode(`${rdfs}range`), namedNode(`${ns4}AllergenTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}anatomicalForm`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}anatomicalForm`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}anatomicalForm`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}anatomicalForm`), namedNode(`${rdfs}comment`), literal(`Describes the meat product in terms of whether it is the whole animal or part of the animal which has been cut such as the muscle, bone, organ, or fat.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}anatomicalForm`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}anatomicalForm`), namedNode(`${rdfs}label`), literal(`Anatomical Form`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}anatomicalForm`), namedNode(`${rdfs}domain`), namedNode(`${ns4}MeatPoultry`), namedNode(ns4)),
        quad(namedNode(`${ns4}anatomicalForm`), namedNode(`${rdfs}range`), namedNode(`${ns4}AnatomicalFormCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}applicableTo`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}applicableTo`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}applicableTo`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}applicableTo`), namedNode(`${rdfs}comment`), literal(`A property linking a gs1:linkType to the primary GS1 key(s) for which it can be used. Similar to rdfs:Domain but the value space is a GS1 Application Identifier, not a class.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}applicableTo`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}applicableTo`), namedNode(`${rdfs}label`), literal(`Applicable to`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}applicableTo`), namedNode(`${rdfs}domain`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}applicableTo`), namedNode(`${rdfs}range`), namedNode(`${ns4}AI`), namedNode(ns4)),
        quad(namedNode(`${ns4}audioFile`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}audioFile`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}audioFile`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}audioFile`), namedNode(`${rdfs}comment`), literal(`Link to a file containing an audio clip which is relevant to the product. Examples are commercials, or instructional/ how to use audio files.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}audioFile`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}audioFile`), namedNode(`${rdfs}label`), literal(`Has Audio File`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}audioFile`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}audioFile`), namedNode(`${rdfs}range`), namedNode(`${ns4}ReferencedFileDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityEnds`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityEnds`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityEnds`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityEnds`), namedNode(`${rdfs}comment`), literal(`The date from which the product is no longer available from the information provider, including seasonal or temporary product and services .`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityEnds`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityEnds`), namedNode(`${rdfs}label`), literal(`Availability Ends`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityEnds`), namedNode(`${skos}exactMatch`), namedNode(`${schema}availabilityEnds`), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityEnds`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityEnds`), namedNode(`${rdfs}range`), namedNode(`${xsd}dateTime`), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityStarts`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityStarts`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityStarts`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityStarts`), namedNode(`${rdfs}comment`), literal(`The date from which the product is available from the information provider, including seasonal or temporary product and services.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityStarts`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityStarts`), namedNode(`${rdfs}label`), literal(`Availability Starts`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityStarts`), namedNode(`${skos}exactMatch`), namedNode(`${schema}availabilityStarts`), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityStarts`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}availabilityStarts`), namedNode(`${rdfs}range`), namedNode(`${xsd}dateTime`), namedNode(ns4)),
        quad(namedNode(`${ns4}availableAtOrFrom`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}availableAtOrFrom`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}availableAtOrFrom`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}availableAtOrFrom`), namedNode(`${rdfs}comment`), literal(`The location the offered product or service is available from.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}availableAtOrFrom`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}availableAtOrFrom`), namedNode(`${rdfs}label`), literal(`Available At/From`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}availableAtOrFrom`), namedNode(`${skos}exactMatch`), namedNode(`${schema}availableAtOrFrom`), namedNode(ns4)),
        quad(namedNode(`${ns4}availableAtOrFrom`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}availableAtOrFrom`), namedNode(`${rdfs}range`), namedNode(`${ns4}Place`), namedNode(ns4)),
        quad(namedNode(`${ns4}availableLanguage`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}availableLanguage`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}availableLanguage`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}availableLanguage`), namedNode(`${rdfs}comment`), literal(`ISO 639-1 code specifying the language of a specified contact point.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}availableLanguage`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}availableLanguage`), namedNode(`${rdfs}label`), literal(`Available Language`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}availableLanguage`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ContactPoint`), namedNode(ns4)),
        quad(namedNode(`${ns4}availableLanguage`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}availableLanguage`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}availableLanguage`), namedNode(ns4)),
        quad(namedNode(`${ns4}availableLanguage`), namedNode(`${skos}related`), namedNode(`${schema}ContactPoint`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrize`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrize`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrize`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrize`), namedNode(`${rdfs}comment`), literal(`An award or prize given to the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrize`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrize`), namedNode(`${rdfs}label`), literal(`Has Award Prize`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrize`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrize`), namedNode(`${rdfs}range`), namedNode(`${ns4}AwardPrizeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeCode`), namedNode(`${rdfs}comment`), literal(`Indicates the achievement of the product in relation to a prize or award, e.g. winner, runner-up, shortlisted.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeCode`), namedNode(`${rdfs}label`), literal(`Award Prize Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}AwardPrizeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeCode`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeCountryCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeCountryCode`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeCountryCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeCountryCode`), namedNode(`${rdfs}comment`), literal(`An ISO standard code identifying the country in which a prize or award is given. It is recommended to populate this property with an ISO 3166-1 country code.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeCountryCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeCountryCode`), namedNode(`${rdfs}label`), literal(`Award Prize Country Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeCountryCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}AwardPrizeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeCountryCode`), namedNode(`${rdfs}range`), namedNode(`${ns4}Country`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeDescription`), namedNode(`${rdfs}comment`), literal(`Text that describes the awards won.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeDescription`), namedNode(`${rdfs}label`), literal(`Award Prize Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}AwardPrizeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeJury`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeJury`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeJury`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeJury`), namedNode(`${rdfs}comment`), literal(`Free text listing members of the jury that awarded the prize.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeJury`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeJury`), namedNode(`${rdfs}label`), literal(`Award Prize Jury`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeJury`), namedNode(`${rdfs}domain`), namedNode(`${ns4}AwardPrizeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeJury`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeName`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeName`), namedNode(`${rdfs}comment`), literal(`The name of a prize or award which the product has received.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeName`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeName`), namedNode(`${rdfs}label`), literal(`Award Prize Name`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeName`), namedNode(`${rdfs}domain`), namedNode(`${ns4}AwardPrizeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeName`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeYear`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeYear`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeYear`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeYear`), namedNode(`${rdfs}comment`), literal(`The year in which a prize or award was given.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeYear`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeYear`), namedNode(`${rdfs}label`), literal(`Award Prize Year`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeYear`), namedNode(`${rdfs}domain`), namedNode(`${ns4}AwardPrizeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}awardPrizeYear`), namedNode(`${rdfs}range`), namedNode(`${xsd}gYear`), namedNode(ns4)),
        quad(namedNode(`${ns4}bestBeforeDate`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}bestBeforeDate`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}bestBeforeDate`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}bestBeforeDate`), namedNode(`${rdfs}comment`), literal(`Best before date on the label or package signifies the end of the period under which the product will retain specific quality attributes or claims even though the product may continue to retain positive quality attributes after this date. Best before date is primarily used for consumer information and may be a regulatory requirement.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}bestBeforeDate`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}bestBeforeDate`), namedNode(`${rdfs}label`), literal(`Best Before Date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}bestBeforeDate`), namedNode(`${rdfs}label`), literal(`Best before date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}bestBeforeDate`), namedNode(`${skos}prefLabel`), literal(`15`), namedNode(ns4)),
        quad(namedNode(`${ns4}bestBeforeDate`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}bestBeforeDate`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}bestBeforeDate`), namedNode(`${rdfs}range`), namedNode(`${xsd}date`), namedNode(ns4)),
        quad(namedNode(`${ns4}bestBeforeDate`), namedNode(`${skos}altLabel`), literal(`Best Before Date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}bestBeforeDate`), namedNode(`${skos}altLabel`), literal(`Best before date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}bestBeforeDate`), namedNode(`${skos}notation`), literal(`15`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}beverageVintage`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}beverageVintage`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}beverageVintage`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}beverageVintage`), namedNode(`${rdfs}comment`), literal(`The year in which the majority of ingredients are harvested and/or the alcoholic beverage is produced. Determination as to whether the vintage year is the harvest date or production date is according to requirements in the Target Market.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}beverageVintage`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}beverageVintage`), namedNode(`${rdfs}label`), literal(`Beverage Vintage`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}beverageVintage`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Beverage`), namedNode(ns4)),
        quad(namedNode(`${ns4}beverageVintage`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}biotinPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}biotinPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}biotinPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}biotinPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Biotin Acid per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}biotinPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}biotinPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Biotin Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}biotinPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}biotinPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}bonelessClaim`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}bonelessClaim`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}bonelessClaim`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}bonelessClaim`), namedNode(`${rdfs}comment`), literal(`The descriptive term that is used by the product manufacturer to identify whether the product makes a specific claim to contain no bones.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}bonelessClaim`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}bonelessClaim`), namedNode(`${rdfs}label`), literal(`Boneless Claim`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}bonelessClaim`), namedNode(`${rdfs}domain`), namedNode(`${ns4}MeatPoultry`), namedNode(ns4)),
        quad(namedNode(`${ns4}bonelessClaim`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}brand`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}brand`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}brand`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}brand`), namedNode(`${rdfs}comment`), literal(`The brand of the product that appears on the consumer package.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}brand`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}brand`), namedNode(`${rdfs}label`), literal(`Has Brand`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}brand`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}brand`), namedNode(`${rdfs}range`), namedNode(`${ns4}Brand`), namedNode(ns4)),
        quad(namedNode(`${ns4}brand`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}brand`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandHomepageClinical`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandHomepageClinical`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandHomepageClinical`), namedNode(`${rdfs}comment`), literal(`A link to a brand presence aimed at clinical professionals.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}brandHomepageClinical`), namedNode(`${rdfs}label`), literal(`Information for professionals about this brand`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}brandHomepageClinical`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandHomepageClinical`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandHomepageClinical`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandHomepageClinical`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandHomepagePatient`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandHomepagePatient`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandHomepagePatient`), namedNode(`${rdfs}comment`), literal(`A link to a brand presence aimed at patients.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}brandHomepagePatient`), namedNode(`${rdfs}label`), literal(`Information for patients about this brand`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}brandHomepagePatient`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandHomepagePatient`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandHomepagePatient`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandHomepagePatient`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandName`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandName`), namedNode(`${rdfs}comment`), literal(`The brand name of the product that appears on the consumer package.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}brandName`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}brandName`), namedNode(`${rdfs}label`), literal(`Brand Name`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}brandName`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Brand`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandName`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}name`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandName`), namedNode(`${skos}related`), namedNode(`${schema}Brand`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandOwner`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandOwner`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandOwner`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandOwner`), namedNode(`${rdfs}comment`), literal(`The brand owner of the product. The organization that is responsible for allocating the GTIN to the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}brandOwner`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}brandOwner`), namedNode(`${rdfs}label`), literal(`Has Brand Owner`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}brandOwner`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandOwner`), namedNode(`${rdfs}range`), namedNode(`${ns4}Organization`), namedNode(ns4)),
        quad(namedNode(`${ns4}brandOwner`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}brand`), namedNode(ns4)),
        quad(namedNode(`${ns4}calciumPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}calciumPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}calciumPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}calciumPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Calcium per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}calciumPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}calciumPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Calcium Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}calciumPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}calciumPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}carbohydratesPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}carbohydratesPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}carbohydratesPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}carbohydratesPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Carbohydrates per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}carbohydratesPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}carbohydratesPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Carbohydrates Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}carbohydratesPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}carbohydratesPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}catchZone`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}catchZone`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}catchZone`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}catchZone`), namedNode(`${rdfs}comment`), literal(`Free text field describing the sea zone from which the product was caught in.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}catchZone`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}catchZone`), namedNode(`${rdfs}label`), literal(`Catch Zone`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}catchZone`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Seafood`), namedNode(ns4)),
        quad(namedNode(`${ns4}catchZone`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}certification`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}certification`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}certification`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}certification`), namedNode(`${rdfs}comment`), literal(`Information on certification to which the product complies.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}certification`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}certification`), namedNode(`${rdfs}label`), literal(`Has Certification`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}certification`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}certification`), namedNode(`${rdfs}range`), namedNode(`${ns4}CertificationDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationAgency`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationAgency`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationAgency`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationAgency`), namedNode(`${rdfs}comment`), literal(`Name of the organization issuing the certification standard or other requirement being met .`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationAgency`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationAgency`), namedNode(`${rdfs}label`), literal(`Certification Agency`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationAgency`), namedNode(`${rdfs}domain`), namedNode(`${ns4}CertificationDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationAgency`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationInfo`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationInfo`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationInfo`), namedNode(`${rdfs}comment`), literal(`A link to certification information about the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationInfo`), namedNode(`${rdfs}label`), literal(`Certification Information`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationInfo`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationInfo`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationInfo`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationInfo`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationStandard`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationStandard`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationStandard`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationStandard`), namedNode(`${rdfs}comment`), literal(`Name of the certification standard. Free text. Example: Egg classification .`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationStandard`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationStandard`), namedNode(`${rdfs}label`), literal(`Certification Standard`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationStandard`), namedNode(`${rdfs}domain`), namedNode(`${ns4}CertificationDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationStandard`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationValue`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationValue`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationValue`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationValue`), namedNode(`${rdfs}comment`), literal(`The product's certification standard value. Example:4.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationValue`), namedNode(`${rdfs}label`), literal(`Certification Value`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationValue`), namedNode(`${rdfs}domain`), namedNode(`${ns4}CertificationDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}certificationValue`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}cheeseFirmness`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}cheeseFirmness`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}cheeseFirmness`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}cheeseFirmness`), namedNode(`${rdfs}comment`), literal(`The firmness of the cheese product for example EXTRA_HARD.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}cheeseFirmness`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}cheeseFirmness`), namedNode(`${rdfs}label`), literal(`Cheese Firmness`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}cheeseFirmness`), namedNode(`${rdfs}domain`), namedNode(`${ns4}MilkButterCreamYogurtCheeseEggsSubstitutes`), namedNode(ns4)),
        quad(namedNode(`${ns4}cheeseFirmness`), namedNode(`${rdfs}range`), namedNode(`${ns4}CheeseFirmnessCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}cheeseMaturationPeriodDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}cheeseMaturationPeriodDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}cheeseMaturationPeriodDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}cheeseMaturationPeriodDescription`), namedNode(`${rdfs}comment`), literal(`A descriptive way to specify a date range as some cheeses are matured over a period of time, but not an exact period. For example 3 to 4 weeks, over 1 year etc. The term maturation is also known in other markets as Aged.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}cheeseMaturationPeriodDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}cheeseMaturationPeriodDescription`), namedNode(`${rdfs}label`), literal(`Cheese Maturation Period Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}cheeseMaturationPeriodDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}MilkButterCreamYogurtCheeseEggsSubstitutes`), namedNode(ns4)),
        quad(namedNode(`${ns4}cheeseMaturationPeriodDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}chloridePerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}chloridePerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}chloridePerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}chloridePerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Chloride per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}chloridePerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}chloridePerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Chloride Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}chloridePerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}chloridePerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}cholesterolPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}cholesterolPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}cholesterolPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}cholesterolPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Cholesterol per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}cholesterolPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}cholesterolPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Cholesterol Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}cholesterolPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}cholesterolPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}chromiumPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}chromiumPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}chromiumPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}chromiumPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Chromium per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}chromiumPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}chromiumPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Chromium Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}chromiumPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}chromiumPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}clothingCut`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}clothingCut`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}clothingCut`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}clothingCut`), namedNode(`${rdfs}comment`), literal(`Supplemental information to indicate the clothing cut or silhouette make of the garment. For example, silhouette details for a pair of jeans such as boot cut, or loose fit, comfort fit.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}clothingCut`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}clothingCut`), namedNode(`${rdfs}label`), literal(`Clothing Cut`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}clothingCut`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Clothing`), namedNode(ns4)),
        quad(namedNode(`${ns4}clothingCut`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}collarType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}collarType`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}collarType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}collarType`), namedNode(`${rdfs}comment`), literal(`A free text description of the type of collar on the garment.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}collarType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}collarType`), namedNode(`${rdfs}label`), literal(`Collar Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}collarType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Clothing`), namedNode(ns4)),
        quad(namedNode(`${ns4}collarType`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCode`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCode`), namedNode(`${rdfs}comment`), literal(`Relates to a set of details about the colour code for a product`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCode`), namedNode(`${rdfs}label`), literal(`Has Colour Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCode`), namedNode(`${rdfs}range`), namedNode(`${ns4}ColourCodeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeList`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeList`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeList`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeList`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeList`), namedNode(`${rdfs}comment`), literal(`The parties controlling the colour code lists. Dependent on colour code value.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeList`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeList`), namedNode(`${rdfs}label`), literal(`Colour Code List`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeList`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ColourCodeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeList`), namedNode(`${rdfs}range`), namedNode(`${ns4}ColourCodeListCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeValue`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeValue`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeValue`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeValue`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeValue`), namedNode(`${rdfs}comment`), literal(`A code indicating the colour of an object according to a specific code list. The applied code list is specified as additional information together with the colour code.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeValue`), namedNode(`${rdfs}label`), literal(`Colour Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeValue`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ColourCodeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourCodeValue`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourDescription`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourDescription`), namedNode(`${rdfs}comment`), literal(`A description of the colour of an object.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}colourDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}colourDescription`), namedNode(`${rdfs}label`), literal(`Colour Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}colourDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourDescription`), namedNode(`${skos}related`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}colourDescription`), namedNode(`${skos}closeMatch`), namedNode(`${schema}color`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerFirstAvailabilityDateTime`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerFirstAvailabilityDateTime`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerFirstAvailabilityDateTime`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerFirstAvailabilityDateTime`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerFirstAvailabilityDateTime`), namedNode(`${rdfs}comment`), literal(`The first date/time that the buyer is allowed to sell the product to consumers. Usually related to a specific geography. ISO 8601 date format CCYY-MM-DDTHH:MM:SS.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerFirstAvailabilityDateTime`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerFirstAvailabilityDateTime`), namedNode(`${rdfs}label`), literal(`Consumer First Availability Date Time`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerFirstAvailabilityDateTime`), namedNode(`${rdfs}domain`), namedNode(`${ns4}TargetMarketDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerFirstAvailabilityDateTime`), namedNode(`${rdfs}range`), namedNode(`${xsd}dateTime`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerHandlingStorage`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerHandlingStorage`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerHandlingStorage`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerHandlingStorage`), namedNode(`${rdfs}comment`), literal(`Link to a website, file, or image containing the manufacturer's recommendations for how the consumer or end user should store and handle the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerHandlingStorage`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerHandlingStorage`), namedNode(`${rdfs}label`), literal(`Has Consumer Handling Storage`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerHandlingStorage`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerHandlingStorage`), namedNode(`${rdfs}range`), namedNode(`${ns4}ReferencedFileDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerHandlingStorageInfo`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerHandlingStorageInfo`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerHandlingStorageInfo`), namedNode(`${rdfs}comment`), literal(`A link to information about safe handling and storage of the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerHandlingStorageInfo`), namedNode(`${rdfs}label`), literal(`Consumer handling and storage information`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerHandlingStorageInfo`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerHandlingStorageInfo`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerHandlingStorageInfo`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerHandlingStorageInfo`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerLifestage`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerLifestage`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerLifestage`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerLifestage`), namedNode(`${rdfs}comment`), literal(`Indicates, with reference to the product branding, labelling or packaging, the descriptive term that is used by the product manufacturer to identify the period or stage in the consumer's life during which the product is considered to be suitable.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerLifestage`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerLifestage`), namedNode(`${rdfs}label`), literal(`Consumer Lifestage`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerLifestage`), namedNode(`${rdfs}domain`), namedNode(`${ns4}WearableProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerLifestage`), namedNode(`${rdfs}range`), namedNode(`${ns4}ConsumerLifestageCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerPackageDisclaimer`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerPackageDisclaimer`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerPackageDisclaimer`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerPackageDisclaimer`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerPackageDisclaimer`), namedNode(`${rdfs}comment`), literal(`Additional information that should be used in advertising and in displaying.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerPackageDisclaimer`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerPackageDisclaimer`), namedNode(`${rdfs}label`), literal(`Consumer Package Disclaimer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerPackageDisclaimer`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerPackageDisclaimer`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerProductVariant`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerProductVariant`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerProductVariant`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerProductVariant`), namedNode(`${rdfs}comment`), literal(`The consumer product variant may be used to distinguish one variant of a retail consumer trade item from another if the change does not require the allocation of a different Global Trade Item Number (per the GTIN Management Standard), but communication between trading partners is required to support consumers. The brand owner is responsible for assigning the consumer product variant.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerProductVariant`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerProductVariant`), namedNode(`${rdfs}label`), literal(`Consumer Product Variant`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerProductVariant`), namedNode(`${skos}prefLabel`), literal(`22`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerProductVariant`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerProductVariant`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerProductVariant`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerProductVariant`), namedNode(`${skos}altLabel`), literal(`Consumer Product Variant`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerProductVariant`), namedNode(`${skos}notation`), literal(`22`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSafetyInformation`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSafetyInformation`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSafetyInformation`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSafetyInformation`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSafetyInformation`), namedNode(`${rdfs}comment`), literal(`Information on consumer safety regarding the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSafetyInformation`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSafetyInformation`), namedNode(`${rdfs}label`), literal(`Consumer Safety Information`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSafetyInformation`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSafetyInformation`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSalesCondition`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSalesCondition`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSalesCondition`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSalesCondition`), namedNode(`${rdfs}comment`), literal(`A code indicating restrictions imposed on the product regarding how it can be sold to the consumer for example Prescription Required.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSalesCondition`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSalesCondition`), namedNode(`${rdfs}label`), literal(`Consumer Sales Condition Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSalesCondition`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerSalesCondition`), namedNode(`${rdfs}range`), namedNode(`${ns4}ConsumerSalesConditionsCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerStorageInstructions`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerStorageInstructions`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerStorageInstructions`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerStorageInstructions`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerStorageInstructions`), namedNode(`${rdfs}comment`), literal(`Expresses in text the consumer storage instructions of a product which are normally held on the label or accompanying the product. This information may or may not be labelled on the pack.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerStorageInstructions`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerStorageInstructions`), namedNode(`${rdfs}label`), literal(`Consumer Storage Instructions`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerStorageInstructions`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerStorageInstructions`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerUsageInstructions`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerUsageInstructions`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerUsageInstructions`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerUsageInstructions`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerUsageInstructions`), namedNode(`${rdfs}comment`), literal(`Free text containing the usage instructions of a product, which are normally held on the label or accompanying the product. This information may or may not be labelled on the pack.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerUsageInstructions`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerUsageInstructions`), namedNode(`${rdfs}label`), literal(`Consumer Usage Instructions`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerUsageInstructions`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}consumerUsageInstructions`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactTitle`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactTitle`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactTitle`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactTitle`), namedNode(`${rdfs}comment`), literal(`The job title of the person that can be contacted for example Manager.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}contactTitle`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}contactTitle`), namedNode(`${rdfs}label`), literal(`Contact Title`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}contactTitle`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ContactPoint`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactTitle`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactTitle`), namedNode(`${skos}related`), namedNode(`${schema}Person`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactTitle`), namedNode(`${skos}closeMatch`), namedNode(`${schema}jobTitle`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactType`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactType`), namedNode(`${rdfs}comment`), literal(`The function or role of a contact for example Customer Support.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}contactType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}contactType`), namedNode(`${rdfs}label`), literal(`Contact Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}contactType`), namedNode(`${skos}exactMatch`), namedNode(`${schema}contactType`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ContactPoint`), namedNode(ns4)),
        quad(namedNode(`${ns4}contactType`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}convenienceLevelPercent`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}convenienceLevelPercent`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}convenienceLevelPercent`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}convenienceLevelPercent`), namedNode(`${rdfs}comment`), literal(`An indication of the ease of preparation for semi-prepared products. The convenience level indicates the level of preparation in percentage required to prepare and helps the consumer to assess how long it will take to prepare the meal.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}convenienceLevelPercent`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}convenienceLevelPercent`), namedNode(`${rdfs}label`), literal(`Convenience Level Percent`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}convenienceLevelPercent`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodAndBeveragePreparationInformation`), namedNode(ns4)),
        quad(namedNode(`${ns4}convenienceLevelPercent`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}copperPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}copperPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}copperPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}copperPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Copper per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}copperPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}copperPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Copper Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}copperPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}copperPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryCode`), namedNode(`${rdfs}comment`), literal(`A short text string code (see values defined in ISO 3166) specifying the country in which a processing or other activity is performed, for example processing, bottling, manufacturing.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}countryCode`), namedNode(`${rdfs}comment`), literal(`Code specifying the country for the address using ISO 3166-1.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}countryCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}countryCode`), namedNode(`${rdfs}label`), literal(`Country Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}countryCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Country`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryCode`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryCode`), namedNode(`${skos}related`), namedNode(`${schema}PostalAddress`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryCode`), namedNode(`${skos}closeMatch`), namedNode(`${schema}addressCountry`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfAssembly`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfAssembly`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfAssembly`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfAssembly`), namedNode(`${rdfs}comment`), literal(`The place where product is assembled.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfAssembly`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfAssembly`), namedNode(`${rdfs}label`), literal(`Has Country Of Assembly`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfAssembly`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfAssembly`), namedNode(`${rdfs}range`), namedNode(`${ns4}Country`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfLastProcessing`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfLastProcessing`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfLastProcessing`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfLastProcessing`), namedNode(`${rdfs}comment`), literal(`The place where the product or ingredient was last processed and tested before importation.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfLastProcessing`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfLastProcessing`), namedNode(`${rdfs}label`), literal(`Has Country Of Last Processing`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfLastProcessing`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfLastProcessing`), namedNode(`${rdfs}range`), namedNode(`${ns4}Country`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOrigin`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOrigin`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOrigin`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOrigin`), namedNode(`${rdfs}comment`), literal(`Code indicating the country of origin of the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOrigin`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOrigin`), namedNode(`${rdfs}label`), literal(`Has Country Of Origin`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOrigin`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOrigin`), namedNode(`${rdfs}range`), namedNode(`${ns4}Country`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOriginStatement`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOriginStatement`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOriginStatement`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOriginStatement`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOriginStatement`), namedNode(`${rdfs}comment`), literal(`A description of the geographic area the item may have originated from or has been processed.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOriginStatement`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOriginStatement`), namedNode(`${rdfs}label`), literal(`Country Of Origin Statement`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOriginStatement`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}countryOfOriginStatement`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}countrySubdivisionCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}countrySubdivisionCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}countrySubdivisionCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}countrySubdivisionCode`), namedNode(`${rdfs}comment`), literal(`A short text string code (see values defined in ISO 3166_2) specifying the country subdivision in which an activity is performed, for example processing, bottling, manufacturing.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}countrySubdivisionCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}countrySubdivisionCode`), namedNode(`${rdfs}label`), literal(`Country Subdivision Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}countrySubdivisionCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Country`), namedNode(ns4)),
        quad(namedNode(`${ns4}countrySubdivisionCode`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}countyCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}countyCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}countyCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}countyCode`), namedNode(`${rdfs}comment`), literal(`A code that identifies a county. A county is a territorial division in some countries, forming the chief unit of local administration. In the US, a county is a political and administrative division of a state.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}countyCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}countyCode`), namedNode(`${rdfs}label`), literal(`County Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}countyCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PostalAddress`), namedNode(ns4)),
        quad(namedNode(`${ns4}countyCode`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}crossStreet`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}crossStreet`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}crossStreet`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}crossStreet`), namedNode(`${rdfs}comment`), literal(`A street intersecting a main street (usually at right angles) and continuing on both sides of it.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}crossStreet`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}crossStreet`), namedNode(`${rdfs}label`), literal(`Cross Street`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}crossStreet`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PostalAddress`), namedNode(ns4)),
        quad(namedNode(`${ns4}crossStreet`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}customerSupportCentre`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}customerSupportCentre`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}customerSupportCentre`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}customerSupportCentre`), namedNode(`${rdfs}comment`), literal(`The organization which provides product support to the trading partner organization to which merchandise is sold.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}customerSupportCentre`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}customerSupportCentre`), namedNode(`${rdfs}label`), literal(`Has Customer Support Centre`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}customerSupportCentre`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}customerSupportCentre`), namedNode(`${rdfs}range`), namedNode(`${ns4}Organization`), namedNode(ns4)),
        quad(namedNode(`${ns4}dailyValueIntakePercent`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}dailyValueIntakePercent`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}dailyValueIntakePercent`), namedNode(`${rdfs}comment`), literal(`The percentage of the recommended daily intake of a nutrient as recommended by authorities of the target market. Is expressed relative to the serving size and base daily value intake.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dailyValueIntakePercent`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}dailyValueIntakePercent`), namedNode(`${rdfs}label`), literal(`Daily Value Intake Percent`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dailyValueIntakePercent`), namedNode(`${rdfs}domain`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}dailyValueIntakePercent`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLink%2A`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLink%2A`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLink%2A`), namedNode(`${vs}term_status`), literal(`withdrawn`), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLink%2A`), namedNode(`${rdfs}comment`), literal(`Originally proposed as the term for defaultLinkMulti. Do not use.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLink%2A`), namedNode(`${rdfs}label`), literal(`Default link*`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLink%2A`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLink%2A`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLink`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLink`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLink`), namedNode(`${vs}term_status`), literal(`proposed`), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLink`), namedNode(`${rdfs}comment`), literal(`The default link for a given identified item to which a resolver will redirect unless there is information in the request that is a better match.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLink`), namedNode(`${rdfs}label`), literal(`Default link`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLink`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLink`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLinkMulti`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLinkMulti`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLinkMulti`), namedNode(`${vs}term_status`), literal(`proposed`), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLinkMulti`), namedNode(`${rdfs}comment`), literal(`A set of 'default links' that may be differentiated by information in the HTTP request headers sent to a resolver to enable a better match than the single default link.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLinkMulti`), namedNode(`${rdfs}label`), literal(`Default linkMulti`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLinkMulti`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}defaultLinkMulti`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}department`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}department`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}department`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}department`), namedNode(`${rdfs}comment`), literal(`The name of a division of an organization dealing with a specific activity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}department`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}department`), namedNode(`${rdfs}label`), literal(`Department`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}department`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Organization`), namedNode(ns4)),
        quad(namedNode(`${ns4}department`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}department`), namedNode(`${skos}closeMatch`), namedNode(`${schema}department`), namedNode(ns4)),
        quad(namedNode(`${ns4}dependentProprietaryProduct`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}dependentProprietaryProduct`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}dependentProprietaryProduct`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}dependentProprietaryProduct`), namedNode(`${rdfs}comment`), literal(`Dependent products are products which are required to make the current product functional.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dependentProprietaryProduct`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}dependentProprietaryProduct`), namedNode(`${rdfs}label`), literal(`Has Dependent Proprietary Product`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dependentProprietaryProduct`), namedNode(`${skos}broadMatch`), namedNode(`${schema}isSimilarTo`), namedNode(ns4)),
        quad(namedNode(`${ns4}dependentProprietaryProduct`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}dependentProprietaryProduct`), namedNode(`${rdfs}range`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}dependentProprietaryProduct`), namedNode(`${rdfs}seeAlso`), namedNode(`${schema}isAccessoryOrSparePartFor`), namedNode(ns4)),
        quad(namedNode(`${ns4}dependentProprietaryProduct`), namedNode(`${rdfs}seeAlso`), namedNode(`${schema}isConsumableFor`), namedNode(ns4)),
        quad(namedNode(`${ns4}descriptiveSize`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}descriptiveSize`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}descriptiveSize`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}descriptiveSize`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}descriptiveSize`), namedNode(`${rdfs}comment`), literal(`An alphanumeric size factor the brand owner wishes to communicate to the consumer. IE Jumbo, Capri, Full Length, Maxi.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}descriptiveSize`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}descriptiveSize`), namedNode(`${rdfs}label`), literal(`Descriptive Size`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}descriptiveSize`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}descriptiveSize`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietCode`), namedNode(`${rdfs}comment`), literal(`Links to multiple pairs of gs1:DietTypeCode and diet type sub code (free-form text string).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dietCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}dietCode`), namedNode(`${rdfs}label`), literal(`Diet Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dietCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietCode`), namedNode(`${rdfs}range`), namedNode(`${ns4}DietTypeCodeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietType`), namedNode(`${rdfs}comment`), literal(`Code indicating the diet the product is suitable for example Kosher.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dietType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}dietType`), namedNode(`${rdfs}label`), literal(`Diet Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dietType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}DietTypeCodeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietType`), namedNode(`${rdfs}range`), namedNode(`${ns4}DietTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietTypeDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietTypeDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietTypeDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietTypeDescription`), namedNode(`${rdfs}comment`), literal(`Free text for indication of diet not stated in the list of diets.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dietTypeDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}dietTypeDescription`), namedNode(`${rdfs}label`), literal(`Diet Type Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dietTypeDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietTypeDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietTypeSubcode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietTypeSubcode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietTypeSubcode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietTypeSubcode`), namedNode(`${rdfs}comment`), literal(`Indicates a set of agreements or a certificate name that guarantees the product is permitted in a particular diet. A diet type subcode is a subclassification of a specific diet type. For example, Pareve is a diet type subcode of Kosher.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dietTypeSubcode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}dietTypeSubcode`), namedNode(`${rdfs}label`), literal(`Diet Type Sub-code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dietTypeSubcode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}DietTypeCodeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}dietTypeSubcode`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}disassemblyInfo`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}disassemblyInfo`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}disassemblyInfo`), namedNode(`${rdfs}comment`), literal(`A link to the instructions for dismantling/disassembly.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}disassemblyInfo`), namedNode(`${rdfs}label`), literal(`Product disassembly`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}disassemblyInfo`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}disassemblyInfo`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}disassemblyInfo`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}disassemblyInfo`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}discountRepeatsPerMultipleMinimum`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}discountRepeatsPerMultipleMinimum`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}discountRepeatsPerMultipleMinimum`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}discountRepeatsPerMultipleMinimum`), namedNode(`${rdfs}comment`), literal(`If specified and set to true, the discount is available for each time the minimum qualifying criteria are met.  This can be used to express '$10 off each $50 spend', which is distinct from a 20% discount because it is quantized in units of spending.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}discountRepeatsPerMultipleMinimum`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}discountRepeatsPerMultipleMinimum`), namedNode(`${rdfs}label`), literal(`Discount Repeats Per Multiple Minimum`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}discountRepeatsPerMultipleMinimum`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}discountRepeatsPerMultipleMinimum`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(ns4)),
        quad(namedNode(`${ns4}discountType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}discountType`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}discountType`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}discountType`), namedNode(`${rdfs}comment`), literal(`A code that specifies the type of payment discount applicable to an offer, for example BOGO.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}discountType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}discountType`), namedNode(`${rdfs}label`), literal(`Discount Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}discountType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}discountType`), namedNode(`${rdfs}range`), namedNode(`${ns4}DiscountTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}drainedWeight`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}drainedWeight`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}drainedWeight`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}drainedWeight`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}drainedWeight`), namedNode(`${rdfs}comment`), literal(`The weight of the product when drained of its liquid. For example 225 GRM, Jar of pickles in vinegar.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}drainedWeight`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}drainedWeight`), namedNode(`${rdfs}label`), literal(`Drained Weight`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}drainedWeight`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}drainedWeight`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}drainedWeight`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}weight`), namedNode(ns4)),
        quad(namedNode(`${ns4}dueDate`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}dueDate`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}dueDate`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}dueDate`), namedNode(`${rdfs}comment`), literal(`The date by which an invoice should be paid. This data element represents an attribute of a payment slip reference number, AI (8020), and a Global Location Number (GLN) of the invoicing party.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dueDate`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}dueDate`), namedNode(`${rdfs}label`), literal(`Due Date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dueDate`), namedNode(`${rdfs}label`), literal(`Due date for amount on payment slip`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dueDate`), namedNode(`${skos}prefLabel`), literal(`12`), namedNode(ns4)),
        quad(namedNode(`${ns4}dueDate`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}dueDate`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}dueDate`), namedNode(`${rdfs}range`), namedNode(`${xsd}date`), namedNode(ns4)),
        quad(namedNode(`${ns4}dueDate`), namedNode(`${skos}altLabel`), literal(`Due Date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dueDate`), namedNode(`${skos}altLabel`), literal(`Due date for amount on payment slip`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dueDate`), namedNode(`${skos}notation`), literal(`12`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}durationOfWarranty`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}durationOfWarranty`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}durationOfWarranty`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}durationOfWarranty`), namedNode(`${rdfs}comment`), literal(`The time period that the warranty is valid within.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}durationOfWarranty`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}durationOfWarranty`), namedNode(`${rdfs}label`), literal(`Duration Of Warranty`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}durationOfWarranty`), namedNode(`${skos}exactMatch`), namedNode(`${schema}durationOfWarranty`), namedNode(ns4)),
        quad(namedNode(`${ns4}durationOfWarranty`), namedNode(`${rdfs}domain`), namedNode(`${ns4}WarrantyPromise`), namedNode(ns4)),
        quad(namedNode(`${ns4}durationOfWarranty`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxAmount`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxAmount`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxAmount`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxAmount`), namedNode(`${rdfs}comment`), literal(`The current tax or duty or fee amount applicable to the product, expressed as a floating-point numeric value that is qualified by the corresponding currency. See also gs1:priceCurrency.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxAmount`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxAmount`), namedNode(`${rdfs}label`), literal(`Duty Fee Tax Amount`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxAmount`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxAmount`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxAmount`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns4}priceCurrency`), namedNode(ns4)),
        quad(namedNode(`${ns4}priceCurrency`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}priceCurrency`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}priceCurrency`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}priceCurrency`), namedNode(`${rdfs}comment`), literal(`A string value indicating a currency from ISO 4217 for example USD .`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}priceCurrency`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}priceCurrency`), namedNode(`${rdfs}label`), literal(`Price Currency`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}priceCurrency`), namedNode(`${skos}exactMatch`), namedNode(`${schema}priceCurrency`), namedNode(ns4)),
        quad(namedNode(`${ns4}priceCurrency`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}priceCurrency`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxDescription`), namedNode(`${rdfs}comment`), literal(`A description of tax type for example Taxes sure les supports audio.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxDescription`), namedNode(`${rdfs}label`), literal(`Duty Fee Tax Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxRate`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxRate`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxRate`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxRate`), namedNode(`${rdfs}comment`), literal(`The current tax or duty rate percentage applicable to the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxRate`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxRate`), namedNode(`${rdfs}label`), literal(`Duty Fee Tax Rate`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxRate`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}dutyFeeTaxRate`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantity`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantity`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantity`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantity`), namedNode(`${rdfs}comment`), literal(`The quantity including unit of measure for which the offer for good or service is valid.  If this is not specified, an eligible quantity of 1 should be assumed.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantity`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantity`), namedNode(`${rdfs}label`), literal(`Eligible Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantity`), namedNode(`${skos}exactMatch`), namedNode(`${schema}eligibleQuantity`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantity`), namedNode(`${rdfs}domain`), blankNodes[2], namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantity`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantity`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}eligibleQuantity`), namedNode(ns4)),
        quad(blankNodes[2], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(blankNodes[2], namedNode(`${owl}unionOf`), blankNodes[3], namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMaximum`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMaximum`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMaximum`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMaximum`), namedNode(`${rdfs}comment`), literal(`The maximum quantity including unit of measure for which the offer for good or service is valid.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMaximum`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMaximum`), namedNode(`${rdfs}label`), literal(`Eligible Quantity Maximum`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMaximum`), namedNode(`${skos}broadMatch`), namedNode(`${schema}eligibleQuantity`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMaximum`), namedNode(`${rdfs}domain`), blankNodes[2], namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMaximum`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMaximum`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}eligibleQuantity`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMinimum`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMinimum`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMinimum`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMinimum`), namedNode(`${rdfs}comment`), literal(`The minimum quantity including unit of measure for which the offer for good or service is valid.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMinimum`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMinimum`), namedNode(`${rdfs}label`), literal(`Eligible Quantity Minimum`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMinimum`), namedNode(`${skos}broadMatch`), namedNode(`${schema}eligibleQuantity`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMinimum`), namedNode(`${rdfs}domain`), blankNodes[2], namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMinimum`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleQuantityMinimum`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}eligibleQuantity`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleTradeChannel`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleTradeChannel`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleTradeChannel`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleTradeChannel`), namedNode(`${rdfs}comment`), literal(`A code determining the location where a user can redeem the offer, for example ONLINE_ONLY. `, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleTradeChannel`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleTradeChannel`), namedNode(`${rdfs}label`), literal(`Eligible Trade Channel`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleTradeChannel`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}eligibleTradeChannel`), namedNode(`${rdfs}range`), namedNode(`${ns4}TradeChannelCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}email`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}email`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}email`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}email`), namedNode(`${rdfs}comment`), literal(`Creating/sending/receiving of unstructured free text messages or documents using computer network, a mini-computer or an attached modem and regular telephone line or other electronic transmission media.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}email`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}email`), namedNode(`${rdfs}label`), literal(`E-mail`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}email`), namedNode(`${skos}exactMatch`), namedNode(`${schema}email`), namedNode(ns4)),
        quad(namedNode(`${ns4}email`), namedNode(`${skos}exactMatch`), namedNode(`${vcard}hasEmail`), namedNode(ns4)),
        quad(namedNode(`${ns4}email`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ContactPoint`), namedNode(ns4)),
        quad(namedNode(`${ns4}email`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}energyFromFatPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}energyFromFatPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}energyFromFatPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}energyFromFatPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Energy from Fat per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}energyFromFatPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}energyFromFatPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Energy from Fat Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}energyFromFatPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}energyFromFatPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}energyPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}energyPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}energyPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}energyPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Energy Per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}energyPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}energyPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Energy Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}energyPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}energyPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}epcis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}epcis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}epcis`), namedNode(`${rdfs}comment`), literal(`A link to an EPCIS repository of visibility event data.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}epcis`), namedNode(`${rdfs}label`), literal(`EPC Information Services (EPCIS) repository`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}epcis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}epcis`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}epcis`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}epcis`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}epil`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}epil`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}epil`), namedNode(`${rdfs}comment`), literal(`A link to an electronic patient information leaflet.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}epil`), namedNode(`${rdfs}label`), literal(`Electronic Patient Information Leaflet`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}epil`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}epil`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}epil`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}epil`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}equivalentProduct`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}equivalentProduct`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}equivalentProduct`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}equivalentProduct`), namedNode(`${rdfs}comment`), literal(`A product which can be substituted for the product based on supplier-defined functional equivalence to the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}equivalentProduct`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}equivalentProduct`), namedNode(`${rdfs}label`), literal(`Has Equivalent Product`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}equivalentProduct`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}equivalentProduct`), namedNode(`${rdfs}range`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}equivalentProduct`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}isSimilarTo`), namedNode(ns4)),
        quad(namedNode(`${ns4}exactDiscountAmount`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}exactDiscountAmount`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}exactDiscountAmount`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}exactDiscountAmount`), namedNode(`${rdfs}comment`), literal(`Links to a gs1:PriceSpecification that indicates in terms of an amount and specified currency, the exact discount on the sales price associated with a particular gs1:Discount. This property can be used to express '$10 off'.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}exactDiscountAmount`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}exactDiscountAmount`), namedNode(`${rdfs}label`), literal(`Exact Discount Amount`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}exactDiscountAmount`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}exactDiscountAmount`), namedNode(`${rdfs}range`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}exactDiscountPercentage`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}exactDiscountPercentage`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}exactDiscountPercentage`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}exactDiscountPercentage`), namedNode(`${rdfs}comment`), literal(`A floating-point value indicating an exact percentage discount on the sales price associated with a particular gs1:Discount.  This property can be used to express '15% discount'.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}exactDiscountPercentage`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}exactDiscountPercentage`), namedNode(`${rdfs}label`), literal(`Exact Discount Percentage`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}exactDiscountPercentage`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}exactDiscountPercentage`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}exclusionDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}exclusionDescription`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}exclusionDescription`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}exclusionDescription`), namedNode(`${rdfs}comment`), literal(` A text description of any products, brands, or categories that cannot be used with the offer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}exclusionDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}exclusionDescription`), namedNode(`${rdfs}label`), literal(`Exclusion Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}exclusionDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}exclusionDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDate`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDate`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDate`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDate`), namedNode(`${rdfs}comment`), literal(`The expiration date is the date that determines the limit of consumption or use of a product/coupon. Its meaning is determined based on the trade item context (e.g., for food, the date will indicate the possibility of a direct health risk resulting from use of the product after the date, for pharmaceutical products, it will indicate the possibility of an indirect health risk resulting from the ineffectiveness of the product after the date). It is often referred to as 'use by date' or 'maximum durability date'.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDate`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDate`), namedNode(`${rdfs}label`), literal(`Expiration Date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDate`), namedNode(`${rdfs}label`), literal(`Expiration date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDate`), namedNode(`${skos}prefLabel`), literal(`17`), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDate`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDate`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDate`), namedNode(`${rdfs}range`), namedNode(`${xsd}date`), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDate`), namedNode(`${skos}altLabel`), literal(`Expiration Date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDate`), namedNode(`${skos}altLabel`), literal(`Expiration date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDate`), namedNode(`${skos}notation`), literal(`17`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDateTime`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDateTime`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDateTime`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDateTime`), namedNode(`${rdfs}comment`), literal(`The manufacturer determines the expiration date and time, which is relevant only for short duration and for items that will not be sent on long distances and not outside of the time zone. A typical application of AI (7003) is in hospitals or public pharmacies for special, customised, products which may have a 'life duration' shorter than one single day. The life duration varies according the pharmaceutical substances used in the treatment. The precise expiration date and time is defined at the end of the manufacturing process, and can be barcoded on the product label as an attribute to the item’s GTIN. Where there is no business requirement to express the expiration date to the nearest hour (or less), AI (17) Expiration date should be used.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDateTime`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDateTime`), namedNode(`${rdfs}label`), literal(`Expiration Date and Time`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDateTime`), namedNode(`${rdfs}label`), literal(`Expiration date and time`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDateTime`), namedNode(`${skos}prefLabel`), literal(`7003`), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDateTime`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDateTime`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDateTime`), namedNode(`${rdfs}range`), namedNode(`${xsd}dateTime`), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDateTime`), namedNode(`${rdfs}range`), namedNode(`${xsd}date`), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDateTime`), namedNode(`${skos}altLabel`), literal(`Expiration Date and Time`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDateTime`), namedNode(`${skos}altLabel`), literal(`Expiration date and time`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}expirationDateTime`), namedNode(`${skos}notation`), literal(`7003`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}faqs`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}faqs`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}faqs`), namedNode(`${rdfs}comment`), literal(`A link to a set of frequently asked questions.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}faqs`), namedNode(`${rdfs}label`), literal(`Frequently Asked Questions`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}faqs`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}faqs`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}faqs`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}faqs`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}fatInMilkContent`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}fatInMilkContent`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}fatInMilkContent`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}fatInMilkContent`), namedNode(`${rdfs}comment`), literal(`The percentage of fat contained in milk content of the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}fatInMilkContent`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}fatInMilkContent`), namedNode(`${rdfs}label`), literal(`Fat In Milk Content`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}fatInMilkContent`), namedNode(`${rdfs}domain`), namedNode(`${ns4}MilkButterCreamYogurtCheeseEggsSubstitutes`), namedNode(ns4)),
        quad(namedNode(`${ns4}fatInMilkContent`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}fatPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}fatPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}fatPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}fatPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Fat per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}fatPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}fatPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Fat Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}fatPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}fatPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}fatpercentageInDryMatter`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}fatpercentageInDryMatter`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}fatpercentageInDryMatter`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}fatpercentageInDryMatter`), namedNode(`${rdfs}comment`), literal(`The amount of fat contained in the base product expressed in percentage.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}fatpercentageInDryMatter`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}fatpercentageInDryMatter`), namedNode(`${rdfs}label`), literal(`Fat In Dry Matter`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}fatpercentageInDryMatter`), namedNode(`${rdfs}domain`), namedNode(`${ns4}MilkButterCreamYogurtCheeseEggsSubstitutes`), namedNode(ns4)),
        quad(namedNode(`${ns4}fatpercentageInDryMatter`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}faxNumber`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}faxNumber`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}faxNumber`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}faxNumber`), namedNode(`${rdfs}comment`), literal(`A fax number used for transmitting and reproducing fixed graphic material over telephone lines or other electronic transmission media.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}faxNumber`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}faxNumber`), namedNode(`${rdfs}label`), literal(`Telefax`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}faxNumber`), namedNode(`${skos}exactMatch`), namedNode(`${schema}faxNumber`), namedNode(ns4)),
        quad(namedNode(`${ns4}faxNumber`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ContactPoint`), namedNode(ns4)),
        quad(namedNode(`${ns4}faxNumber`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}fibrePerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}fibrePerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}fibrePerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}fibrePerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Fibre per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}fibrePerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}fibrePerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Fibre Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}fibrePerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}fibrePerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}fileLanguageCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}fileLanguageCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}fileLanguageCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}fileLanguageCode`), namedNode(`${rdfs}comment`), literal(`The specified language to which the digital asset is targeted. It is recommended to use the ISO 639-1 language code.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}fileLanguageCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}fileLanguageCode`), namedNode(`${rdfs}label`), literal(`File Language Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}fileLanguageCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ReferencedFileDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}fileLanguageCode`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}fileLanguageCode`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}inLanguage`), namedNode(ns4)),
        quad(namedNode(`${ns4}fileLanguageCode`), namedNode(`${skos}related`), namedNode(`${schema}CreativeWork`), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelHeight`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelHeight`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelHeight`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelHeight`), namedNode(`${rdfs}comment`), literal(`The number of pixels along the vertical axis of the image.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelHeight`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelHeight`), namedNode(`${rdfs}label`), literal(`File Pixel Height`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelHeight`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ReferencedFileDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelHeight`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelHeight`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}height`), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelHeight`), namedNode(`${skos}related`), namedNode(`${schema}MediaObject`), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelWidth`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelWidth`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelWidth`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelWidth`), namedNode(`${rdfs}comment`), literal(`The number of pixels along the horizontal axis of the image.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelWidth`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelWidth`), namedNode(`${rdfs}label`), literal(`File Pixel Width`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelWidth`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ReferencedFileDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelWidth`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelWidth`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}width`), namedNode(ns4)),
        quad(namedNode(`${ns4}filePixelWidth`), namedNode(`${skos}related`), namedNode(`${schema}MediaObject`), namedNode(ns4)),
        quad(namedNode(`${ns4}firstFreezeDate`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}firstFreezeDate`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}firstFreezeDate`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}firstFreezeDate`), namedNode(`${rdfs}comment`), literal(`The first freeze date is applicable to products that are frozen directly after slaughtering, harvesting, catching or after initial processing of the product. Examples include fresh meat, meat products or fishery products. The first freeze date is determined by the organisation conducting the freezing.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}firstFreezeDate`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}firstFreezeDate`), namedNode(`${rdfs}label`), literal(`First Freeze Date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}firstFreezeDate`), namedNode(`${rdfs}label`), literal(`First freeze date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}firstFreezeDate`), namedNode(`${skos}prefLabel`), literal(`7006`), namedNode(ns4)),
        quad(namedNode(`${ns4}firstFreezeDate`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}firstFreezeDate`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}firstFreezeDate`), namedNode(`${rdfs}range`), namedNode(`${xsd}date`), namedNode(ns4)),
        quad(namedNode(`${ns4}firstFreezeDate`), namedNode(`${skos}altLabel`), literal(`First Freeze Date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}firstFreezeDate`), namedNode(`${skos}altLabel`), literal(`First freeze date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}firstFreezeDate`), namedNode(`${skos}notation`), literal(`7006`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}fishType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}fishType`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}fishType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}fishType`), namedNode(`${rdfs}comment`), literal(`The type of fish for example Sea bass.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}fishType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}fishType`), namedNode(`${rdfs}label`), literal(`Fish Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}fishType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Seafood`), namedNode(ns4)),
        quad(namedNode(`${ns4}fishType`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}fluoridePerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}fluoridePerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}fluoridePerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}fluoridePerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Fluoride per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}fluoridePerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}fluoridePerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Fluoride Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}fluoridePerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}fluoridePerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}folicAcidPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}folicAcidPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}folicAcidPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}folicAcidPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Folic Acid per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}folicAcidPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}folicAcidPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Folic Acid Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}folicAcidPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}folicAcidPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}foodBeverageRefrigerationClaim`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}foodBeverageRefrigerationClaim`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}foodBeverageRefrigerationClaim`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}foodBeverageRefrigerationClaim`), namedNode(`${rdfs}comment`), literal(`Identifies whether or not the product requires refrigeration.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}foodBeverageRefrigerationClaim`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}foodBeverageRefrigerationClaim`), namedNode(`${rdfs}label`), literal(`Food Beverage Refrigeration Claim`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}foodBeverageRefrigerationClaim`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}foodBeverageRefrigerationClaim`), namedNode(`${rdfs}range`), namedNode(`${ns4}FoodBeverageRefrigerationClaimCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}foodBeverageTargetUse`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}foodBeverageTargetUse`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}foodBeverageTargetUse`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}foodBeverageTargetUse`), namedNode(`${rdfs}comment`), literal(`The type of meal the food or beverage product is targeted to for example Breakfast.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}foodBeverageTargetUse`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}foodBeverageTargetUse`), namedNode(`${rdfs}label`), literal(`Food Beverage Target Use`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}foodBeverageTargetUse`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}foodBeverageTargetUse`), namedNode(`${rdfs}range`), namedNode(`${ns4}FoodBeverageTargetUseCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}footwearFasteningType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}footwearFasteningType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}footwearFasteningType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}footwearFasteningType`), namedNode(`${rdfs}comment`), literal(`Something that mechanically joins or affixes two or more parts together in a footwear product for example a shoe lace.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}footwearFasteningType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}footwearFasteningType`), namedNode(`${rdfs}label`), literal(`Fastening Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}footwearFasteningType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Footwear`), namedNode(ns4)),
        quad(namedNode(`${ns4}footwearFasteningType`), namedNode(`${rdfs}range`), namedNode(`${ns4}FootwearFasteningTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}footwearUpperType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}footwearUpperType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}footwearUpperType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}footwearUpperType`), namedNode(`${rdfs}comment`), literal(`The descriptive term that is used by the product manufacturer to identify whether the footwear upper is open or closed. Otherwise known as Open or Closed Upper.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}footwearUpperType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}footwearUpperType`), namedNode(`${rdfs}label`), literal(`Footwear Upper Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}footwearUpperType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Footwear`), namedNode(ns4)),
        quad(namedNode(`${ns4}footwearUpperType`), namedNode(`${rdfs}range`), namedNode(`${ns4}UpperTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}freshOrSeawaterFarmed`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}freshOrSeawaterFarmed`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}freshOrSeawaterFarmed`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}freshOrSeawaterFarmed`), namedNode(`${rdfs}comment`), literal(`A code determining whether the fish originated from the sea or was farmed.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}freshOrSeawaterFarmed`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}freshOrSeawaterFarmed`), namedNode(`${rdfs}label`), literal(`Fresh or Seawater Farmed`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}freshOrSeawaterFarmed`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Seafood`), namedNode(ns4)),
        quad(namedNode(`${ns4}freshOrSeawaterFarmed`), namedNode(`${rdfs}range`), namedNode(`${ns4}FreshOrSeawaterFarmedCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}functionalName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}functionalName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}functionalName`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}functionalName`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}functionalName`), namedNode(`${rdfs}comment`), literal(`Describes use of the product or service by the consumer. Should help clarify the product classification associated with the GTIN.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}functionalName`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}functionalName`), namedNode(`${rdfs}label`), literal(`Functional Name`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}functionalName`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}functionalName`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}geneticallyModifiedDeclaration`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}geneticallyModifiedDeclaration`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}geneticallyModifiedDeclaration`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}geneticallyModifiedDeclaration`), namedNode(`${rdfs}comment`), literal(`A statement of the presence or absence of genetically modified protein or DNA.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}geneticallyModifiedDeclaration`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}geneticallyModifiedDeclaration`), namedNode(`${rdfs}label`), literal(`Genetically Modified Declaration Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}geneticallyModifiedDeclaration`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}geneticallyModifiedDeclaration`), namedNode(`${rdfs}range`), namedNode(`${ns4}LevelOfContainmentCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}geo`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}geo`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}geo`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}geo`), namedNode(`${rdfs}comment`), literal(`Links to information about geocoordinates for a place.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}geo`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}geo`), namedNode(`${rdfs}label`), literal(`Has Geocoordinates`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}geo`), namedNode(`${skos}exactMatch`), namedNode(`${schema}geo`), namedNode(ns4)),
        quad(namedNode(`${ns4}geo`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Place`), namedNode(ns4)),
        quad(namedNode(`${ns4}geo`), namedNode(`${rdfs}range`), namedNode(`${ns4}GeoCoordinates`), namedNode(ns4)),
        quad(namedNode(`${ns4}globalLocationNumber`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}globalLocationNumber`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}globalLocationNumber`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}globalLocationNumber`), namedNode(`${rdfs}comment`), literal(`A Global Location Number (GLN) is the GS1 Identification Key used to identify physical locations or parties. The key comprises a GS1 Company Prefix, Location Reference and Check Digit. For more information see http://www.gs1.org/gln.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}globalLocationNumber`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}globalLocationNumber`), namedNode(`${rdfs}label`), literal(`Global Location Number (GLN)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}globalLocationNumber`), namedNode(`${skos}exactMatch`), namedNode(`${schema}globalLocationNumber`), namedNode(ns4)),
        quad(namedNode(`${ns4}globalLocationNumber`), namedNode(`${rdfs}domain`), blankNodes[0], namedNode(ns4)),
        quad(namedNode(`${ns4}globalLocationNumber`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryCode`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryCode`), namedNode(`${rdfs}comment`), literal(`8-digit code (GPC Brick Value) specifying a product category according to the GS1 Global Product Classification (GPC) standard. For more information see http://www.gs1.org/gpc`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryCode`), namedNode(`${rdfs}label`), literal(`GPC Category Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryCode`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryDescription`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryDescription`), namedNode(`${rdfs}comment`), literal(`A description of the code specifying a product category according to the GS1 Global Product Classification (GPC) standard.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryDescription`), namedNode(`${rdfs}label`), literal(`GPC Category Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}gpcCategoryDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossArea`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossArea`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossArea`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossArea`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossArea`), namedNode(`${rdfs}comment`), literal(`The gross area of a product (including its packaging)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}grossArea`), namedNode(`${rdfs}comment`), literal(`The overall area of the item including packaging. This can be given using a number of different AI ranges that depend on the units in which the area is measured.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}grossArea`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}grossArea`), namedNode(`${rdfs}label`), literal(`Gross Area`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}grossArea`), namedNode(`${rdfs}label`), literal(`Gross area`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}grossArea`), namedNode(`${skos}prefLabel`), literal(`334n, 353n, 354n, 355n`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossArea`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossArea`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossArea`), namedNode(`${skos}altLabel`), literal(`Gross Area`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}grossArea`), namedNode(`${skos}altLabel`), literal(`Gross area`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}grossVolume`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossVolume`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossVolume`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossVolume`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossVolume`), namedNode(`${rdfs}comment`), literal(`The overall volume of the item including packaging. This can be given using a number of different AI ranges that depend on the units in which the volume is measured.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}grossVolume`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}grossVolume`), namedNode(`${rdfs}label`), literal(`Gross volume`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}grossVolume`), namedNode(`${skos}prefLabel`), literal(`335n, 336n, 362n, 363n, 367n, 368n, 369n`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossVolume`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossVolume`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossVolume`), namedNode(`${skos}altLabel`), literal(`Gross volume`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}grossWeight`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossWeight`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossWeight`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossWeight`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossWeight`), namedNode(`${rdfs}comment`), literal(`Used to identify the gross weight of the product. The gross weight includes all packaging materials of the product. At pallet level the productGrossWeight includes the weight of the pallet itself. For example, 200 GRM, value - total pounds, total grams, etc.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}grossWeight`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}grossWeight`), namedNode(`${rdfs}label`), literal(`Gross Weight`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}grossWeight`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossWeight`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}grossWeight`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}weight`), namedNode(ns4)),
        quad(namedNode(`${ns4}growingMethod`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}growingMethod`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}growingMethod`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}growingMethod`), namedNode(`${rdfs}comment`), literal(`The process through which fresh produce is grown and cultivated.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}growingMethod`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}growingMethod`), namedNode(`${rdfs}label`), literal(`Growing Method`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}growingMethod`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}growingMethod`), namedNode(`${rdfs}range`), namedNode(`${ns4}GrowingMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${rdfs}comment`), literal(`A Global Trade Item Number (GTIN) is the 14 digit GS1 Identification Key used to identify products. The key comprises a GS1 Company Prefix followed by an Item Reference Number and a Check Digit. See http://www.gs1.org/gtin  for more details.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${rdfs}label`), literal(`GTIN`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${skos}prefLabel`), literal(`01`), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${skos}exactMatch`), namedNode(`${schema}gtin14`), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${skos}altLabel`), literal(`GTIN`), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${skos}notation`), literal(`01`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${skos}closeMatch`), namedNode(`${schema}gtin12`), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${skos}closeMatch`), namedNode(`${schema}gtin13`), namedNode(ns4)),
        quad(namedNode(`${ns4}gtin`), namedNode(`${skos}closeMatch`), namedNode(`${schema}gtin8`), namedNode(ns4)),
        quad(namedNode(`${ns4}handledBy`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}handledBy`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}handledBy`), namedNode(`${rdfs}comment`), literal(`Used when one resolver redirects all request URIs that match a given pattern without further processing, such as from GS1 to a brand-operated service. See section 8.7.1 of the Digital Link standard, version 1.1. `, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}handledBy`), namedNode(`${rdfs}label`), literal(`Handled by`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}handledBy`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}handledBy`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}handledBy`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}handledBy`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}handlingEndOfLife`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}handlingEndOfLife`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}handlingEndOfLife`), namedNode(`${rdfs}comment`), literal(`A link to the instructions for end-of-life handling as required by a product passport. The information will include instructions for reuse, repair, disassembly and recycling.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}handlingEndOfLife`), namedNode(`${rdfs}label`), literal(`Product EOL handling`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}handlingEndOfLife`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}handlingEndOfLife`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}handlingEndOfLife`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}handlingEndOfLife`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDate`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDate`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDate`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDate`), namedNode(`${rdfs}comment`), literal(`The harvest date. For example, the harvest date can be the date when an animal was slaughtered or killed, a fish has been harvested, or a crop was harvested. This date  is determined by the organisation conducting the harvesting. Different organisations may use more specific terminology when referring to their specific needs and use terms such as: Date of catch or slaughter date. `, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDate`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDate`), namedNode(`${rdfs}label`), literal(`Harvest Date.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDate`), namedNode(`${rdfs}label`), literal(`Harvest date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDate`), namedNode(`${skos}prefLabel`), literal(`7007`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDate`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDate`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDate`), namedNode(`${rdfs}range`), namedNode(`${xsd}date`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDate`), namedNode(`${skos}altLabel`), literal(`Harvest Date.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDate`), namedNode(`${skos}altLabel`), literal(`Harvest date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDate`), namedNode(`${skos}notation`), literal(`7007`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateEnd`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateEnd`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateEnd`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateEnd`), namedNode(`${rdfs}comment`), literal(`The harvest end date. For example, the harvest end date can be the date when an animal was slaughtered or killed, a fish has been harvested, or a crop was harvested. This end date is determined by the organisation conducting the harvesting. Different organisations may use more specific terminology when referring to their specific needs and use terms such as: Date of catch or slaughter date. When referring to animals the date range refers to the whole animal and all meat or fish cuts derived from this animal.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateEnd`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateEnd`), namedNode(`${rdfs}label`), literal(`Harvest Date End`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateEnd`), namedNode(`${rdfs}label`), literal(`Harvest date (end)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateEnd`), namedNode(`${skos}prefLabel`), literal(`7007`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateEnd`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateEnd`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateEnd`), namedNode(`${rdfs}range`), namedNode(`${xsd}date`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateEnd`), namedNode(`${skos}altLabel`), literal(`Harvest Date End`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateEnd`), namedNode(`${skos}altLabel`), literal(`Harvest date (end)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateEnd`), namedNode(`${skos}notation`), literal(`7007`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateStart`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateStart`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateStart`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateStart`), namedNode(`${rdfs}comment`), literal(`The harvest start date. For example, the harvest start date can be the date when an animal was slaughtered or killed, a fish has been harvested, or a crop was harvested. This start date is determined by the organisation conducting the harvesting. Different organisations may use more specific terminology when referring to their specific needs and use terms such as: Date of catch or slaughter date. When referring to animals the date range refers to the whole animal and all meat or fish cuts derived from this animal.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateStart`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateStart`), namedNode(`${rdfs}label`), literal(`Harvest Date Start`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateStart`), namedNode(`${rdfs}label`), literal(`Harvest date (start)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateStart`), namedNode(`${skos}prefLabel`), literal(`7007`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateStart`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateStart`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateStart`), namedNode(`${rdfs}range`), namedNode(`${xsd}date`), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateStart`), namedNode(`${skos}altLabel`), literal(`Harvest Date Start`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateStart`), namedNode(`${skos}altLabel`), literal(`Harvest date (start)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}harvestDateStart`), namedNode(`${skos}notation`), literal(`7007`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}hasAllergen`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasAllergen`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasAllergen`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasAllergen`), namedNode(`${rdfs}comment`), literal(`Relates to details about allergens`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}hasAllergen`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}hasAllergen`), namedNode(`${rdfs}label`), literal(`Has Allergen`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}hasAllergen`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasAllergen`), namedNode(`${rdfs}range`), namedNode(`${ns4}AllergenDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasBatchLotNumber`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasBatchLotNumber`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasBatchLotNumber`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasBatchLotNumber`), namedNode(`${rdfs}comment`), literal(`The batch or lot number associates an item with information the manufacturer considers relevant for traceability of the trade item to which the element string is applied. The data may refer to the trade item itself or to items contained. The number may be, for example, a production lot number, a shift number, a machine number, a time, or an internal production code. In cases where the same product is manufactured in different locations the brand owner and the manufacturer are responsible for ensuring the non-duplication of batch/lot numbers for a GTIN. For the re-use of batch/lot numbers with a GTIN, sector-specific constraints need to be considered. `, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}hasBatchLotNumber`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}hasBatchLotNumber`), namedNode(`${rdfs}label`), literal(`Batch/Lot Identifier`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}hasBatchLotNumber`), namedNode(`${skos}prefLabel`), literal(`10`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasBatchLotNumber`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasBatchLotNumber`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasBatchLotNumber`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasBatchLotNumber`), namedNode(`${skos}altLabel`), literal(`Batch/Lot Identifier`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}hasBatchLotNumber`), namedNode(`${skos}notation`), literal(`10`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}hasRetailers`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasRetailers`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasRetailers`), namedNode(`${rdfs}comment`), literal(`A link to a list of retailers for this item`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}hasRetailers`), namedNode(`${rdfs}label`), literal(`Has Retailers`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}hasRetailers`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasRetailers`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasRetailers`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasRetailers`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasReturnablePackageDeposit`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasReturnablePackageDeposit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasReturnablePackageDeposit`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasReturnablePackageDeposit`), namedNode(`${rdfs}comment`), literal(`links to details of amounts refunded for returnable package in a specified region.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}hasReturnablePackageDeposit`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}hasReturnablePackageDeposit`), namedNode(`${rdfs}label`), literal(`Has Returnable Package Deposit Details`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}hasReturnablePackageDeposit`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PackagingDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasReturnablePackageDeposit`), namedNode(`${rdfs}range`), namedNode(`${ns4}ReturnablePackageDepositDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasSerialNumber`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasSerialNumber`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasSerialNumber`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasSerialNumber`), namedNode(`${rdfs}comment`), literal(`A serial number is assigned to an entity for its lifetime. When combined with a GTIN, a serial number uniquely identifies an individual item. The serial number field is alphanumeric and may include all characters contained in figure 7.11-1. The brand owner and the manufacturer are responsible for ensuring the non-duplication of serial numbers for a GTIN. For the re-use of serial numbers with a GTIN, sector-specific constraints need to be considered. `, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}hasSerialNumber`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}hasSerialNumber`), namedNode(`${rdfs}label`), literal(`Serial Number`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}hasSerialNumber`), namedNode(`${skos}prefLabel`), literal(`21`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasSerialNumber`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasSerialNumber`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasSerialNumber`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasSerialNumber`), namedNode(`${skos}altLabel`), literal(`Serial Number`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}hasSerialNumber`), namedNode(`${skos}notation`), literal(`21`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}hasThirdPartyControlledSerialNumber`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasThirdPartyControlledSerialNumber`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasThirdPartyControlledSerialNumber`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasThirdPartyControlledSerialNumber`), namedNode(`${rdfs}comment`), literal(`This identifier is assigned to an entity for its lifetime. When combined with a GTIN, a TPX uniquely identifies an individual item and forms a unit pack Unique Identifier (upUI) for tobacco traceability per EU 2018/574. The serial number field is alphanumeric and may include all characters contained in figure 7.11-1. The Third Party determines the TPX, but the TPX shall begin with the ID Issuer Unique Identification Code (UIC), followed by GS1 UIC Extension 1, and GS1 UIC Extension 2.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}hasThirdPartyControlledSerialNumber`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}hasThirdPartyControlledSerialNumber`), namedNode(`${rdfs}label`), literal(`Third-Party Controlled Serial Number`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}hasThirdPartyControlledSerialNumber`), namedNode(`${skos}prefLabel`), literal(`235`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasThirdPartyControlledSerialNumber`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasThirdPartyControlledSerialNumber`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasThirdPartyControlledSerialNumber`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}hasThirdPartyControlledSerialNumber`), namedNode(`${skos}altLabel`), literal(`Third-Party Controlled Serial Number`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}hasThirdPartyControlledSerialNumber`), namedNode(`${skos}notation`), literal(`235`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}healthClaimDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}healthClaimDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}healthClaimDescription`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}healthClaimDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}healthClaimDescription`), namedNode(`${rdfs}comment`), literal(`A description of health claims according to regulations of the target market.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}healthClaimDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}healthClaimDescription`), namedNode(`${rdfs}label`), literal(`Health Claim`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}healthClaimDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}healthClaimDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}image`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}image`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}image`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}image`), namedNode(`${rdfs}comment`), literal(`Link to a file containing a visual representation of the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}image`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}image`), namedNode(`${rdfs}label`), literal(`Has Product Image`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}image`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}image`), namedNode(`${rdfs}range`), namedNode(`${ns4}ReferencedFileDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}image`), namedNode(`${skos}closeMatch`), namedNode(`${schema}image`), namedNode(ns4)),
        quad(namedNode(`${ns4}image`), namedNode(`${skos}closeMatch`), namedNode(`${foaf}depiction`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDepth`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDepth`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDepth`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDepth`), namedNode(`${rdfs}comment`), literal(`The depth of the product in its packaging, as measured according to the GS1 Package Measurement Rules. See http://www.gs1.org/package-measurement-rules-implementation-guide for more details.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDepth`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDepth`), namedNode(`${rdfs}label`), literal(`In Package Depth`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDepth`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDepth`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDepth`), namedNode(`${skos}related`), namedNode(`${schema}depth`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDiameter`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDiameter`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDiameter`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDiameter`), namedNode(`${rdfs}comment`), literal(`The measurement of the diameter of the product in its package at its largest point. For example, 165 MMT.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDiameter`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDiameter`), namedNode(`${rdfs}label`), literal(`In Package Diameter`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDiameter`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageDiameter`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageHeight`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageHeight`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageHeight`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageHeight`), namedNode(`${rdfs}comment`), literal(`The height of the product in the package, as measured according to the GS1 Package Measurement Rules. See http://www.gs1.org/package-measurement-rules-implementation-guide for more details.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageHeight`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageHeight`), namedNode(`${rdfs}label`), literal(`In Package Height`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageHeight`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageHeight`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageHeight`), namedNode(`${skos}related`), namedNode(`${schema}height`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageWidth`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageWidth`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageWidth`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageWidth`), namedNode(`${rdfs}comment`), literal(`The width of the product in the package, as measured according to the GS1 Package Measurement Rules. See http://www.gs1.org/package-measurement-rules-implementation-guide for more details.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageWidth`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageWidth`), namedNode(`${rdfs}label`), literal(`In Package Width`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageWidth`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageWidth`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}inPackageWidth`), namedNode(`${skos}related`), namedNode(`${schema}width`), namedNode(ns4)),
        quad(namedNode(`${ns4}includedAccessories`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}includedAccessories`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}includedAccessories`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}includedAccessories`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}includedAccessories`), namedNode(`${rdfs}comment`), literal(`Any included object or device not part of the core product itself but which adds to its functionality or use.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}includedAccessories`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}includedAccessories`), namedNode(`${rdfs}label`), literal(`Included Accessories`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}includedAccessories`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}includedAccessories`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}includedAccessories`), namedNode(`${skos}related`), namedNode(`${schema}isAccessoryOrSparePartFor`), namedNode(ns4)),
        quad(namedNode(`${ns4}includedAccessories`), namedNode(`${rdfs}seeAlso`), namedNode(`${schema}isAccessoryOrSparePartFor`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredient`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredient`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredient`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredient`), namedNode(`${rdfs}comment`), literal(`Links to information about ingredients of a specific Food/Beverage/Tobacco product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredient`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredient`), namedNode(`${rdfs}label`), literal(`Has Food And Beverage Ingredient Information`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredient`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredient`), namedNode(`${rdfs}range`), namedNode(`${ns4}FoodBeverageTobaccoIngredientDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientContentPercentage`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientContentPercentage`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientContentPercentage`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientContentPercentage`), namedNode(`${rdfs}comment`), literal(`Quantity of the ingredient contained in the product as a percentage of the total product ingredients. This is used in conjunction with ingredientName.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientContentPercentage`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientContentPercentage`), namedNode(`${rdfs}label`), literal(`Ingredient Content Percentage`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientContentPercentage`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoIngredientDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientContentPercentage`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientName`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientName`), namedNode(`${rdfs}comment`), literal(`Free text field describing an ingredient or ingredient group. Ingredients include any additives (colourings, preservatives, e-numbers, etc.) that are encompassed.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientName`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientName`), namedNode(`${rdfs}label`), literal(`Ingredient Name`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientName`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoIngredientDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientName`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientOfConcern`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientOfConcern`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientOfConcern`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientOfConcern`), namedNode(`${rdfs}comment`), literal(`Indicates a claim to an ingredient, considered to be a concern for regulatory or other reasons, and which is 'contained' within the product but may not need to specify the amount whether approximate, or an accurate measurement be given.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientOfConcern`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientOfConcern`), namedNode(`${rdfs}label`), literal(`Ingredient of Concern`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientOfConcern`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientOfConcern`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientSequence`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientSequence`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientSequence`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientSequence`), namedNode(`${rdfs}comment`), literal(`Integer (1, 2, 3...) indicating the ingredient order by content percentage of the product. (major ingredient = 1, second ingredient = 2) etc.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientSequence`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientSequence`), namedNode(`${rdfs}label`), literal(`Ingredient Sequence`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientSequence`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoIngredientDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientSequence`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientStatement`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientStatement`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientStatement`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientStatement`), namedNode(`${rdfs}comment`), literal(`Information on the constituent ingredient make up of the product specified as one string.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientStatement`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientStatement`), namedNode(`${rdfs}label`), literal(`Ingredient Statement`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientStatement`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientStatement`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientsInfo`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientsInfo`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientsInfo`), namedNode(`${rdfs}comment`), literal(`A link to facts about the product's ingredients.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientsInfo`), namedNode(`${rdfs}label`), literal(`Ingredients information`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientsInfo`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientsInfo`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientsInfo`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}ingredientsInfo`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}instructions`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}instructions`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}instructions`), namedNode(`${rdfs}comment`), literal(`A link to instructions related to the item, such as assembly instructions, usage tips etc.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}instructions`), namedNode(`${rdfs}label`), literal(`Instructions`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}instructions`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}instructions`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}instructions`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}instructions`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}instructionsForUse`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}instructionsForUse`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}instructionsForUse`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}instructionsForUse`), namedNode(`${rdfs}comment`), literal(`Link to a file containing the Instructions For Use.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}instructionsForUse`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}instructionsForUse`), namedNode(`${rdfs}label`), literal(`Has Instructions For Use`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}instructionsForUse`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}instructionsForUse`), namedNode(`${rdfs}range`), namedNode(`${ns4}ReferencedFileDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}iodinePerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}iodinePerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}iodinePerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}iodinePerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Iodine per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}iodinePerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}iodinePerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Iodine Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}iodinePerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}iodinePerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}ironPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}ironPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}ironPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}ironPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Iron per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ironPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}ironPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Iron Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}ironPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}ironPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}irradiatedCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}irradiatedCode`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}irradiatedCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}irradiatedCode`), namedNode(`${rdfs}comment`), literal(`Indicates if radiation has been applied to the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}irradiatedCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}irradiatedCode`), namedNode(`${rdfs}label`), literal(`Irradiated Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}irradiatedCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}irradiatedCode`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isCarbonated`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isCarbonated`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isCarbonated`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isCarbonated`), namedNode(`${rdfs}comment`), literal(`Used to identify whether or not a beverage product is naturally effervescent or has been made effervescent by the addition of carbon dioxide gas.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isCarbonated`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isCarbonated`), namedNode(`${rdfs}label`), literal(`Is Carbonated`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isCarbonated`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Beverage`), namedNode(ns4)),
        quad(namedNode(`${ns4}isCarbonated`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isDecaffeinated`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isDecaffeinated`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isDecaffeinated`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isDecaffeinated`), namedNode(`${rdfs}comment`), literal(`The descriptive term that is used by the product manufacturer to identify whether or not the product contains caffeine.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isDecaffeinated`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isDecaffeinated`), namedNode(`${rdfs}label`), literal(`Is Decaffeinated`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isDecaffeinated`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Beverage`), namedNode(ns4)),
        quad(namedNode(`${ns4}isDecaffeinated`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isFromConcentrate`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isFromConcentrate`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isFromConcentrate`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isFromConcentrate`), namedNode(`${rdfs}comment`), literal(`Used to identify whether or not the product claims to be made from a concentrated formulation.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isFromConcentrate`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isFromConcentrate`), namedNode(`${rdfs}label`), literal(`Is From Concentrate`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isFromConcentrate`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Beverage`), namedNode(ns4)),
        quad(namedNode(`${ns4}isFromConcentrate`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isHomogenised`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isHomogenised`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isHomogenised`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isHomogenised`), namedNode(`${rdfs}comment`), literal(`A The indication whether or not the milk used was actively homogenised. The homogenisation of milk is a technical process in the dairy. The milk fat is milled to such an extent that further creaming is prevented.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isHomogenised`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isHomogenised`), namedNode(`${rdfs}label`), literal(`Is Homogenised`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isHomogenised`), namedNode(`${rdfs}domain`), namedNode(`${ns4}MilkButterCreamYogurtCheeseEggsSubstitutes`), namedNode(ns4)),
        quad(namedNode(`${ns4}isHomogenised`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isInstant`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isInstant`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isInstant`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isInstant`), namedNode(`${rdfs}comment`), literal(`Determines whether the product is instant.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isInstant`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isInstant`), namedNode(`${rdfs}label`), literal(`Is Instant`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isInstant`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}isInstant`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isMaternity`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isMaternity`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isMaternity`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isMaternity`), namedNode(`${rdfs}comment`), literal(`Indicates, with reference to the product branding, labelling or packaging, the descriptive term that is used by the product manufacturer to identify if the product is intended as maternity wear.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isMaternity`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isMaternity`), namedNode(`${rdfs}label`), literal(`Is Maternity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isMaternity`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Clothing`), namedNode(ns4)),
        quad(namedNode(`${ns4}isMaternity`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyAvailableThroughRetailer`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyAvailableThroughRetailer`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyAvailableThroughRetailer`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyAvailableThroughRetailer`), namedNode(`${rdfs}comment`), literal(`If specified and set to true, the discount is only available through the retailer making the offer.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyAvailableThroughRetailer`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyAvailableThroughRetailer`), namedNode(`${rdfs}label`), literal(`Only Available Through Retailer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyAvailableThroughRetailer`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyAvailableThroughRetailer`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithMailingListSignup`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithMailingListSignup`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithMailingListSignup`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithMailingListSignup`), namedNode(`${rdfs}comment`), literal(`If specified and set to true, the discount is only available for customers who have signed up to the retailer's mailing list.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithMailingListSignup`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithMailingListSignup`), namedNode(`${rdfs}label`), literal(`Only For Retailer Mailing List Members`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithMailingListSignup`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithMailingListSignup`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithPaymentCard`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithPaymentCard`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithPaymentCard`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithPaymentCard`), namedNode(`${rdfs}comment`), literal(`If specified, the discount is only available when purchasing using one of the specified payment card types.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithPaymentCard`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithPaymentCard`), namedNode(`${rdfs}label`), literal(`Only With Payment Card`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithPaymentCard`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithPaymentCard`), namedNode(`${rdfs}range`), namedNode(`${ns4}PaymentMethod`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithRetailerLoyaltyCard`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithRetailerLoyaltyCard`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithRetailerLoyaltyCard`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithRetailerLoyaltyCard`), namedNode(`${rdfs}comment`), literal(`If specified and set to true, the discount is only available for holders of the retailer's own loyalty card.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithRetailerLoyaltyCard`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithRetailerLoyaltyCard`), namedNode(`${rdfs}label`), literal(`Only For Retailer Loyalty Cardholders`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithRetailerLoyaltyCard`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithRetailerLoyaltyCard`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithRetailerPaymentCard`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithRetailerPaymentCard`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithRetailerPaymentCard`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithRetailerPaymentCard`), namedNode(`${rdfs}comment`), literal(`If specified and set to true, the discount is only available for holders of the retailer's own store payment card.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithRetailerPaymentCard`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithRetailerPaymentCard`), namedNode(`${rdfs}label`), literal(`Only For Retailer Payment Cardholders`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithRetailerPaymentCard`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}isOnlyWithRetailerPaymentCard`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(ns4)),
        quad(namedNode(`${ns4}isPatterned`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isPatterned`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isPatterned`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isPatterned`), namedNode(`${rdfs}comment`), literal(`The descriptive term that is used by the product manufacturer to identify whether or not the product has a patterned design.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isPatterned`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isPatterned`), namedNode(`${rdfs}label`), literal(`Is Patterned`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isPatterned`), namedNode(`${rdfs}domain`), namedNode(`${ns4}WearableProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}isPatterned`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isPittedStoned`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isPittedStoned`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isPittedStoned`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isPittedStoned`), namedNode(`${rdfs}comment`), literal(`The descriptive term that is used by the product manufacturer to identify whether or not a fruit or vegetable product has been de-stoned or pitted prior to being offered for sale.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isPittedStoned`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isPittedStoned`), namedNode(`${rdfs}label`), literal(`Is Pitted Stoned`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isPittedStoned`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FruitsVegetables`), namedNode(ns4)),
        quad(namedNode(`${ns4}isPittedStoned`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isProductRecalled`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isProductRecalled`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isProductRecalled`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isProductRecalled`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isProductRecalled`), namedNode(`${rdfs}comment`), literal(`An indicator for the product to determine if the Manufacturer or Supplier has recalled the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isProductRecalled`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isProductRecalled`), namedNode(`${rdfs}label`), literal(`Is Product Recalled`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isProductRecalled`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}isProductRecalled`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(ns4)),
        quad(namedNode(`${ns4}isPromoterExclusiveOffer`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isPromoterExclusiveOffer`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isPromoterExclusiveOffer`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isPromoterExclusiveOffer`), namedNode(`${rdfs}comment`), literal(`Determines whether the offer is only provided by the promoter`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isPromoterExclusiveOffer`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isPromoterExclusiveOffer`), namedNode(`${rdfs}label`), literal(`Is Promoter Exclusive Offer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isPromoterExclusiveOffer`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}isPromoterExclusiveOffer`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(ns4)),
        quad(namedNode(`${ns4}isRindEdible`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isRindEdible`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isRindEdible`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isRindEdible`), namedNode(`${rdfs}comment`), literal(`An indicator whether or not the cheese rind is edible. Some cheeses are coated in plastic or their surface is treated with other traditional substances to increase their shelf life. This can result in the rind no longer being edible.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isRindEdible`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isRindEdible`), namedNode(`${rdfs}label`), literal(`Is Rind Edible`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isRindEdible`), namedNode(`${rdfs}domain`), namedNode(`${ns4}MilkButterCreamYogurtCheeseEggsSubstitutes`), namedNode(ns4)),
        quad(namedNode(`${ns4}isRindEdible`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isSeedless`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isSeedless`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isSeedless`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isSeedless`), namedNode(`${rdfs}comment`), literal(`Determines whether the product is seedless as grown.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isSeedless`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isSeedless`), namedNode(`${rdfs}label`), literal(`Is Seedless`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isSeedless`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FruitsVegetables`), namedNode(ns4)),
        quad(namedNode(`${ns4}isSeedless`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isShelledPeeled`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isShelledPeeled`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isShelledPeeled`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isShelledPeeled`), namedNode(`${rdfs}comment`), literal(`The descriptive term that is used by the product manufacturer to identify whether or not the product or its contents have been shelled/peeled prior to being offered for sale.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isShelledPeeled`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isShelledPeeled`), namedNode(`${rdfs}label`), literal(`Is Shelled or Peeled`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isShelledPeeled`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FruitsVegetables`), namedNode(ns4)),
        quad(namedNode(`${ns4}isShelledPeeled`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isSliced`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isSliced`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isSliced`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isSliced`), namedNode(`${rdfs}comment`), literal(`Determines whether the product comes pre-sliced.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isSliced`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isSliced`), namedNode(`${rdfs}label`), literal(`Is Sliced`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isSliced`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}isSliced`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isThermal`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isThermal`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isThermal`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isThermal`), namedNode(`${rdfs}comment`), literal(`The descriptive term that is used to identify whether the product is thermal.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isThermal`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isThermal`), namedNode(`${rdfs}label`), literal(`Is Thermal`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isThermal`), namedNode(`${rdfs}domain`), namedNode(`${ns4}WearableProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}isThermal`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isVintage`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isVintage`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isVintage`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isVintage`), namedNode(`${rdfs}comment`), literal(`Identifies whether the product makes claim to being vintage.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isVintage`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isVintage`), namedNode(`${rdfs}label`), literal(`Is Vintage`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isVintage`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Beverage`), namedNode(ns4)),
        quad(namedNode(`${ns4}isVintage`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isWashedReadyToEat`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isWashedReadyToEat`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isWashedReadyToEat`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isWashedReadyToEat`), namedNode(`${rdfs}comment`), literal(`Determines whether product has been prewashed and is ready to eat.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isWashedReadyToEat`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isWashedReadyToEat`), namedNode(`${rdfs}label`), literal(`Is Washed Ready To Eat`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isWashedReadyToEat`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FruitsVegetables`), namedNode(ns4)),
        quad(namedNode(`${ns4}isWashedReadyToEat`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isWaterproof`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isWaterproof`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isWaterproof`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isWaterproof`), namedNode(`${rdfs}comment`), literal(`The descriptive term that is used to identify whether or not the product claims to provide waterproofing to the applied surface.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isWaterproof`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isWaterproof`), namedNode(`${rdfs}label`), literal(`Is Waterproof`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isWaterproof`), namedNode(`${rdfs}domain`), namedNode(`${ns4}WearableProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}isWaterproof`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}isWearableItemDisposable`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}isWearableItemDisposable`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}isWearableItemDisposable`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}isWearableItemDisposable`), namedNode(`${rdfs}comment`), literal(`Identifies whether or not the product is intended to be disposed of after single use or a limited period of use.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isWearableItemDisposable`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}isWearableItemDisposable`), namedNode(`${rdfs}label`), literal(`Is Wearable Item Disposable`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}isWearableItemDisposable`), namedNode(`${rdfs}domain`), namedNode(`${ns4}WearableProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}isWearableItemDisposable`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}itemOffered`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}itemOffered`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}itemOffered`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}itemOffered`), namedNode(`${rdfs}comment`), literal(`The product included in the offer.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}itemOffered`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}itemOffered`), namedNode(`${rdfs}label`), literal(`Item Offered`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}itemOffered`), namedNode(`${skos}exactMatch`), namedNode(`${schema}itemOffered`), namedNode(ns4)),
        quad(namedNode(`${ns4}itemOffered`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}itemOffered`), namedNode(`${rdfs}range`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}juiceContentPercent`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}juiceContentPercent`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}juiceContentPercent`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}juiceContentPercent`), namedNode(`${rdfs}comment`), literal(`The fruit juice content of the product expressed as a percentage.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}juiceContentPercent`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}juiceContentPercent`), namedNode(`${rdfs}label`), literal(`Juice Content Percent`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}juiceContentPercent`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}juiceContentPercent`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}latitude`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}latitude`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}latitude`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}latitude`), namedNode(`${rdfs}comment`), literal(`Angular distance North or South from the earth's equator measured through 90 degrees.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}latitude`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}latitude`), namedNode(`${rdfs}label`), literal(`Latitude`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}latitude`), namedNode(`${skos}exactMatch`), namedNode(`${schema}latitude`), namedNode(ns4)),
        quad(namedNode(`${ns4}latitude`), namedNode(`${rdfs}domain`), namedNode(`${ns4}GeoCoordinates`), namedNode(ns4)),
        quad(namedNode(`${ns4}latitude`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}latitude`), namedNode(`${skos}relatedMatch`), namedNode(`${wgs}lat`), namedNode(ns4)),
        quad(namedNode(`${ns4}leaveReview`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}leaveReview`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}leaveReview`), namedNode(`${rdfs}comment`), literal(`A link through which a review can be added.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}leaveReview`), namedNode(`${rdfs}label`), literal(`Leave a review`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}leaveReview`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}leaveReview`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}leaveReview`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}leaveReview`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}location`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}location`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}location`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}location`), namedNode(`${rdfs}comment`), literal(`The place associated with an organization.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}location`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}location`), namedNode(`${rdfs}label`), literal(`Has Location`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}location`), namedNode(`${skos}exactMatch`), namedNode(`${schema}location`), namedNode(ns4)),
        quad(namedNode(`${ns4}location`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Organization`), namedNode(ns4)),
        quad(namedNode(`${ns4}location`), namedNode(`${rdfs}range`), namedNode(`${ns4}Place`), namedNode(ns4)),
        quad(namedNode(`${ns4}longitude`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}longitude`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}longitude`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}longitude`), namedNode(`${rdfs}comment`), literal(`The arc or portion of the earth's equator intersected between the meridian of a given place and the prime meridian and expressed in degrees`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}longitude`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}longitude`), namedNode(`${rdfs}label`), literal(`Longitude`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}longitude`), namedNode(`${skos}exactMatch`), namedNode(`${schema}longitude`), namedNode(ns4)),
        quad(namedNode(`${ns4}longitude`), namedNode(`${rdfs}domain`), namedNode(`${ns4}GeoCoordinates`), namedNode(ns4)),
        quad(namedNode(`${ns4}longitude`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}longitude`), namedNode(`${skos}relatedMatch`), namedNode(`${wgs}long`), namedNode(ns4)),
        quad(namedNode(`${ns4}magnesiumPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}magnesiumPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}magnesiumPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}magnesiumPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Magnesium per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}magnesiumPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}magnesiumPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Magnesium Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}magnesiumPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}magnesiumPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}makesOffer`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}makesOffer`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}makesOffer`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}makesOffer`), namedNode(`${rdfs}comment`), literal(`An offer made by an organization.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}makesOffer`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}makesOffer`), namedNode(`${rdfs}label`), literal(`Makes Offer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}makesOffer`), namedNode(`${skos}exactMatch`), namedNode(`${schema}makesOffer`), namedNode(ns4)),
        quad(namedNode(`${ns4}makesOffer`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Organization`), namedNode(ns4)),
        quad(namedNode(`${ns4}makesOffer`), namedNode(`${rdfs}range`), namedNode(`${ns4}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}manganesePerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}manganesePerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}manganesePerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}manganesePerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Manganese per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}manganesePerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}manganesePerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Manganese Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}manganesePerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}manganesePerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturer`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturer`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturer`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturer`), namedNode(`${rdfs}comment`), literal(`The organization that produces the item.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturer`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturer`), namedNode(`${rdfs}label`), literal(`Has Manufacturer`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturer`), namedNode(`${skos}exactMatch`), namedNode(`${schema}manufacturer`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturer`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturer`), namedNode(`${rdfs}range`), namedNode(`${ns4}Organization`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturerPreparationCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturerPreparationCode`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturerPreparationCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturerPreparationCode`), namedNode(`${rdfs}comment`), literal(`Code indicating the preparation methods that a manufacturer has used in the manufacturing of a product for example DEEP_FRY.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturerPreparationCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturerPreparationCode`), namedNode(`${rdfs}label`), literal(`Manufacturer Preparation Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturerPreparationCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodAndBeveragePreparationInformation`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturerPreparationCode`), namedNode(`${rdfs}range`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturersWarranty`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturersWarranty`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturersWarranty`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturersWarranty`), namedNode(`${rdfs}comment`), literal(`The warranty associated with the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturersWarranty`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturersWarranty`), namedNode(`${rdfs}label`), literal(`Has Manufacturer's Warranty`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturersWarranty`), namedNode(`${skos}broadMatch`), namedNode(`${schema}warranty`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturersWarranty`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturersWarranty`), namedNode(`${rdfs}range`), namedNode(`${ns4}WarrantyPromise`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturersWarranty`), namedNode(`${rdfs}seeAlso`), namedNode(`${schema}warranty`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturingPlant`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturingPlant`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturingPlant`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturingPlant`), namedNode(`${rdfs}comment`), literal(`A physical location consisting of one or more buildings with facilities for manufacturing.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturingPlant`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturingPlant`), namedNode(`${rdfs}label`), literal(`Has Manufacturing Plant`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturingPlant`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}manufacturingPlant`), namedNode(`${rdfs}range`), namedNode(`${ns4}Organization`), namedNode(ns4)),
        quad(namedNode(`${ns4}massPerUnitArea`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}massPerUnitArea`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}massPerUnitArea`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}massPerUnitArea`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}massPerUnitArea`), namedNode(`${rdfs}comment`), literal(`The mass per unit area of a particular product`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}massPerUnitArea`), namedNode(`${rdfs}comment`), literal(`The mass per unit area of the item. This can be given using a number of different AI ranges that depend on the units in which the mass and area are measured.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}massPerUnitArea`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}massPerUnitArea`), namedNode(`${rdfs}label`), literal(`Mass Per Unit Area`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}massPerUnitArea`), namedNode(`${rdfs}label`), literal(`Mass per unit area`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}massPerUnitArea`), namedNode(`${skos}prefLabel`), literal(`337n`), namedNode(ns4)),
        quad(namedNode(`${ns4}massPerUnitArea`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}massPerUnitArea`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}massPerUnitArea`), namedNode(`${skos}altLabel`), literal(`Mass Per Unit Area`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}massPerUnitArea`), namedNode(`${skos}altLabel`), literal(`Mass per unit area`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}masterData`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}masterData`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}masterData`), namedNode(`${rdfs}comment`), literal(`A link to a source of structured master data for the entity. This is typically for B2B applications.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}masterData`), namedNode(`${rdfs}label`), literal(`Master data`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}masterData`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}masterData`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}masterData`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}masterData`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}maturationMethod`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}maturationMethod`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}maturationMethod`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}maturationMethod`), namedNode(`${rdfs}comment`), literal(`The method of maturity for the item for example tree ripened or jet fresh.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}maturationMethod`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}maturationMethod`), namedNode(`${rdfs}label`), literal(`Maturation Method Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}maturationMethod`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FruitsVegetables`), namedNode(ns4)),
        quad(namedNode(`${ns4}maturationMethod`), namedNode(`${rdfs}range`), namedNode(`${ns4}MaturationMethodCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}maxPrice`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}maxPrice`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}maxPrice`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}maxPrice`), namedNode(`${rdfs}comment`), literal(`Provides a maximum price value as a floating-point numeric value that is qualified by the corresponding currency. See also gs1:priceCurrency`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}maxPrice`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}maxPrice`), namedNode(`${rdfs}label`), literal(`Maximum Price`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}maxPrice`), namedNode(`${skos}exactMatch`), namedNode(`${schema}maxPrice`), namedNode(ns4)),
        quad(namedNode(`${ns4}maxPrice`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}maxPrice`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}maxPrice`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns4}priceCurrency`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumDiscountAmount`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumDiscountAmount`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumDiscountAmount`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumDiscountAmount`), namedNode(`${rdfs}comment`), literal(`Links to a gs1:PriceSpecification that indicates in terms of an amount and specified currency, the maximum discount on the sales price associated with a particular gs1:Discount. This property can be used to express 'up to $10 off'.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumDiscountAmount`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumDiscountAmount`), namedNode(`${rdfs}label`), literal(`Maximum Discount Amount`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumDiscountAmount`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumDiscountAmount`), namedNode(`${rdfs}range`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumDiscountPercentage`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumDiscountPercentage`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumDiscountPercentage`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumDiscountPercentage`), namedNode(`${rdfs}comment`), literal(`A floating-point value indicating a maximum percentage discount on the sales price associated with a particular gs1:Discount.  This property can be used to express 'up to 15% discount'.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumDiscountPercentage`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumDiscountPercentage`), namedNode(`${rdfs}label`), literal(`Maximum Discount Percentage`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumDiscountPercentage`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumDiscountPercentage`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumOptimumConsumptionTemperature`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumOptimumConsumptionTemperature`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumOptimumConsumptionTemperature`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumOptimumConsumptionTemperature`), namedNode(`${rdfs}comment`), literal(`The upper limit drinking temperature of the optimum range of the drinking temperature. The optimum range of the drinking temperature is a recommendation and is based on the experience of the individual producer. Allows for the representation of the same value in different units of measure but not multiple values.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumOptimumConsumptionTemperature`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumOptimumConsumptionTemperature`), namedNode(`${rdfs}label`), literal(`Maximum Optimum Consumption Temperature`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumOptimumConsumptionTemperature`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodAndBeveragePreparationInformation`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumOptimumConsumptionTemperature`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumQualifyingItems`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumQualifyingItems`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumQualifyingItems`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumQualifyingItems`), namedNode(`${rdfs}comment`), literal(`Specifies the maximum number of items that qualify for a particular gs1:Discount. This property can be used to express 'maximum N items per customer'.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumQualifyingItems`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumQualifyingItems`), namedNode(`${rdfs}label`), literal(`Maximum Qualifying Items`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumQualifyingItems`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumQualifyingItems`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumQualifyingSpend`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumQualifyingSpend`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumQualifyingSpend`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumQualifyingSpend`), namedNode(`${rdfs}comment`), literal(`Links to a gs1:PriceSpecification that indicates in terms of an amount and specified currency, the maximum spend that qualifies for a particular gs1:Discount. This property can be used to express 'for purchases of up to $100'.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumQualifyingSpend`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumQualifyingSpend`), namedNode(`${rdfs}label`), literal(`Maximum Qualifying Spend`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumQualifyingSpend`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}maximumQualifyingSpend`), namedNode(`${rdfs}range`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}meatPoultryType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}meatPoultryType`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}meatPoultryType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}meatPoultryType`), namedNode(`${rdfs}comment`), literal(`The fish, meat, or poultry type for this food and beverage item.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}meatPoultryType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}meatPoultryType`), namedNode(`${rdfs}label`), literal(`Meat Poultry Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}meatPoultryType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}MeatPoultry`), namedNode(ns4)),
        quad(namedNode(`${ns4}meatPoultryType`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}minPrice`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}minPrice`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}minPrice`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}minPrice`), namedNode(`${rdfs}comment`), literal(`Provides a minimum price value as a floating-point numeric value that is qualified by the corresponding currency. See also gs1:priceCurrency`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}minPrice`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}minPrice`), namedNode(`${rdfs}label`), literal(`Minimum Price`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}minPrice`), namedNode(`${skos}exactMatch`), namedNode(`${schema}minPrice`), namedNode(ns4)),
        quad(namedNode(`${ns4}minPrice`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}minPrice`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}minPrice`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns4}priceCurrency`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumDiscountAmount`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumDiscountAmount`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumDiscountAmount`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumDiscountAmount`), namedNode(`${rdfs}comment`), literal(`Links to a gs1:PriceSpecification that indicates in terms of an amount and specified currency, the minimum discount on the sales price associated with a particular gs1:Discount. This property can be used to express 'at least $10 off'.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumDiscountAmount`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumDiscountAmount`), namedNode(`${rdfs}label`), literal(`Minimum Discount Amount`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumDiscountAmount`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumDiscountAmount`), namedNode(`${rdfs}range`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumDiscountPercentage`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumDiscountPercentage`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumDiscountPercentage`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumDiscountPercentage`), namedNode(`${rdfs}comment`), literal(`A floating-point value indicating a minimum percentage discount on the sales price associated with a particular gs1:Discount.  This property can be used to express 'at least 15% discount'.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumDiscountPercentage`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumDiscountPercentage`), namedNode(`${rdfs}label`), literal(`Minimum Discount Percentage`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumDiscountPercentage`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumDiscountPercentage`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumFishContent`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumFishContent`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumFishContent`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumFishContent`), namedNode(`${rdfs}comment`), literal(`The minimum amount of fish contained in a food and beverage product expressed as a measurement.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumFishContent`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumFishContent`), namedNode(`${rdfs}label`), literal(`Minimum Fish Content`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumFishContent`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Seafood`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumFishContent`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumMeatPoultryContent`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumMeatPoultryContent`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumMeatPoultryContent`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumMeatPoultryContent`), namedNode(`${rdfs}comment`), literal(`The minimum amount of fish, meat or poultry contained in a food and beverage product expressed as a measurement.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumMeatPoultryContent`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumMeatPoultryContent`), namedNode(`${rdfs}label`), literal(`Minimum Meat Poultry Content`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumMeatPoultryContent`), namedNode(`${rdfs}domain`), namedNode(`${ns4}MeatPoultry`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumMeatPoultryContent`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumOptimumConsumptionTemperature`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumOptimumConsumptionTemperature`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumOptimumConsumptionTemperature`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumOptimumConsumptionTemperature`), namedNode(`${rdfs}comment`), literal(`The lower limit drinking temperature of the optimum range of the drinking temperature. The optimum range of the drinking temperature is a recommendation and is based on the experience of the individual producer. Allows for the representation of the same value in different units of measure but not multiple values.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumOptimumConsumptionTemperature`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumOptimumConsumptionTemperature`), namedNode(`${rdfs}label`), literal(`Minimum Optimum Consumption Temperature`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumOptimumConsumptionTemperature`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodAndBeveragePreparationInformation`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumOptimumConsumptionTemperature`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumQualifyingItems`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumQualifyingItems`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumQualifyingItems`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumQualifyingItems`), namedNode(`${rdfs}comment`), literal(`Specifies the minimum number of items that must be purchased to qualify for a particular gs1:Discount. This property can be used to express 'if you buy at least N items'.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumQualifyingItems`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumQualifyingItems`), namedNode(`${rdfs}label`), literal(`Minimum Qualifying Items`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumQualifyingItems`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumQualifyingItems`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumQualifyingSpend`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumQualifyingSpend`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumQualifyingSpend`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumQualifyingSpend`), namedNode(`${rdfs}comment`), literal(`Links to a gs1:PriceSpecification that indicates in terms of an amount and specified currency, the minimum spend required to qualify for a particular gs1:Discount. This property can be used to express 'if you spend at least $100'.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumQualifyingSpend`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumQualifyingSpend`), namedNode(`${rdfs}label`), literal(`Minimum Qualifying Spend`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumQualifyingSpend`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}minimumQualifyingSpend`), namedNode(`${rdfs}range`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}molybdenumPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}molybdenumPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}molybdenumPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}molybdenumPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Molybdenum per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}molybdenumPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}molybdenumPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Molybdenum Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}molybdenumPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}molybdenumPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}monounsaturatedFatPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}monounsaturatedFatPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}monounsaturatedFatPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}monounsaturatedFatPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Monounsaturated fat per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}monounsaturatedFatPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}monounsaturatedFatPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Monounsaturated Fat Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}monounsaturatedFatPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}monounsaturatedFatPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}netArea`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}netArea`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}netArea`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}netArea`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}netArea`), namedNode(`${rdfs}comment`), literal(`The net area of a product (excluding its packaging)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}netArea`), namedNode(`${rdfs}comment`), literal(`The net area of the item. This can be given using a number of different AI ranges that depend on the units in which the area is measured.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}netArea`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}netArea`), namedNode(`${rdfs}label`), literal(`Net Area`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}netArea`), namedNode(`${rdfs}label`), literal(`Net area`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}netArea`), namedNode(`${skos}prefLabel`), literal(`314n, 350n, 351n`), namedNode(ns4)),
        quad(namedNode(`${ns4}netArea`), namedNode(`${skos}prefLabel`), literal(`314n, 350n, 351n, 352n`), namedNode(ns4)),
        quad(namedNode(`${ns4}netArea`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}netArea`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}netArea`), namedNode(`${skos}altLabel`), literal(`Net Area`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}netArea`), namedNode(`${skos}altLabel`), literal(`Net area`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}netContent`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}netContent`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}netContent`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}netContent`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}netContent`), namedNode(`${rdfs}comment`), literal(`The quantity of the product contained by a package, usually as claimed on the label. Indicates the net content of the total product. For fixed value products use the value claimed on the package, to avoid variable fill rate issue that arises with some product which are sold by volume or weight, and whose actual content may vary slightly from batch to batch.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}netContent`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}netContent`), namedNode(`${rdfs}label`), literal(`Net content`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}netContent`), namedNode(`${skos}prefLabel`), literal(`360n, 361n, 364n, 365n, 366n`), namedNode(ns4)),
        quad(namedNode(`${ns4}netContent`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}netContent`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}netContent`), namedNode(`${skos}altLabel`), literal(`Net content`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}netWeight`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}netWeight`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}netWeight`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}netWeight`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}netWeight`), namedNode(`${rdfs}comment`), literal(`Used to identify the net weight of the product. Net Weight excludes all packaging material, including the packaging material of all lower-level GTINs. Example:11.5 kgm.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}netWeight`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}netWeight`), namedNode(`${rdfs}label`), literal(`Net weight`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}netWeight`), namedNode(`${skos}prefLabel`), literal(`310n, 320n, 356n, 357n`), namedNode(ns4)),
        quad(namedNode(`${ns4}netWeight`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}netWeight`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}netWeight`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}weight`), namedNode(ns4)),
        quad(namedNode(`${ns4}netWeight`), namedNode(`${skos}altLabel`), literal(`Net weight`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}niacinPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}niacinPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}niacinPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}niacinPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Niacin per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}niacinPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}niacinPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Niacin Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}niacinPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}niacinPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsPerPackage`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsPerPackage`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsPerPackage`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsPerPackage`), namedNode(`${rdfs}comment`), literal(`The total number of servings contained in the package.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsPerPackage`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsPerPackage`), namedNode(`${rdfs}label`), literal(`Number of Servings Per Package`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsPerPackage`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsPerPackage`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsPerPackageMeasurementPrecision`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsPerPackageMeasurementPrecision`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsPerPackageMeasurementPrecision`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsPerPackageMeasurementPrecision`), namedNode(`${rdfs}comment`), literal(`Code indicating whether the number of servings per package is exact or approximate.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsPerPackageMeasurementPrecision`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsPerPackageMeasurementPrecision`), namedNode(`${rdfs}label`), literal(`Number of Servings Per Package Measurement Precision`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsPerPackageMeasurementPrecision`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsPerPackageMeasurementPrecision`), namedNode(`${rdfs}range`), namedNode(`${ns4}MeasurementPrecisionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsRangeDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsRangeDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsRangeDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsRangeDescription`), namedNode(`${rdfs}comment`), literal(`A free text field specifying a range for the number of servings contained in the package.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsRangeDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsRangeDescription`), namedNode(`${rdfs}label`), literal(`Number of Servings Range Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsRangeDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}numberOfServingsRangeDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientBasisQuantity`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientBasisQuantity`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientBasisQuantity`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientBasisQuantity`), namedNode(`${rdfs}comment`), literal(`Quantity on which the nutrient information has been based; for example, per 100 grams. When specified, nutrientBasisQuantity establishes the basis for all contained nutrient records.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientBasisQuantity`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientBasisQuantity`), namedNode(`${rdfs}label`), literal(`Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientBasisQuantity`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientBasisQuantity`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientBasisQuantityType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientBasisQuantityType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientBasisQuantityType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientBasisQuantityType`), namedNode(`${rdfs}comment`), literal(`The type of quantity specified in the nutrientBasisQuantity for example measurement, serving size, or container. This is used in conjunction with the nutrientBasisQuantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientBasisQuantityType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientBasisQuantityType`), namedNode(`${rdfs}label`), literal(`Nutrient Basis Quantity Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientBasisQuantityType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientBasisQuantityType`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutrientBasisQuantityCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientMeasurementPrecision`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientMeasurementPrecision`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientMeasurementPrecision`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientMeasurementPrecision`), namedNode(`${rdfs}comment`), literal(`The Code indicating whether the specified nutrient content is exact or approximate.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientMeasurementPrecision`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientMeasurementPrecision`), namedNode(`${rdfs}label`), literal(`Nutrient Measurement Precision`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientMeasurementPrecision`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutrientMeasurementPrecision`), namedNode(`${rdfs}range`), namedNode(`${ns4}MeasurementPrecisionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalClaim`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalClaim`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalClaim`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalClaim`), namedNode(`${rdfs}comment`), literal(`Code indicating a nutritional claim applicable to the product, for example FAT_FREE.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalClaim`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalClaim`), namedNode(`${rdfs}label`), literal(`Nutritional Claim Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalClaim`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalClaim`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionalClaimTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalClaimStatement`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalClaimStatement`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalClaimStatement`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalClaimStatement`), namedNode(`${rdfs}comment`), literal(`Free text field for any additional nutritional claims.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalClaimStatement`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalClaimStatement`), namedNode(`${rdfs}label`), literal(`Nutritional Claim Statement`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalClaimStatement`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalClaimStatement`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalInfo`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalInfo`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalInfo`), namedNode(`${rdfs}comment`), literal(`A link to nutritional facts about the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalInfo`), namedNode(`${rdfs}label`), literal(`Nutritional Information`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalInfo`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalInfo`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalInfo`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}nutritionalInfo`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDescription`), namedNode(`${rdfs}comment`), literal(`A description of the offer including goods or services offered for sale or use.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDescription`), namedNode(`${rdfs}label`), literal(`Offer Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDescription`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}description`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDescription`), namedNode(`${skos}related`), namedNode(`${schema}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDiscount`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDiscount`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDiscount`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDiscount`), namedNode(`${rdfs}comment`), literal(`A discount associated with an offer.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDiscount`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDiscount`), namedNode(`${rdfs}label`), literal(`Offer Discount`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDiscount`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerDiscount`), namedNode(`${rdfs}range`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionType`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionType`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionType`), namedNode(`${rdfs}comment`), literal(`A code indicating the type of redemptions that apply to the offer, for example single use.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionType`), namedNode(`${rdfs}label`), literal(`Offer Redemption Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionType`), namedNode(`${rdfs}range`), namedNode(`${ns4}OfferRedemptionTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionURL`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionURL`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionURL`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionURL`), namedNode(`${rdfs}comment`), literal(`The URL where the offer seeker will need to go in order to redeem the offer for an online redemption.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionURL`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionURL`), namedNode(`${rdfs}label`), literal(`Offer Redemption URL`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionURL`), namedNode(`${skos}exactMatch`), namedNode(`${schema}itemOffered`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionURL`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRedemptionURL`), namedNode(`${rdfs}range`), namedNode(`${ns4}ReferencedFileDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRestrictionDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRestrictionDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRestrictionDescription`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRestrictionDescription`), namedNode(`${rdfs}comment`), literal(`A description of what the offer is restricted to, relative to all other offerings by the issuer, for example payment restrictions, subscription required, new customers only.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRestrictionDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRestrictionDescription`), namedNode(`${rdfs}label`), literal(`Offer Restriction Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRestrictionDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRestrictionDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRestrictionDescription`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}name`), namedNode(ns4)),
        quad(namedNode(`${ns4}offerRestrictionDescription`), namedNode(`${skos}related`), namedNode(`${schema}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaim`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaim`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaim`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaim`), namedNode(`${rdfs}comment`), literal(`Relates to an organic claim about the product`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaim`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaim`), namedNode(`${rdfs}label`), literal(`Has Organic Claim`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaim`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaim`), namedNode(`${rdfs}range`), namedNode(`${ns4}OrganicClaimDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaimAgency`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaimAgency`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaimAgency`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaimAgency`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaimAgency`), namedNode(`${rdfs}comment`), literal(`A governing body that creates and maintains standards related to organic products.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaimAgency`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaimAgency`), namedNode(`${rdfs}label`), literal(`Organic Claim Agency Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaimAgency`), namedNode(`${rdfs}domain`), namedNode(`${ns4}OrganicClaimDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}organicClaimAgency`), namedNode(`${rdfs}range`), namedNode(`${ns4}OrganicClaimAgencyCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}organicPercentClaim`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}organicPercentClaim`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}organicPercentClaim`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}organicPercentClaim`), namedNode(`${rdfs}comment`), literal(`The percent of actual organic materials per weight of the product. This is usually claimed on the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}organicPercentClaim`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}organicPercentClaim`), namedNode(`${rdfs}label`), literal(`Organic Percent Claim`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}organicPercentClaim`), namedNode(`${rdfs}domain`), namedNode(`${ns4}OrganicClaimDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}organicPercentClaim`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationName`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationName`), namedNode(`${rdfs}comment`), literal(`The name of the organization expressed in text.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationName`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationName`), namedNode(`${rdfs}label`), literal(`Organization Name`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationName`), namedNode(`${rdfs}domain`), blankNodes[4], namedNode(ns4)),
        quad(namedNode(`${ns4}organizationName`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}name`), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationName`), namedNode(`${skos}related`), namedNode(`${schema}Organization`), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationName`), namedNode(`${skos}related`), namedNode(`${schema}PostalAddress`), namedNode(ns4)),
        quad(blankNodes[4], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(ns4)),
        quad(blankNodes[4], namedNode(`${owl}unionOf`), blankNodes[5], namedNode(ns4)),
        quad(namedNode(`${ns4}organizationRole`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationRole`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationRole`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationRole`), namedNode(`${rdfs}comment`), literal(`Code indicating an organization role. Allowed code values are specified in OrganizationalRole code list.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationRole`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationRole`), namedNode(`${rdfs}label`), literal(`Organization Role`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationRole`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Organization`), namedNode(ns4)),
        quad(namedNode(`${ns4}organizationRole`), namedNode(`${rdfs}range`), namedNode(`${ns4}OrganizationRoleType`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDepth`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDepth`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDepth`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDepth`), namedNode(`${rdfs}comment`), literal(`The depth of the product out of its packaging, as measured according to the GS1 Package Measurement Rules. See http://www.gs1.org/package-measurement-rules-implementation-guide for more details.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDepth`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDepth`), namedNode(`${rdfs}label`), literal(`Out of Package Depth`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDepth`), namedNode(`${skos}broadMatch`), namedNode(`${schema}depth`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDepth`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDepth`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDiameter`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDiameter`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDiameter`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDiameter`), namedNode(`${rdfs}comment`), literal(`The measurement of the diameter of the product out of its package at its largest point. For example, 165 MMT.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDiameter`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDiameter`), namedNode(`${rdfs}label`), literal(`Out of Package Diameter`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDiameter`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageDiameter`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageHeight`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageHeight`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageHeight`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageHeight`), namedNode(`${rdfs}comment`), literal(`The height of the product out of the package, as measured according to the GS1 Package Measurement Rules. See http://www.gs1.org/package-measurement-rules-implementation-guide for more details.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageHeight`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageHeight`), namedNode(`${rdfs}label`), literal(`Out of Package Height`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageHeight`), namedNode(`${skos}broadMatch`), namedNode(`${schema}height`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageHeight`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageHeight`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageWidth`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageWidth`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageWidth`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageWidth`), namedNode(`${rdfs}comment`), literal(`The width of the product out of the package, as measured according to the GS1 Package Measurement Rules. See http://www.gs1.org/package-measurement-rules-implementation-guide for more details.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageWidth`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageWidth`), namedNode(`${rdfs}label`), literal(`Out of Package Width`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageWidth`), namedNode(`${skos}broadMatch`), namedNode(`${schema}width`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageWidth`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}outOfPackageWidth`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}packaging`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}packaging`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}packaging`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}packaging`), namedNode(`${rdfs}comment`), literal(`Details on the packaging for a product including type, weight and materials.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packaging`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}packaging`), namedNode(`${rdfs}label`), literal(`Has Packaging`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packaging`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}packaging`), namedNode(`${rdfs}range`), namedNode(`${ns4}PackagingDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingDate`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingDate`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingDate`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingDate`), namedNode(`${rdfs}comment`), literal(`The packaging date is the date when the goods were packed as determined by the packager. The date may refer to the trade item itself or to items contained.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingDate`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingDate`), namedNode(`${rdfs}label`), literal(`Date of packaging`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingDate`), namedNode(`${rdfs}label`), literal(`Packaging Date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingDate`), namedNode(`${skos}prefLabel`), literal(`13`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingDate`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingDate`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingDate`), namedNode(`${rdfs}range`), namedNode(`${xsd}date`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingDate`), namedNode(`${skos}altLabel`), literal(`Date of packaging`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingDate`), namedNode(`${skos}altLabel`), literal(`Packaging Date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingDate`), namedNode(`${skos}notation`), literal(`13`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingFeature`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingFeature`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingFeature`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingFeature`), namedNode(`${rdfs}comment`), literal(`Code indicating a feature that facilitates the usage of the product by the consumer, for example a handle. Packaging features do not affect the core composition of the packaging type nor modify its usage.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingFeature`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingFeature`), namedNode(`${rdfs}label`), literal(`Packaging Feature`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingFeature`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PackagingDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingFeature`), namedNode(`${rdfs}range`), namedNode(`${ns4}PackagingFeatureCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingFunction`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingFunction`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingFunction`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingFunction`), namedNode(`${rdfs}comment`), literal(`Code indicating specific functionality for packaging resulting from specific processes or features present in the packaging type,for example, ANTI_TAMPERING.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingFunction`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingFunction`), namedNode(`${rdfs}label`), literal(`Packaging Function`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingFunction`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PackagingDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingFunction`), namedNode(`${rdfs}range`), namedNode(`${ns4}PackagingFunctionCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedDietAllergenType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedDietAllergenType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedDietAllergenType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedDietAllergenType`), namedNode(`${rdfs}comment`), literal(`Indication of which dietary or allergen marks are on the package.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedDietAllergenType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedDietAllergenType`), namedNode(`${rdfs}label`), literal(`Packaging Marked Diet Allergen Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedDietAllergenType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedDietAllergenType`), namedNode(`${rdfs}range`), namedNode(`${ns4}PackagingMarkedDietAllergenCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedFreeFrom`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedFreeFrom`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedFreeFrom`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedFreeFrom`), namedNode(`${rdfs}comment`), literal(`Indication of the food ingredients that the package is marked free from.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedFreeFrom`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedFreeFrom`), namedNode(`${rdfs}label`), literal(`Packaging Marked Free From Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedFreeFrom`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedFreeFrom`), namedNode(`${rdfs}range`), namedNode(`${ns4}PackagingMarkedFreeFromCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedLabelAccreditation`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedLabelAccreditation`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedLabelAccreditation`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedLabelAccreditation`), namedNode(`${rdfs}comment`), literal(`A marking that the product received recognition, endorsement, certification by following guidelines by the label issuing agency. This does not represent claims for regulatory purposes on products such as free from markings.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedLabelAccreditation`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedLabelAccreditation`), namedNode(`${rdfs}label`), literal(`Accreditation Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedLabelAccreditation`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMarkedLabelAccreditation`), namedNode(`${rdfs}range`), namedNode(`${ns4}PackagingMarkedLabelAccreditationCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterial`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterial`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterial`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterial`), namedNode(`${rdfs}comment`), literal(`links to details about packaging material type, quantity and thickness`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterial`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterial`), namedNode(`${rdfs}label`), literal(`Has Packaging Material Details`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterial`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PackagingDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterial`), namedNode(`${rdfs}range`), namedNode(`${ns4}PackagingMaterialDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialCompositionQuantity`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialCompositionQuantity`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialCompositionQuantity`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialCompositionQuantity`), namedNode(`${rdfs}comment`), literal(`The quantity of the packaging material of the product. Can be weight, volume or surface, can vary by country.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialCompositionQuantity`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialCompositionQuantity`), namedNode(`${rdfs}label`), literal(`Packaging Material Composition Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialCompositionQuantity`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PackagingMaterialDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialCompositionQuantity`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialThickness`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialThickness`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialThickness`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialThickness`), namedNode(`${rdfs}comment`), literal(`The thickness of a packaging material.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialThickness`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialThickness`), namedNode(`${rdfs}label`), literal(`Packaging Material Thickness`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialThickness`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PackagingMaterialDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialThickness`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialType`), namedNode(`${rdfs}comment`), literal(`The materials used for the packaging of the product for example glass or plastic.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialType`), namedNode(`${rdfs}label`), literal(`Packaging Material Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PackagingMaterialDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingMaterialType`), namedNode(`${rdfs}range`), namedNode(`${ns4}PackagingMaterialTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingRecyclingProcessType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingRecyclingProcessType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingRecyclingProcessType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingRecyclingProcessType`), namedNode(`${rdfs}comment`), literal(`The process the packaging could undertake for recyclable & sustainability programs. Examples COMPOSTABLE, ENERGY_RECOVERABLE, REUSABLE.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingRecyclingProcessType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingRecyclingProcessType`), namedNode(`${rdfs}label`), literal(`Packaging Recycling Process Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingRecyclingProcessType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PackagingDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingRecyclingProcessType`), namedNode(`${rdfs}range`), namedNode(`${ns4}PackagingRecyclingProcessTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingRecyclingScheme`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingRecyclingScheme`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingRecyclingScheme`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingRecyclingScheme`), namedNode(`${rdfs}comment`), literal(`A code indicating the recycling scheme the packaging of this product will fall within when recycled. Applies to recyclable packaging with or without deposit.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingRecyclingScheme`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingRecyclingScheme`), namedNode(`${rdfs}label`), literal(`Packaging Recycling Scheme`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingRecyclingScheme`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PackagingDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingRecyclingScheme`), namedNode(`${rdfs}range`), namedNode(`${ns4}PackagingRecyclingSchemeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingShape`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingShape`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingShape`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingShape`), namedNode(`${rdfs}comment`), literal(`A code depicting the shape of a package for example CONE.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingShape`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingShape`), namedNode(`${rdfs}label`), literal(`Packaging Shape`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingShape`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PackagingDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingShape`), namedNode(`${rdfs}range`), namedNode(`${ns4}PackagingShapeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingType`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingType`), namedNode(`${rdfs}comment`), literal(`The dominant means used to transport, store, handle or display the product as defined by the data source. This packaging is not used to describe any manufacturing process.Recommend to use UNECE Rec 21 codes.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingType`), namedNode(`${rdfs}label`), literal(`Packaging Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PackagingDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}packagingType`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}pantothenicAcidPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}pantothenicAcidPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}pantothenicAcidPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}pantothenicAcidPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Pantothenic Acid per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}pantothenicAcidPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}pantothenicAcidPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Pantothenic Acid Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}pantothenicAcidPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}pantothenicAcidPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}paymentTerms`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}paymentTerms`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}paymentTerms`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}paymentTerms`), namedNode(`${rdfs}comment`), literal(`The type of payment term expressed as a code, for example Discount.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}paymentTerms`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}paymentTerms`), namedNode(`${rdfs}label`), literal(`Payment Terms`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}paymentTerms`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}paymentTerms`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}percentageOfAlcoholByVolume`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}percentageOfAlcoholByVolume`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}percentageOfAlcoholByVolume`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}percentageOfAlcoholByVolume`), namedNode(`${rdfs}comment`), literal(`The percentage of alcohol contained in product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}percentageOfAlcoholByVolume`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}percentageOfAlcoholByVolume`), namedNode(`${rdfs}label`), literal(`Percentage of Alcohol Per Volume`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}percentageOfAlcoholByVolume`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Beverage`), namedNode(ns4)),
        quad(namedNode(`${ns4}percentageOfAlcoholByVolume`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}phosphorusPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}phosphorusPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}phosphorusPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}phosphorusPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Phosphorus per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}phosphorusPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}phosphorusPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Phosphorus Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}phosphorusPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}phosphorusPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}pip`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}pip`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}pip`), namedNode(`${rdfs}comment`), literal(`A link to information specifically about the identified item, typically operated by the brand owner or a retailer of the product and aimed at consumers. It may include links to further information, product description, specifications etc.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}pip`), namedNode(`${rdfs}label`), literal(`Product Information Page`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}pip`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}pip`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}pip`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}pip`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}polyolsPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}polyolsPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}polyolsPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}polyolsPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Polyols per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}polyolsPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}polyolsPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Polyols Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}polyolsPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}polyolsPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}polyunsaturatedFatPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}polyunsaturatedFatPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}polyunsaturatedFatPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}polyunsaturatedFatPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Polyunsaturated fat per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}polyunsaturatedFatPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}polyunsaturatedFatPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Polyunsaturated Fat Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}polyunsaturatedFatPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}polyunsaturatedFatPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}postOfficeBoxNumber`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}postOfficeBoxNumber`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}postOfficeBoxNumber`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}postOfficeBoxNumber`), namedNode(`${rdfs}comment`), literal(`The number that identifies a PO box. A PO box is a box in a post office or other postal service location assigned to an organization where postal items may be kept.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}postOfficeBoxNumber`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}postOfficeBoxNumber`), namedNode(`${rdfs}label`), literal(`PO Box Number`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}postOfficeBoxNumber`), namedNode(`${skos}exactMatch`), namedNode(`${schema}postOfficeBoxNumber`), namedNode(ns4)),
        quad(namedNode(`${ns4}postOfficeBoxNumber`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PostalAddress`), namedNode(ns4)),
        quad(namedNode(`${ns4}postOfficeBoxNumber`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}postalCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}postalCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}postalCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}postalCode`), namedNode(`${rdfs}comment`), literal(`Text specifying the postal code for an address.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}postalCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}postalCode`), namedNode(`${rdfs}label`), literal(`Postal Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}postalCode`), namedNode(`${skos}exactMatch`), namedNode(`${schema}postalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}postalCode`), namedNode(`${skos}exactMatch`), namedNode(`${vcard}postal-code`), namedNode(ns4)),
        quad(namedNode(`${ns4}postalCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PostalAddress`), namedNode(ns4)),
        quad(namedNode(`${ns4}postalCode`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}potassiumPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}potassiumPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}potassiumPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}potassiumPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Potassium per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}potassiumPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}potassiumPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Potassium Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}potassiumPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}potassiumPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationCode`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationCode`), namedNode(`${rdfs}comment`), literal(`Code specifying the preparation state of the product for which the nutrient information is valid. PREPARED, UNPREPARED.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationCode`), namedNode(`${rdfs}label`), literal(`Preparation Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodAndBeveragePreparationInformation`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationCode`), namedNode(`${rdfs}range`), namedNode(`${ns4}PreparationTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationConsumptionPrecautions`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationConsumptionPrecautions`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationConsumptionPrecautions`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationConsumptionPrecautions`), namedNode(`${rdfs}comment`), literal(`Specifies additional precautions to be taken before preparation or consumption of the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationConsumptionPrecautions`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationConsumptionPrecautions`), namedNode(`${rdfs}label`), literal(`Preparation Consumption Precautions`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationConsumptionPrecautions`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodAndBeveragePreparationInformation`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationConsumptionPrecautions`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationInformation`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationInformation`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationInformation`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationInformation`), namedNode(`${rdfs}comment`), literal(`Links to information about how to prepare a specific Food/Beverage/Tobacco product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationInformation`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationInformation`), namedNode(`${rdfs}label`), literal(`Has Food And Beverage Preparation Information`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationInformation`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationInformation`), namedNode(`${rdfs}range`), namedNode(`${ns4}FoodAndBeveragePreparationInformation`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationInstructions`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationInstructions`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationInstructions`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationInstructions`), namedNode(`${rdfs}comment`), literal(`Free text providing instructions on how to prepare the product before serving.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationInstructions`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationInstructions`), namedNode(`${rdfs}label`), literal(`Preparation Instructions`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationInstructions`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodAndBeveragePreparationInformation`), namedNode(ns4)),
        quad(namedNode(`${ns4}preparationInstructions`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}preservationTechnique`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}preservationTechnique`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}preservationTechnique`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}preservationTechnique`), namedNode(`${rdfs}comment`), literal(`Code indicating the preservation technique used to preserve the product from deterioration, for example, BRINING.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}preservationTechnique`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}preservationTechnique`), namedNode(`${rdfs}label`), literal(`Preservation Technique`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}preservationTechnique`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}preservationTechnique`), namedNode(`${rdfs}range`), namedNode(`${ns4}PreservationTechniqueCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}price`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}price`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}price`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}price`), namedNode(`${rdfs}comment`), literal(`Provides a price value as a floating-point numeric value that is qualified by the corresponding currency. See also gs1:priceCurrency. The price value indicates the unit price unless the property gs1:eligibleQuantity is specified and indicates multiple units`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}price`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}price`), namedNode(`${rdfs}label`), literal(`Price Value`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}price`), namedNode(`${skos}exactMatch`), namedNode(`${schema}price`), namedNode(ns4)),
        quad(namedNode(`${ns4}price`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}price`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}price`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns4}priceCurrency`), namedNode(ns4)),
        quad(namedNode(`${ns4}priceSpecification`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}priceSpecification`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}priceSpecification`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}priceSpecification`), namedNode(`${rdfs}comment`), literal(`The price related to an offer. If the offer is a multi-buy offer for a quantity of product greater than one unit, this should be indicated using the property gs1:eligibleQuantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}priceSpecification`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}priceSpecification`), namedNode(`${rdfs}label`), literal(`Price Specification`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}priceSpecification`), namedNode(`${skos}exactMatch`), namedNode(`${schema}priceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}priceSpecification`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}priceSpecification`), namedNode(`${rdfs}range`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}primaryAlternateProduct`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}primaryAlternateProduct`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}primaryAlternateProduct`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}primaryAlternateProduct`), namedNode(`${rdfs}comment`), literal(`A product that is similar to the current product but is not exact match. Same form fit function, e.g. same product different colour, different package size, better quality.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}primaryAlternateProduct`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}primaryAlternateProduct`), namedNode(`${rdfs}label`), literal(`Has Primary Alternate Product`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}primaryAlternateProduct`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}primaryAlternateProduct`), namedNode(`${rdfs}range`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}primaryAlternateProduct`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}isSimilarTo`), namedNode(ns4)),
        quad(namedNode(`${ns4}productDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}productDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}productDescription`), namedNode(`${rdfs}comment`), literal(`An understandable and useable description of a product using brand and other descriptors. This attribute is filled with as little abbreviation as possible, while keeping to a reasonable length.  This should be a meaningful description of the product with full spelling to facilitate message processing. Retailers can use this description as the base to fully understand the brand, flavour, scent etc. of the specific product, in order to accurately create a product description as needed for their internal systems. Examples: XYZ Brand Base Invisible Solid Deodorant AP Stick Spring Breeze.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}productDescription`), namedNode(`${rdfs}label`), literal(`Product Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}productDescription`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}description`), namedNode(ns4)),
        quad(namedNode(`${ns4}productDescription`), namedNode(`${skos}related`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productFeatureBenefit`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}productFeatureBenefit`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productFeatureBenefit`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}productFeatureBenefit`), namedNode(`${rdfs}comment`), literal(`Element for consumer facing marketing content to describe the key features or benefits of the style suitable for display purposes.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productFeatureBenefit`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}productFeatureBenefit`), namedNode(`${rdfs}label`), literal(`Product Feature Benefit`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productFeatureBenefit`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productFeatureBenefit`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}productFormDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}productFormDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productFormDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}productFormDescription`), namedNode(`${rdfs}comment`), literal(`The physical form or shape of the product. Used, for example, in pharmaceutical industry to indicate the formulation of the product. Defines the form the product takes and is distinct from the form of the packaging.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productFormDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}productFormDescription`), namedNode(`${rdfs}label`), literal(`Product Form Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productFormDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productFormDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}productID`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}productID`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productID`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productID`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}productID`), namedNode(`${rdfs}comment`), literal(`Additional means to the Global Trade Item Number to identify a product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productID`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}productID`), namedNode(`${rdfs}label`), literal(`Product ID`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productID`), namedNode(`${skos}exactMatch`), namedNode(`${schema}productID`), namedNode(ns4)),
        quad(namedNode(`${ns4}productID`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productID`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}productMarketingMessage`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}productMarketingMessage`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productMarketingMessage`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}productMarketingMessage`), namedNode(`${rdfs}comment`), literal(`Marketing message associated with the product. Consumer-friendly marketing detailed description of the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productMarketingMessage`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}productMarketingMessage`), namedNode(`${rdfs}label`), literal(`Product Marketing Message`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productMarketingMessage`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productMarketingMessage`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}productName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}productName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productName`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}productName`), namedNode(`${rdfs}comment`), literal(`Consumer friendly short description of the product suitable for compact presentation.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productName`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}productName`), namedNode(`${rdfs}label`), literal(`Product Name`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productName`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productName`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}productName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}name`), namedNode(ns4)),
        quad(namedNode(`${ns4}productName`), namedNode(`${skos}related`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productPassport`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}productPassport`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productPassport`), namedNode(`${rdfs}comment`), literal(`A link to the product passport which provides information on a product’s origin, durability, composition, reuse, repair and dismantling possibilities, and end-of-life handling.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productPassport`), namedNode(`${rdfs}label`), literal(`Product Passport`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productPassport`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productPassport`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productPassport`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}productPassport`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}productRange`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}productRange`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productRange`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}productRange`), namedNode(`${rdfs}comment`), literal(`A name, used by a Brand Owner, that span multiple consumer categories or uses. E.g. (Waist Watchers).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productRange`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}productRange`), namedNode(`${rdfs}label`), literal(`Product Range`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productRange`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productRange`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}productRange`), namedNode(`${skos}related`), namedNode(`${schema}brand`), namedNode(ns4)),
        quad(namedNode(`${ns4}productSustainabilityInfo`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}productSustainabilityInfo`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productSustainabilityInfo`), namedNode(`${rdfs}comment`), literal(`A link to information about the product's sustainability of manufacture, recycling information etc.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productSustainabilityInfo`), namedNode(`${rdfs}label`), literal(`Sustainability and recycling`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productSustainabilityInfo`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productSustainabilityInfo`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productSustainabilityInfo`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}productSustainabilityInfo`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}productYield`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}productYield`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productYield`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}productYield`), namedNode(`${rdfs}comment`), literal(`Product quantity after preparation. This can differ based on productYieldType`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productYield`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}productYield`), namedNode(`${rdfs}label`), literal(`Product Yield`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productYield`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ProductYieldDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}productYield`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}productYieldType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}productYieldType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productYieldType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}productYieldType`), namedNode(`${rdfs}comment`), literal(`Code indicating the type of yield measurement specified in productYield. Examples: AFTER_DILUTION, DRAINED_WEIGHT.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productYieldType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}productYieldType`), namedNode(`${rdfs}label`), literal(`Product Yield Type Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productYieldType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ProductYieldDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}productYieldType`), namedNode(`${rdfs}range`), namedNode(`${ns4}ProductYieldTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}productYieldVariationPercentage`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}productYieldVariationPercentage`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productYieldVariationPercentage`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}productYieldVariationPercentage`), namedNode(`${rdfs}comment`), literal(`Indication of range in percent of the given cooking / roasting loss. Percentage that the actual weight of the product differs upward or downward from the average or estimated product yield.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productYieldVariationPercentage`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}productYieldVariationPercentage`), namedNode(`${rdfs}label`), literal(`Product Yield Variation Percentage`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productYieldVariationPercentage`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ProductYieldDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}productYieldVariationPercentage`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDate`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDate`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDate`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDate`), namedNode(`${rdfs}comment`), literal(`The production date is the production or assembly date determined by the manufacturer. The date may refer to the trade item itself or to items contained.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDate`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDate`), namedNode(`${rdfs}label`), literal(`Date of production`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDate`), namedNode(`${rdfs}label`), literal(`Production Date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDate`), namedNode(`${skos}prefLabel`), literal(`11`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDate`), namedNode(`${skos}exactMatch`), namedNode(`${schema}productionDate`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDate`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDate`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDate`), namedNode(`${rdfs}range`), namedNode(`${xsd}date`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDate`), namedNode(`${skos}altLabel`), literal(`Date of production`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDate`), namedNode(`${skos}altLabel`), literal(`Production Date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDate`), namedNode(`${skos}notation`), literal(`11`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDateTime`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDateTime`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDateTime`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDateTime`), namedNode(`${rdfs}comment`), literal(`The date and time of production (or assembly). The date and time of production is determined by the manufacturer. The date and time may refer to the trade item itself or to the items contained.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDateTime`), namedNode(`${rdfs}comment`), literal(`The date and time of production is determined by the manufacturer. The date and time may refer to the trade item itself or to the items contained.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDateTime`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDateTime`), namedNode(`${rdfs}label`), literal(`Date and time of production`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDateTime`), namedNode(`${rdfs}label`), literal(`Production Date and Time`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDateTime`), namedNode(`${skos}prefLabel`), literal(`8008`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDateTime`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDateTime`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDateTime`), namedNode(`${rdfs}range`), namedNode(`${xsd}dateTime`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDateTime`), namedNode(`${rdfs}range`), namedNode(`${xsd}date`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDateTime`), namedNode(`${skos}altLabel`), literal(`Date and time of production`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDateTime`), namedNode(`${skos}altLabel`), literal(`Production Date and Time`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productionDateTime`), namedNode(`${skos}notation`), literal(`8008`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}productionVariantDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionVariantDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionVariantDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionVariantDescription`), namedNode(`${rdfs}comment`), literal(`Free text assigned by the manufacturer to describe the production variant. Examples are: package series X, package series Y.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productionVariantDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}productionVariantDescription`), namedNode(`${rdfs}label`), literal(`Production Variant Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productionVariantDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionVariantDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionVariantEffectiveDateTime`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionVariantEffectiveDateTime`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionVariantEffectiveDateTime`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionVariantEffectiveDateTime`), namedNode(`${rdfs}comment`), literal(`The start date of a production variant. The variant applies to products having a date mark (a best before date or expiration date) on the package that comes on or after the effective date.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productionVariantEffectiveDateTime`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}productionVariantEffectiveDateTime`), namedNode(`${rdfs}label`), literal(`Production Variant Effective Date Time`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}productionVariantEffectiveDateTime`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}productionVariantEffectiveDateTime`), namedNode(`${rdfs}range`), namedNode(`${xsd}dateTime`), namedNode(ns4)),
        quad(namedNode(`${ns4}promotion`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}promotion`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}promotion`), namedNode(`${rdfs}comment`), literal(`A link to a promotion for the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}promotion`), namedNode(`${rdfs}label`), literal(`Promotion`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}promotion`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}promotion`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}promotion`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}promotion`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}proteinPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}proteinPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}proteinPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}proteinPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Protein per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}proteinPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}proteinPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Protein Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}proteinPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}proteinPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}provenanceStatement`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}provenanceStatement`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}provenanceStatement`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}provenanceStatement`), namedNode(`${rdfs}comment`), literal(`Free text description of the region or place the product originates from. This is to be specifically used to specify areas such as cities, mountain ranges, regions. Examples: Made in the Thuringen Mountains, Made in Paris, From the Napa Valley.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}provenanceStatement`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}provenanceStatement`), namedNode(`${rdfs}label`), literal(`Provenance Statement`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}provenanceStatement`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}provenanceStatement`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}purchaseSuppliesOrAccessories`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}purchaseSuppliesOrAccessories`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}purchaseSuppliesOrAccessories`), namedNode(`${rdfs}comment`), literal(`A link to information about where supplies or accessories for the item can be purchased or ordered.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}purchaseSuppliesOrAccessories`), namedNode(`${rdfs}label`), literal(`Purchase supplies or accessories`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}purchaseSuppliesOrAccessories`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}purchaseSuppliesOrAccessories`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}purchaseSuppliesOrAccessories`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}purchaseSuppliesOrAccessories`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingBrandName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingBrandName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingBrandName`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingBrandName`), namedNode(`${rdfs}comment`), literal(`If specified, the discount is only available when purchasing a product from one of the brand names specified via this property.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingBrandName`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingBrandName`), namedNode(`${rdfs}label`), literal(`Qualifying Brand Name`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingBrandName`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingBrandName`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingGPCs`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingGPCs`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingGPCs`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingGPCs`), namedNode(`${rdfs}comment`), literal(`If specified, the discount is only available when purchasing a product whose Global Product Classification (GPC) brick value appears in the list specified via this property.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingGPCs`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingGPCs`), namedNode(`${rdfs}label`), literal(`Qualifying Product GPC codes`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingGPCs`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingGPCs`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductCategoryDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductCategoryDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductCategoryDescription`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductCategoryDescription`), namedNode(`${rdfs}comment`), literal(`If specified, the discount is only available when purchasing a product from categories specified in this free-form text field.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductCategoryDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductCategoryDescription`), namedNode(`${rdfs}label`), literal(`Qualifying Product Category Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductCategoryDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductCategoryDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductClassificationCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductClassificationCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductClassificationCode`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductClassificationCode`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductClassificationCode`), namedNode(`${rdfs}comment`), literal(`If specified, the discount is only available when purchasing a product whose product classification (other than GPC) appears in the list specified via this property. This property specifies a product classification other than GPC.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductClassificationCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductClassificationCode`), namedNode(`${rdfs}label`), literal(`Qualifying Product Classification Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductClassificationCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductClassificationCode`), namedNode(`${rdfs}range`), namedNode(`${ns4}AdditionalProductClassificationDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductGTINs`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductGTINs`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductGTINs`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductGTINs`), namedNode(`${rdfs}comment`), literal(`If specified, the discount is only available when purchasing a product whose GTIN appears in the list specified via this property.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductGTINs`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductGTINs`), namedNode(`${rdfs}label`), literal(`Qualifying Product GTINs`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductGTINs`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingProductGTINs`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingSubBrandName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingSubBrandName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingSubBrandName`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingSubBrandName`), namedNode(`${rdfs}comment`), literal(`If specified, the discount is only available when purchasing a product from one of the sub-brand names (specified product ranges for a given brand) specified via this property.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingSubBrandName`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingSubBrandName`), namedNode(`${rdfs}label`), literal(`Qualifying Sub-brand Name`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingSubBrandName`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}qualifyingSubBrandName`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}quickStartGuide`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}quickStartGuide`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}quickStartGuide`), namedNode(`${rdfs}comment`), literal(`A link to a description of the key features needed to be understood to begin using the item.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}quickStartGuide`), namedNode(`${rdfs}label`), literal(`Quick start guide`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}quickStartGuide`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}quickStartGuide`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}quickStartGuide`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}quickStartGuide`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}recallStatus`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}recallStatus`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}recallStatus`), namedNode(`${rdfs}comment`), literal(`A link to information about whether the product has been recalled or not, typically an API.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}recallStatus`), namedNode(`${rdfs}label`), literal(`Recall status`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}recallStatus`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}recallStatus`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}recallStatus`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}recallStatus`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}recipeInfo`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}recipeInfo`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}recipeInfo`), namedNode(`${rdfs}comment`), literal(`A link to a recipe website for the product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}recipeInfo`), namedNode(`${rdfs}label`), literal(`Recipe website`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}recipeInfo`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}recipeInfo`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}recipeInfo`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}recipeInfo`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}recyclingInfo`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}recyclingInfo`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}recyclingInfo`), namedNode(`${rdfs}comment`), literal(`A link to the instructions for recycling a product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}recyclingInfo`), namedNode(`${rdfs}label`), literal(`Product recyling`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}recyclingInfo`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}recyclingInfo`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}recyclingInfo`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}recyclingInfo`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFile`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFile`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFile`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFile`), namedNode(`${rdfs}comment`), literal(`Link to a file or website containing additional information on product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFile`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFile`), namedNode(`${rdfs}label`), literal(`Has Referenced File`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFile`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFile`), namedNode(`${rdfs}range`), namedNode(`${ns4}ReferencedFileDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveEndDateTime`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveEndDateTime`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveEndDateTime`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveEndDateTime`), namedNode(`${rdfs}comment`), literal(`The date upon which the target of this external link ceases to be effective for use.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveEndDateTime`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveEndDateTime`), namedNode(`${rdfs}label`), literal(`Referenced File Effective End Date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveEndDateTime`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ReferencedFileDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveEndDateTime`), namedNode(`${rdfs}range`), namedNode(`${xsd}dateTime`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveEndDateTime`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}expires`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveStartDateTime`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveStartDateTime`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveStartDateTime`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveStartDateTime`), namedNode(`${rdfs}comment`), literal(`The date upon which the target of this external link begins to be effective for use.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveStartDateTime`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveStartDateTime`), namedNode(`${rdfs}label`), literal(`Referenced File Effective Start Date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveStartDateTime`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ReferencedFileDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveStartDateTime`), namedNode(`${rdfs}range`), namedNode(`${xsd}dateTime`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileEffectiveStartDateTime`), namedNode(`${rdfs}seeAlso`), namedNode(`${schema}datePublished`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileSize`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileSize`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileSize`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileSize`), namedNode(`${rdfs}comment`), literal(`The size of the file as it is stored in an uncompressed format.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileSize`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileSize`), namedNode(`${rdfs}label`), literal(`Referenced File Size`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileSize`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ReferencedFileDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileSize`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileSize`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}contentSize`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileType`), namedNode(`${rdfs}comment`), literal(`A code indicating the purpose or role of file (not a MIME type) that is being referenced, for example PRODUCT_LABEL_IMAGE. This code is used when the purpose of a file is not specified in the property.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileType`), namedNode(`${rdfs}label`), literal(`Referenced File Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ReferencedFileDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileType`), namedNode(`${rdfs}range`), namedNode(`${ns4}ReferencedFileTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileType`), namedNode(`${rdfs}seeAlso`), namedNode(`${schema}description`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileURL`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileURL`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileURL`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileURL`), namedNode(`${rdfs}comment`), literal(`Simple text string that refers to a resource on the internet, URLs may refer to documents, resources, people, etc.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileURL`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileURL`), namedNode(`${rdfs}label`), literal(`Website`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileURL`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ReferencedFileDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileURL`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}referencedFileURL`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}url`), namedNode(ns4)),
        quad(namedNode(`${ns4}registerProduct`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}registerProduct`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}registerProduct`), namedNode(`${rdfs}comment`), literal(`A link to an entry point for registering ownership of a product including for warranty purposes.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}registerProduct`), namedNode(`${rdfs}label`), literal(`Register purchase`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}registerProduct`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}registerProduct`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}registerProduct`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}registerProduct`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}regulatedProductName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}regulatedProductName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}regulatedProductName`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}regulatedProductName`), namedNode(`${rdfs}comment`), literal(`The prescribed, regulated or generic product name or denomination that describes the true nature of the product. For example for a food product in order to distinguish it from other foods according to country specific regulations.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}regulatedProductName`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}regulatedProductName`), namedNode(`${rdfs}label`), literal(`Regulated Product Name`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}regulatedProductName`), namedNode(`${skos}broadMatch`), namedNode(`${schema}name`), namedNode(ns4)),
        quad(namedNode(`${ns4}regulatedProductName`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}regulatedProductName`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}regulatedProductName`), namedNode(`${skos}related`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}reheatingClaim`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}reheatingClaim`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}reheatingClaim`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}reheatingClaim`), namedNode(`${rdfs}comment`), literal(`Indicates, with reference to the product branding, labelling or packaging whether a food product which is ready to eat can be reheated if required prior to consumption.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}reheatingClaim`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}reheatingClaim`), namedNode(`${rdfs}label`), literal(`Reheating Claim`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}reheatingClaim`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}reheatingClaim`), namedNode(`${rdfs}range`), namedNode(`${ns4}NonbinaryLogicCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}relatedVideo`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}relatedVideo`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}relatedVideo`), namedNode(`${rdfs}comment`), literal(`A link to any video, or document that has an embedded video, that describes or relates to the identified item in some way.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}relatedVideo`), namedNode(`${rdfs}label`), literal(`Related  video`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}relatedVideo`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}relatedVideo`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}relatedVideo`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}relatedVideo`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}repairInfo`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}repairInfo`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}repairInfo`), namedNode(`${rdfs}comment`), literal(`A link to the instructions for the repair of a product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}repairInfo`), namedNode(`${rdfs}label`), literal(`Product repair`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}repairInfo`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}repairInfo`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}repairInfo`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}repairInfo`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedByProduct`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedByProduct`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedByProduct`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedByProduct`), namedNode(`${rdfs}comment`), literal(`The product which permanently replaces the current product. This product is sent in the record for the original item that is being replaced.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedByProduct`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedByProduct`), namedNode(`${rdfs}label`), literal(`Has Replaced By Product`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedByProduct`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedByProduct`), namedNode(`${rdfs}range`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedByProduct`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}isSimilarTo`), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedProduct`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedProduct`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedProduct`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedProduct`), namedNode(`${rdfs}comment`), literal(`Indicates the product identification of an item that is being permanently replaced by this product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedProduct`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedProduct`), namedNode(`${rdfs}label`), literal(`Has Replaced Product`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedProduct`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedProduct`), namedNode(`${rdfs}range`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}replacedProduct`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}isSimilarTo`), namedNode(ns4)),
        quad(namedNode(`${ns4}responsibility`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}responsibility`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}responsibility`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}responsibility`), namedNode(`${rdfs}comment`), literal(`Text further specifying the area of responsibility of the trade contact.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}responsibility`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}responsibility`), namedNode(`${rdfs}label`), literal(`Responsibility`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}responsibility`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ContactPoint`), namedNode(ns4)),
        quad(namedNode(`${ns4}responsibility`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}returnablePackageDepositAmount`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}returnablePackageDepositAmount`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}returnablePackageDepositAmount`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}returnablePackageDepositAmount`), namedNode(`${rdfs}comment`), literal(`The monetary amount for the individual returnable package.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}returnablePackageDepositAmount`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}returnablePackageDepositAmount`), namedNode(`${rdfs}label`), literal(`Returnable Package Deposit Amount`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}returnablePackageDepositAmount`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ReturnablePackageDepositDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}returnablePackageDepositAmount`), namedNode(`${rdfs}range`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}returnablePackageDepositRegion`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}returnablePackageDepositRegion`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}returnablePackageDepositRegion`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}returnablePackageDepositRegion`), namedNode(`${rdfs}comment`), literal(`The geographic region associated with the returnable package deposit amount.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}returnablePackageDepositRegion`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}returnablePackageDepositRegion`), namedNode(`${rdfs}label`), literal(`Returnable Package Deposit Region`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}returnablePackageDepositRegion`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ReturnablePackageDepositDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}returnablePackageDepositRegion`), namedNode(`${rdfs}range`), namedNode(`${ns4}Country`), namedNode(ns4)),
        quad(namedNode(`${ns4}reuseInfo`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}reuseInfo`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}reuseInfo`), namedNode(`${rdfs}comment`), literal(`A link to the information on how to re-use a product when it changes from one user to the other (like how to deal with exiting certifications or warrantees, quality control instructions)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}reuseInfo`), namedNode(`${rdfs}label`), literal(`Product re-use`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}reuseInfo`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}reuseInfo`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}reuseInfo`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}reuseInfo`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}review`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}review`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}review`), namedNode(`${rdfs}comment`), literal(`A link to reviews of the product or service.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}review`), namedNode(`${rdfs}label`), literal(`Reviews`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}review`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}review`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}review`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}review`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}riboflavinPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}riboflavinPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}riboflavinPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}riboflavinPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Riboflavin per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}riboflavinPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}riboflavinPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Riboflavin Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}riboflavinPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}riboflavinPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}safetyInfo`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}safetyInfo`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}safetyInfo`), namedNode(`${rdfs}comment`), literal(`A link to safety information about the item`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}safetyInfo`), namedNode(`${rdfs}label`), literal(`Safety information`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}safetyInfo`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}safetyInfo`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}safetyInfo`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}safetyInfo`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}saltPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}saltPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}saltPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}saltPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Salt per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}saltPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}saltPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Salt Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}saltPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}saltPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}saturatedFatPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}saturatedFatPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}saturatedFatPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}saturatedFatPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Saturated fat per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}saturatedFatPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}saturatedFatPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Saturated Fat Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}saturatedFatPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}saturatedFatPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonCalendarYear`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonCalendarYear`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonCalendarYear`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonCalendarYear`), namedNode(`${rdfs}comment`), literal(`The calendar year in which the product is seasonally available.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonCalendarYear`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonCalendarYear`), namedNode(`${rdfs}label`), literal(`Season Calendar Year`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonCalendarYear`), namedNode(`${rdfs}domain`), namedNode(`${ns4}WearableProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonCalendarYear`), namedNode(`${rdfs}range`), namedNode(`${xsd}gYear`), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonName`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonName`), namedNode(`${rdfs}comment`), literal(`Element defines the season applicable to the item for example Winter.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonName`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonName`), namedNode(`${rdfs}label`), literal(`Season Name`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonName`), namedNode(`${rdfs}domain`), namedNode(`${ns4}WearableProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonName`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonParameter`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonParameter`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonParameter`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonParameter`), namedNode(`${rdfs}comment`), literal(`Code indicating the season in which the product is available, e.g. SPRING, WINTER`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonParameter`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonParameter`), namedNode(`${rdfs}label`), literal(`Season Parameter`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonParameter`), namedNode(`${rdfs}domain`), namedNode(`${ns4}WearableProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}seasonParameter`), namedNode(`${rdfs}range`), namedNode(`${ns4}SeasonParameterCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}seeker`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}seeker`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}seeker`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}seeker`), namedNode(`${rdfs}comment`), literal(`The organization seeking an offer.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}seeker`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}seeker`), namedNode(`${rdfs}label`), literal(`Seeker`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}seeker`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}seeker`), namedNode(`${rdfs}range`), namedNode(`${ns4}Organization`), namedNode(ns4)),
        quad(namedNode(`${ns4}selectedProductsOnly`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}selectedProductsOnly`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}selectedProductsOnly`), namedNode(`${vs}term_status`), literal(`unstable`), namedNode(ns4)),
        quad(namedNode(`${ns4}selectedProductsOnly`), namedNode(`${rdfs}comment`), literal(`If specified and set to true, the discount only applies to specific products selected by the retailer or offer promoter - not to all items in that product category.  This property should be asserted and set to true for offers that say 'on selected products'.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}selectedProductsOnly`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}selectedProductsOnly`), namedNode(`${rdfs}label`), literal(`Selected Products Only`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}selectedProductsOnly`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Discount`), namedNode(ns4)),
        quad(namedNode(`${ns4}selectedProductsOnly`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(ns4)),
        quad(namedNode(`${ns4}seleniumPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}seleniumPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}seleniumPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}seleniumPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Selenium per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}seleniumPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}seleniumPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Selenium Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}seleniumPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}seleniumPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}sellByDate`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}sellByDate`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}sellByDate`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}sellByDate`), namedNode(`${rdfs}comment`), literal(`The date specified by the manufacturer as the last date the retailer is to offer the product for sale to the consumer. The product should not be merchandised after this date.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sellByDate`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}sellByDate`), namedNode(`${rdfs}label`), literal(`Sell By Date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sellByDate`), namedNode(`${rdfs}label`), literal(`Sell by date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sellByDate`), namedNode(`${skos}prefLabel`), literal(`16`), namedNode(ns4)),
        quad(namedNode(`${ns4}sellByDate`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}sellByDate`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}sellByDate`), namedNode(`${rdfs}range`), namedNode(`${xsd}date`), namedNode(ns4)),
        quad(namedNode(`${ns4}sellByDate`), namedNode(`${skos}altLabel`), literal(`Sell By Date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sellByDate`), namedNode(`${skos}altLabel`), literal(`Sell by date`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sellByDate`), namedNode(`${skos}notation`), literal(`16`, namedNode(`${ns4}AI`)), namedNode(ns4)),
        quad(namedNode(`${ns4}seller`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}seller`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}seller`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}seller`), namedNode(`${rdfs}comment`), literal(`The organization seeking to sell a product or service.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}seller`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}seller`), namedNode(`${rdfs}label`), literal(`Seller`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}seller`), namedNode(`${skos}exactMatch`), namedNode(`${schema}seller`), namedNode(ns4)),
        quad(namedNode(`${ns4}seller`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}seller`), namedNode(`${rdfs}range`), namedNode(`${ns4}Organization`), namedNode(ns4)),
        quad(namedNode(`${ns4}serviceInfo`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}serviceInfo`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}serviceInfo`), namedNode(`${rdfs}comment`), literal(`A link to service or maintenance instructions for the item.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}serviceInfo`), namedNode(`${rdfs}label`), literal(`Service information`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}serviceInfo`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}serviceInfo`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}serviceInfo`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}serviceInfo`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSize`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSize`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSize`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSize`), namedNode(`${rdfs}comment`), literal(`Measurement value specifying the serving size in which the information per nutrient has been stated. Example: Per 100 GRM.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSize`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSize`), namedNode(`${rdfs}label`), literal(`Serving Size`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSize`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSize`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSizeDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSizeDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSizeDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSizeDescription`), namedNode(`${rdfs}comment`), literal(`A free text field specifying the serving size for which the nutrient information has been stated for example: per 1/3 cup (42 g).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSizeDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSizeDescription`), namedNode(`${rdfs}label`), literal(`Serving Size Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSizeDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSizeDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSuggestion`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSuggestion`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSuggestion`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSuggestion`), namedNode(`${rdfs}comment`), literal(`Free text field for serving suggestion.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSuggestion`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSuggestion`), namedNode(`${rdfs}label`), literal(`Serving Suggestion`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSuggestion`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}servingSuggestion`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}sharpnessOfCheese`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}sharpnessOfCheese`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}sharpnessOfCheese`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}sharpnessOfCheese`), namedNode(`${rdfs}comment`), literal(`The descriptive term that is used by the product manufacturer to identify the sharpness of the taste of the product for example EXTRA_SHARP. Usually the longer the aging of the product, the sharper the taste.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sharpnessOfCheese`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}sharpnessOfCheese`), namedNode(`${rdfs}label`), literal(`Sharpness Of Cheese`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sharpnessOfCheese`), namedNode(`${rdfs}domain`), namedNode(`${ns4}MilkButterCreamYogurtCheeseEggsSubstitutes`), namedNode(ns4)),
        quad(namedNode(`${ns4}sharpnessOfCheese`), namedNode(`${rdfs}range`), namedNode(`${ns4}SharpnessOfCheeseCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}size`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}size`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}size`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}size`), namedNode(`${rdfs}comment`), literal(`Links a wearable product to one or more groupings of gs1:SizeDetails representing size systems, size groups, size type and size dimensions.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}size`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}size`), namedNode(`${rdfs}label`), literal(`Size`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}size`), namedNode(`${rdfs}domain`), namedNode(`${ns4}WearableProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}size`), namedNode(`${rdfs}range`), namedNode(`${ns4}SizeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCode`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCode`), namedNode(`${rdfs}comment`), literal(`Links a product to one or more groupings of gs1:SizeCodeDetails representing the size value from a specified code list.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCode`), namedNode(`${rdfs}label`), literal(`Size Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCode`), namedNode(`${rdfs}range`), namedNode(`${ns4}SizeCodeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCodeListCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCodeListCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCodeListCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCodeListCode`), namedNode(`${rdfs}comment`), literal(`Code specifying a size code list. Allowed code values are specified in GS1 Code List SizeCodeListCode .`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCodeListCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCodeListCode`), namedNode(`${rdfs}label`), literal(`Size Code List Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCodeListCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}SizeCodeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCodeListCode`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCodeValue`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCodeValue`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCodeValue`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCodeValue`), namedNode(`${rdfs}comment`), literal(`A code indicating the size of an object according to a specific code list. The applied code list is specified as additional information together with the size code.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCodeValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCodeValue`), namedNode(`${rdfs}label`), literal(`Size Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCodeValue`), namedNode(`${rdfs}domain`), namedNode(`${ns4}SizeCodeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeCodeValue`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeDimension`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeDimension`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeDimension`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeDimension`), namedNode(`${rdfs}comment`), literal(`The numerical size measurement relating to the size type.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeDimension`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeDimension`), namedNode(`${rdfs}label`), literal(`Size Dimension`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeDimension`), namedNode(`${rdfs}domain`), namedNode(`${ns4}SizeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeDimension`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeGroup`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeGroup`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeGroup`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeGroup`), namedNode(`${rdfs}comment`), literal(`Code indicating the type of size that is necessary to uniquely specify the size of the item, for example, BOYS.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeGroup`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeGroup`), namedNode(`${rdfs}label`), literal(`Size Group`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeGroup`), namedNode(`${rdfs}domain`), namedNode(`${ns4}SizeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeGroup`), namedNode(`${rdfs}range`), namedNode(`${ns4}SizeGroupCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeSystem`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeSystem`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeSystem`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeSystem`), namedNode(`${rdfs}comment`), literal(`The system that is being used to define the size for example EUROPE. Size system is used in conjunction with size group to define the size dimension.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeSystem`), namedNode(`${rdfs}label`), literal(`Size System`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeSystem`), namedNode(`${rdfs}domain`), namedNode(`${ns4}SizeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeSystem`), namedNode(`${rdfs}range`), namedNode(`${ns4}SizeSystemCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeType`), namedNode(`${rdfs}comment`), literal(`The type of size dimension being specified for example SLEEVE.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeType`), namedNode(`${rdfs}label`), literal(`Size Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}SizeDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}sizeType`), namedNode(`${rdfs}range`), namedNode(`${ns4}SizeTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}smartLabel`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}smartLabel`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}smartLabel`), namedNode(`${rdfs}comment`), literal(`A link to the product's SmartLabel page.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}smartLabel`), namedNode(`${rdfs}label`), literal(`SmartLabel`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}smartLabel`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}smartLabel`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}smartLabel`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}smartLabel`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}smpc`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}smpc`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}smpc`), namedNode(`${rdfs}comment`), literal(`A link to Summary Product Characteristics. To be used specifically when linking to information for healthcare professionals.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}smpc`), namedNode(`${rdfs}label`), literal(`Summary Product Characteristics (SmPC)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}smpc`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}smpc`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}smpc`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}smpc`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}socialMedia`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}socialMedia`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}socialMedia`), namedNode(`${rdfs}comment`), literal(`A link to a social media channel. The title will typically be replaced by the name of the channel.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}socialMedia`), namedNode(`${rdfs}label`), literal(`Social media`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}socialMedia`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}socialMedia`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}socialMedia`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}socialMedia`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}sodiumPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}sodiumPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}sodiumPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}sodiumPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Sodium per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sodiumPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}sodiumPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Sodium Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sodiumPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}sodiumPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}sourceAnimal`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}sourceAnimal`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}sourceAnimal`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}sourceAnimal`), namedNode(`${rdfs}comment`), literal(`Code indicating the source of raw material used to produce the food product, for example a GOAT for milk.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sourceAnimal`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}sourceAnimal`), namedNode(`${rdfs}label`), literal(`Source Animal Code`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sourceAnimal`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}sourceAnimal`), namedNode(`${rdfs}range`), namedNode(`${ns4}SourceAnimalCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}sportingActivityType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}sportingActivityType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}sportingActivityType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}sportingActivityType`), namedNode(`${rdfs}comment`), literal(`Code indicating the type of sporting activity for which the product is intended to be worn, for example FOOTBALL.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sportingActivityType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}sportingActivityType`), namedNode(`${rdfs}label`), literal(`Sporting Activity Type`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sportingActivityType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}WearableProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}sportingActivityType`), namedNode(`${rdfs}range`), namedNode(`${ns4}SportingActivityTypeCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}starchPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}starchPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}starchPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}starchPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Starch per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}starchPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}starchPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Starch Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}starchPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}starchPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}streetAddress`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}streetAddress`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}streetAddress`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}streetAddress`), namedNode(`${rdfs}comment`), literal(`The street address expressed as free form text. The street address is printed on paper as the first lines below the name. For example, the name of the street and the number in the street or the name of a building.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}streetAddress`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}streetAddress`), namedNode(`${rdfs}label`), literal(`Street Address`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}streetAddress`), namedNode(`${skos}exactMatch`), namedNode(`${schema}streetAddress`), namedNode(ns4)),
        quad(namedNode(`${ns4}streetAddress`), namedNode(`${skos}exactMatch`), namedNode(`${vcard}street-address`), namedNode(ns4)),
        quad(namedNode(`${ns4}streetAddress`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PostalAddress`), namedNode(ns4)),
        quad(namedNode(`${ns4}streetAddress`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}styleDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}styleDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}styleDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}styleDescription`), namedNode(`${rdfs}comment`), literal(`An attribute that classifies products that share many of the same characteristics (attribute values) that does NOT vary by GTIN, and are presented by the supplier as a single merchandise selection for the buyer.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}styleDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}styleDescription`), namedNode(`${rdfs}label`), literal(`Style Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}styleDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}WearableProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}styleDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}subBrandName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}subBrandName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}subBrandName`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}subBrandName`), namedNode(`${rdfs}comment`), literal(`Second level of brand. Can be a trademark. It is the primary differentiating factor that a brand owner wants to communicate to the consumer or buyer. E.g. Yummy-Cola Classic. In this example Yummy-Cola is the brand and Classic is the sub-brand.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}subBrandName`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}subBrandName`), namedNode(`${rdfs}label`), literal(`Sub-brand Name`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}subBrandName`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Brand`), namedNode(ns4)),
        quad(namedNode(`${ns4}subBrandName`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}subBrandName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}name`), namedNode(ns4)),
        quad(namedNode(`${ns4}subBrandName`), namedNode(`${skos}related`), namedNode(`${schema}Brand`), namedNode(ns4)),
        quad(namedNode(`${ns4}sugarsPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}sugarsPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}sugarsPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}sugarsPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Sugars per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sugarsPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}sugarsPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Sugars Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}sugarsPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}sugarsPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}supplierSpecifiedMinimumConsumerStorageDays`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}supplierSpecifiedMinimumConsumerStorageDays`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}supplierSpecifiedMinimumConsumerStorageDays`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}supplierSpecifiedMinimumConsumerStorageDays`), namedNode(`${rdfs}comment`), literal(`Represents the number of days between a product's sell by date and its use by date.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}supplierSpecifiedMinimumConsumerStorageDays`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}supplierSpecifiedMinimumConsumerStorageDays`), namedNode(`${rdfs}label`), literal(`Supplier Specified Minimum Consumer Storage Days`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}supplierSpecifiedMinimumConsumerStorageDays`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}supplierSpecifiedMinimumConsumerStorageDays`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(ns4)),
        quad(namedNode(`${ns4}support`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}support`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}support`), namedNode(`${rdfs}comment`), literal(`A link to a source of support such as a helpdesk, chat support, email etc.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}support`), namedNode(`${rdfs}label`), literal(`Support`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}support`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}support`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}support`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}support`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetConsumerAge`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetConsumerAge`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetConsumerAge`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetConsumerAge`), namedNode(`${rdfs}comment`), literal(`Identifies the target consumer age range for which a product has been designed.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}targetConsumerAge`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}targetConsumerAge`), namedNode(`${rdfs}label`), literal(`Target Consumer Age`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}targetConsumerAge`), namedNode(`${rdfs}domain`), namedNode(`${ns4}WearableProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetConsumerAge`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetConsumerGender`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetConsumerGender`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetConsumerGender`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetConsumerGender`), namedNode(`${rdfs}comment`), literal(`Identifies the target consumer gender for which a product has been designed for example MALE`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}targetConsumerGender`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}targetConsumerGender`), namedNode(`${rdfs}label`), literal(`Target Consumer Gender`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}targetConsumerGender`), namedNode(`${rdfs}domain`), namedNode(`${ns4}WearableProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetConsumerGender`), namedNode(`${rdfs}range`), namedNode(`${ns4}TargetConsumerGenderCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetMarket`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetMarket`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetMarket`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetMarket`), namedNode(`${rdfs}comment`), literal(`Relates to a set of target market details (product release date and associated countries)`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}targetMarket`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}targetMarket`), namedNode(`${rdfs}label`), literal(`Has Target Market`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}targetMarket`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetMarket`), namedNode(`${rdfs}range`), namedNode(`${ns4}TargetMarketDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetMarketCountries`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetMarketCountries`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetMarketCountries`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetMarketCountries`), namedNode(`${rdfs}comment`), literal(`List of countries representing the target market for a particular release date indicated by gs1:consumerFirstAvailabilityDateTime`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}targetMarketCountries`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}targetMarketCountries`), namedNode(`${rdfs}label`), literal(`Target Market Countries`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}targetMarketCountries`), namedNode(`${rdfs}domain`), namedNode(`${ns4}TargetMarketDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}targetMarketCountries`), namedNode(`${rdfs}range`), namedNode(`${ns4}Country`), namedNode(ns4)),
        quad(namedNode(`${ns4}telephone`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}telephone`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}telephone`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}telephone`), namedNode(`${rdfs}comment`), literal(`A telephone number for example +44 217 992 9999.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}telephone`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}telephone`), namedNode(`${rdfs}label`), literal(`Telephone`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}telephone`), namedNode(`${skos}exactMatch`), namedNode(`${schema}telephone`), namedNode(ns4)),
        quad(namedNode(`${ns4}telephone`), namedNode(`${skos}exactMatch`), namedNode(`${vcard}hasTelephone`), namedNode(ns4)),
        quad(namedNode(`${ns4}telephone`), namedNode(`${rdfs}domain`), namedNode(`${ns4}ContactPoint`), namedNode(ns4)),
        quad(namedNode(`${ns4}telephone`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterial`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterial`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterial`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterial`), namedNode(`${rdfs}comment`), literal(`One or more links to information about the materials used in a wearable product.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterial`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterial`), namedNode(`${rdfs}label`), literal(`Has Textile Material`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterial`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Clothing`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterial`), namedNode(`${rdfs}range`), namedNode(`${ns4}TextileMaterialDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialContent`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialContent`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialContent`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialContent`), namedNode(`${rdfs}comment`), literal(`A description of the material composition used in conjunction with the material percentage.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialContent`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialContent`), namedNode(`${rdfs}label`), literal(`Textile Material Content`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialContent`), namedNode(`${rdfs}domain`), namedNode(`${ns4}WearableProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialContent`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialDescription`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialDescription`), namedNode(`${rdfs}comment`), literal(`This provides a name or brief description of one material contained within the product, for example Rayon.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialDescription`), namedNode(`${rdfs}label`), literal(`Textile Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}TextileMaterialDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialPercentage`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialPercentage`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialPercentage`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialPercentage`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialPercentage`), namedNode(`${rdfs}comment`), literal(`Corresponding net weight percentage of the product material specified via gs1:textileMaterialDescription, e.g. 70.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialPercentage`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialPercentage`), namedNode(`${rdfs}label`), literal(`Textile Material Percentage`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialPercentage`), namedNode(`${rdfs}domain`), namedNode(`${ns4}TextileMaterialDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialPercentage`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialThreadCount`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialThreadCount`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialThreadCount`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialThreadCount`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialThreadCount`), namedNode(`${rdfs}comment`), literal(`The quality of material (fabric) of a product based on the total number of vertical and horizontal threads in one square inch.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialThreadCount`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialThreadCount`), namedNode(`${rdfs}label`), literal(`Textile Material Thread Count`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialThreadCount`), namedNode(`${rdfs}domain`), namedNode(`${ns4}TextileMaterialDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialThreadCount`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialWeight`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialWeight`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialWeight`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialWeight`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialWeight`), namedNode(`${rdfs}comment`), literal(`The measured weight of the material expressed in ounces per square yard or grams per square meter.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialWeight`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialWeight`), namedNode(`${rdfs}label`), literal(`Textile Material Weight`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialWeight`), namedNode(`${rdfs}domain`), namedNode(`${ns4}TextileMaterialDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}textileMaterialWeight`), namedNode(`${rdfs}range`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}thiaminPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}thiaminPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}thiaminPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}thiaminPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Thiamin per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}thiaminPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}thiaminPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Thiamin Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}thiaminPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}thiaminPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}traceability`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}traceability`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}traceability`), namedNode(`${rdfs}comment`), literal(`A link to traceability information about the product (includes track & trace).`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}traceability`), namedNode(`${rdfs}label`), literal(`Traceability information`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}traceability`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}traceability`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}traceability`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}traceability`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}transFatPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}transFatPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}transFatPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}transFatPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Trans Fat per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}transFatPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}transFatPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Trans Fat Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}transFatPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}transFatPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}tutorial`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}tutorial`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}tutorial`), namedNode(`${rdfs}comment`), literal(`A link to a tutorial or set of tutorials, such as online classes, how-to videos etc.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}tutorial`), namedNode(`${rdfs}label`), literal(`Tutorial`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}tutorial`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}tutorial`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}tutorial`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}tutorial`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}unitCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}unitCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}unitCode`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}unitCode`), namedNode(`${rdfs}comment`), literal(`A string value indicating a Measurement Unit from UN/ECE Recommendation 20, Units of Measure used in International Trade e.g. GRM = gram - see http://www.unece.org/fileadmin/DAM/cefact/recommendations/rec20/rec20_rev3_Annex3e.pdf`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}unitCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}unitCode`), namedNode(`${rdfs}label`), literal(`Measurement Unit`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}unitCode`), namedNode(`${skos}exactMatch`), namedNode(`${schema}unitCode`), namedNode(ns4)),
        quad(namedNode(`${ns4}unitCode`), namedNode(`${rdfs}domain`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}unitCode`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(ns4)),
        quad(namedNode(`${ns4}upperMaterialType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}upperMaterialType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}upperMaterialType`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}upperMaterialType`), namedNode(`${rdfs}comment`), literal(`The material(s) used for the upper part of the footwear product. The upper is the part of a shoe, boot, slipper or other item of footwear that is above the sole.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}upperMaterialType`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}upperMaterialType`), namedNode(`${rdfs}label`), literal(`Has Upper Material`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}upperMaterialType`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Footwear`), namedNode(ns4)),
        quad(namedNode(`${ns4}upperMaterialType`), namedNode(`${rdfs}range`), namedNode(`${ns4}TextileMaterialDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}validFrom`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}validFrom`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}validFrom`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}validFrom`), namedNode(`${rdfs}comment`), literal(`The effective start date of the price .`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}validFrom`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}validFrom`), namedNode(`${rdfs}label`), literal(`Valid From`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}validFrom`), namedNode(`${skos}exactMatch`), namedNode(`${schema}validFrom`), namedNode(ns4)),
        quad(namedNode(`${ns4}validFrom`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}validFrom`), namedNode(`${rdfs}range`), namedNode(`${xsd}dateTime`), namedNode(ns4)),
        quad(namedNode(`${ns4}validThrough`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}validThrough`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}validThrough`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}validThrough`), namedNode(`${rdfs}comment`), literal(`The effective end date of the price .`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}validThrough`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}validThrough`), namedNode(`${rdfs}label`), literal(`Valid Through`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}validThrough`), namedNode(`${skos}exactMatch`), namedNode(`${schema}validThrough`), namedNode(ns4)),
        quad(namedNode(`${ns4}validThrough`), namedNode(`${rdfs}domain`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(namedNode(`${ns4}validThrough`), namedNode(`${rdfs}range`), namedNode(`${xsd}dateTime`), namedNode(ns4)),
        quad(namedNode(`${ns4}value`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}value`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}value`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}value`), namedNode(`${rdfs}comment`), literal(`A floating-point numeric value that is qualified by the corresponding measurement unit code - see gs1:unitCode`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}value`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}value`), namedNode(`${rdfs}label`), literal(`Measurement Value`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}value`), namedNode(`${skos}exactMatch`), namedNode(`${schema}value`), namedNode(ns4)),
        quad(namedNode(`${ns4}value`), namedNode(`${rdfs}domain`), namedNode(`${ns4}QuantitativeValue`), namedNode(ns4)),
        quad(namedNode(`${ns4}value`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(ns4)),
        quad(namedNode(`${ns4}variantDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}variantDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}variantDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}variantDescription`), namedNode(`${rdfs}comment`), literal(`Free text field used to identify the variant of the product. Variants are the distinguishing characteristics that differentiate products with the same brand and size including such things as the particular flavour, fragrance, taste.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}variantDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}variantDescription`), namedNode(`${rdfs}label`), literal(`Variant Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}variantDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}variantDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}verificationService`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}verificationService`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}verificationService`), namedNode(`${rdfs}comment`), literal(`A link to a GS1 Lightweight Messaging Service for verifying the status of a product and its identifier . `, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}verificationService`), namedNode(`${rdfs}label`), literal(`Verification Service`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}verificationService`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}verificationService`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}verificationService`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}verificationService`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}vintner`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}vintner`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}vintner`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}vintner`), namedNode(`${rdfs}comment`), literal(`The person hired by a winery or wine company who is responsible for many of the processes in the preparation, taste and quality of the wine produced. The science of wine making is referred to as oenology. The vintner is the oenologist.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}vintner`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}vintner`), namedNode(`${rdfs}label`), literal(`Vintner`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}vintner`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Beverage`), namedNode(ns4)),
        quad(namedNode(`${ns4}vintner`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminAPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminAPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminAPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminAPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Vitamin A per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminAPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminAPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Vitamin A Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminAPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminAPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminB12PerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminB12PerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminB12PerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminB12PerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Vitamin B12 per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminB12PerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminB12PerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Vitamin B12 Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminB12PerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminB12PerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminB6PerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminB6PerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminB6PerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminB6PerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Vitamin B6 per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminB6PerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminB6PerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Vitamin B6 Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminB6PerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminB6PerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminCPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminCPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminCPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminCPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Vitamin C per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminCPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminCPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Vitamin C Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminCPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminCPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminDPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminDPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminDPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminDPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Vitamin D per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminDPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminDPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Vitamin D Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminDPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminDPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminEPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminEPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminEPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminEPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Vitamin E per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminEPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminEPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Vitamin E Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminEPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminEPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminKPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminKPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminKPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminKPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Vitamin K per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminKPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminKPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Vitamin K Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminKPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}vitaminKPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(namedNode(`${ns4}warningCopyDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}warningCopyDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}warningCopyDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}warningCopyDescription`), namedNode(`${rdfs}comment`), literal(`Warning information is additional information that outlines special requirements, warning and caution information printed on the package.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}warningCopyDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}warningCopyDescription`), namedNode(`${rdfs}label`), literal(`Warning Copy Description`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}warningCopyDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}warningCopyDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}warranty`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}warranty`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}warranty`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}warranty`), namedNode(`${rdfs}comment`), literal(`The warranty associated with the product, as provided by the manufacturer.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}warranty`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}warranty`), namedNode(`${rdfs}label`), literal(`Has Offer Warranty`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}warranty`), namedNode(`${skos}exactMatch`), namedNode(`${schema}warranty`), namedNode(ns4)),
        quad(namedNode(`${ns4}warranty`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Offer`), namedNode(ns4)),
        quad(namedNode(`${ns4}warranty`), namedNode(`${rdfs}range`), namedNode(`${ns4}WarrantyPromise`), namedNode(ns4)),
        quad(namedNode(`${ns4}warranty`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}warranty`), namedNode(ns4)),
        quad(namedNode(`${ns4}warrantyScopeDescription`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}warrantyScopeDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}warrantyScopeDescription`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}warrantyScopeDescription`), namedNode(`${rdfs}comment`), literal(`The description of warranty available for the product. Allows for the representation of the same value in different languages but not for multiple values.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}warrantyScopeDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}warrantyScopeDescription`), namedNode(`${rdfs}label`), literal(`Warranty Scope`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}warrantyScopeDescription`), namedNode(`${rdfs}domain`), namedNode(`${ns4}WarrantyPromise`), namedNode(ns4)),
        quad(namedNode(`${ns4}warrantyScopeDescription`), namedNode(`${rdfs}range`), namedNode(`${rdf}langString`), namedNode(ns4)),
        quad(namedNode(`${ns4}warrantyScopeDescription`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${schema}description`), namedNode(ns4)),
        quad(namedNode(`${ns4}warrantyScopeDescription`), namedNode(`${rdfs}seeAlso`), namedNode(`${schema}WarrantyPromise`), namedNode(ns4)),
        quad(namedNode(`${ns4}whatsInTheBox`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}whatsInTheBox`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}whatsInTheBox`), namedNode(`${rdfs}comment`), literal(`A link to a description of all the individual items in a packaged item.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}whatsInTheBox`), namedNode(`${rdfs}label`), literal(`What's in the box?`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}whatsInTheBox`), namedNode(`${rdfs}domain`), namedNode(`${ns4}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}whatsInTheBox`), namedNode(`${rdfs}domain`), namedNode(`${schema}Product`), namedNode(ns4)),
        quad(namedNode(`${ns4}whatsInTheBox`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(ns4)),
        quad(namedNode(`${ns4}whatsInTheBox`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns4}linkType`), namedNode(ns4)),
        quad(namedNode(`${ns4}yield`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}yield`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}yield`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}yield`), namedNode(`${rdfs}comment`), literal(`Product quantity after preparation.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}yield`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}yield`), namedNode(`${rdfs}label`), literal(`Yield`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}yield`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodAndBeveragePreparationInformation`), namedNode(ns4)),
        quad(namedNode(`${ns4}yield`), namedNode(`${rdfs}range`), namedNode(`${ns4}ProductYieldDetails`), namedNode(ns4)),
        quad(namedNode(`${ns4}zincPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(ns4)),
        quad(namedNode(`${ns4}zincPerNutrientBasis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(ns4)),
        quad(namedNode(`${ns4}zincPerNutrientBasis`), namedNode(`${vs}term_status`), literal(`stable`), namedNode(ns4)),
        quad(namedNode(`${ns4}zincPerNutrientBasis`), namedNode(`${rdfs}comment`), literal(`Zinc per specified nutrient basis quantity.`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}zincPerNutrientBasis`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns4), namedNode(ns4)),
        quad(namedNode(`${ns4}zincPerNutrientBasis`), namedNode(`${rdfs}label`), literal(`Zinc Per Nutrient Basis Quantity`, 'en'), namedNode(ns4)),
        quad(namedNode(`${ns4}zincPerNutrientBasis`), namedNode(`${rdfs}domain`), namedNode(`${ns4}FoodBeverageTobaccoProduct`), namedNode(ns4)),
        quad(namedNode(`${ns4}zincPerNutrientBasis`), namedNode(`${rdfs}range`), namedNode(`${ns4}NutritionMeasurementType`), namedNode(ns4)),
        quad(blankNodes[5], namedNode(`${rdf}first`), namedNode(`${ns4}PostalAddress`), namedNode(ns4)),
        quad(blankNodes[5], namedNode(`${rdf}rest`), blankNodes[6], namedNode(ns4)),
        quad(blankNodes[6], namedNode(`${rdf}first`), namedNode(`${ns4}Organization`), namedNode(ns4)),
        quad(blankNodes[6], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns4)),
        quad(blankNodes[7], namedNode(`${rdf}first`), namedNode(`${ns4}Place`), namedNode(ns4)),
        quad(blankNodes[7], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns4)),
        quad(blankNodes[1], namedNode(`${rdf}first`), namedNode(`${ns4}Organization`), namedNode(ns4)),
        quad(blankNodes[1], namedNode(`${rdf}rest`), blankNodes[7], namedNode(ns4)),
        quad(blankNodes[3], namedNode(`${rdf}first`), namedNode(`${ns4}Offer`), namedNode(ns4)),
        quad(blankNodes[3], namedNode(`${rdf}rest`), blankNodes[8], namedNode(ns4)),
        quad(blankNodes[8], namedNode(`${rdf}first`), namedNode(`${ns4}PriceSpecification`), namedNode(ns4)),
        quad(blankNodes[8], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(ns4)),
    ];
};
