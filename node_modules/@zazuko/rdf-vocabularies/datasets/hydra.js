"use strict";
/* This file was automatically generated. Do not edit by hand. */
Object.defineProperty(exports, "__esModule", { value: true });
const { hydra, rdf, rdfs, ns4, vs, owl, ns7, cc, ns9, ns10, dcterms, vann, xsd, ns14, schema } = {
    'hydra': 'http://www.w3.org/ns/hydra/core#',
    'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
    'ns4': 'http://www.w3.org/ns/hydra/',
    'vs': 'http://www.w3.org/2003/06/sw-vocab-status/ns#',
    'owl': 'http://www.w3.org/2002/07/owl#',
    'ns7': 'https://www.hydra-cg.com/spec/latest/core/',
    'cc': 'http://creativecommons.org/ns#',
    'ns9': 'http://www.hydra-cg.com/',
    'ns10': 'http://creativecommons.org/licenses/by/4.0/',
    'dcterms': 'http://purl.org/dc/terms/',
    'vann': 'http://purl.org/vocab/vann/',
    'xsd': 'http://www.w3.org/2001/XMLSchema#',
    'ns14': 'http://tools.ietf.org/html/',
    'schema': 'http://schema.org/'
};
exports.default = ({ literal, namedNode, quad }) => {
    return [
        quad(namedNode(`${hydra}ApiDocumentation`), namedNode(`${rdf}type`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}ApiDocumentation`), namedNode(`${rdfs}comment`), literal(`The Hydra API documentation class`), namedNode(hydra)),
        quad(namedNode(`${hydra}ApiDocumentation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}ApiDocumentation`), namedNode(`${rdfs}label`), literal(`ApiDocumentation`), namedNode(hydra)),
        quad(namedNode(`${hydra}ApiDocumentation`), namedNode(`${rdfs}subClassOf`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}ApiDocumentation`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}Class`), namedNode(`${rdf}type`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}Class`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}Class`), namedNode(`${rdfs}comment`), literal(`The class of Hydra classes.`), namedNode(hydra)),
        quad(namedNode(`${hydra}Class`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}Class`), namedNode(`${rdfs}label`), literal(`Hydra Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}Class`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}Class`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${ns4}core`), namedNode(`${rdf}type`), namedNode(`${owl}Ontology`), namedNode(hydra)),
        quad(namedNode(`${ns4}core`), namedNode(`${rdfs}comment`), literal(`A lightweight vocabulary for hypermedia-driven Web APIs`), namedNode(hydra)),
        quad(namedNode(`${ns4}core`), namedNode(`${rdfs}label`), literal(`The Hydra Core Vocabulary`), namedNode(hydra)),
        quad(namedNode(`${ns4}core`), namedNode(`${rdfs}seeAlso`), namedNode(ns7), namedNode(hydra)),
        quad(namedNode(`${ns4}core`), namedNode(`${cc}attributionName`), literal(`Hydra W3C Community Group`), namedNode(hydra)),
        quad(namedNode(`${ns4}core`), namedNode(`${cc}attributionURL`), namedNode(ns9), namedNode(hydra)),
        quad(namedNode(`${ns4}core`), namedNode(`${cc}license`), namedNode(ns10), namedNode(hydra)),
        quad(namedNode(`${ns4}core`), namedNode(`${dcterms}description`), literal(`The Hydra Core Vocabulary is a lightweight vocabulary to create hypermedia-driven Web APIs. By specifying a number of concepts commonly used in Web APIs it enables the creation of generic API clients.`), namedNode(hydra)),
        quad(namedNode(`${ns4}core`), namedNode(`${dcterms}publisher`), literal(`Hydra W3C Community Group`), namedNode(hydra)),
        quad(namedNode(`${ns4}core`), namedNode(`${dcterms}rights`), literal(`Copyright Â© 2012-2014 the Contributors to the Hydra Core Vocabulary Specification`), namedNode(hydra)),
        quad(namedNode(`${ns4}core`), namedNode(`${vann}preferredNamespacePrefix`), literal(`hydra`), namedNode(hydra)),
        quad(namedNode(`${hydra}Resource`), namedNode(`${rdf}type`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}Resource`), namedNode(`${rdfs}comment`), literal(`The class of dereferenceable resources by means a client can attempt to dereference; however, the received responses should still be verified.`), namedNode(hydra)),
        quad(namedNode(`${hydra}Resource`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}Resource`), namedNode(`${rdfs}label`), literal(`Hydra Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}Resource`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}BaseUriSource`), namedNode(`${rdf}type`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}BaseUriSource`), namedNode(`${rdfs}comment`), literal(`Provides a base abstract for base Uri source for Iri template resolution.`), namedNode(hydra)),
        quad(namedNode(`${hydra}BaseUriSource`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}BaseUriSource`), namedNode(`${rdfs}label`), literal(`Base Uri source`), namedNode(hydra)),
        quad(namedNode(`${hydra}BaseUriSource`), namedNode(`${rdfs}subClassOf`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}BaseUriSource`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}BasicRepresentation`), namedNode(`${rdf}type`), namedNode(`${hydra}VariableRepresentation`), namedNode(hydra)),
        quad(namedNode(`${hydra}BasicRepresentation`), namedNode(`${rdfs}comment`), literal(`A representation that serializes just the lexical form of a variable value, but omits language and type information.`), namedNode(hydra)),
        quad(namedNode(`${hydra}BasicRepresentation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}BasicRepresentation`), namedNode(`${rdfs}label`), literal(`BasicRepresentation`), namedNode(hydra)),
        quad(namedNode(`${hydra}BasicRepresentation`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}VariableRepresentation`), namedNode(`${rdf}type`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}VariableRepresentation`), namedNode(`${rdfs}comment`), literal(`A representation specifies how to serialize variable values into strings.`), namedNode(hydra)),
        quad(namedNode(`${hydra}VariableRepresentation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}VariableRepresentation`), namedNode(`${rdfs}label`), literal(`VariableRepresentation`), namedNode(hydra)),
        quad(namedNode(`${hydra}VariableRepresentation`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}Collection`), namedNode(`${rdf}type`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}Collection`), namedNode(`${rdfs}comment`), literal(`A collection holding references to a number of related resources.`), namedNode(hydra)),
        quad(namedNode(`${hydra}Collection`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}Collection`), namedNode(`${rdfs}label`), literal(`Collection`), namedNode(hydra)),
        quad(namedNode(`${hydra}Collection`), namedNode(`${rdfs}subClassOf`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}Collection`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}Error`), namedNode(`${rdf}type`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}Error`), namedNode(`${rdfs}comment`), literal(`A runtime error, used to report information beyond the returned status code.`), namedNode(hydra)),
        quad(namedNode(`${hydra}Error`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}Error`), namedNode(`${rdfs}label`), literal(`Error`), namedNode(hydra)),
        quad(namedNode(`${hydra}Error`), namedNode(`${rdfs}subClassOf`), namedNode(`${hydra}Status`), namedNode(hydra)),
        quad(namedNode(`${hydra}Error`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}Status`), namedNode(`${rdf}type`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}Status`), namedNode(`${rdfs}comment`), literal(`Additional information about a status code that might be returned.`), namedNode(hydra)),
        quad(namedNode(`${hydra}Status`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}Status`), namedNode(`${rdfs}label`), literal(`Status code description`), namedNode(hydra)),
        quad(namedNode(`${hydra}Status`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}ExplicitRepresentation`), namedNode(`${rdf}type`), namedNode(`${hydra}VariableRepresentation`), namedNode(hydra)),
        quad(namedNode(`${hydra}ExplicitRepresentation`), namedNode(`${rdfs}comment`), literal(`A representation that serializes a variable value including its language and type information and thus differentiating between IRIs and literals.`), namedNode(hydra)),
        quad(namedNode(`${hydra}ExplicitRepresentation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}ExplicitRepresentation`), namedNode(`${rdfs}label`), literal(`ExplicitRepresentation`), namedNode(hydra)),
        quad(namedNode(`${hydra}ExplicitRepresentation`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}HeaderSpecification`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}HeaderSpecification`), namedNode(`${rdfs}comment`), literal(`Specifies a possible either expected or returned header values`), namedNode(hydra)),
        quad(namedNode(`${hydra}HeaderSpecification`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}HeaderSpecification`), namedNode(`${rdfs}label`), literal(`Header specification`), namedNode(hydra)),
        quad(namedNode(`${hydra}HeaderSpecification`), namedNode(`${rdfs}subClassOf`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}HeaderSpecification`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}IriTemplate`), namedNode(`${rdf}type`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}IriTemplate`), namedNode(`${rdfs}comment`), literal(`The class of IRI templates.`), namedNode(hydra)),
        quad(namedNode(`${hydra}IriTemplate`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}IriTemplate`), namedNode(`${rdfs}label`), literal(`IRI Template`), namedNode(hydra)),
        quad(namedNode(`${hydra}IriTemplate`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}IriTemplateMapping`), namedNode(`${rdf}type`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}IriTemplateMapping`), namedNode(`${rdfs}comment`), literal(`A mapping from an IRI template variable to a property.`), namedNode(hydra)),
        quad(namedNode(`${hydra}IriTemplateMapping`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}IriTemplateMapping`), namedNode(`${rdfs}label`), literal(`IriTemplateMapping`), namedNode(hydra)),
        quad(namedNode(`${hydra}IriTemplateMapping`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}Link`), namedNode(`${rdf}type`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}Link`), namedNode(`${rdfs}comment`), literal(`The class of properties representing links.`), namedNode(hydra)),
        quad(namedNode(`${hydra}Link`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}Link`), namedNode(`${rdfs}label`), literal(`Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}Link`), namedNode(`${rdfs}subClassOf`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}Link`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}Link`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}LinkContext`), namedNode(`${rdf}type`), namedNode(`${hydra}BaseUriSource`), namedNode(hydra)),
        quad(namedNode(`${hydra}LinkContext`), namedNode(`${rdfs}comment`), literal(`States that the link's context IRI, as defined in RFC 5988, should be used as the base Uri`), namedNode(hydra)),
        quad(namedNode(`${hydra}LinkContext`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}LinkContext`), namedNode(`${rdfs}label`), literal(`Link context`), namedNode(hydra)),
        quad(namedNode(`${hydra}LinkContext`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}Operation`), namedNode(`${rdf}type`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}Operation`), namedNode(`${rdfs}comment`), literal(`An operation.`), namedNode(hydra)),
        quad(namedNode(`${hydra}Operation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}Operation`), namedNode(`${rdfs}label`), literal(`Operation`), namedNode(hydra)),
        quad(namedNode(`${hydra}Operation`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}PartialCollectionView`), namedNode(`${rdf}type`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}PartialCollectionView`), namedNode(`${rdfs}comment`), literal(`A PartialCollectionView describes a partial view of a Collection. Multiple PartialCollectionViews can be connected with the the next/previous properties to allow a client to retrieve all members of the collection.`), namedNode(hydra)),
        quad(namedNode(`${hydra}PartialCollectionView`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}PartialCollectionView`), namedNode(`${rdfs}label`), literal(`PartialCollectionView`), namedNode(hydra)),
        quad(namedNode(`${hydra}PartialCollectionView`), namedNode(`${rdfs}subClassOf`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}PartialCollectionView`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}Rfc3986`), namedNode(`${rdf}type`), namedNode(`${hydra}BaseUriSource`), namedNode(hydra)),
        quad(namedNode(`${hydra}Rfc3986`), namedNode(`${rdfs}comment`), literal(`States that the base Uri should be established using RFC 3986 reference resolution algorithm specified in section 5.`), namedNode(hydra)),
        quad(namedNode(`${hydra}Rfc3986`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}Rfc3986`), namedNode(`${rdfs}label`), literal(`RFC 3986 based`), namedNode(hydra)),
        quad(namedNode(`${hydra}Rfc3986`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}Rfc6570Template`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(hydra)),
        quad(namedNode(`${hydra}Rfc6570Template`), namedNode(`${rdfs}comment`), literal(`An IRI template as defined by RFC6570.`), namedNode(hydra)),
        quad(namedNode(`${hydra}Rfc6570Template`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}Rfc6570Template`), namedNode(`${rdfs}label`), literal(`RFC6570 IRI template`), namedNode(hydra)),
        quad(namedNode(`${hydra}Rfc6570Template`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}Rfc6570Template`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(hydra)),
        quad(namedNode(`${hydra}Rfc6570Template`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns14}rfc6570`), namedNode(hydra)),
        quad(namedNode(`${hydra}SupportedProperty`), namedNode(`${rdf}type`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}SupportedProperty`), namedNode(`${rdfs}comment`), literal(`A property known to be supported by a Hydra class.`), namedNode(hydra)),
        quad(namedNode(`${hydra}SupportedProperty`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}SupportedProperty`), namedNode(`${rdfs}label`), literal(`Supported Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}SupportedProperty`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}TemplatedLink`), namedNode(`${rdf}type`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}TemplatedLink`), namedNode(`${rdfs}comment`), literal(`A templated link.`), namedNode(hydra)),
        quad(namedNode(`${hydra}TemplatedLink`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}TemplatedLink`), namedNode(`${rdfs}label`), literal(`Templated Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}TemplatedLink`), namedNode(`${rdfs}subClassOf`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}TemplatedLink`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}TemplatedLink`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}apiDocumentation`), namedNode(`${rdf}type`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}apiDocumentation`), namedNode(`${rdfs}comment`), literal(`A link to the API documentation`), namedNode(hydra)),
        quad(namedNode(`${hydra}apiDocumentation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}apiDocumentation`), namedNode(`${rdfs}label`), literal(`apiDocumentation`), namedNode(hydra)),
        quad(namedNode(`${hydra}apiDocumentation`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}apiDocumentation`), namedNode(`${rdfs}range`), namedNode(`${hydra}ApiDocumentation`), namedNode(hydra)),
        quad(namedNode(`${hydra}apiDocumentation`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}closedSet`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}closedSet`), namedNode(`${rdfs}comment`), literal(`Determines whether the provided set of header values is closed or not.`), namedNode(hydra)),
        quad(namedNode(`${hydra}closedSet`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}closedSet`), namedNode(`${rdfs}label`), literal(`closed set`), namedNode(hydra)),
        quad(namedNode(`${hydra}closedSet`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}closedSet`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(hydra)),
        quad(namedNode(`${hydra}closedSet`), namedNode(`${rdfs}domain`), namedNode(`${hydra}HeaderSpecification`), namedNode(hydra)),
        quad(namedNode(`${hydra}collection`), namedNode(`${rdf}type`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}collection`), namedNode(`${rdfs}comment`), literal(`Collections somehow related to this resource.`), namedNode(hydra)),
        quad(namedNode(`${hydra}collection`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}collection`), namedNode(`${rdfs}label`), literal(`collection`), namedNode(hydra)),
        quad(namedNode(`${hydra}collection`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}collection`), namedNode(`${rdfs}range`), namedNode(`${hydra}Collection`), namedNode(hydra)),
        quad(namedNode(`${hydra}description`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}description`), namedNode(`${rdfs}comment`), literal(`A description.`), namedNode(hydra)),
        quad(namedNode(`${hydra}description`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}description`), namedNode(`${rdfs}label`), literal(`description`), namedNode(hydra)),
        quad(namedNode(`${hydra}description`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}description`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(hydra)),
        quad(namedNode(`${hydra}description`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}ApiDocumentation`), namedNode(hydra)),
        quad(namedNode(`${hydra}description`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}description`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}Status`), namedNode(hydra)),
        quad(namedNode(`${hydra}description`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}description`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}Operation`), namedNode(hydra)),
        quad(namedNode(`${hydra}description`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}SupportedProperty`), namedNode(hydra)),
        quad(namedNode(`${hydra}description`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}TemplatedLink`), namedNode(hydra)),
        quad(namedNode(`${hydra}description`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${rdfs}comment`), namedNode(hydra)),
        quad(namedNode(`${hydra}entrypoint`), namedNode(`${rdf}type`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}entrypoint`), namedNode(`${rdfs}comment`), literal(`A link to main entry point of the Web API`), namedNode(hydra)),
        quad(namedNode(`${hydra}entrypoint`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}entrypoint`), namedNode(`${rdfs}label`), literal(`entrypoint`), namedNode(hydra)),
        quad(namedNode(`${hydra}entrypoint`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}entrypoint`), namedNode(`${rdfs}range`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}entrypoint`), namedNode(`${rdfs}domain`), namedNode(`${hydra}ApiDocumentation`), namedNode(hydra)),
        quad(namedNode(`${hydra}expects`), namedNode(`${rdf}type`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}expects`), namedNode(`${rdfs}comment`), literal(`The information expected by the Web API.`), namedNode(hydra)),
        quad(namedNode(`${hydra}expects`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}expects`), namedNode(`${rdfs}label`), literal(`expects`), namedNode(hydra)),
        quad(namedNode(`${hydra}expects`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}expects`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Operation`), namedNode(hydra)),
        quad(namedNode(`${hydra}expects`), namedNode(`${schema}rangeIncludes`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}expects`), namedNode(`${schema}rangeIncludes`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}expects`), namedNode(`${schema}rangeIncludes`), namedNode(`${rdfs}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}expects`), namedNode(`${schema}rangeIncludes`), namedNode(`${rdfs}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}expectsHeader`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}expectsHeader`), namedNode(`${rdfs}comment`), literal(`Specification of the header expected by the operation.`), namedNode(hydra)),
        quad(namedNode(`${hydra}expectsHeader`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}expectsHeader`), namedNode(`${rdfs}label`), literal(`expects header`), namedNode(hydra)),
        quad(namedNode(`${hydra}expectsHeader`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}expectsHeader`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Operation`), namedNode(hydra)),
        quad(namedNode(`${hydra}expectsHeader`), namedNode(`${schema}rangeIncludes`), namedNode(`${hydra}HeaderSpecification`), namedNode(hydra)),
        quad(namedNode(`${hydra}expectsHeader`), namedNode(`${schema}rangeIncludes`), namedNode(`${xsd}string`), namedNode(hydra)),
        quad(namedNode(`${hydra}extension`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}extension`), namedNode(`${rdfs}comment`), literal(`Hint on what kind of extensions are in use.`), namedNode(hydra)),
        quad(namedNode(`${hydra}extension`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}extension`), namedNode(`${rdfs}label`), literal(`extension`), namedNode(hydra)),
        quad(namedNode(`${hydra}extension`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}extension`), namedNode(`${rdfs}domain`), namedNode(`${hydra}ApiDocumentation`), namedNode(hydra)),
        quad(namedNode(`${hydra}first`), namedNode(`${rdf}type`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}first`), namedNode(`${rdfs}comment`), literal(`The first resource of an interlinked set of resources.`), namedNode(hydra)),
        quad(namedNode(`${hydra}first`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}first`), namedNode(`${rdfs}label`), literal(`first`), namedNode(hydra)),
        quad(namedNode(`${hydra}first`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}first`), namedNode(`${rdfs}range`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}first`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}freetextQuery`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}freetextQuery`), namedNode(`${rdfs}comment`), literal(`A property representing a freetext query.`), namedNode(hydra)),
        quad(namedNode(`${hydra}freetextQuery`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}freetextQuery`), namedNode(`${rdfs}label`), literal(`freetext query`), namedNode(hydra)),
        quad(namedNode(`${hydra}freetextQuery`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}freetextQuery`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(hydra)),
        quad(namedNode(`${hydra}freetextQuery`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}headerName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}headerName`), namedNode(`${rdfs}comment`), literal(`Name of the header.`), namedNode(hydra)),
        quad(namedNode(`${hydra}headerName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}headerName`), namedNode(`${rdfs}label`), literal(`header name`), namedNode(hydra)),
        quad(namedNode(`${hydra}headerName`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}headerName`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(hydra)),
        quad(namedNode(`${hydra}headerName`), namedNode(`${rdfs}domain`), namedNode(`${hydra}HeaderSpecification`), namedNode(hydra)),
        quad(namedNode(`${hydra}last`), namedNode(`${rdf}type`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}last`), namedNode(`${rdfs}comment`), literal(`The last resource of an interlinked set of resources.`), namedNode(hydra)),
        quad(namedNode(`${hydra}last`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}last`), namedNode(`${rdfs}label`), literal(`last`), namedNode(hydra)),
        quad(namedNode(`${hydra}last`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}last`), namedNode(`${rdfs}range`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}last`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}limit`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}limit`), namedNode(`${rdfs}comment`), literal(`Instructs to limit set only to N elements.`), namedNode(hydra)),
        quad(namedNode(`${hydra}limit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}limit`), namedNode(`${rdfs}label`), literal(`take`), namedNode(hydra)),
        quad(namedNode(`${hydra}limit`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}limit`), namedNode(`${rdfs}range`), namedNode(`${xsd}nonNegativeInteger`), namedNode(hydra)),
        quad(namedNode(`${hydra}manages`), namedNode(`${rdfs}comment`), literal(`This predicate is left for compatibility purposes and hydra:memberAssertion should be used instead.`), namedNode(hydra)),
        quad(namedNode(`${hydra}manages`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}manages`), namedNode(`${rdfs}label`), literal(`manages`), namedNode(hydra)),
        quad(namedNode(`${hydra}manages`), namedNode(`${vs}term_status`), literal(`archaic`), namedNode(hydra)),
        quad(namedNode(`${hydra}manages`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${hydra}memberAssertion`), namedNode(hydra)),
        quad(namedNode(`${hydra}memberAssertion`), namedNode(`${rdfs}comment`), literal(`Semantics of each member provided by the collection.`), namedNode(hydra)),
        quad(namedNode(`${hydra}memberAssertion`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}memberAssertion`), namedNode(`${rdfs}label`), literal(`member assertion`), namedNode(hydra)),
        quad(namedNode(`${hydra}memberAssertion`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}memberAssertion`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Collection`), namedNode(hydra)),
        quad(namedNode(`${hydra}mapping`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}mapping`), namedNode(`${rdfs}comment`), literal(`A variable-to-property mapping of the IRI template.`), namedNode(hydra)),
        quad(namedNode(`${hydra}mapping`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}mapping`), namedNode(`${rdfs}label`), literal(`mapping`), namedNode(hydra)),
        quad(namedNode(`${hydra}mapping`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}mapping`), namedNode(`${rdfs}range`), namedNode(`${hydra}IriTemplateMapping`), namedNode(hydra)),
        quad(namedNode(`${hydra}mapping`), namedNode(`${rdfs}domain`), namedNode(`${hydra}IriTemplate`), namedNode(hydra)),
        quad(namedNode(`${hydra}member`), namedNode(`${rdf}type`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}member`), namedNode(`${rdfs}comment`), literal(`A member of the collection`), namedNode(hydra)),
        quad(namedNode(`${hydra}member`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}member`), namedNode(`${rdfs}label`), literal(`member`), namedNode(hydra)),
        quad(namedNode(`${hydra}member`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}member`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Collection`), namedNode(hydra)),
        quad(namedNode(`${hydra}method`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}method`), namedNode(`${rdfs}comment`), literal(`The HTTP method.`), namedNode(hydra)),
        quad(namedNode(`${hydra}method`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}method`), namedNode(`${rdfs}label`), literal(`method`), namedNode(hydra)),
        quad(namedNode(`${hydra}method`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}method`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(hydra)),
        quad(namedNode(`${hydra}method`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Operation`), namedNode(hydra)),
        quad(namedNode(`${hydra}next`), namedNode(`${rdf}type`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}next`), namedNode(`${rdfs}comment`), literal(`The resource following the current instance in an interlinked set of resources.`), namedNode(hydra)),
        quad(namedNode(`${hydra}next`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}next`), namedNode(`${rdfs}label`), literal(`next`), namedNode(hydra)),
        quad(namedNode(`${hydra}next`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}next`), namedNode(`${rdfs}range`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}next`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}object`), namedNode(`${rdfs}comment`), literal(`The object.`), namedNode(hydra)),
        quad(namedNode(`${hydra}object`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}object`), namedNode(`${rdfs}label`), literal(`object`), namedNode(hydra)),
        quad(namedNode(`${hydra}object`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}offset`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}offset`), namedNode(`${rdfs}comment`), literal(`Instructs to skip N elements of the set.`), namedNode(hydra)),
        quad(namedNode(`${hydra}offset`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}offset`), namedNode(`${rdfs}label`), literal(`skip`), namedNode(hydra)),
        quad(namedNode(`${hydra}offset`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}offset`), namedNode(`${rdfs}range`), namedNode(`${xsd}nonNegativeInteger`), namedNode(hydra)),
        quad(namedNode(`${hydra}operation`), namedNode(`${rdf}type`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}operation`), namedNode(`${rdfs}comment`), literal(`An operation supported by the Hydra resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}operation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}operation`), namedNode(`${rdfs}label`), literal(`operation`), namedNode(hydra)),
        quad(namedNode(`${hydra}operation`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}operation`), namedNode(`${rdfs}range`), namedNode(`${hydra}Operation`), namedNode(hydra)),
        quad(namedNode(`${hydra}operation`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}pageIndex`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}pageIndex`), namedNode(`${rdfs}comment`), literal(`Instructs to provide a specific page of the collection at a given index.`), namedNode(hydra)),
        quad(namedNode(`${hydra}pageIndex`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}pageIndex`), namedNode(`${rdfs}label`), literal(`page index`), namedNode(hydra)),
        quad(namedNode(`${hydra}pageIndex`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}pageIndex`), namedNode(`${rdfs}range`), namedNode(`${xsd}nonNegativeInteger`), namedNode(hydra)),
        quad(namedNode(`${hydra}pageIndex`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${hydra}pageReference`), namedNode(hydra)),
        quad(namedNode(`${hydra}pageReference`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}pageReference`), namedNode(`${rdfs}comment`), literal(`Instructs to provide a specific page reference of the collection.`), namedNode(hydra)),
        quad(namedNode(`${hydra}pageReference`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}pageReference`), namedNode(`${rdfs}label`), literal(`page reference`), namedNode(hydra)),
        quad(namedNode(`${hydra}pageReference`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}possibleStatus`), namedNode(`${rdf}type`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}possibleStatus`), namedNode(`${rdfs}comment`), literal(`A status that might be returned by the Web API (other statuses should be expected and properly handled as well)`), namedNode(hydra)),
        quad(namedNode(`${hydra}possibleStatus`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}possibleStatus`), namedNode(`${rdfs}label`), literal(`possible status`), namedNode(hydra)),
        quad(namedNode(`${hydra}possibleStatus`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}possibleStatus`), namedNode(`${rdfs}range`), namedNode(`${hydra}Status`), namedNode(hydra)),
        quad(namedNode(`${hydra}possibleStatus`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}ApiDocumentation`), namedNode(hydra)),
        quad(namedNode(`${hydra}possibleStatus`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}Operation`), namedNode(hydra)),
        quad(namedNode(`${hydra}possibleValue`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}possibleValue`), namedNode(`${rdfs}comment`), literal(`Possible value of the header.`), namedNode(hydra)),
        quad(namedNode(`${hydra}possibleValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}possibleValue`), namedNode(`${rdfs}label`), literal(`possible header value`), namedNode(hydra)),
        quad(namedNode(`${hydra}possibleValue`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}possibleValue`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(hydra)),
        quad(namedNode(`${hydra}possibleValue`), namedNode(`${rdfs}domain`), namedNode(`${hydra}HeaderSpecification`), namedNode(hydra)),
        quad(namedNode(`${hydra}previous`), namedNode(`${rdf}type`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}previous`), namedNode(`${rdfs}comment`), literal(`The resource preceding the current instance in an interlinked set of resources.`), namedNode(hydra)),
        quad(namedNode(`${hydra}previous`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}previous`), namedNode(`${rdfs}label`), literal(`previous`), namedNode(hydra)),
        quad(namedNode(`${hydra}previous`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}previous`), namedNode(`${rdfs}range`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}previous`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}property`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}property`), namedNode(`${rdfs}comment`), literal(`A property`), namedNode(hydra)),
        quad(namedNode(`${hydra}property`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}property`), namedNode(`${rdfs}label`), literal(`property`), namedNode(hydra)),
        quad(namedNode(`${hydra}property`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}property`), namedNode(`${rdfs}range`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}property`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}IriTemplateMapping`), namedNode(hydra)),
        quad(namedNode(`${hydra}property`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}SupportedProperty`), namedNode(hydra)),
        quad(namedNode(`${hydra}readable`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}readable`), namedNode(`${rdfs}comment`), literal(`True if the client can retrieve the property's value, false otherwise.`), namedNode(hydra)),
        quad(namedNode(`${hydra}readable`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}readable`), namedNode(`${rdfs}label`), literal(`readable`), namedNode(hydra)),
        quad(namedNode(`${hydra}readable`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}readable`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(hydra)),
        quad(namedNode(`${hydra}readable`), namedNode(`${rdfs}domain`), namedNode(`${hydra}SupportedProperty`), namedNode(hydra)),
        quad(namedNode(`${hydra}required`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}required`), namedNode(`${rdfs}comment`), literal(`True if the property is required, false otherwise.`), namedNode(hydra)),
        quad(namedNode(`${hydra}required`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}required`), namedNode(`${rdfs}label`), literal(`required`), namedNode(hydra)),
        quad(namedNode(`${hydra}required`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}required`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(hydra)),
        quad(namedNode(`${hydra}required`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}IriTemplateMapping`), namedNode(hydra)),
        quad(namedNode(`${hydra}required`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}SupportedProperty`), namedNode(hydra)),
        quad(namedNode(`${hydra}resolveRelativeUsing`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}resolveRelativeUsing`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}resolveRelativeUsing`), namedNode(`${rdfs}label`), literal(`relative Uri resolution`), namedNode(hydra)),
        quad(namedNode(`${hydra}resolveRelativeUsing`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}resolveRelativeUsing`), namedNode(`${rdfs}range`), namedNode(`${hydra}BaseUriSource`), namedNode(hydra)),
        quad(namedNode(`${hydra}resolveRelativeUsing`), namedNode(`${rdfs}domain`), namedNode(`${hydra}IriTemplate`), namedNode(hydra)),
        quad(namedNode(`${hydra}returns`), namedNode(`${rdf}type`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}returns`), namedNode(`${rdfs}comment`), literal(`The information returned by the Web API on success`), namedNode(hydra)),
        quad(namedNode(`${hydra}returns`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}returns`), namedNode(`${rdfs}label`), literal(`returns`), namedNode(hydra)),
        quad(namedNode(`${hydra}returns`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}returns`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Operation`), namedNode(hydra)),
        quad(namedNode(`${hydra}returns`), namedNode(`${schema}rangeIncludes`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}returns`), namedNode(`${schema}rangeIncludes`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}returns`), namedNode(`${schema}rangeIncludes`), namedNode(`${rdfs}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}returns`), namedNode(`${schema}rangeIncludes`), namedNode(`${rdfs}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}returnsHeader`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}returnsHeader`), namedNode(`${rdfs}comment`), literal(`Name of the header returned by the operation.`), namedNode(hydra)),
        quad(namedNode(`${hydra}returnsHeader`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}returnsHeader`), namedNode(`${rdfs}label`), literal(`returns header`), namedNode(hydra)),
        quad(namedNode(`${hydra}returnsHeader`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}returnsHeader`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Operation`), namedNode(hydra)),
        quad(namedNode(`${hydra}returnsHeader`), namedNode(`${schema}rangeIncludes`), namedNode(`${hydra}HeaderSpecification`), namedNode(hydra)),
        quad(namedNode(`${hydra}returnsHeader`), namedNode(`${schema}rangeIncludes`), namedNode(`${xsd}string`), namedNode(hydra)),
        quad(namedNode(`${hydra}search`), namedNode(`${rdf}type`), namedNode(`${hydra}TemplatedLink`), namedNode(hydra)),
        quad(namedNode(`${hydra}search`), namedNode(`${rdfs}comment`), literal(`A IRI template that can be used to query a collection.`), namedNode(hydra)),
        quad(namedNode(`${hydra}search`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}search`), namedNode(`${rdfs}label`), literal(`search`), namedNode(hydra)),
        quad(namedNode(`${hydra}search`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}search`), namedNode(`${rdfs}range`), namedNode(`${hydra}IriTemplate`), namedNode(hydra)),
        quad(namedNode(`${hydra}search`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Resource`), namedNode(hydra)),
        quad(namedNode(`${hydra}statusCode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}statusCode`), namedNode(`${rdfs}comment`), literal(`The HTTP status code. Please note it may happen this value will be different to actual status code received.`), namedNode(hydra)),
        quad(namedNode(`${hydra}statusCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}statusCode`), namedNode(`${rdfs}label`), literal(`status code`), namedNode(hydra)),
        quad(namedNode(`${hydra}statusCode`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}statusCode`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(hydra)),
        quad(namedNode(`${hydra}statusCode`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Status`), namedNode(hydra)),
        quad(namedNode(`${hydra}subject`), namedNode(`${rdfs}comment`), literal(`The subject.`), namedNode(hydra)),
        quad(namedNode(`${hydra}subject`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}subject`), namedNode(`${rdfs}label`), literal(`subject`), namedNode(hydra)),
        quad(namedNode(`${hydra}subject`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedClass`), namedNode(`${rdf}type`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedClass`), namedNode(`${rdfs}comment`), literal(`A class known to be supported by the Web API`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedClass`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedClass`), namedNode(`${rdfs}label`), literal(`supported classes`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedClass`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedClass`), namedNode(`${rdfs}range`), namedNode(`${rdfs}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedClass`), namedNode(`${rdfs}domain`), namedNode(`${hydra}ApiDocumentation`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedOperation`), namedNode(`${rdf}type`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedOperation`), namedNode(`${rdfs}comment`), literal(`An operation supported by instances of the specific Hydra class, or the target of the Hydra link, or IRI template.`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedOperation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedOperation`), namedNode(`${rdfs}label`), literal(`supported operation`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedOperation`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedOperation`), namedNode(`${rdfs}range`), namedNode(`${hydra}Operation`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedOperation`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedOperation`), namedNode(`${schema}domainIncludes`), namedNode(`${rdfs}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedOperation`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedOperation`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}SupportedProperty`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedOperation`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}TemplatedLink`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedProperty`), namedNode(`${rdf}type`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedProperty`), namedNode(`${rdfs}comment`), literal(`The properties known to be supported by a Hydra class`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedProperty`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedProperty`), namedNode(`${rdfs}label`), literal(`supported properties`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedProperty`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedProperty`), namedNode(`${rdfs}range`), namedNode(`${hydra}SupportedProperty`), namedNode(hydra)),
        quad(namedNode(`${hydra}supportedProperty`), namedNode(`${rdfs}domain`), namedNode(`${rdfs}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}template`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}template`), namedNode(`${rdfs}comment`), literal(`A templated string with placeholders. The literal's datatype indicates the template syntax; if not specified, hydra:Rfc6570Template is assumed.`), namedNode(hydra)),
        quad(namedNode(`${hydra}template`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}template`), namedNode(`${rdfs}label`), literal(`template`), namedNode(hydra)),
        quad(namedNode(`${hydra}template`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}template`), namedNode(`${rdfs}range`), namedNode(`${hydra}Rfc6570Template`), namedNode(hydra)),
        quad(namedNode(`${hydra}template`), namedNode(`${rdfs}seeAlso`), namedNode(`${hydra}Rfc6570Template`), namedNode(hydra)),
        quad(namedNode(`${hydra}template`), namedNode(`${rdfs}domain`), namedNode(`${hydra}IriTemplate`), namedNode(hydra)),
        quad(namedNode(`${hydra}title`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}title`), namedNode(`${rdfs}comment`), literal(`A title, often used along with a description.`), namedNode(hydra)),
        quad(namedNode(`${hydra}title`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}title`), namedNode(`${rdfs}label`), literal(`title`), namedNode(hydra)),
        quad(namedNode(`${hydra}title`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}title`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(hydra)),
        quad(namedNode(`${hydra}title`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}ApiDocumentation`), namedNode(hydra)),
        quad(namedNode(`${hydra}title`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}Class`), namedNode(hydra)),
        quad(namedNode(`${hydra}title`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}Status`), namedNode(hydra)),
        quad(namedNode(`${hydra}title`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}title`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}Operation`), namedNode(hydra)),
        quad(namedNode(`${hydra}title`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}SupportedProperty`), namedNode(hydra)),
        quad(namedNode(`${hydra}title`), namedNode(`${schema}domainIncludes`), namedNode(`${hydra}TemplatedLink`), namedNode(hydra)),
        quad(namedNode(`${hydra}title`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${rdfs}label`), namedNode(hydra)),
        quad(namedNode(`${hydra}totalItems`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}totalItems`), namedNode(`${rdfs}comment`), literal(`The total number of items referenced by a collection.`), namedNode(hydra)),
        quad(namedNode(`${hydra}totalItems`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}totalItems`), namedNode(`${rdfs}label`), literal(`total items`), namedNode(hydra)),
        quad(namedNode(`${hydra}totalItems`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}totalItems`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(hydra)),
        quad(namedNode(`${hydra}totalItems`), namedNode(`${rdfs}domain`), namedNode(`${hydra}Collection`), namedNode(hydra)),
        quad(namedNode(`${hydra}variable`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}variable`), namedNode(`${rdfs}comment`), literal(`An IRI template variable`), namedNode(hydra)),
        quad(namedNode(`${hydra}variable`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}variable`), namedNode(`${rdfs}label`), literal(`variable`), namedNode(hydra)),
        quad(namedNode(`${hydra}variable`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}variable`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(hydra)),
        quad(namedNode(`${hydra}variable`), namedNode(`${rdfs}domain`), namedNode(`${hydra}IriTemplateMapping`), namedNode(hydra)),
        quad(namedNode(`${hydra}variableRepresentation`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}variableRepresentation`), namedNode(`${rdfs}comment`), literal(`The representation format to use when expanding the IRI template.`), namedNode(hydra)),
        quad(namedNode(`${hydra}variableRepresentation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}variableRepresentation`), namedNode(`${rdfs}label`), literal(`variable representation`), namedNode(hydra)),
        quad(namedNode(`${hydra}variableRepresentation`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}variableRepresentation`), namedNode(`${rdfs}range`), namedNode(`${hydra}VariableRepresentation`), namedNode(hydra)),
        quad(namedNode(`${hydra}variableRepresentation`), namedNode(`${rdfs}domain`), namedNode(`${hydra}IriTemplateMapping`), namedNode(hydra)),
        quad(namedNode(`${hydra}view`), namedNode(`${rdf}type`), namedNode(`${hydra}Link`), namedNode(hydra)),
        quad(namedNode(`${hydra}view`), namedNode(`${rdfs}comment`), literal(`A specific view of a resource.`), namedNode(hydra)),
        quad(namedNode(`${hydra}view`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}view`), namedNode(`${rdfs}label`), literal(`view`), namedNode(hydra)),
        quad(namedNode(`${hydra}view`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}writable`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(hydra)),
        quad(namedNode(`${hydra}writable`), namedNode(`${rdfs}comment`), literal(`True if the client can change the property's value, false otherwise.`), namedNode(hydra)),
        quad(namedNode(`${hydra}writable`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}writable`), namedNode(`${rdfs}label`), literal(`writable`), namedNode(hydra)),
        quad(namedNode(`${hydra}writable`), namedNode(`${vs}term_status`), literal(`testing`), namedNode(hydra)),
        quad(namedNode(`${hydra}writable`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(hydra)),
        quad(namedNode(`${hydra}writable`), namedNode(`${rdfs}domain`), namedNode(`${hydra}SupportedProperty`), namedNode(hydra)),
        quad(namedNode(`${hydra}writeable`), namedNode(`${rdfs}comment`), literal(`This property is left for compatibility purposes and hydra:writable should be used instead.`), namedNode(hydra)),
        quad(namedNode(`${hydra}writeable`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns4}core`), namedNode(hydra)),
        quad(namedNode(`${hydra}writeable`), namedNode(`${rdfs}label`), literal(`writable`), namedNode(hydra)),
        quad(namedNode(`${hydra}writeable`), namedNode(`${vs}term_status`), literal(`archaic`), namedNode(hydra)),
        quad(namedNode(`${hydra}writeable`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${hydra}writable`), namedNode(hydra)),
    ];
};
