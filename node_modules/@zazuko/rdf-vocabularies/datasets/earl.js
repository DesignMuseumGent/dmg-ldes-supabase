"use strict";
/* This file was automatically generated. Do not edit by hand. */
Object.defineProperty(exports, "__esModule", { value: true });
const { earl, rdf, rdfs, owl, doap, dcterms, ns7, ns8, ns9, ns10, ns11, ns12, ns13, ns14, ns15 } = {
    'earl': 'https://www.w3.org/ns/earl#',
    'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
    'owl': 'http://www.w3.org/2002/07/owl#',
    'doap': 'http://usefulinc.com/ns/doap#',
    'dcterms': 'http://purl.org/dc/terms/',
    'ns7': 'http://xmlns.com/foaf/spec/#',
    'ns8': 'https://www.w3.org/ns/',
    'ns9': 'http://www.w3.org/2009/pointers#',
    'ns10': 'http://www.w3.org/2002/07/',
    'ns11': 'http://www.w3.org/TR/EARL10/',
    'ns12': 'http://www.w3.org/TR/Content-in-RDF/',
    'ns13': 'http://www.w3.org/TR/HTTP-in-RDF/',
    'ns14': 'http://www.w3.org/TR/Pointers-in-RDF/',
    'ns15': 'http://www.w3.org/WAI/intro/'
};
exports.default = ({ literal, namedNode, quad }) => {
    return [
        quad(namedNode(`${earl}Assertion`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(earl)),
        quad(namedNode(`${earl}Assertion`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(earl)),
        quad(namedNode(`${earl}Assertion`), namedNode(`${rdfs}comment`), literal(`a statement that embodies the results of a test`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}Assertion`), namedNode(`${rdfs}label`), literal(`Assertion`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}Assertor`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(earl)),
        quad(namedNode(`${earl}Assertor`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(earl)),
        quad(namedNode(`${earl}Assertor`), namedNode(`${rdfs}comment`), literal(`an entity such as a person, a software tool, an organization, or any other grouping that carries out a test collectively`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}Assertor`), namedNode(`${rdfs}label`), literal(`Assertor`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}CannotTell`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(earl)),
        quad(namedNode(`${earl}CannotTell`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(earl)),
        quad(namedNode(`${earl}CannotTell`), namedNode(`${rdfs}comment`), literal(`the class of outcomes to denote an undetermined outcome`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}CannotTell`), namedNode(`${rdfs}label`), literal(`Undetermined`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}CannotTell`), namedNode(`${rdfs}subClassOf`), namedNode(`${earl}OutcomeValue`), namedNode(earl)),
        quad(namedNode(`${earl}OutcomeValue`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(earl)),
        quad(namedNode(`${earl}OutcomeValue`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(earl)),
        quad(namedNode(`${earl}OutcomeValue`), namedNode(`${rdfs}comment`), literal(`a discrete value that describes a resulting condition from carrying out the test`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}OutcomeValue`), namedNode(`${rdfs}label`), literal(`Outcome Value`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}Fail`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(earl)),
        quad(namedNode(`${earl}Fail`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(earl)),
        quad(namedNode(`${earl}Fail`), namedNode(`${rdfs}comment`), literal(`the class of outcomes to denote failing a test`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}Fail`), namedNode(`${rdfs}label`), literal(`Fail`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}Fail`), namedNode(`${rdfs}subClassOf`), namedNode(`${earl}OutcomeValue`), namedNode(earl)),
        quad(namedNode(`${earl}NotApplicable`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(earl)),
        quad(namedNode(`${earl}NotApplicable`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(earl)),
        quad(namedNode(`${earl}NotApplicable`), namedNode(`${rdfs}comment`), literal(`the class of outcomes to denote the test is not applicable`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}NotApplicable`), namedNode(`${rdfs}label`), literal(`Not applicable`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}NotApplicable`), namedNode(`${rdfs}subClassOf`), namedNode(`${earl}OutcomeValue`), namedNode(earl)),
        quad(namedNode(`${earl}NotTested`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(earl)),
        quad(namedNode(`${earl}NotTested`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(earl)),
        quad(namedNode(`${earl}NotTested`), namedNode(`${rdfs}comment`), literal(`the class of outcomes to denote the test has not been carried out`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}NotTested`), namedNode(`${rdfs}label`), literal(`Not tested`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}NotTested`), namedNode(`${rdfs}subClassOf`), namedNode(`${earl}OutcomeValue`), namedNode(earl)),
        quad(namedNode(`${earl}Pass`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(earl)),
        quad(namedNode(`${earl}Pass`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(earl)),
        quad(namedNode(`${earl}Pass`), namedNode(`${rdfs}comment`), literal(`the class of outcomes to denote passing a test`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}Pass`), namedNode(`${rdfs}label`), literal(`Pass`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}Pass`), namedNode(`${rdfs}subClassOf`), namedNode(`${earl}OutcomeValue`), namedNode(earl)),
        quad(namedNode(`${earl}Software`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(earl)),
        quad(namedNode(`${earl}Software`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(earl)),
        quad(namedNode(`${earl}Software`), namedNode(`${rdfs}comment`), literal(`any piece of software such as an authoring tool, browser, or evaluation tool`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}Software`), namedNode(`${rdfs}label`), literal(`Software`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}Software`), namedNode(`${rdfs}subClassOf`), namedNode(`${doap}Project`), namedNode(earl)),
        quad(namedNode(`${earl}TestCase`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(earl)),
        quad(namedNode(`${earl}TestCase`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(earl)),
        quad(namedNode(`${earl}TestCase`), namedNode(`${rdfs}comment`), literal(`an atomic test, usually one that is a partial test for a requirement`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}TestCase`), namedNode(`${rdfs}label`), literal(`Test Case`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}TestCase`), namedNode(`${rdfs}subClassOf`), namedNode(`${earl}TestCriterion`), namedNode(earl)),
        quad(namedNode(`${earl}TestCriterion`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(earl)),
        quad(namedNode(`${earl}TestCriterion`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(earl)),
        quad(namedNode(`${earl}TestCriterion`), namedNode(`${rdfs}comment`), literal(`a testable statement, usually one that can be passed or failed`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}TestCriterion`), namedNode(`${rdfs}label`), literal(`Test Criterion`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}TestMode`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(earl)),
        quad(namedNode(`${earl}TestMode`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(earl)),
        quad(namedNode(`${earl}TestMode`), namedNode(`${rdfs}comment`), literal(`describes how a test was carried out`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}TestMode`), namedNode(`${rdfs}label`), literal(`Test Mode`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}TestRequirement`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(earl)),
        quad(namedNode(`${earl}TestRequirement`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(earl)),
        quad(namedNode(`${earl}TestRequirement`), namedNode(`${rdfs}comment`), literal(`a higher-level requirement that is tested by executing one or more sub-tests`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}TestRequirement`), namedNode(`${rdfs}label`), literal(`Test Requirement`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}TestRequirement`), namedNode(`${rdfs}subClassOf`), namedNode(`${earl}TestCriterion`), namedNode(earl)),
        quad(namedNode(`${earl}TestResult`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(earl)),
        quad(namedNode(`${earl}TestResult`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(earl)),
        quad(namedNode(`${earl}TestResult`), namedNode(`${rdfs}comment`), literal(`the actual result of performing the test`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}TestResult`), namedNode(`${rdfs}label`), literal(`Test Result`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}TestSubject`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(earl)),
        quad(namedNode(`${earl}TestSubject`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(earl)),
        quad(namedNode(`${earl}TestSubject`), namedNode(`${rdfs}comment`), literal(`the class of things that have been tested against some test criterion`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}TestSubject`), namedNode(`${rdfs}label`), literal(`Test Subject`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}assertedBy`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(earl)),
        quad(namedNode(`${earl}assertedBy`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(earl)),
        quad(namedNode(`${earl}assertedBy`), namedNode(`${rdfs}comment`), literal(`assertor of an assertion`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}assertedBy`), namedNode(`${rdfs}label`), literal(`Asserted By`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}assertedBy`), namedNode(`${rdfs}domain`), namedNode(`${earl}Assertion`), namedNode(earl)),
        quad(namedNode(`${earl}assertedBy`), namedNode(`${rdfs}range`), namedNode(`${earl}Assertor`), namedNode(earl)),
        quad(namedNode(`${earl}automatic`), namedNode(`${rdf}type`), namedNode(`${earl}TestMode`), namedNode(earl)),
        quad(namedNode(`${earl}automatic`), namedNode(`${dcterms}description`), literal(`where the test was carried out automatically by the software tool and without any human intervention`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}automatic`), namedNode(`${dcterms}title`), literal(`Automatic`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}cantTell`), namedNode(`${rdf}type`), namedNode(`${earl}CannotTell`), namedNode(earl)),
        quad(namedNode(`${earl}cantTell`), namedNode(`${dcterms}description`), literal(`it is unclear if the subject passed or failed the test`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}cantTell`), namedNode(`${dcterms}title`), literal(`Cannot tell`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}failed`), namedNode(`${rdf}type`), namedNode(`${earl}Fail`), namedNode(earl)),
        quad(namedNode(`${earl}failed`), namedNode(`${dcterms}description`), literal(`the subject failed the test`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}failed`), namedNode(`${dcterms}title`), literal(`Failed`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}inapplicable`), namedNode(`${rdf}type`), namedNode(`${earl}NotApplicable`), namedNode(earl)),
        quad(namedNode(`${earl}inapplicable`), namedNode(`${dcterms}description`), literal(`the test is not applicable to the subject`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}inapplicable`), namedNode(`${dcterms}title`), literal(`Inapplicable`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}info`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(earl)),
        quad(namedNode(`${earl}info`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(earl)),
        quad(namedNode(`${earl}info`), namedNode(`${rdfs}comment`), literal(`additional warnings or error messages in a human-readable form`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}info`), namedNode(`${rdfs}label`), literal(`Info`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}info`), namedNode(`${rdfs}domain`), namedNode(`${earl}TestResult`), namedNode(earl)),
        quad(namedNode(`${earl}info`), namedNode(`${rdfs}range`), namedNode(`${rdfs}Literal`), namedNode(earl)),
        quad(namedNode(`${earl}mainAssertor`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(earl)),
        quad(namedNode(`${earl}mainAssertor`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(earl)),
        quad(namedNode(`${earl}mainAssertor`), namedNode(`${rdfs}comment`), literal(`assertor that is primarily responsible for performing the test`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}mainAssertor`), namedNode(`${rdfs}label`), literal(`Main Assertor`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}mainAssertor`), namedNode(`${rdfs}domain`), namedNode(`${earl}Assertor`), namedNode(earl)),
        quad(namedNode(`${earl}mainAssertor`), namedNode(`${rdfs}range`), namedNode(`${earl}Assertor`), namedNode(earl)),
        quad(namedNode(`${earl}mainAssertor`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${ns7}term_member`), namedNode(earl)),
        quad(namedNode(`${earl}manual`), namedNode(`${rdf}type`), namedNode(`${earl}TestMode`), namedNode(earl)),
        quad(namedNode(`${earl}manual`), namedNode(`${dcterms}description`), literal(`where the test was carried out by human evaluators`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}manual`), namedNode(`${dcterms}title`), literal(`Manual`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}mode`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(earl)),
        quad(namedNode(`${earl}mode`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(earl)),
        quad(namedNode(`${earl}mode`), namedNode(`${rdfs}comment`), literal(`mode in which the test was performed`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}mode`), namedNode(`${rdfs}label`), literal(`Mode`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}mode`), namedNode(`${rdfs}domain`), namedNode(`${earl}Assertion`), namedNode(earl)),
        quad(namedNode(`${earl}mode`), namedNode(`${rdfs}range`), namedNode(`${earl}TestMode`), namedNode(earl)),
        quad(namedNode(`${earl}outcome`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(earl)),
        quad(namedNode(`${earl}outcome`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(earl)),
        quad(namedNode(`${earl}outcome`), namedNode(`${rdfs}comment`), literal(`outcome of performing the test`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}outcome`), namedNode(`${rdfs}label`), literal(`Outcome`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}outcome`), namedNode(`${rdfs}domain`), namedNode(`${earl}TestResult`), namedNode(earl)),
        quad(namedNode(`${earl}outcome`), namedNode(`${rdfs}range`), namedNode(`${earl}OutcomeValue`), namedNode(earl)),
        quad(namedNode(`${earl}passed`), namedNode(`${rdf}type`), namedNode(`${earl}Pass`), namedNode(earl)),
        quad(namedNode(`${earl}passed`), namedNode(`${dcterms}description`), literal(`the subject passed the test`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}passed`), namedNode(`${dcterms}title`), literal(`Passed`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}pointer`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(earl)),
        quad(namedNode(`${earl}pointer`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(earl)),
        quad(namedNode(`${earl}pointer`), namedNode(`${rdfs}comment`), literal(`location within a test subject that are most relevant to a test result`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}pointer`), namedNode(`${rdfs}label`), literal(`Pointer`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}pointer`), namedNode(`${rdfs}domain`), namedNode(`${ns8}TestResult`), namedNode(earl)),
        quad(namedNode(`${earl}pointer`), namedNode(`${rdfs}range`), namedNode(`${ns9}Pointer`), namedNode(earl)),
        quad(namedNode(`${earl}result`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(earl)),
        quad(namedNode(`${earl}result`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(earl)),
        quad(namedNode(`${earl}result`), namedNode(`${rdfs}comment`), literal(`result of an assertion`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}result`), namedNode(`${rdfs}label`), literal(`Result`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}result`), namedNode(`${rdfs}domain`), namedNode(`${earl}Assertion`), namedNode(earl)),
        quad(namedNode(`${earl}result`), namedNode(`${rdfs}range`), namedNode(`${earl}TestResult`), namedNode(earl)),
        quad(namedNode(`${earl}semiAuto`), namedNode(`${rdf}type`), namedNode(`${earl}TestMode`), namedNode(earl)),
        quad(namedNode(`${earl}semiAuto`), namedNode(`${dcterms}description`), literal(`where the test was partially carried out by software tools, but where human input or judgment was still required to decide or help decide the outcome of the test`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}semiAuto`), namedNode(`${dcterms}title`), literal(`Semi-Automatic`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}subject`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(earl)),
        quad(namedNode(`${earl}subject`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(earl)),
        quad(namedNode(`${earl}subject`), namedNode(`${rdfs}comment`), literal(`test subject of an assertion`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}subject`), namedNode(`${rdfs}label`), literal(`Subject`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}subject`), namedNode(`${rdfs}domain`), namedNode(`${earl}Assertion`), namedNode(earl)),
        quad(namedNode(`${earl}subject`), namedNode(`${rdfs}range`), namedNode(`${earl}TestSubject`), namedNode(earl)),
        quad(namedNode(`${earl}test`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(earl)),
        quad(namedNode(`${earl}test`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(earl)),
        quad(namedNode(`${earl}test`), namedNode(`${rdfs}comment`), literal(`test criterion of an assertion`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}test`), namedNode(`${rdfs}label`), literal(`Test`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}test`), namedNode(`${rdfs}domain`), namedNode(`${earl}Assertion`), namedNode(earl)),
        quad(namedNode(`${earl}test`), namedNode(`${rdfs}range`), namedNode(`${earl}TestCriterion`), namedNode(earl)),
        quad(namedNode(`${earl}undisclosed`), namedNode(`${rdf}type`), namedNode(`${earl}TestMode`), namedNode(earl)),
        quad(namedNode(`${earl}undisclosed`), namedNode(`${dcterms}description`), literal(`where the exact testing process is undisclosed`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}undisclosed`), namedNode(`${dcterms}title`), literal(`Undisclosed`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}unknownMode`), namedNode(`${rdf}type`), namedNode(`${earl}TestMode`), namedNode(earl)),
        quad(namedNode(`${earl}unknownMode`), namedNode(`${dcterms}description`), literal(`where the testing process is unknown or undetermined`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}unknownMode`), namedNode(`${dcterms}title`), literal(`Unknown`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}untested`), namedNode(`${rdf}type`), namedNode(`${earl}NotTested`), namedNode(earl)),
        quad(namedNode(`${earl}untested`), namedNode(`${dcterms}description`), literal(`the test has not been carried out`, 'en'), namedNode(earl)),
        quad(namedNode(`${earl}untested`), namedNode(`${dcterms}title`), literal(`Untested`, 'en'), namedNode(earl)),
        quad(namedNode(`${ns8}earl`), namedNode(`${rdf}type`), namedNode(`${ns10}owlOntology`), namedNode(earl)),
        quad(namedNode(`${ns8}earl`), namedNode(`${rdfs}comment`), literal(`Formal schema of the Evaluation and Report Language (EARL) 1.0`, 'en'), namedNode(earl)),
        quad(namedNode(`${ns8}earl`), namedNode(`${rdfs}label`), literal(`Evaluation and Report Language (EARL) 1.0 Schema`, 'en'), namedNode(earl)),
        quad(namedNode(`${ns8}earl`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns11), namedNode(earl)),
        quad(namedNode(`${ns8}earl`), namedNode(`${rdfs}seeAlso`), namedNode(ns12), namedNode(earl)),
        quad(namedNode(`${ns8}earl`), namedNode(`${rdfs}seeAlso`), namedNode(ns13), namedNode(earl)),
        quad(namedNode(`${ns8}earl`), namedNode(`${rdfs}seeAlso`), namedNode(ns14), namedNode(earl)),
        quad(namedNode(`${ns8}earl`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns15}earl`), namedNode(earl)),
        quad(namedNode(`${ns8}earl`), namedNode(`${ns10}owlversionInfo`), literal(`Editor's Working Draft 10 June 2009`, 'en'), namedNode(earl)),
    ];
};
