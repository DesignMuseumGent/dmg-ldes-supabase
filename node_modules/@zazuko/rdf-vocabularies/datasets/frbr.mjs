/* This file was automatically generated. Do not edit by hand. */
const {
  dc11,
  rdf,
  owl,
  frbr,
  ns5,
  rdfs,
  ns7,
  ns8,
  ns9,
  ns10
} = {
  'dc11': 'http://purl.org/dc/elements/1.1/',
  'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
  'owl': 'http://www.w3.org/2002/07/owl#',
  'frbr': 'http://purl.org/vocab/frbr/core#',
  'ns5': 'http://purl.org/spar/',
  'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
  'ns7': 'http://purl.org/spar/frbr/',
  'ns8': 'http://www.w3.org/2008/05/skos#',
  'ns9': 'urn:swrl#',
  'ns10': 'http://www.w3.org/2003/11/swrl#'
};
export default (({
  blankNode,
  literal,
  namedNode,
  quad
}) => {
  const blankNodes = [];

  for (let i = 0; i < 205; i++) {
    blankNodes.push(blankNode());
  }

  return [quad(namedNode(`${dc11}contributor`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(frbr)), quad(namedNode(`${dc11}creator`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(frbr)), quad(namedNode(`${dc11}date`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(frbr)), quad(namedNode(`${dc11}description`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(frbr)), quad(namedNode(`${dc11}rights`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(frbr)), quad(namedNode(`${dc11}title`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(frbr)), quad(namedNode(`${ns5}frbr`), namedNode(`${dc11}contributor`), literal(`David Shotton`), namedNode(frbr)), quad(namedNode(`${ns5}frbr`), namedNode(`${rdf}type`), namedNode(`${owl}Ontology`), namedNode(frbr)), quad(namedNode(`${ns5}frbr`), namedNode(`${dc11}creator`), literal(`Paolo Ciccarese`), namedNode(frbr)), quad(namedNode(`${ns5}frbr`), namedNode(`${dc11}creator`), literal(`Silvio Peroni`), namedNode(frbr)), quad(namedNode(`${ns5}frbr`), namedNode(`${dc11}date`), literal(`2018-03-29`), namedNode(frbr)), quad(namedNode(`${ns5}frbr`), namedNode(`${dc11}description`), literal(`This vocabulary is an expression in OWL 2 DL of the basic concepts and relations described in the IFLA report on the Functional Requirements for Bibliographic Records (FRBR), also described in Ian Davis's RDF vocabulary (http://vocab.org/frbr/core).`, 'en'), namedNode(frbr)), quad(namedNode(`${ns5}frbr`), namedNode(`${dc11}rights`), literal(`This work is distributed under a Creative Commons Attribution License (http://creativecommons.org/licenses/by/3.0/).`, 'en'), namedNode(frbr)), quad(namedNode(`${ns5}frbr`), namedNode(`${dc11}title`), literal(`Essential FRBR in OWL2 DL`, 'en'), namedNode(frbr)), quad(namedNode(`${ns5}frbr`), namedNode(`${rdfs}comment`), literal(`The Essential FRBR in OWL2 DL Ontology (FRBR) is an expression in OWL 2 DL of the basic concepts and relations described in the IFLA report on the Functional Requirements for Bibliographic Records (FRBR), also described in Ian Davis's RDF vocabulary.

**URL:** http://purl.org/spar/frbr

**Creators**: [Paolo Ciccarese](http://orcid.org/0000-0002-5156-2703), [Silvio Peroni](http://orcid.org/0000-0003-0530-4305)

**Contributors:**: [David Shotton](http://orcid.org/0000-0001-5506-523X)

**License:** [Creative Commons Attribution 4.0 International](https://creativecommons.org/licenses/by/4.0/legalcode)

**Website:** http://www.sparontologies.net/ontologies/frbr`), namedNode(frbr)), quad(namedNode(`${ns5}frbr`), namedNode(`${owl}priorVersion`), namedNode(`${ns7}2011-06-29`), namedNode(frbr)), quad(namedNode(`${ns5}frbr`), namedNode(`${owl}versionIRI`), namedNode(`${ns7}2018-03-29`), namedNode(frbr)), quad(namedNode(`${ns5}frbr`), namedNode(`${owl}versionInfo`), literal(`1.0.1`), namedNode(frbr)), quad(namedNode(`${rdfs}comment`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(frbr)), quad(namedNode(`${frbr}Concept`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(namedNode(`${frbr}Concept`), namedNode(`${rdfs}comment`), literal(`An abstract notion or idea.

The entity defined as concept encompasses a comprehensive range of abstractions that may be the subject of a work: fields of knowledge, disciplines, schools of thought (philosophies, religions, political ideologies, etc.), theories, processes, techniques, practices, etc.  A concept may be broad in nature or narrowly defined and precise. `, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Concept`), namedNode(`${rdfs}label`), literal(`concept`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Concept`), namedNode(`${rdfs}subClassOf`), namedNode(`${frbr}Subject`), namedNode(frbr)), quad(namedNode(`${rdfs}label`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(frbr)), quad(namedNode(`${frbr}Subject`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(namedNode(`${frbr}Subject`), namedNode(`${rdfs}comment`), literal(`It represents an additional set of entities that serve as the subjects of works.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Subject`), namedNode(`${rdfs}label`), literal(`subject`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}CorporateBody`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(namedNode(`${frbr}CorporateBody`), namedNode(`${rdfs}comment`), literal(`An organization or group of individuals and/or organizations acting as a unit.

The entity defined as corporate body encompasses organizations and groups of individuals and/or organizations that are identified by a particular name, including occasional groups and groups that are constituted as meetings, conferences, congresses, expeditions, exhibitions, festivals, fairs, etc.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}CorporateBody`), namedNode(`${rdfs}label`), literal(`corporate body`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}CorporateBody`), namedNode(`${rdfs}subClassOf`), namedNode(`${frbr}ResponsibleEntity`), namedNode(frbr)), quad(namedNode(`${frbr}CorporateBody`), namedNode(`${owl}disjointWith`), namedNode(`${frbr}Person`), namedNode(frbr)), quad(namedNode(`${frbr}ResponsibleEntity`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(namedNode(`${frbr}ResponsibleEntity`), namedNode(`${rdfs}comment`), literal(`It represents those responsible for the intellectual or artistic content, the physical production and dissemination, or the custodianship of any endeavour.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}ResponsibleEntity`), namedNode(`${rdfs}label`), literal(`responsible entity`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Person`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(namedNode(`${frbr}Person`), namedNode(`${rdfs}comment`), literal(`An individual. The entity defined as person encompasses individuals that are deceased as well as those that are living.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Person`), namedNode(`${rdfs}label`), literal(`person`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Person`), namedNode(`${rdfs}subClassOf`), namedNode(`${frbr}ResponsibleEntity`), namedNode(frbr)), quad(namedNode(`${frbr}Endeavour`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(namedNode(`${frbr}Endeavour`), namedNode(`${rdfs}comment`), literal(`It describes different aspects of user interests in the products of intellectual or artistic artifact.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Endeavour`), namedNode(`${rdfs}label`), literal(`endeavour`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Endeavour`), namedNode(`${owl}equivalentClass`), blankNodes[0], namedNode(frbr)), quad(blankNodes[0], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[0], namedNode(`${owl}unionOf`), blankNodes[1], namedNode(frbr)), quad(namedNode(`${frbr}Event`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(namedNode(`${frbr}Event`), namedNode(`${rdfs}comment`), literal(`An action or occurrence.

The entity defined as event encompasses a comprehensive range of actions and occurrences that may be the subject of a work: historical events, epochs, periods of time, etc. `, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Event`), namedNode(`${rdfs}label`), literal(`event`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Event`), namedNode(`${rdfs}subClassOf`), namedNode(`${frbr}Subject`), namedNode(frbr)), quad(namedNode(`${frbr}Expression`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(namedNode(`${frbr}Expression`), namedNode(`${rdfs}comment`), literal(`The intellectual or artistic realization of a work in the form of alpha-numeric, musical, or choreographic notation, sound, image, object, movement, etc., or any combination of such forms.

An expression is the specific intellectual or artistic form that a work takes each time it is "realized." Expression encompasses, for example, the specific words, sentences, paragraphs, etc. that result from the realization of a work in the form of a text, or the particular sounds, phrasing, etc. resulting from the realization of a musical work.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Expression`), namedNode(`${rdfs}label`), literal(`expression`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Expression`), namedNode(`${owl}disjointWith`), namedNode(`${frbr}Item`), namedNode(frbr)), quad(namedNode(`${frbr}Expression`), namedNode(`${owl}disjointWith`), namedNode(`${frbr}Manifestation`), namedNode(frbr)), quad(namedNode(`${frbr}Expression`), namedNode(`${owl}disjointWith`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(namedNode(`${frbr}Expression`), namedNode(`${owl}equivalentClass`), blankNodes[2], namedNode(frbr)), quad(namedNode(`${frbr}Expression`), namedNode(`${owl}equivalentClass`), blankNodes[3], namedNode(frbr)), quad(namedNode(`${frbr}Item`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(namedNode(`${frbr}Item`), namedNode(`${rdfs}comment`), literal(`A single exemplar of a manifestation.

The entity defined as item is a concrete entity. It is in many instances a single physical object (e.g., a copy of a one-volume monograph, a single audio cassette, etc.). There are instances, however, where the entity defined as item comprises more than one physical object (e.g., a monograph issued as two separately bound volumes, a recording issued on three separate compact discs, etc.). `, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Item`), namedNode(`${rdfs}label`), literal(`item`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Item`), namedNode(`${owl}disjointWith`), namedNode(`${frbr}Manifestation`), namedNode(frbr)), quad(namedNode(`${frbr}Item`), namedNode(`${owl}disjointWith`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(namedNode(`${frbr}Item`), namedNode(`${owl}equivalentClass`), blankNodes[4], namedNode(frbr)), quad(namedNode(`${frbr}Item`), namedNode(`${owl}equivalentClass`), blankNodes[5], namedNode(frbr)), quad(namedNode(`${frbr}Manifestation`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(namedNode(`${frbr}Manifestation`), namedNode(`${rdfs}comment`), literal(`The physical embodiment of an expression of a work.

The entity defined as manifestation encompasses a wide range of materials and formats. As an entity, manifestation represents all the physical objects that bear the same characteristics, in respect to both intellectual content and physical form. `, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Manifestation`), namedNode(`${rdfs}label`), literal(`manifestation`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Manifestation`), namedNode(`${owl}disjointWith`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(namedNode(`${frbr}Manifestation`), namedNode(`${owl}equivalentClass`), blankNodes[6], namedNode(frbr)), quad(namedNode(`${frbr}Manifestation`), namedNode(`${owl}equivalentClass`), blankNodes[7], namedNode(frbr)), quad(namedNode(`${frbr}Work`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(namedNode(`${frbr}Work`), namedNode(`${rdfs}comment`), literal(`A distinct intellectual or artistic creation.

A work is an abstract entity; there is no single material object one can point to as the work. We recognize the work through individual realizations or expressions of the work, but the work itself exists only in the commonality of content between and among the various expressions of the work. When we speak of Homer's Iliad as a work, our point of reference is not a particular recitation or text of the work, but the intellectual creation that lies behind all the various expressions of the work. `, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Work`), namedNode(`${rdfs}label`), literal(`work`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Work`), namedNode(`${owl}equivalentClass`), blankNodes[8], namedNode(frbr)), quad(namedNode(`${frbr}Work`), namedNode(`${owl}equivalentClass`), blankNodes[9], namedNode(frbr)), quad(blankNodes[2], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[2], namedNode(`${owl}intersectionOf`), blankNodes[10], namedNode(frbr)), quad(blankNodes[3], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[3], namedNode(`${owl}intersectionOf`), blankNodes[11], namedNode(frbr)), quad(blankNodes[4], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[4], namedNode(`${owl}intersectionOf`), blankNodes[12], namedNode(frbr)), quad(blankNodes[5], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[5], namedNode(`${owl}intersectionOf`), blankNodes[13], namedNode(frbr)), quad(blankNodes[6], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[6], namedNode(`${owl}intersectionOf`), blankNodes[14], namedNode(frbr)), quad(blankNodes[7], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[7], namedNode(`${owl}intersectionOf`), blankNodes[15], namedNode(frbr)), quad(namedNode(`${frbr}Object`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(namedNode(`${frbr}Object`), namedNode(`${rdfs}comment`), literal(`A material thing.

The entity defined as object encompasses a comprehensive range of material things that may be the subject of a work: animate and inanimate objects occurring in nature; fixed, movable, and moving objects that are the product of human creation; objects that no longer exist. `, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Object`), namedNode(`${rdfs}label`), literal(`object`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Object`), namedNode(`${rdfs}subClassOf`), namedNode(`${frbr}Subject`), namedNode(frbr)), quad(namedNode(`${frbr}Place`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(namedNode(`${frbr}Place`), namedNode(`${rdfs}comment`), literal(`A location.

The entity defined as place encompasses a comprehensive range of locations: terrestrial and extra-terrestrial; historical and contemporary; geographic features and geo-political jurisdictions. `, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Place`), namedNode(`${rdfs}label`), literal(`place`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}Place`), namedNode(`${rdfs}subClassOf`), namedNode(`${frbr}Subject`), namedNode(frbr)), quad(blankNodes[8], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[8], namedNode(`${owl}intersectionOf`), blankNodes[16], namedNode(frbr)), quad(blankNodes[9], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[9], namedNode(`${owl}intersectionOf`), blankNodes[17], namedNode(frbr)), quad(namedNode(`${frbr}abridgement`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}abridgement`), namedNode(`${rdfs}comment`), literal(`An expression abridged in another one.

In the abridged expression some content of the previous expression is removed, but the result does not alter the content to the extent that it becomes a new work. The expressions resulting from such modification are generally autonomous in nature (i.e., they do not normally require reference to the prior expression in order to be used or understood). `, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}abridgement`), namedNode(`${rdfs}label`), literal(`has abridgement`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}abridgement`), namedNode(`${rdfs}domain`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(namedNode(`${frbr}abridgement`), namedNode(`${rdfs}range`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(namedNode(`${frbr}abridgement`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}abridgement`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}abridgementOf`), namedNode(frbr)), quad(namedNode(`${frbr}relatedEndeavour`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}relatedEndeavour`), namedNode(`${rdfs}label`), literal(`has related endeavour`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}relatedEndeavour`), namedNode(`${rdfs}domain`), namedNode(`${frbr}Endeavour`), namedNode(frbr)), quad(namedNode(`${frbr}relatedEndeavour`), namedNode(`${rdfs}range`), namedNode(`${frbr}Endeavour`), namedNode(frbr)), quad(namedNode(`${frbr}abridgementOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}abridgementOf`), namedNode(`${rdfs}comment`), literal(`It identifies the entire expression of an abridged one.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}abridgementOf`), namedNode(`${rdfs}label`), literal(`is abridgement of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}abridgementOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}adaption`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}adaption`), namedNode(`${rdfs}comment`), literal(`A work/expression adapted in another one.

This property describe the modification of an original work that is sufficient in degree to warrant their being considered as new works, rather than simply different expressions of the same work. If there exists a relation of this kind among two different expressions, they always refer to different works.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}adaption`), namedNode(`${rdfs}label`), literal(`has adaption`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}adaption`), namedNode(`${rdfs}domain`), blankNodes[18], namedNode(frbr)), quad(namedNode(`${frbr}adaption`), namedNode(`${rdfs}range`), blankNodes[19], namedNode(frbr)), quad(namedNode(`${frbr}adaption`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}adaption`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}adaptionOf`), namedNode(frbr)), quad(blankNodes[18], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[18], namedNode(`${owl}unionOf`), blankNodes[20], namedNode(frbr)), quad(blankNodes[19], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[19], namedNode(`${owl}unionOf`), blankNodes[21], namedNode(frbr)), quad(namedNode(`${frbr}adaptionOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}adaptionOf`), namedNode(`${rdfs}comment`), literal(`It identifies the work/expression of an adapted one.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}adaptionOf`), namedNode(`${rdfs}label`), literal(`is adaption of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}adaptionOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}alternate`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}alternate`), namedNode(`${rdfs}comment`), literal(`A manifestation having another one as alternate.

The alternate relationship involves manifestations that effectively serve as alternates for each other. The alternate relationship obtains, for example, when a publication, sound recording, video, etc. is issued in more than one format or when it is released simultaneously by different publishers in different countries.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}alternate`), namedNode(`${rdfs}label`), literal(`has alternate`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}alternate`), namedNode(`${rdfs}domain`), namedNode(`${frbr}Manifestation`), namedNode(frbr)), quad(namedNode(`${frbr}alternate`), namedNode(`${rdfs}range`), namedNode(`${frbr}Manifestation`), namedNode(frbr)), quad(namedNode(`${frbr}alternate`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}alternate`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}alternateOf`), namedNode(frbr)), quad(namedNode(`${frbr}alternateOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}alternateOf`), namedNode(`${rdfs}comment`), literal(`It identifies the manifestation of an alternative one.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}alternateOf`), namedNode(`${rdfs}label`), literal(`is alternate of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}alternateOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}arrangement`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}arrangement`), namedNode(`${rdfs}comment`), literal(`An expression arranged in another one.

In the arranged expression some content of the previous expression is changed in some way, but the result does not alter the content to the extent that it becomes a new work. The expressions resulting from such modification are generally autonomous in nature (i.e., they do not normally require reference to the prior expression in order to be used or understood).`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}arrangement`), namedNode(`${rdfs}label`), literal(`has arrangement`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}arrangement`), namedNode(`${rdfs}domain`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(namedNode(`${frbr}arrangement`), namedNode(`${rdfs}range`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(namedNode(`${frbr}arrangement`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}arrangement`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}arrangementOf`), namedNode(frbr)), quad(namedNode(`${frbr}arrangementOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}arrangementOf`), namedNode(`${rdfs}comment`), literal(`It identifies the original expression of an arranged one.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}arrangementOf`), namedNode(`${rdfs}label`), literal(`is arrangement of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}arrangementOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}complement`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}complement`), namedNode(`${rdfs}comment`), literal(`An expression work/expression having another one as complement.

This property describes works that are intended to be combined with or inserted into the related work. In other words, they are intended to be integrated in some way with the other work, but were not part of the original conception of that prior work. If there exists a relation of this kind among two different expressions, then they always refer to different works.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}complement`), namedNode(`${rdfs}label`), literal(`has complement`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}complement`), namedNode(`${rdfs}domain`), blankNodes[22], namedNode(frbr)), quad(namedNode(`${frbr}complement`), namedNode(`${rdfs}range`), blankNodes[23], namedNode(frbr)), quad(namedNode(`${frbr}complement`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}complement`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}complementOf`), namedNode(frbr)), quad(blankNodes[22], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[22], namedNode(`${owl}unionOf`), blankNodes[24], namedNode(frbr)), quad(blankNodes[23], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[23], namedNode(`${owl}unionOf`), blankNodes[25], namedNode(frbr)), quad(namedNode(`${frbr}complementOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}complementOf`), namedNode(`${rdfs}comment`), literal(`It identifies the work/expression of that is a complement of another one.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}complementOf`), namedNode(`${rdfs}label`), literal(`is complement of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}complementOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}creator`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}creator`), namedNode(`${rdfs}comment`), literal(`A work linked to its creator.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}creator`), namedNode(`${rdfs}label`), literal(`has creator`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}creator`), namedNode(`${rdfs}domain`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(namedNode(`${frbr}creator`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}responsibleEntity`), namedNode(frbr)), quad(namedNode(`${frbr}creator`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}creatorOf`), namedNode(frbr)), quad(namedNode(`${frbr}responsibleEntity`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}responsibleEntity`), namedNode(`${rdfs}comment`), literal(`Any endeavour having a particular entity that is responsible of it.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}responsibleEntity`), namedNode(`${rdfs}label`), literal(`has responsible entity`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}responsibleEntity`), namedNode(`${rdfs}domain`), namedNode(`${frbr}Endeavour`), namedNode(frbr)), quad(namedNode(`${frbr}responsibleEntity`), namedNode(`${rdfs}range`), namedNode(`${frbr}ResponsibleEntity`), namedNode(frbr)), quad(namedNode(`${frbr}responsibleEntity`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${owl}topObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}responsibleEntity`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}responsibleEntityOf`), namedNode(frbr)), quad(namedNode(`${frbr}creatorOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}creatorOf`), namedNode(`${rdfs}comment`), literal(`The creator of a particular work.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}creatorOf`), namedNode(`${rdfs}label`), literal(`is creator of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}creatorOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}responsibleEntityOf`), namedNode(frbr)), quad(namedNode(`${frbr}responsibleEntityOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}responsibleEntityOf`), namedNode(`${rdfs}comment`), literal(`An entity that is resposible for a particular endeavour.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}responsibleEntityOf`), namedNode(`${rdfs}label`), literal(`is responsible entity of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}responsibleEntityOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${owl}topObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}embodiment`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}embodiment`), namedNode(`${rdfs}comment`), literal(`An expression embodied in a manifestation.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}embodiment`), namedNode(`${rdfs}label`), literal(`has embodiment`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}embodiment`), namedNode(`${rdfs}domain`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(namedNode(`${frbr}embodiment`), namedNode(`${rdfs}range`), namedNode(`${frbr}Manifestation`), namedNode(frbr)), quad(namedNode(`${frbr}embodiment`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}embodiment`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}embodimentOf`), namedNode(frbr)), quad(namedNode(`${frbr}embodimentOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}embodimentOf`), namedNode(`${rdfs}comment`), literal(`A manifestation that embodies an expression.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}embodimentOf`), namedNode(`${rdfs}label`), literal(`is embodiment of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}embodimentOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}exemplar`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}exemplar`), namedNode(`${rdfs}comment`), literal(`A manifestation exemplified in an item.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}exemplar`), namedNode(`${rdfs}label`), literal(`has exemplar`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}exemplar`), namedNode(`${rdfs}domain`), namedNode(`${frbr}Manifestation`), namedNode(frbr)), quad(namedNode(`${frbr}exemplar`), namedNode(`${rdfs}range`), namedNode(`${frbr}Item`), namedNode(frbr)), quad(namedNode(`${frbr}exemplar`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}exemplar`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}exemplarOf`), namedNode(frbr)), quad(namedNode(`${frbr}exemplarOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}exemplarOf`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(frbr)), quad(namedNode(`${frbr}exemplarOf`), namedNode(`${rdfs}comment`), literal(`An item that exemplifies a manifestation.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}exemplarOf`), namedNode(`${rdfs}label`), literal(`is exemplar of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}exemplarOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}imitation`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}imitation`), namedNode(`${rdfs}comment`), literal(`An work/expression imitated in another one.

This property describes works that are intended to be an imitation another original work that is sufficient in degree to warrant their being considered as new works, rather than simply different expressions of the same work. If there exists a relation of this kind among two different expressions, then they always refer to different works.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}imitation`), namedNode(`${rdfs}label`), literal(`has imitation`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}imitation`), namedNode(`${rdfs}domain`), blankNodes[26], namedNode(frbr)), quad(namedNode(`${frbr}imitation`), namedNode(`${rdfs}range`), blankNodes[27], namedNode(frbr)), quad(namedNode(`${frbr}imitation`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}imitation`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}imitationOf`), namedNode(frbr)), quad(blankNodes[26], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[26], namedNode(`${owl}unionOf`), blankNodes[28], namedNode(frbr)), quad(blankNodes[27], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[27], namedNode(`${owl}unionOf`), blankNodes[29], namedNode(frbr)), quad(namedNode(`${frbr}imitationOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}imitationOf`), namedNode(`${rdfs}comment`), literal(`It identifies the work/expression of an imitated one.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}imitationOf`), namedNode(`${rdfs}label`), literal(`is imitation of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}imitationOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}owner`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}owner`), namedNode(`${rdfs}comment`), literal(`An item linked to its owner.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}owner`), namedNode(`${rdfs}label`), literal(`has owner`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}owner`), namedNode(`${rdfs}domain`), namedNode(`${frbr}Item`), namedNode(frbr)), quad(namedNode(`${frbr}owner`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}responsibleEntity`), namedNode(frbr)), quad(namedNode(`${frbr}owner`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}ownerOf`), namedNode(frbr)), quad(namedNode(`${frbr}ownerOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}ownerOf`), namedNode(`${rdfs}comment`), literal(`The owner of a particular item.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}ownerOf`), namedNode(`${rdfs}label`), literal(`is owner of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}ownerOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}responsibleEntityOf`), namedNode(frbr)), quad(namedNode(`${frbr}part`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}part`), namedNode(`${rdf}type`), namedNode(`${owl}TransitiveProperty`), namedNode(frbr)), quad(namedNode(`${frbr}part`), namedNode(`${rdfs}comment`), literal(`A part of an endeavour.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}part`), namedNode(`${rdfs}label`), literal(`has part`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}part`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}part`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}partOf`), namedNode(frbr)), quad(namedNode(`${frbr}part`), namedNode(`${ns8}note`), literal(`Unlike the FRBR version in RDF http://vocab.org/frbr/core.html the present version defines partonomy relationships transitive.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}partOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}partOf`), namedNode(`${rdf}type`), namedNode(`${owl}TransitiveProperty`), namedNode(frbr)), quad(namedNode(`${frbr}partOf`), namedNode(`${rdfs}comment`), literal(`An endeavour incorporating another endeavour.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}partOf`), namedNode(`${rdfs}label`), literal(`is part of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}partOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}partOf`), namedNode(`${ns8}note`), literal(`Unlike the FRBR version in RDF http://vocab.org/frbr/core.html the present version defines partonomy relationships transitive.`, 'en'), namedNode(frbr)), quad(namedNode(`${ns8}note`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(frbr)), quad(namedNode(`${ns8}note`), namedNode(`${rdfs}label`), literal(`skos:note`, 'en'), namedNode(frbr)), quad(namedNode(`${ns8}note`), namedNode(`${rdfs}isDefinedBy`), namedNode(ns8), namedNode(frbr)), quad(namedNode(`${frbr}producer`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}producer`), namedNode(`${rdfs}comment`), literal(`A manifestation linked to its prodecer.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}producer`), namedNode(`${rdfs}label`), literal(`has producer`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}producer`), namedNode(`${rdfs}domain`), namedNode(`${frbr}Manifestation`), namedNode(frbr)), quad(namedNode(`${frbr}producer`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}responsibleEntity`), namedNode(frbr)), quad(namedNode(`${frbr}producer`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}producerOf`), namedNode(frbr)), quad(namedNode(`${frbr}producerOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}producerOf`), namedNode(`${rdfs}comment`), literal(`The producer of a particular manifestation.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}producerOf`), namedNode(`${rdfs}label`), literal(`is producer of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}producerOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}responsibleEntityOf`), namedNode(frbr)), quad(namedNode(`${frbr}realization`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}realization`), namedNode(`${rdfs}comment`), literal(`A work realized through an expression.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}realization`), namedNode(`${rdfs}label`), literal(`has realization`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}realization`), namedNode(`${rdfs}domain`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(namedNode(`${frbr}realization`), namedNode(`${rdfs}range`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(namedNode(`${frbr}realization`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}realization`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(namedNode(`${frbr}realizationOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}realizationOf`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(frbr)), quad(namedNode(`${frbr}realizationOf`), namedNode(`${rdfs}comment`), literal(`An expression that realizes a work.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}realizationOf`), namedNode(`${rdfs}label`), literal(`is realization of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}realizationOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}realizer`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}realizer`), namedNode(`${rdfs}comment`), literal(`An expression linked to its realizer.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}realizer`), namedNode(`${rdfs}label`), literal(`has realizer`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}realizer`), namedNode(`${rdfs}domain`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(namedNode(`${frbr}realizer`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}responsibleEntity`), namedNode(frbr)), quad(namedNode(`${frbr}realizer`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}realizerOf`), namedNode(frbr)), quad(namedNode(`${frbr}realizerOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}realizerOf`), namedNode(`${rdfs}comment`), literal(`The realizer of a particular expression.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}realizerOf`), namedNode(`${rdfs}label`), literal(`is realizer of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}realizerOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}responsibleEntityOf`), namedNode(frbr)), quad(namedNode(`${frbr}reconfiguration`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}reconfiguration`), namedNode(`${rdfs}comment`), literal(`An item reconfigured in another one.

The reconfiguration relationship is one in which one or more items are changed in such a way that a new item or items result. Most commonly, an item of one manifestation is bound with an item of a different manifestation to make a new item. `, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}reconfiguration`), namedNode(`${rdfs}label`), literal(`has reconfiguration`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}reconfiguration`), namedNode(`${rdfs}domain`), namedNode(`${frbr}Item`), namedNode(frbr)), quad(namedNode(`${frbr}reconfiguration`), namedNode(`${rdfs}range`), namedNode(`${frbr}Item`), namedNode(frbr)), quad(namedNode(`${frbr}reconfiguration`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}reconfiguration`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}reconfigurationOf`), namedNode(frbr)), quad(namedNode(`${frbr}reconfigurationOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}reconfigurationOf`), namedNode(`${rdfs}comment`), literal(`It identifies the manifestation of a reconfigured one.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}reconfigurationOf`), namedNode(`${rdfs}label`), literal(`is reconfiguration of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}reconfigurationOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}reproduction`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}reproduction`), namedNode(`${rdfs}comment`), literal(`A manifestation/item reproduced in another one.

A reproduction indicates the relationship as it would be drawn from the first manifestation/item in the relationship to the second manifestation/item in the relationship.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}reproduction`), namedNode(`${rdfs}label`), literal(`has reproduction`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}reproduction`), namedNode(`${rdfs}domain`), blankNodes[30], namedNode(frbr)), quad(namedNode(`${frbr}reproduction`), namedNode(`${rdfs}range`), blankNodes[31], namedNode(frbr)), quad(namedNode(`${frbr}reproduction`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}reproduction`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}reproductionOf`), namedNode(frbr)), quad(blankNodes[30], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[30], namedNode(`${owl}unionOf`), blankNodes[32], namedNode(frbr)), quad(blankNodes[31], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[31], namedNode(`${owl}unionOf`), blankNodes[33], namedNode(frbr)), quad(namedNode(`${frbr}reproductionOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}reproductionOf`), namedNode(`${rdfs}comment`), literal(`It identifies the manifestation/item of a reproduced one.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}reproductionOf`), namedNode(`${rdfs}label`), literal(`is reproduction of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}reproductionOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${owl}topObjectProperty`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}revision`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}revision`), namedNode(`${rdfs}comment`), literal(`An expression revised in another one.

A revision has the intent to alter or update the content of the prior expression, but without changing the content so much that it becomes a new work.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}revision`), namedNode(`${rdfs}label`), literal(`has revision`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}revision`), namedNode(`${rdfs}domain`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(namedNode(`${frbr}revision`), namedNode(`${rdfs}range`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(namedNode(`${frbr}revision`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}revision`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}revisionOf`), namedNode(frbr)), quad(namedNode(`${frbr}revisionOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}revisionOf`), namedNode(`${rdfs}comment`), literal(`It identifies the previous expression of a revised one.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}revisionOf`), namedNode(`${rdfs}label`), literal(`is revision of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}revisionOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}subject`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}subject`), namedNode(`${rdfs}comment`), literal(`A work linked to a particular subject it is talking about.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}subject`), namedNode(`${rdfs}label`), literal(`has subject`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}subject`), namedNode(`${rdfs}domain`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(namedNode(`${frbr}subject`), namedNode(`${rdfs}range`), blankNodes[34], namedNode(frbr)), quad(namedNode(`${frbr}subject`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${owl}topObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}subject`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}subjectOf`), namedNode(frbr)), quad(blankNodes[34], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[34], namedNode(`${owl}unionOf`), blankNodes[35], namedNode(frbr)), quad(namedNode(`${frbr}subjectOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}subjectOf`), namedNode(`${rdfs}comment`), literal(`A subject a work talks abbout.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}subjectOf`), namedNode(`${rdfs}label`), literal(`is subject of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}subjectOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${owl}topObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}successor`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}successor`), namedNode(`${rdfs}comment`), literal(`An expression work/expression having another one as successor.

The successor type of relationship involves a kind of linear progression of content from one work/expression to the other. In some cases, the content of the successor may be closely connected to the content of the preceding work, which would result in a work that is referential. In others, such as with loosely connected parts of a trilogy, the successor will be autonomous. Serial publications that result from the merger or split of their predecessors and stand on their own without requiring reference to the predecessor are also examples of autonomous works that fall within the successor relationship type. If there exists a relation of this kind among two different expressions, then they always refer to different works.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}successor`), namedNode(`${rdfs}label`), literal(`has successor`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}successor`), namedNode(`${rdfs}domain`), blankNodes[36], namedNode(frbr)), quad(namedNode(`${frbr}successor`), namedNode(`${rdfs}range`), blankNodes[37], namedNode(frbr)), quad(namedNode(`${frbr}successor`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}successor`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}successorOf`), namedNode(frbr)), quad(blankNodes[36], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[36], namedNode(`${owl}unionOf`), blankNodes[38], namedNode(frbr)), quad(blankNodes[37], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[37], namedNode(`${owl}unionOf`), blankNodes[39], namedNode(frbr)), quad(namedNode(`${frbr}successorOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}successorOf`), namedNode(`${rdfs}comment`), literal(`It identifies the previous work/expression of a succeeded one.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}successorOf`), namedNode(`${rdfs}label`), literal(`is successor of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}successorOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}summarization`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}summarization`), namedNode(`${rdfs}comment`), literal(`A work/expression summarized in another one.

This property describe the summarization of an original work that is sufficient in degree to warrant their being considered as new works, rather than simply different expressions of the same work. If there exists a relation of this kind among two different expressions, they always refer to different works.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}summarization`), namedNode(`${rdfs}label`), literal(`has summarization`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}summarization`), namedNode(`${rdfs}domain`), blankNodes[40], namedNode(frbr)), quad(namedNode(`${frbr}summarization`), namedNode(`${rdfs}range`), blankNodes[41], namedNode(frbr)), quad(namedNode(`${frbr}summarization`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}summarization`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}summarizationOf`), namedNode(frbr)), quad(blankNodes[40], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[40], namedNode(`${owl}unionOf`), blankNodes[42], namedNode(frbr)), quad(blankNodes[41], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[41], namedNode(`${owl}unionOf`), blankNodes[43], namedNode(frbr)), quad(namedNode(`${frbr}summarizationOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}summarizationOf`), namedNode(`${rdfs}comment`), literal(`It identifies the original work/expression of a summarized one.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}summarizationOf`), namedNode(`${rdfs}label`), literal(`is summarization of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}summarizationOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}supplement`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}supplement`), namedNode(`${rdfs}comment`), literal(`An expression work/expression having another one as supplement.

The supplement relationship type involves works/expressions that are intended to be used in conjunction with another work/expression. Some of these, such as indices, concordances, teachers' guides, glosses, and instruction manuals for electronic resources will be so closely associated with the content of the related work/expression that they are useless without the other work/expression.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}supplement`), namedNode(`${rdfs}label`), literal(`has supplement`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}supplement`), namedNode(`${rdfs}domain`), blankNodes[44], namedNode(frbr)), quad(namedNode(`${frbr}supplement`), namedNode(`${rdfs}range`), blankNodes[45], namedNode(frbr)), quad(namedNode(`${frbr}supplement`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}supplement`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}supplementOf`), namedNode(frbr)), quad(blankNodes[44], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[44], namedNode(`${owl}unionOf`), blankNodes[46], namedNode(frbr)), quad(blankNodes[45], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[45], namedNode(`${owl}unionOf`), blankNodes[47], namedNode(frbr)), quad(namedNode(`${frbr}supplementOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}supplementOf`), namedNode(`${rdfs}comment`), literal(`It identifies the work/expression of a particular supplement of it.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}supplementOf`), namedNode(`${rdfs}label`), literal(`is supplement of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}supplementOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}transformation`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}transformation`), namedNode(`${rdfs}comment`), literal(`An work/expression transformed in another one.

This property describes the transformation of an original work or expression into another work or expression that is sufficiently different in degree to warrant the product of the transformation being considered as a new work or expression, rather than simply a different expression of the original work. If there exists a frbr:transformation relation between two different expressions, then they always relate to different works.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}transformation`), namedNode(`${rdfs}label`), literal(`has transformation`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}transformation`), namedNode(`${rdfs}domain`), blankNodes[48], namedNode(frbr)), quad(namedNode(`${frbr}transformation`), namedNode(`${rdfs}range`), blankNodes[49], namedNode(frbr)), quad(namedNode(`${frbr}transformation`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}transformation`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}transformationOf`), namedNode(frbr)), quad(blankNodes[48], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[48], namedNode(`${owl}unionOf`), blankNodes[50], namedNode(frbr)), quad(blankNodes[49], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(frbr)), quad(blankNodes[49], namedNode(`${owl}unionOf`), blankNodes[51], namedNode(frbr)), quad(namedNode(`${frbr}transformationOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}transformationOf`), namedNode(`${rdfs}comment`), literal(`It identifies the original work/expression of a trasformed one.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}transformationOf`), namedNode(`${rdfs}label`), literal(`is transformation of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}transformationOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}translation`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}translation`), namedNode(`${rdfs}comment`), literal(`An expression translated in another one.

It allows to refer to a literal translation, in which the intent is to render the intellectual content of the previous expression as accurately as possible.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}translation`), namedNode(`${rdfs}label`), literal(`has translation`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}translation`), namedNode(`${rdfs}domain`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(namedNode(`${frbr}translation`), namedNode(`${rdfs}range`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(namedNode(`${frbr}translation`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${frbr}translation`), namedNode(`${owl}inverseOf`), namedNode(`${frbr}translationOf`), namedNode(frbr)), quad(namedNode(`${frbr}translationOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(frbr)), quad(namedNode(`${frbr}translationOf`), namedNode(`${rdfs}comment`), literal(`It identifies the original expression of a translated one.`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}translationOf`), namedNode(`${rdfs}label`), literal(`is translation of`, 'en'), namedNode(frbr)), quad(namedNode(`${frbr}translationOf`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${frbr}relatedEndeavour`), namedNode(frbr)), quad(namedNode(`${rdfs}isDefinedBy`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(frbr)), quad(namedNode(`${ns9}e1`), namedNode(`${rdf}type`), namedNode(`${ns10}Variable`), namedNode(frbr)), quad(namedNode(`${ns9}e2`), namedNode(`${rdf}type`), namedNode(`${ns10}Variable`), namedNode(frbr)), quad(namedNode(`${ns9}w1`), namedNode(`${rdf}type`), namedNode(`${ns10}Variable`), namedNode(frbr)), quad(namedNode(`${ns9}w2`), namedNode(`${rdf}type`), namedNode(`${ns10}Variable`), namedNode(frbr)), quad(blankNodes[35], namedNode(`${rdf}first`), namedNode(`${frbr}CorporateBody`), namedNode(frbr)), quad(blankNodes[35], namedNode(`${rdf}rest`), blankNodes[52], namedNode(frbr)), quad(blankNodes[52], namedNode(`${rdf}first`), namedNode(`${frbr}Endeavour`), namedNode(frbr)), quad(blankNodes[52], namedNode(`${rdf}rest`), blankNodes[53], namedNode(frbr)), quad(blankNodes[54], namedNode(`${rdf}first`), namedNode(`${frbr}Object`), namedNode(frbr)), quad(blankNodes[54], namedNode(`${rdf}rest`), blankNodes[55], namedNode(frbr)), quad(blankNodes[55], namedNode(`${rdf}first`), namedNode(`${frbr}Place`), namedNode(frbr)), quad(blankNodes[55], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[56], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[56], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[56], namedNode(`${ns10}argument2`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[56], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}revision`), namedNode(frbr)), quad(blankNodes[57], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[57], namedNode(`${ns10}argument1`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[57], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[57], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[58], namedNode(`${rdf}type`), namedNode(`${ns10}DifferentIndividualsAtom`), namedNode(frbr)), quad(blankNodes[58], namedNode(`${ns10}argument1`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[58], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[59], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[59], namedNode(`${rdf}first`), blankNodes[58], namedNode(frbr)), quad(blankNodes[59], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[60], namedNode(`${rdf}type`), namedNode(`${ns10}Imp`), namedNode(frbr)), quad(blankNodes[60], namedNode(`${ns10}body`), blankNodes[61], namedNode(frbr)), quad(blankNodes[60], namedNode(`${ns10}head`), blankNodes[59], namedNode(frbr)), quad(blankNodes[61], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[61], namedNode(`${rdf}first`), blankNodes[62], namedNode(frbr)), quad(blankNodes[61], namedNode(`${rdf}rest`), blankNodes[63], namedNode(frbr)), quad(blankNodes[62], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[62], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[62], namedNode(`${ns10}argument2`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[62], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}complement`), namedNode(frbr)), quad(blankNodes[63], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[63], namedNode(`${rdf}first`), blankNodes[64], namedNode(frbr)), quad(blankNodes[63], namedNode(`${rdf}rest`), blankNodes[65], namedNode(frbr)), quad(blankNodes[64], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[64], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[64], namedNode(`${ns10}argument2`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[64], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[65], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[65], namedNode(`${rdf}first`), blankNodes[66], namedNode(frbr)), quad(blankNodes[65], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[66], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[66], namedNode(`${ns10}argument1`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[66], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[66], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[67], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[67], namedNode(`${rdf}first`), blankNodes[68], namedNode(frbr)), quad(blankNodes[67], namedNode(`${rdf}rest`), blankNodes[69], namedNode(frbr)), quad(blankNodes[68], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[68], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[68], namedNode(`${ns10}argument2`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[68], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[69], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[69], namedNode(`${rdf}first`), blankNodes[70], namedNode(frbr)), quad(blankNodes[69], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[71], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(frbr)), quad(blankNodes[71], namedNode(`${owl}allValuesFrom`), namedNode(`${frbr}Item`), namedNode(frbr)), quad(blankNodes[71], namedNode(`${owl}onProperty`), namedNode(`${frbr}part`), namedNode(frbr)), quad(blankNodes[70], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[70], namedNode(`${ns10}argument1`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[70], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[70], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[72], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[72], namedNode(`${rdf}first`), blankNodes[73], namedNode(frbr)), quad(blankNodes[72], namedNode(`${rdf}rest`), blankNodes[67], namedNode(frbr)), quad(blankNodes[73], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[73], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[73], namedNode(`${ns10}argument2`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[73], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}abridgement`), namedNode(frbr)), quad(blankNodes[74], namedNode(`${rdf}type`), namedNode(`${ns10}Imp`), namedNode(frbr)), quad(blankNodes[74], namedNode(`${ns10}body`), blankNodes[72], namedNode(frbr)), quad(blankNodes[74], namedNode(`${ns10}head`), blankNodes[75], namedNode(frbr)), quad(blankNodes[75], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[75], namedNode(`${rdf}first`), blankNodes[76], namedNode(frbr)), quad(blankNodes[75], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[76], namedNode(`${rdf}type`), namedNode(`${ns10}SameIndividualAtom`), namedNode(frbr)), quad(blankNodes[76], namedNode(`${ns10}argument1`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[76], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[77], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[77], namedNode(`${rdf}first`), blankNodes[78], namedNode(frbr)), quad(blankNodes[77], namedNode(`${rdf}rest`), blankNodes[79], namedNode(frbr)), quad(blankNodes[78], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[78], namedNode(`${ns10}argument1`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[78], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[78], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[79], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[79], namedNode(`${rdf}first`), blankNodes[80], namedNode(frbr)), quad(blankNodes[79], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[80], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[80], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[80], namedNode(`${ns10}argument2`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[80], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}translation`), namedNode(frbr)), quad(blankNodes[81], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(frbr)), quad(blankNodes[81], namedNode(`${owl}onProperty`), namedNode(`${frbr}embodimentOf`), namedNode(frbr)), quad(blankNodes[81], namedNode(`${owl}someValuesFrom`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[82], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[82], namedNode(`${rdf}first`), blankNodes[83], namedNode(frbr)), quad(blankNodes[82], namedNode(`${rdf}rest`), blankNodes[77], namedNode(frbr)), quad(blankNodes[83], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[83], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[83], namedNode(`${ns10}argument2`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[83], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[84], namedNode(`${rdf}type`), namedNode(`${ns10}Imp`), namedNode(frbr)), quad(blankNodes[84], namedNode(`${ns10}body`), blankNodes[82], namedNode(frbr)), quad(blankNodes[84], namedNode(`${ns10}head`), blankNodes[85], namedNode(frbr)), quad(blankNodes[85], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[85], namedNode(`${rdf}first`), blankNodes[86], namedNode(frbr)), quad(blankNodes[85], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[86], namedNode(`${rdf}type`), namedNode(`${ns10}SameIndividualAtom`), namedNode(frbr)), quad(blankNodes[86], namedNode(`${ns10}argument1`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[86], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[87], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[87], namedNode(`${rdf}first`), blankNodes[88], namedNode(frbr)), quad(blankNodes[87], namedNode(`${rdf}rest`), blankNodes[89], namedNode(frbr)), quad(blankNodes[88], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[88], namedNode(`${ns10}argument1`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[88], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[88], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[89], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[89], namedNode(`${rdf}first`), blankNodes[56], namedNode(frbr)), quad(blankNodes[89], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[90], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[90], namedNode(`${rdf}first`), blankNodes[91], namedNode(frbr)), quad(blankNodes[90], namedNode(`${rdf}rest`), blankNodes[87], namedNode(frbr)), quad(blankNodes[91], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[91], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[91], namedNode(`${ns10}argument2`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[91], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[1], namedNode(`${rdf}first`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[1], namedNode(`${rdf}rest`), blankNodes[92], namedNode(frbr)), quad(blankNodes[93], namedNode(`${rdf}type`), namedNode(`${ns10}Imp`), namedNode(frbr)), quad(blankNodes[93], namedNode(`${ns10}body`), blankNodes[90], namedNode(frbr)), quad(blankNodes[93], namedNode(`${ns10}head`), blankNodes[94], namedNode(frbr)), quad(blankNodes[94], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[94], namedNode(`${rdf}first`), blankNodes[95], namedNode(frbr)), quad(blankNodes[94], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[95], namedNode(`${rdf}type`), namedNode(`${ns10}SameIndividualAtom`), namedNode(frbr)), quad(blankNodes[95], namedNode(`${ns10}argument1`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[95], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[96], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[96], namedNode(`${rdf}first`), blankNodes[97], namedNode(frbr)), quad(blankNodes[96], namedNode(`${rdf}rest`), blankNodes[98], namedNode(frbr)), quad(blankNodes[97], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[97], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[97], namedNode(`${ns10}argument2`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[97], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[98], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[98], namedNode(`${rdf}first`), blankNodes[99], namedNode(frbr)), quad(blankNodes[98], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[99], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[99], namedNode(`${ns10}argument1`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[99], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[99], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[100], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[100], namedNode(`${rdf}first`), blankNodes[101], namedNode(frbr)), quad(blankNodes[100], namedNode(`${rdf}rest`), blankNodes[96], namedNode(frbr)), quad(blankNodes[101], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[101], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[101], namedNode(`${ns10}argument2`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[101], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}arrangement`), namedNode(frbr)), quad(blankNodes[102], namedNode(`${rdf}type`), namedNode(`${ns10}Imp`), namedNode(frbr)), quad(blankNodes[102], namedNode(`${ns10}body`), blankNodes[100], namedNode(frbr)), quad(blankNodes[102], namedNode(`${ns10}head`), blankNodes[103], namedNode(frbr)), quad(blankNodes[103], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[103], namedNode(`${rdf}first`), blankNodes[104], namedNode(frbr)), quad(blankNodes[103], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[104], namedNode(`${rdf}type`), namedNode(`${ns10}SameIndividualAtom`), namedNode(frbr)), quad(blankNodes[104], namedNode(`${ns10}argument1`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[104], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[105], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(frbr)), quad(blankNodes[105], namedNode(`${owl}onProperty`), namedNode(`${frbr}embodiment`), namedNode(frbr)), quad(blankNodes[105], namedNode(`${owl}someValuesFrom`), namedNode(`${frbr}Manifestation`), namedNode(frbr)), quad(blankNodes[24], namedNode(`${rdf}first`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[24], namedNode(`${rdf}rest`), blankNodes[106], namedNode(frbr)), quad(blankNodes[106], namedNode(`${rdf}first`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[106], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[25], namedNode(`${rdf}first`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[25], namedNode(`${rdf}rest`), blankNodes[107], namedNode(frbr)), quad(blankNodes[107], namedNode(`${rdf}first`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[107], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[92], namedNode(`${rdf}first`), namedNode(`${frbr}Item`), namedNode(frbr)), quad(blankNodes[92], namedNode(`${rdf}rest`), blankNodes[108], namedNode(frbr)), quad(blankNodes[51], namedNode(`${rdf}first`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[51], namedNode(`${rdf}rest`), blankNodes[109], namedNode(frbr)), quad(blankNodes[109], namedNode(`${rdf}first`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[109], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[20], namedNode(`${rdf}first`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[20], namedNode(`${rdf}rest`), blankNodes[110], namedNode(frbr)), quad(blankNodes[110], namedNode(`${rdf}first`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[110], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[46], namedNode(`${rdf}first`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[46], namedNode(`${rdf}rest`), blankNodes[111], namedNode(frbr)), quad(blankNodes[111], namedNode(`${rdf}first`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[111], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[39], namedNode(`${rdf}first`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[39], namedNode(`${rdf}rest`), blankNodes[112], namedNode(frbr)), quad(blankNodes[112], namedNode(`${rdf}first`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[112], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[38], namedNode(`${rdf}first`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[38], namedNode(`${rdf}rest`), blankNodes[113], namedNode(frbr)), quad(blankNodes[113], namedNode(`${rdf}first`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[113], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[28], namedNode(`${rdf}first`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[28], namedNode(`${rdf}rest`), blankNodes[114], namedNode(frbr)), quad(blankNodes[114], namedNode(`${rdf}first`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[114], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[47], namedNode(`${rdf}first`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[47], namedNode(`${rdf}rest`), blankNodes[115], namedNode(frbr)), quad(blankNodes[115], namedNode(`${rdf}first`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[115], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[50], namedNode(`${rdf}first`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[50], namedNode(`${rdf}rest`), blankNodes[116], namedNode(frbr)), quad(blankNodes[116], namedNode(`${rdf}first`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[116], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[29], namedNode(`${rdf}first`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[29], namedNode(`${rdf}rest`), blankNodes[117], namedNode(frbr)), quad(blankNodes[117], namedNode(`${rdf}first`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[117], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[42], namedNode(`${rdf}first`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[42], namedNode(`${rdf}rest`), blankNodes[118], namedNode(frbr)), quad(blankNodes[118], namedNode(`${rdf}first`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[118], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[43], namedNode(`${rdf}first`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[43], namedNode(`${rdf}rest`), blankNodes[119], namedNode(frbr)), quad(blankNodes[119], namedNode(`${rdf}first`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[119], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[21], namedNode(`${rdf}first`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[21], namedNode(`${rdf}rest`), blankNodes[120], namedNode(frbr)), quad(blankNodes[120], namedNode(`${rdf}first`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[120], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[12], namedNode(`${rdf}first`), namedNode(`${frbr}Endeavour`), namedNode(frbr)), quad(blankNodes[12], namedNode(`${rdf}rest`), blankNodes[121], namedNode(frbr)), quad(blankNodes[121], namedNode(`${rdf}first`), blankNodes[122], namedNode(frbr)), quad(blankNodes[121], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[122], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(frbr)), quad(blankNodes[122], namedNode(`${owl}onProperty`), namedNode(`${frbr}exemplarOf`), namedNode(frbr)), quad(blankNodes[122], namedNode(`${owl}someValuesFrom`), namedNode(`${frbr}Manifestation`), namedNode(frbr)), quad(blankNodes[13], namedNode(`${rdf}first`), namedNode(`${frbr}Endeavour`), namedNode(frbr)), quad(blankNodes[13], namedNode(`${rdf}rest`), blankNodes[123], namedNode(frbr)), quad(blankNodes[123], namedNode(`${rdf}first`), blankNodes[71], namedNode(frbr)), quad(blankNodes[123], namedNode(`${rdf}rest`), blankNodes[124], namedNode(frbr)), quad(blankNodes[124], namedNode(`${rdf}first`), blankNodes[125], namedNode(frbr)), quad(blankNodes[124], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[125], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(frbr)), quad(blankNodes[125], namedNode(`${owl}allValuesFrom`), namedNode(`${frbr}Item`), namedNode(frbr)), quad(blankNodes[125], namedNode(`${owl}onProperty`), namedNode(`${frbr}partOf`), namedNode(frbr)), quad(blankNodes[126], namedNode(`${rdf}first`), blankNodes[127], namedNode(frbr)), quad(blankNodes[126], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[127], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(frbr)), quad(blankNodes[127], namedNode(`${owl}onProperty`), namedNode(`${frbr}realization`), namedNode(frbr)), quad(blankNodes[127], namedNode(`${owl}someValuesFrom`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[16], namedNode(`${rdf}first`), namedNode(`${frbr}Endeavour`), namedNode(frbr)), quad(blankNodes[16], namedNode(`${rdf}rest`), blankNodes[126], namedNode(frbr)), quad(blankNodes[128], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[128], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[128], namedNode(`${ns10}argument2`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[128], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}transformation`), namedNode(frbr)), quad(blankNodes[129], namedNode(`${rdf}first`), blankNodes[130], namedNode(frbr)), quad(blankNodes[129], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[130], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(frbr)), quad(blankNodes[130], namedNode(`${owl}allValuesFrom`), namedNode(`${frbr}Manifestation`), namedNode(frbr)), quad(blankNodes[130], namedNode(`${owl}onProperty`), namedNode(`${frbr}partOf`), namedNode(frbr)), quad(blankNodes[131], namedNode(`${rdf}first`), blankNodes[132], namedNode(frbr)), quad(blankNodes[131], namedNode(`${rdf}rest`), blankNodes[129], namedNode(frbr)), quad(blankNodes[132], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(frbr)), quad(blankNodes[132], namedNode(`${owl}allValuesFrom`), namedNode(`${frbr}Manifestation`), namedNode(frbr)), quad(blankNodes[132], namedNode(`${owl}onProperty`), namedNode(`${frbr}part`), namedNode(frbr)), quad(blankNodes[14], namedNode(`${rdf}first`), namedNode(`${frbr}Endeavour`), namedNode(frbr)), quad(blankNodes[14], namedNode(`${rdf}rest`), blankNodes[131], namedNode(frbr)), quad(blankNodes[133], namedNode(`${rdf}first`), blankNodes[134], namedNode(frbr)), quad(blankNodes[133], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[134], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(frbr)), quad(blankNodes[134], namedNode(`${owl}onProperty`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[134], namedNode(`${owl}someValuesFrom`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[135], namedNode(`${rdf}first`), blankNodes[105], namedNode(frbr)), quad(blankNodes[135], namedNode(`${rdf}rest`), blankNodes[133], namedNode(frbr)), quad(blankNodes[10], namedNode(`${rdf}first`), namedNode(`${frbr}Endeavour`), namedNode(frbr)), quad(blankNodes[10], namedNode(`${rdf}rest`), blankNodes[135], namedNode(frbr)), quad(blankNodes[136], namedNode(`${rdf}first`), blankNodes[137], namedNode(frbr)), quad(blankNodes[136], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[137], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(frbr)), quad(blankNodes[137], namedNode(`${owl}allValuesFrom`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[137], namedNode(`${owl}onProperty`), namedNode(`${frbr}partOf`), namedNode(frbr)), quad(blankNodes[138], namedNode(`${rdf}first`), blankNodes[139], namedNode(frbr)), quad(blankNodes[138], namedNode(`${rdf}rest`), blankNodes[136], namedNode(frbr)), quad(blankNodes[139], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(frbr)), quad(blankNodes[139], namedNode(`${owl}allValuesFrom`), namedNode(`${frbr}Expression`), namedNode(frbr)), quad(blankNodes[139], namedNode(`${owl}onProperty`), namedNode(`${frbr}part`), namedNode(frbr)), quad(blankNodes[140], namedNode(`${rdf}type`), namedNode(`${owl}AllDisjointClasses`), namedNode(frbr)), quad(blankNodes[140], namedNode(`${owl}members`), blankNodes[141], namedNode(frbr)), quad(blankNodes[141], namedNode(`${rdf}first`), namedNode(`${frbr}Concept`), namedNode(frbr)), quad(blankNodes[141], namedNode(`${rdf}rest`), blankNodes[142], namedNode(frbr)), quad(blankNodes[11], namedNode(`${rdf}first`), namedNode(`${frbr}Endeavour`), namedNode(frbr)), quad(blankNodes[11], namedNode(`${rdf}rest`), blankNodes[138], namedNode(frbr)), quad(blankNodes[143], namedNode(`${rdf}first`), blankNodes[144], namedNode(frbr)), quad(blankNodes[143], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[144], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(frbr)), quad(blankNodes[144], namedNode(`${owl}onProperty`), namedNode(`${frbr}exemplar`), namedNode(frbr)), quad(blankNodes[144], namedNode(`${owl}someValuesFrom`), namedNode(`${frbr}Item`), namedNode(frbr)), quad(blankNodes[145], namedNode(`${rdf}first`), blankNodes[81], namedNode(frbr)), quad(blankNodes[145], namedNode(`${rdf}rest`), blankNodes[143], namedNode(frbr)), quad(blankNodes[15], namedNode(`${rdf}first`), namedNode(`${frbr}Endeavour`), namedNode(frbr)), quad(blankNodes[15], namedNode(`${rdf}rest`), blankNodes[145], namedNode(frbr)), quad(blankNodes[146], namedNode(`${rdf}first`), blankNodes[147], namedNode(frbr)), quad(blankNodes[146], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[147], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(frbr)), quad(blankNodes[147], namedNode(`${owl}allValuesFrom`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[147], namedNode(`${owl}onProperty`), namedNode(`${frbr}partOf`), namedNode(frbr)), quad(blankNodes[148], namedNode(`${rdf}first`), blankNodes[149], namedNode(frbr)), quad(blankNodes[148], namedNode(`${rdf}rest`), blankNodes[146], namedNode(frbr)), quad(blankNodes[149], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(frbr)), quad(blankNodes[149], namedNode(`${owl}allValuesFrom`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[149], namedNode(`${owl}onProperty`), namedNode(`${frbr}part`), namedNode(frbr)), quad(blankNodes[17], namedNode(`${rdf}first`), namedNode(`${frbr}Endeavour`), namedNode(frbr)), quad(blankNodes[17], namedNode(`${rdf}rest`), blankNodes[148], namedNode(frbr)), quad(blankNodes[33], namedNode(`${rdf}first`), namedNode(`${frbr}Item`), namedNode(frbr)), quad(blankNodes[33], namedNode(`${rdf}rest`), blankNodes[150], namedNode(frbr)), quad(blankNodes[150], namedNode(`${rdf}first`), namedNode(`${frbr}Manifestation`), namedNode(frbr)), quad(blankNodes[150], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[151], namedNode(`${rdf}first`), namedNode(`${frbr}Manifestation`), namedNode(frbr)), quad(blankNodes[151], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[32], namedNode(`${rdf}first`), namedNode(`${frbr}Item`), namedNode(frbr)), quad(blankNodes[32], namedNode(`${rdf}rest`), blankNodes[151], namedNode(frbr)), quad(blankNodes[152], namedNode(`${rdf}first`), namedNode(`${frbr}Work`), namedNode(frbr)), quad(blankNodes[152], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[53], namedNode(`${rdf}first`), namedNode(`${frbr}Subject`), namedNode(frbr)), quad(blankNodes[53], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[142], namedNode(`${rdf}first`), namedNode(`${frbr}Event`), namedNode(frbr)), quad(blankNodes[142], namedNode(`${rdf}rest`), blankNodes[54], namedNode(frbr)), quad(blankNodes[153], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[153], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[153], namedNode(`${ns10}argument2`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[153], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}adaption`), namedNode(frbr)), quad(blankNodes[154], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[154], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[154], namedNode(`${ns10}argument2`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[154], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}successor`), namedNode(frbr)), quad(blankNodes[155], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[155], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[155], namedNode(`${ns10}argument2`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[155], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}imitation`), namedNode(frbr)), quad(blankNodes[108], namedNode(`${rdf}first`), namedNode(`${frbr}Manifestation`), namedNode(frbr)), quad(blankNodes[108], namedNode(`${rdf}rest`), blankNodes[152], namedNode(frbr)), quad(blankNodes[156], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[156], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[156], namedNode(`${ns10}argument2`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[156], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}supplement`), namedNode(frbr)), quad(blankNodes[157], namedNode(`${rdf}type`), namedNode(`${ns10}DifferentIndividualsAtom`), namedNode(frbr)), quad(blankNodes[157], namedNode(`${ns10}argument1`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[157], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[158], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[158], namedNode(`${rdf}first`), blankNodes[157], namedNode(frbr)), quad(blankNodes[158], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[159], namedNode(`${rdf}type`), namedNode(`${ns10}Imp`), namedNode(frbr)), quad(blankNodes[159], namedNode(`${ns10}body`), blankNodes[160], namedNode(frbr)), quad(blankNodes[159], namedNode(`${ns10}head`), blankNodes[158], namedNode(frbr)), quad(blankNodes[160], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[160], namedNode(`${rdf}first`), blankNodes[161], namedNode(frbr)), quad(blankNodes[160], namedNode(`${rdf}rest`), blankNodes[162], namedNode(frbr)), quad(blankNodes[161], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[161], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[161], namedNode(`${ns10}argument2`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[161], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[162], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[162], namedNode(`${rdf}first`), blankNodes[163], namedNode(frbr)), quad(blankNodes[162], namedNode(`${rdf}rest`), blankNodes[164], namedNode(frbr)), quad(blankNodes[163], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[163], namedNode(`${ns10}argument1`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[163], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[163], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[164], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[164], namedNode(`${rdf}first`), blankNodes[156], namedNode(frbr)), quad(blankNodes[164], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[165], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[165], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[165], namedNode(`${ns10}argument2`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[165], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}summarization`), namedNode(frbr)), quad(blankNodes[166], namedNode(`${rdf}type`), namedNode(`${ns10}DifferentIndividualsAtom`), namedNode(frbr)), quad(blankNodes[166], namedNode(`${ns10}argument1`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[166], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[167], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[167], namedNode(`${rdf}first`), blankNodes[166], namedNode(frbr)), quad(blankNodes[167], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[168], namedNode(`${rdf}type`), namedNode(`${ns10}Imp`), namedNode(frbr)), quad(blankNodes[168], namedNode(`${ns10}body`), blankNodes[169], namedNode(frbr)), quad(blankNodes[168], namedNode(`${ns10}head`), blankNodes[167], namedNode(frbr)), quad(blankNodes[169], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[169], namedNode(`${rdf}first`), blankNodes[170], namedNode(frbr)), quad(blankNodes[169], namedNode(`${rdf}rest`), blankNodes[171], namedNode(frbr)), quad(blankNodes[170], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[170], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[170], namedNode(`${ns10}argument2`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[170], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[171], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[171], namedNode(`${rdf}first`), blankNodes[172], namedNode(frbr)), quad(blankNodes[171], namedNode(`${rdf}rest`), blankNodes[173], namedNode(frbr)), quad(blankNodes[172], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[172], namedNode(`${ns10}argument1`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[172], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[172], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[173], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[173], namedNode(`${rdf}first`), blankNodes[128], namedNode(frbr)), quad(blankNodes[173], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[174], namedNode(`${rdf}type`), namedNode(`${ns10}DifferentIndividualsAtom`), namedNode(frbr)), quad(blankNodes[174], namedNode(`${ns10}argument1`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[174], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[175], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[175], namedNode(`${rdf}first`), blankNodes[174], namedNode(frbr)), quad(blankNodes[175], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[176], namedNode(`${rdf}type`), namedNode(`${ns10}Imp`), namedNode(frbr)), quad(blankNodes[176], namedNode(`${ns10}body`), blankNodes[177], namedNode(frbr)), quad(blankNodes[176], namedNode(`${ns10}head`), blankNodes[175], namedNode(frbr)), quad(blankNodes[177], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[177], namedNode(`${rdf}first`), blankNodes[178], namedNode(frbr)), quad(blankNodes[177], namedNode(`${rdf}rest`), blankNodes[179], namedNode(frbr)), quad(blankNodes[178], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[178], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[178], namedNode(`${ns10}argument2`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[178], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[179], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[179], namedNode(`${rdf}first`), blankNodes[180], namedNode(frbr)), quad(blankNodes[179], namedNode(`${rdf}rest`), blankNodes[181], namedNode(frbr)), quad(blankNodes[180], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[180], namedNode(`${ns10}argument1`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[180], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[180], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[181], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[181], namedNode(`${rdf}first`), blankNodes[154], namedNode(frbr)), quad(blankNodes[181], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[182], namedNode(`${rdf}type`), namedNode(`${ns10}DifferentIndividualsAtom`), namedNode(frbr)), quad(blankNodes[182], namedNode(`${ns10}argument1`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[182], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[183], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[183], namedNode(`${rdf}first`), blankNodes[182], namedNode(frbr)), quad(blankNodes[183], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[184], namedNode(`${rdf}type`), namedNode(`${ns10}Imp`), namedNode(frbr)), quad(blankNodes[184], namedNode(`${ns10}body`), blankNodes[185], namedNode(frbr)), quad(blankNodes[184], namedNode(`${ns10}head`), blankNodes[183], namedNode(frbr)), quad(blankNodes[185], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[185], namedNode(`${rdf}first`), blankNodes[153], namedNode(frbr)), quad(blankNodes[185], namedNode(`${rdf}rest`), blankNodes[186], namedNode(frbr)), quad(blankNodes[186], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[186], namedNode(`${rdf}first`), blankNodes[187], namedNode(frbr)), quad(blankNodes[186], namedNode(`${rdf}rest`), blankNodes[188], namedNode(frbr)), quad(blankNodes[187], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[187], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[187], namedNode(`${ns10}argument2`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[187], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[188], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[188], namedNode(`${rdf}first`), blankNodes[189], namedNode(frbr)), quad(blankNodes[188], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[189], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[189], namedNode(`${ns10}argument1`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[189], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[189], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[190], namedNode(`${rdf}type`), namedNode(`${ns10}DifferentIndividualsAtom`), namedNode(frbr)), quad(blankNodes[190], namedNode(`${ns10}argument1`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[190], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[191], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[191], namedNode(`${rdf}first`), blankNodes[190], namedNode(frbr)), quad(blankNodes[191], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[192], namedNode(`${rdf}type`), namedNode(`${ns10}Imp`), namedNode(frbr)), quad(blankNodes[192], namedNode(`${ns10}body`), blankNodes[193], namedNode(frbr)), quad(blankNodes[192], namedNode(`${ns10}head`), blankNodes[191], namedNode(frbr)), quad(blankNodes[193], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[193], namedNode(`${rdf}first`), blankNodes[194], namedNode(frbr)), quad(blankNodes[193], namedNode(`${rdf}rest`), blankNodes[195], namedNode(frbr)), quad(blankNodes[194], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[194], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[194], namedNode(`${ns10}argument2`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[194], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[195], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[195], namedNode(`${rdf}first`), blankNodes[196], namedNode(frbr)), quad(blankNodes[195], namedNode(`${rdf}rest`), blankNodes[197], namedNode(frbr)), quad(blankNodes[196], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[196], namedNode(`${ns10}argument1`), namedNode(`${ns9}e2`), namedNode(frbr)), quad(blankNodes[196], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[196], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[197], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[197], namedNode(`${rdf}first`), blankNodes[165], namedNode(frbr)), quad(blankNodes[197], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[198], namedNode(`${rdf}type`), namedNode(`${ns10}DifferentIndividualsAtom`), namedNode(frbr)), quad(blankNodes[198], namedNode(`${ns10}argument1`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[198], namedNode(`${ns10}argument2`), namedNode(`${ns9}w2`), namedNode(frbr)), quad(blankNodes[199], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[199], namedNode(`${rdf}first`), blankNodes[198], namedNode(frbr)), quad(blankNodes[199], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr)), quad(blankNodes[200], namedNode(`${rdf}type`), namedNode(`${ns10}Imp`), namedNode(frbr)), quad(blankNodes[200], namedNode(`${ns10}body`), blankNodes[201], namedNode(frbr)), quad(blankNodes[200], namedNode(`${ns10}head`), blankNodes[199], namedNode(frbr)), quad(blankNodes[201], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[201], namedNode(`${rdf}first`), blankNodes[155], namedNode(frbr)), quad(blankNodes[201], namedNode(`${rdf}rest`), blankNodes[202], namedNode(frbr)), quad(blankNodes[202], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[202], namedNode(`${rdf}first`), blankNodes[203], namedNode(frbr)), quad(blankNodes[202], namedNode(`${rdf}rest`), blankNodes[204], namedNode(frbr)), quad(blankNodes[203], namedNode(`${rdf}type`), namedNode(`${ns10}IndividualPropertyAtom`), namedNode(frbr)), quad(blankNodes[203], namedNode(`${ns10}argument1`), namedNode(`${ns9}e1`), namedNode(frbr)), quad(blankNodes[203], namedNode(`${ns10}argument2`), namedNode(`${ns9}w1`), namedNode(frbr)), quad(blankNodes[203], namedNode(`${ns10}propertyPredicate`), namedNode(`${frbr}realizationOf`), namedNode(frbr)), quad(blankNodes[204], namedNode(`${rdf}type`), namedNode(`${ns10}AtomList`), namedNode(frbr)), quad(blankNodes[204], namedNode(`${rdf}first`), blankNodes[57], namedNode(frbr)), quad(blankNodes[204], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(frbr))];
});