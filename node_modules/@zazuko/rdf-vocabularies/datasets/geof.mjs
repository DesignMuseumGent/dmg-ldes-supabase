/* This file was automatically generated. Do not edit by hand. */
const {
  geof,
  rdf,
  skos
} = {
  'geof': 'http://www.opengis.net/def/function/geosparql/',
  'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
  'skos': 'http://www.w3.org/2004/02/skos/core#'
};
export default (({
  literal,
  namedNode,
  quad
}) => {
  return [quad(namedNode(geof), namedNode(`${rdf}type`), namedNode(`${skos}Collection`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}boundary`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}buffer`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}convexHull`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}difference`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}distance`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}ehContains`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}ehCoveredBy`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}ehCovers`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}ehDisjoint`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}ehEquals`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}ehInside`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}ehMeet`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}ehOverlap`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}envelope`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}getSRID`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}intersection`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}rcc8dc`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}rcc8ec`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}rcc8eq`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}rcc8ntpp`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}rcc8ntppi`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}rcc8po`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}rcc8tpp`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}rcc8tppi`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}relate`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}sfContains`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}sfCrosses`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}sfDisjoint`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}sfEquals`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}sfIntersects`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}sfOverlaps`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}sfTouches`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}sfWithin`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}symDifference`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}member`), namedNode(`${geof}union`), namedNode(geof)), quad(namedNode(geof), namedNode(`${skos}prefLabel`), literal(`GeoSPARQL Functions	`, 'en'), namedNode(geof))];
});