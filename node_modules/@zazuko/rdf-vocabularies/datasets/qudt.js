"use strict";
/* This file was automatically generated. Do not edit by hand. */
Object.defineProperty(exports, "__esModule", { value: true });
const { dcterms, rdf, owl, qudt, rdfs, xsd, ns7, vaem, ns9, ns10, ns11, ns12, ns13, sh, ns15, ns16, prov, ns18, ns19, skos, ns21, ns22, dtype, ns24, ns25, ns26, ns27, dc11, ns29, ns30, ns31, ns32 } = {
    'dcterms': 'http://purl.org/dc/terms/',
    'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'owl': 'http://www.w3.org/2002/07/owl#',
    'qudt': 'http://qudt.org/schema/qudt/',
    'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
    'xsd': 'http://www.w3.org/2001/XMLSchema#',
    'ns7': 'http://qudt.org/2.1/schema/',
    'vaem': 'http://www.linkedmodel.org/schema/vaem#',
    'ns9': 'http://voag.linkedmodel.org/schema/voag#',
    'ns10': 'http://qudt.org/schema/datatype/',
    'ns11': 'http://qudt.org/2.1/schema/facade/',
    'ns12': 'http://www.linkedmodel.org/schema/',
    'ns13': 'http://www.w3.org/2004/02/skos/',
    'sh': 'http://www.w3.org/ns/shacl#',
    'ns15': 'http://qudt.org/2.1/schema/citation#',
    'ns16': 'http://voag.linkedmodel.org/voag#',
    'prov': 'http://www.w3.org/ns/prov#',
    'ns18': 'http://en.wikipedia.org/wiki/',
    'ns19': 'http://xlinux.nist.gov/dads/HTML/',
    'skos': 'http://www.w3.org/2004/02/skos/core#',
    'ns21': 'http://mathworld.wolfram.com/',
    'ns22': 'http://dbpedia.org/resource/',
    'dtype': 'http://www.linkedmodel.org/schema/dtype#',
    'ns24': 'http://qudt.org/vocab/type/',
    'ns25': 'https://en.wikipedia.org/wiki/',
    'ns26': 'http://qudt.org/schema/type#',
    'ns27': 'http://msdn.microsoft.com/en-us/library/windows/desktop/',
    'dc11': 'http://purl.org/dc/elements/1.1/',
    'ns29': 'http://edg.topbraid.solutions/1.0/schema/',
    'ns30': 'https://ucum.org/',
    'ns31': 'http://voag.linkedmodel.org/schema/',
    'ns32': 'http://www.w3.org/ns/'
};
exports.default = ({ blankNode, literal, namedNode, quad }) => {
    const blankNodes = [];
    for (let i = 0; i < 655; i++) {
        blankNodes.push(blankNode());
    }
    return [
        quad(namedNode(`${dcterms}abstract`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(qudt)),
        quad(namedNode(`${dcterms}abstract`), namedNode(`${rdfs}isDefinedBy`), namedNode(dcterms), namedNode(qudt)),
        quad(namedNode(`${dcterms}abstract`), namedNode(`${rdfs}label`), literal(`abstract`), namedNode(qudt)),
        quad(namedNode(`${dcterms}abstract`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${dcterms}contributor`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(qudt)),
        quad(namedNode(`${dcterms}contributor`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${dcterms}contributor`), namedNode(`${rdfs}label`), literal(`contributor`), namedNode(qudt)),
        quad(namedNode(`${dcterms}contributor`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${dcterms}created`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${dcterms}created`), namedNode(`${rdfs}label`), literal(`created`), namedNode(qudt)),
        quad(namedNode(`${dcterms}created`), namedNode(`${rdfs}range`), namedNode(`${xsd}date`), namedNode(qudt)),
        quad(namedNode(`${dcterms}creator`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(qudt)),
        quad(namedNode(`${dcterms}creator`), namedNode(`${rdfs}label`), literal(`creator`), namedNode(qudt)),
        quad(namedNode(`${dcterms}creator`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${dcterms}description`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(qudt)),
        quad(namedNode(`${dcterms}description`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${dcterms}description`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${dcterms}description`), namedNode(`${rdfs}label`), literal(`description`), namedNode(qudt)),
        quad(namedNode(`${dcterms}description`), namedNode(`${rdfs}range`), namedNode(`${rdf}HTML`), namedNode(qudt)),
        quad(namedNode(`${ns7}datatype`), namedNode(`${rdf}type`), namedNode(`${owl}Ontology`), namedNode(qudt)),
        quad(namedNode(`${ns7}datatype`), namedNode(`${rdfs}label`), literal(`QUDT SCHEMA - Datatypes`), namedNode(qudt)),
        quad(namedNode(`${ns7}datatype`), namedNode(`${vaem}hasCatalogEntry`), namedNode(`${ns9}QUDT-SchemaCatalogEntry`), namedNode(qudt)),
        quad(namedNode(`${ns7}datatype`), namedNode(`${vaem}hasGraphMetadata`), namedNode(`${ns10}GMD_datatype`), namedNode(qudt)),
        quad(namedNode(`${ns7}datatype`), namedNode(`${vaem}hasGraphRole`), namedNode(`${vaem}SchemaGraph`), namedNode(qudt)),
        quad(namedNode(`${ns7}datatype`), namedNode(`${vaem}intent`), literal(`This ontology is to be used by other ontologies that need to reference type definitions.`), namedNode(qudt)),
        quad(namedNode(`${ns7}datatype`), namedNode(`${vaem}namespace`), literal(`http://qudt.org/schema/dtype/`), namedNode(qudt)),
        quad(namedNode(`${ns7}datatype`), namedNode(`${vaem}namespacePrefix`), literal(`qudt`), namedNode(qudt)),
        quad(namedNode(`${ns7}datatype`), namedNode(`${vaem}specificity`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${ns7}datatype`), namedNode(`${vaem}url`), literal(`http://qudt.org/2.0/schema/dtype`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${ns7}datatype`), namedNode(`${owl}imports`), namedNode(`${ns11}qudt`), namedNode(qudt)),
        quad(namedNode(`${ns7}datatype`), namedNode(`${owl}imports`), namedNode(`${ns12}dtype`), namedNode(qudt)),
        quad(namedNode(`${ns7}datatype`), namedNode(`${owl}imports`), namedNode(`${ns12}vaem`), namedNode(qudt)),
        quad(namedNode(`${ns7}datatype`), namedNode(`${owl}imports`), namedNode(`${ns13}core`), namedNode(qudt)),
        quad(namedNode(`${ns7}datatype`), namedNode(`${owl}imports`), namedNode(sh), namedNode(qudt)),
        quad(namedNode(`${dcterms}isReplacedBy`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${dcterms}isReplacedBy`), namedNode(`${rdfs}label`), literal(`is replaced by`), namedNode(qudt)),
        quad(namedNode(`${dcterms}modified`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${dcterms}modified`), namedNode(`${rdfs}label`), literal(`modified`), namedNode(qudt)),
        quad(namedNode(`${dcterms}modified`), namedNode(`${rdfs}range`), namedNode(`${xsd}date`), namedNode(qudt)),
        quad(namedNode(`${dcterms}rights`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(qudt)),
        quad(namedNode(`${dcterms}rights`), namedNode(`${rdfs}label`), literal(`rights`), namedNode(qudt)),
        quad(namedNode(`${dcterms}rights`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${dcterms}source`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(qudt)),
        quad(namedNode(`${dcterms}source`), namedNode(`${rdfs}isDefinedBy`), namedNode(dcterms), namedNode(qudt)),
        quad(namedNode(`${dcterms}source`), namedNode(`${rdfs}label`), literal(`source`), namedNode(qudt)),
        quad(namedNode(`${dcterms}source`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(qudt)),
        quad(namedNode(`${dcterms}subject`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(qudt)),
        quad(namedNode(`${dcterms}subject`), namedNode(`${rdfs}label`), literal(`subject`), namedNode(qudt)),
        quad(namedNode(`${dcterms}subject`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${dcterms}title`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(qudt)),
        quad(namedNode(`${dcterms}title`), namedNode(`${rdfs}label`), literal(`title`), namedNode(qudt)),
        quad(namedNode(`${dcterms}title`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${ns15}PubKinds`), namedNode(`${rdf}type`), namedNode(`${ns15}PubKind`), namedNode(qudt)),
        quad(namedNode(`${ns15}PubKinds`), namedNode(`${rdfs}label`), literal(`Pub kinds`), namedNode(qudt)),
        quad(namedNode(`${ns9}QUDT-SchemaCatalogEntry`), namedNode(`${rdf}type`), namedNode(`${vaem}CatalogEntry`), namedNode(qudt)),
        quad(namedNode(`${ns9}QUDT-SchemaCatalogEntry`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${ns9}QUDT-SchemaCatalogEntry`), namedNode(`${rdfs}label`), literal(`QUDT Schema Catalog Entry`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${rdf}type`), namedNode(`${vaem}GraphMetaData`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${rdfs}label`), literal(`QUDT Schema for Datatypes - Version 2.1.18`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${dcterms}description`), literal(`The QUDT 'Datatype' ontology is a specification of scalar and structured data types. Scalar data types are defined for all the commonly encountered forms of numbers, characters and booleans, with their representations in a number of vendor and industry specific technologies. Structured data types cover arrays, lists, trees and many other forms of composite data elements. Specification of coordinate systems is also covered.`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${dcterms}modified`), literal(`2022-06-16T16:17:44.232-04:00`, namedNode(`${xsd}dateTime`)), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${dcterms}subject`), literal(`Datatypes`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}hasGraphRole`), namedNode(`${vaem}SchemaGraph`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}namespace`), literal(`http://qudt.org/schema/qudt/`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}namespacePrefix`), literal(`qudt`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}graphTitle`), literal(`QUDT Schema for Datatypes - Version 2.1.18`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}isMetadataFor`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}latestPublishedVersion`), literal(`https://qudt.org/doc/2022/06/DOC_SCHEMA-DATATYPES-v2.1.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}logo`), literal(`https://qudt.org/linkedmodels.org/assets/lib/lm/images/logos/qudt_logo-300x110.png`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}name`), literal(`QUDT`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}owner`), literal(`QUDT.ORG`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}previousPublishedVersion`), literal(`http://www.qudt.org/doc/2022/04/DOC_SCHEMA-DATATYPES-v2.1.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}publishedDate`), literal(`2017-05-10`, namedNode(`${xsd}date`)), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}releaseDate`), literal(`2016-05-09`, namedNode(`${xsd}date`)), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}revision`), literal(`2.1`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}title`), literal(`QUDT Schema for Datatypes - Version 2.1.18`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}turtleFileURL`), literal(`http://qudt.org/2.1/schema/datatype.ttl`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dcterms}abstract`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dcterms}created`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dcterms}creator`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dcterms}modified`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dcterms}rights`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dcterms}title`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${ns16}QUDT-Attribution`), namedNode(qudt)),
        quad(namedNode(`${ns10}GMD_datatype`), namedNode(`${vaem}withAttributionTo`), namedNode(`${ns16}QUDT-Attribution`), namedNode(qudt)),
        quad(namedNode(`${vaem}SchemaGraph`), namedNode(`${dcterms}description`), literal(`A graph that defines classes and properties for one or more namespaces.`), namedNode(qudt)),
        quad(namedNode(`${ns12}dtype`), namedNode(`${vaem}namespace`), literal(`http://www.linkedmodel.org/schema/dtype#`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${ns12}dtype`), namedNode(`${vaem}namespacePrefix`), literal(`dtype`), namedNode(qudt)),
        quad(namedNode(`${ns7}qudt`), namedNode(`${rdf}type`), namedNode(`${owl}Ontology`), namedNode(qudt)),
        quad(namedNode(`${ns7}qudt`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${ns7}qudt`), namedNode(`${rdfs}label`), literal(`QUDT Schema - Version 2.1.18`), namedNode(qudt)),
        quad(namedNode(`${ns7}qudt`), namedNode(`${vaem}hasGraphMetadata`), namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(qudt)),
        quad(namedNode(`${ns7}qudt`), namedNode(`${owl}imports`), namedNode(`${ns12}dtype`), namedNode(qudt)),
        quad(namedNode(`${ns7}qudt`), namedNode(`${owl}imports`), namedNode(`${ns12}vaem`), namedNode(qudt)),
        quad(namedNode(`${ns7}qudt`), namedNode(`${owl}imports`), namedNode(`${ns13}core`), namedNode(qudt)),
        quad(namedNode(`${ns7}qudt`), namedNode(`${owl}versionIRI`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${rdf}type`), namedNode(`${vaem}GraphMetaData`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${rdfs}label`), literal(`QUDT Schema - Version 2.1.18`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${dcterms}contributor`), literal(`Daniel Mekonnen`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${dcterms}contributor`), literal(`David Price`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${dcterms}contributor`), literal(`Jack Hodges`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${dcterms}contributor`), literal(`James E. Masters`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${dcterms}contributor`), literal(`Simon J D Cox`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${dcterms}contributor`), literal(`Steve Ray`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${dcterms}created`), literal(`2011-04-20`, namedNode(`${xsd}date`)), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${dcterms}creator`), literal(`Ralph Hodgson`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${dcterms}description`), literal(`<p class="lm-para">The QUDT, or "Quantity, Unit, Dimension and Type" schema defines the base classes properties, and restrictions used for modeling physical quantities, units of measure, and their dimensions in various measurement systems. The goal of the QUDT ontology is to provide a unified model of, measurable quantities, units for measuring different kinds of quantities, the numerical values of quantities in different units of measure and the data structures and data types used to store and manipulate these objects in software.</p>

<p class="lm-para">Except for unit prefixes, all units are specified in separate vocabularies. Descriptions are provided in both HTML and LaTeX formats. A quantity is a measure of an observable phenomenon, that, when associated with something, becomes a property of that thing; a particular object, event, or physical system. </p>

<p class="lm-para">A quantity has meaning in the context of a measurement (i.e. the thing measured, the measured value, the accuracy of measurement, etc.) whereas the underlying quantity kind is independent of any particular measurement. Thus, length is a quantity kind while the height of a rocket is a specific quantity of length; its magnitude that may be expressed in meters, feet, inches, etc.  Or, as stated at Wikipedia, in the language of measurement, quantities are quantifiable aspects of the world, such as time, distance, velocity, mass, momentum, energy, and weight, and units are used to describe their measure. Many of these quantities are related to each other by various physical laws, and as a result the units of some of the quantities can be expressed as products (or ratios) of powers of other units (e.g., momentum is mass times velocity and velocity is measured in distance divided by time).</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${dcterms}modified`), literal(`2022-06-16T16:17:03.405-04:00`, namedNode(`${xsd}dateTime`)), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${dcterms}rights`), literal(`The QUDT Ontologies are issued under a Creative Commons Attribution 4.0 International License (CC BY 4.0), available at https://creativecommons.org/licenses/by/4.0/. Attribution should be made to QUDT.org`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${dcterms}rights`), literal(`
  This product includes all or a portion of the UCUM table, UCUM codes, and UCUM definitions or is derived from it, subject to a license from Regenstrief Institute, Inc. and The UCUM Organization. Your use of the UCUM table, UCUM codes, UCUM definitions also is subject to this license, a copy of which is available at ​http://unitsofmeasure.org. The current complete UCUM table, UCUM Specification are available for download at ​http://unitsofmeasure.org. The UCUM table and UCUM codes are copyright © 1995-2009, Regenstrief Institute, Inc. and the Unified Codes for Units of Measures (UCUM) Organization. All rights reserved.

THE UCUM TABLE (IN ALL FORMATS), UCUM DEFINITIONS, AND SPECIFICATION ARE PROVIDED 'AS IS.' ANY EXPRESS OR IMPLIED WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  `), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${dcterms}subject`), literal(`QUDT`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${dcterms}title`), literal(`QUDT Schema - Version 2.1.18`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}hasGraphRole`), namedNode(`${vaem}SchemaGraph`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}intent`), literal(`Specifies the schema for quantities, units and dimensions. Types are defined in other schemas.`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}namespace`), literal(`http://qudt.org/schema/qudt/`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}namespacePrefix`), literal(`qudt`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${owl}versionIRI`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}graphTitle`), literal(`Quantities, Units, Dimensions and Types (QUDT) Schema - Version 2.1.18`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}isMetadataFor`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}latestPublishedVersion`), literal(`https://qudt.org/doc/2022/06/DOC_SCHEMA-QUDT-v2.1.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}logo`), literal(`https://qudt.org/linkedmodels.org/assets/lib/lm/images/logos/qudt_logo-300x110.png`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}owner`), literal(`qudt.org`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}previousPublishedVersion`), literal(`http://www.qudt.org/doc/2022/04/DOC_SCHEMA-QUDT-v2.1.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}revision`), literal(`2.1`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}turtleFileURL`), literal(`http://qudt.org/2.1/schema/qudt`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dcterms}abstract`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dcterms}contributor`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dcterms}created`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dcterms}description`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dcterms}modified`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dcterms}rights`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dcterms}source`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dcterms}subject`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${dcterms}title`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}usesNonImportedResource`), namedNode(`${ns9}QUDT-Attribution`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}withAttributionTo`), namedNode(`${ns9}QUDT-Attribution`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${qudt}informativeReference`), literal(`http://unitsofmeasure.org/trac`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${qudt}informativeReference`), literal(`http://www.bipm.org/en/publications/si-brochure`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${qudt}informativeReference`), literal(`http://www.bipm.org/utils/common/documents/jcgm/JCGM_200_2008.pdf`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${qudt}informativeReference`), literal(`https://books.google.com/books?id=pIlCAAAAIAAJ&dq=dimensional+analysis&hl=en`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${qudt}informativeReference`), literal(`https://www.nist.gov/physical-measurement-laboratory/special-publication-811`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}graphName`), literal(`qudt`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}hasOwner`), namedNode(`${vaem}QUDT`), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_QUDT-SCHEMA`), namedNode(`${vaem}hasSteward`), namedNode(`${vaem}QUDT`), namedNode(qudt)),
        quad(namedNode(`${qudt}AbstractDatatype`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}AbstractDatatype`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}AbstractDatatype`), namedNode(`${rdfs}label`), literal(`Abstract Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}AbstractDatatype`), namedNode(`${dcterms}description`), literal(`<p class="lm-para">An "Abstract Datatype" (ADT) is a specification of a set of data and the set of operations that can be performed on the data. Such a data type is abstract in the sense that it is independent of various concrete implementations. The definition can be mathematical, or it can be programmed as an interface. A first class ADT supports the creation of multiple instances of the ADT, and the interface normally provides a constructor, which returns an abstract handle to new data, and several operations, which are functions accepting the abstract handle as an argument.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}AbstractDatatype`), namedNode(`${dcterms}description`), literal(`An "Abstract Datatype" (ADT) is a specification of a set of data and the set of operations that can be performed on the data. Such a data type is abstract in the sense that it is independent of various concrete implementations. The definition can be mathematical, or it can be programmed as an interface. A first class ADT supports the creation of multiple instances of the ADT, and the interface normally provides a constructor, which returns an abstract handle to new data, and several operations, which are functions accepting the abstract handle as an argument.`), namedNode(qudt)),
        quad(namedNode(`${qudt}AbstractDatatype`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}StructuredDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}AbstractDatatype`), namedNode(`${prov}wasInfluencedBy`), namedNode(`${ns18}Abstract_data_type`), namedNode(qudt)),
        quad(namedNode(`${qudt}AbstractDatatype`), namedNode(`${prov}wasInfluencedBy`), namedNode(`${ns19}abstractDataType.html`), namedNode(qudt)),
        quad(namedNode(`${qudt}StructuredDatatype`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}StructuredDatatype`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StructuredDatatype`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}StructuredDatatype`), namedNode(`${rdfs}label`), literal(`Structured Data Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}StructuredDatatype`), namedNode(`${dcterms}description`), literal(`A "Structured Datatype", in contrast to scalar data types, is used to characterize classes of more complex data structures, such as linked or indexed lists, trees, ordered trees, and multi-dimensional file formats.`), namedNode(qudt)),
        quad(namedNode(`${qudt}StructuredDatatype`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}StructuredDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[0], namedNode(qudt)),
        quad(namedNode(`${qudt}StructuredDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[1], namedNode(qudt)),
        quad(namedNode(`${qudt}StructuredDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[2], namedNode(qudt)),
        quad(namedNode(`${qudt}StructuredDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}StructuredDatatype-elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}AbstractQuantityKind`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}AbstractQuantityKind`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}AbstractQuantityKind`), namedNode(`${rdfs}label`), literal(`Quantity Kind (abstract)`), namedNode(qudt)),
        quad(namedNode(`${qudt}AbstractQuantityKind`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}AbstractQuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[3], namedNode(qudt)),
        quad(namedNode(`${qudt}AbstractQuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[4], namedNode(qudt)),
        quad(namedNode(`${qudt}AbstractQuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[5], namedNode(qudt)),
        quad(namedNode(`${qudt}Concept`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Concept`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Concept`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Concept`), namedNode(`${rdfs}label`), literal(`QUDT Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}Concept`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(qudt)),
        quad(namedNode(`${qudt}Concept`), namedNode(`${rdfs}subClassOf`), blankNodes[6], namedNode(qudt)),
        quad(namedNode(`${qudt}Concept`), namedNode(`${rdfs}subClassOf`), blankNodes[7], namedNode(qudt)),
        quad(namedNode(`${qudt}Concept`), namedNode(`${rdfs}subClassOf`), blankNodes[8], namedNode(qudt)),
        quad(namedNode(`${qudt}Concept`), namedNode(`${rdfs}subClassOf`), blankNodes[9], namedNode(qudt)),
        quad(namedNode(`${qudt}Concept`), namedNode(`${rdfs}subClassOf`), blankNodes[10], namedNode(qudt)),
        quad(namedNode(`${qudt}Concept`), namedNode(`${rdfs}comment`), literal(`The root class for all QUDT concepts.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(blankNodes[3], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[3], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}QuantityKind`), namedNode(qudt)),
        quad(blankNodes[3], namedNode(`${owl}onProperty`), namedNode(`${skos}broader`), namedNode(qudt)),
        quad(blankNodes[4], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[4], namedNode(`${owl}onProperty`), namedNode(`${qudt}symbol`), namedNode(qudt)),
        quad(blankNodes[4], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[5], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[5], namedNode(`${owl}onProperty`), namedNode(`${qudt}latexSymbol`), namedNode(qudt)),
        quad(blankNodes[5], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(namedNode(`${qudt}AerospaceCoordinateSystem`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}AerospaceCoordinateSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}AerospaceCoordinateSystem`), namedNode(`${rdfs}label`), literal(`Aerospace coordinate system`), namedNode(qudt)),
        quad(namedNode(`${qudt}AerospaceCoordinateSystem`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Coordinate system'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}AerospaceCoordinateSystem`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CoordinateSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${rdfs}label`), literal(`Coordinate system`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${dcterms}description`), literal(`In geometry, a coordinate system is a system which uses one or more numbers, or coordinates, to uniquely determine the position of a point or other geometric element on a manifold such as Euclidean space. The order of the coordinates is significant and they are sometimes identified by their position in an ordered tuple and sometimes by a letter, as in 'the x-coordinate'. 



In elementary mathematics the coordinates are taken to be real numbers, but may be complex numbers or elements of a more abstract system such as a commutative ring. The use of a coordinate system allows problems in geometry to be translated into problems about numbers and vice versa; this is the basis of analytic geometry. 



In astronomy, a celestial coordinate system is a system for specifying positions of celestial objects: satellites, planets, stars, galaxies, and so on. Coordinate systems can specify a position in 3-dimensional space, or merely the direction of the object on the celestial sphere, if its distance is not known or not important.



The coordinate systems are implemented in either spherical coordinates or rectangular coordinates. Spherical coordinates, projected on the celestial sphere, are analogous to the geographic coordinate system used on the surface of the Earth. These differ in their choice of fundamental plane, which divides the celestial sphere into two equal hemispheres along a great circle. Rectangular coordinates, in appropriate units, are simply the cartesian equivalent of the spherical coordinates, with the same fundamental (x,y) plane and primary (x-axis) direction. Each coordinate system is named for its choice of fundamental plane.`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${rdfs}subClassOf`), namedNode(`${skos}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[11], namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[12], namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[13], namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[14], namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[15], namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns18}Astronomical_coordinate_systems`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns18}Coordinate_system`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns21}CoordinateSystem.html`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns21}Coordinates.html`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${sh}property`), namedNode(`${qudt}CoordinateSystem-abbreviation`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${sh}property`), namedNode(`${qudt}CoordinateSystem-acronym`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${sh}property`), namedNode(`${qudt}CoordinateSystem-coordinateCenter`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${sh}property`), namedNode(`${qudt}CoordinateSystem-referenceFrame`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem`), namedNode(`${owl}sameAs`), namedNode(`${ns22}Coordinate_system`), namedNode(qudt)),
        quad(namedNode(`${qudt}AlgebraicDatatype`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}AlgebraicDatatype`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}AlgebraicDatatype`), namedNode(`${rdfs}label`), literal(`Algebraic Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}AlgebraicDatatype`), namedNode(`${dcterms}description`), literal(`<p class="lm-para">An "Algebraic Datatype" is a datatype each of whose values are data from other data types wrapped in one of the constructors of the data type. Any wrapped datum is an argument to the constructor. In contrast to other data types, the constructor is not executed and the only way to operate on the data is to unwrap the constructor using pattern matching.</p>
<p class="lm-para">The most common algebraic data type is a list with two constructors: Nil or [] for an empty list, and Cons (an abbreviation of constructor), ::, or : for the combination of a new element with a shorter list (for example (Cons 1 '(2 3 4)) or 1:[2,3,4]).</p>
<p class="lm-para">Special cases of algebraic types are product types i.e. records (only one constructor) and enumerated types (many constructors with no arguments). Algebraic types are one kind of composite type (i.e. a type formed by combining other types).</p>
<p class="lm-para">An algebraic data type may also be an abstract data type (ADT) if it is exported from a module without its constructors. Values of such a type can only be manipulated using functions defined in the same module as the type itself.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}AlgebraicDatatype`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}StructuredDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}AlgebraicDatatype`), namedNode(`${prov}wasInfluencedBy`), namedNode(`${ns18}Algebraic_data_type`), namedNode(qudt)),
        quad(namedNode(`${qudt}AlgebraicDatatype`), namedNode(`${rdfs}comment`), literal(`<p>An "Algebraic Datatype" is a datatype each of whose values are data from other data types wrapped in one of the constructors of the data type. Any wrapped datum is an argument to the constructor. In contrast to other data types, the constructor is not executed and the only way to operate on the data is to unwrap the constructor using pattern matching.</p>

<p>The most common algebraic data type is a list with two constructors: Nil or [] for an empty list, and Cons (an abbreviation of constructor), ::, or : for the combination of a new element with a shorter list (for example (Cons 1 '(2 3 4)) or 1:[2,3,4]).</p>

<p>Special cases of algebraic types are product types i.e. records (only one constructor) and enumerated types (many constructors with no arguments). Algebraic types are one kind of composite type (i.e. a type formed by combining other types).</p>

<p>An algebraic data type may also be an abstract data type (ADT) if it is exported from a module without its constructors. Values of such a type can only be manipulated using functions defined in the same module as the type itself.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}AlgebraicDatatype`), namedNode(`${rdfs}seeAlso`), namedNode(`${qudt}AbstractDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}AlignmentType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}AlignmentType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}AlignmentType`), namedNode(`${rdfs}label`), literal(`Alignment type`), namedNode(qudt)),
        quad(namedNode(`${qudt}AlignmentType`), namedNode(`${dcterms}description`), literal(`Specifies how a physical data field is aligned. The alignment could be at a bit, byte or word boundary.`), namedNode(qudt)),
        quad(namedNode(`${qudt}AlignmentType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}AlignmentType`), namedNode(`${owl}oneOf`), blankNodes[16], namedNode(qudt)),
        quad(namedNode(`${qudt}EnumeratedValue`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}EnumeratedValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}EnumeratedValue`), namedNode(`${rdfs}label`), literal(`Enumerated Value`), namedNode(qudt)),
        quad(namedNode(`${qudt}EnumeratedValue`), namedNode(`${dcterms}description`), literal(`<p>This class is for all enumerated and/or coded values.  For example, it contains the dimension objects that are the basis elements in some abstract vector space associated with a quantity kind system. Another use is for the base dimensions for quantity systems. Each quantity kind system that defines a base set has a corresponding ordered enumeration whose elements are the dimension objects for the base quantity kinds. The order of the dimensions in the enumeration determines the canonical order of the basis elements in the corresponding abstract vector space.</p>

<p>An enumeration is a set of literals from which a single value is selected. Each literal can have a tag as an integer within a standard encoding appropriate to the range of integer values. Consistency of enumeration types will allow them, and the enumerated values, to be referred to unambiguously either through symbolic name or encoding. Enumerated values are also controlled vocabularies and as such need to be standardized. Without this consistency enumeration literals can be stated differently and result in  data conflicts and misinterpretations.</p>

<p>The tags are a set of positive whole numbers, not necessarily contiguous and having no numerical significance, each corresponding to the associated literal identifier. An order attribute can also be given on the enumeration elements. An enumeration can itself be a member of an enumeration. This allows enumerations to be enumerated in a selection. Enumerations are also subclasses of Scalar Datatype. This allows them to be used as the reference of a datatype specification.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}EnumeratedValue`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}EnumeratedValue`), namedNode(`${rdfs}subClassOf`), namedNode(`${dtype}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}EnumeratedValue`), namedNode(`${rdfs}subClassOf`), blankNodes[17], namedNode(qudt)),
        quad(namedNode(`${qudt}EnumeratedValue`), namedNode(`${rdfs}subClassOf`), blankNodes[18], namedNode(qudt)),
        quad(namedNode(`${qudt}EnumeratedValue`), namedNode(`${rdfs}subClassOf`), blankNodes[19], namedNode(qudt)),
        quad(namedNode(`${qudt}EnumeratedValue`), namedNode(`${qudt}informativeReference`), literal(`http://en.wikipedia.org/wiki/Enumeration`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(blankNodes[16], namedNode(`${rdf}first`), namedNode(`${ns24}BitAligned`), namedNode(qudt)),
        quad(blankNodes[16], namedNode(`${rdf}rest`), blankNodes[20], namedNode(qudt)),
        quad(namedNode(`${qudt}AngleUnit`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}AngleUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}AngleUnit`), namedNode(`${rdfs}label`), literal(`Angle unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}AngleUnit`), namedNode(`${dcterms}description`), literal(`All units relating to specification of angles. `), namedNode(qudt)),
        quad(namedNode(`${qudt}AngleUnit`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}DimensionlessUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}AngleUnit`), namedNode(`${skos}exactMatch`), namedNode(`${ns22}Category:Units_of_angle`), namedNode(qudt)),
        quad(namedNode(`${qudt}DimensionlessUnit`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}DimensionlessUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}DimensionlessUnit`), namedNode(`${rdfs}label`), literal(`Dimensionless Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}DimensionlessUnit`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}DimensionlessUnit`), namedNode(`${rdfs}comment`), literal(`A Dimensionless Unit is a quantity for which all the exponents of the factors corresponding to the base quantities in its quantity dimension are zero.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Array`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Array`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Array`), namedNode(`${rdfs}label`), literal(`Array Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Array`), namedNode(`${dcterms}description`), literal(`An array is represented as ordered entries of values arranged according to the dimensions given. The dimensions are given as a list of integers where each integer is the cardinality of each dimension. The number of dimensions is specified in the attribute 'dimensionality'. Optionally a reference can be made to a variable, whose values are the array entries. The data type of the array entries is an optional field, 'elementType', which points to a data type definition. If the data type is given, then it applies to all elements.  If it is not given then the elements can be of different types for each position in the array. The property 'type:typeMatrix' must refer to a matrix of types.  If a default value is given this can be used to place the appropriate value in a cell when an entry value is not known. If no dimensionality or dimension vector is specified the array is under-specified but still legitimate as a place-holder for a data type.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Array`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Array`), namedNode(`${rdfs}subClassOf`), blankNodes[21], namedNode(qudt)),
        quad(namedNode(`${qudt}Array`), namedNode(`${rdfs}subClassOf`), blankNodes[22], namedNode(qudt)),
        quad(namedNode(`${qudt}Array`), namedNode(`${rdfs}subClassOf`), blankNodes[23], namedNode(qudt)),
        quad(namedNode(`${qudt}Array`), namedNode(`${rdfs}subClassOf`), blankNodes[24], namedNode(qudt)),
        quad(namedNode(`${qudt}Array`), namedNode(`${rdfs}subClassOf`), blankNodes[25], namedNode(qudt)),
        quad(namedNode(`${qudt}Array`), namedNode(`${rdfs}subClassOf`), blankNodes[26], namedNode(qudt)),
        quad(namedNode(`${qudt}Array`), namedNode(`${rdfs}subClassOf`), blankNodes[27], namedNode(qudt)),
        quad(namedNode(`${qudt}Array`), namedNode(`${rdfs}subClassOf`), blankNodes[28], namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype`), namedNode(`${rdfs}label`), literal(`Composite Data Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype`), namedNode(`${dcterms}description`), literal(`Composite types are datatypes which can be constructed in a programming language out of that language's basic primitive types and other composite types. The act of constructing a composite type is known as composition.`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}StructuredDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[29], namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[30], namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[31], namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[32], namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype`), namedNode(`${prov}wasInfluencedBy`), namedNode(`${ns25}List_of_data_structures`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}CompositeDatatype-alignment`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}CompositeDatatype-elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}CompositeDatatype-padding`), namedNode(qudt)),
        quad(blankNodes[21], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[21], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}DimensionVector`), namedNode(qudt)),
        quad(blankNodes[21], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionVector`), namedNode(qudt)),
        quad(blankNodes[22], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[22], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}ArrayDataOrderType`), namedNode(qudt)),
        quad(blankNodes[22], namedNode(`${owl}onProperty`), namedNode(`${qudt}dataOrder`), namedNode(qudt)),
        quad(blankNodes[23], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[23], namedNode(`${owl}onProperty`), namedNode(`${qudt}byRow`), namedNode(qudt)),
        quad(blankNodes[23], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[24], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[24], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionVector`), namedNode(qudt)),
        quad(blankNodes[24], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[25], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[25], namedNode(`${owl}onProperty`), namedNode(`${qudt}dataOrder`), namedNode(qudt)),
        quad(blankNodes[25], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[26], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[26], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionality`), namedNode(qudt)),
        quad(blankNodes[26], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[27], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[27], namedNode(`${owl}onProperty`), namedNode(`${qudt}typeMatrix`), namedNode(qudt)),
        quad(blankNodes[27], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[28], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[28], namedNode(`${owl}allValuesFrom`), namedNode(`${ns26}TypeMatrix`), namedNode(qudt)),
        quad(blankNodes[28], namedNode(`${owl}onProperty`), namedNode(`${qudt}typeMatrix`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayDataOrderType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayDataOrderType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayDataOrderType`), namedNode(`${rdfs}label`), literal(`Array data order type`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayDataOrderType`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Enumerated Value'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayDataOrderType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayDataOrderType`), namedNode(`${owl}oneOf`), blankNodes[33], namedNode(qudt)),
        quad(blankNodes[33], namedNode(`${rdf}first`), namedNode(`${qudt}ByColumn`), namedNode(qudt)),
        quad(blankNodes[33], namedNode(`${rdf}rest`), blankNodes[34], namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayIndex-elementType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayIndex-elementType`), namedNode(`${sh}datatype`), namedNode(`${xsd}nonNegativeInteger`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayIndex-elementType`), namedNode(`${sh}hasValue`), namedNode(`${qudt}UNSIGNED-INTEGER`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayIndex-elementType`), namedNode(`${sh}path`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementType`), namedNode(`${rdfs}label`), literal(`element type`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementType`), namedNode(`${dcterms}description`), literal(`This property is used to relate a structured data type with the data type the structured type's elements. It is used for structured data types with elements that are all of the same type.`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementType`), namedNode(`${rdfs}comment`), literal(`This property is used to relate a structured data type with the data type of the structured type's elements. It is used for homogeneous structured data types, that is, those whose elements that are all of the same type.`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementType`), namedNode(`${vaem}todo`), literal(`Change name to type:elementDataType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayIndex`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayIndex`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayIndex`), namedNode(`${rdfs}label`), literal(`Array Index Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayIndex`), namedNode(`${dcterms}description`), literal(`An Array Index Type is a data type that specifies the properties of data structures that hold array indexes.`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayIndex`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayIndex`), namedNode(`${rdfs}subClassOf`), blankNodes[35], namedNode(qudt)),
        quad(namedNode(`${qudt}Vector`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector`), namedNode(`${rdfs}label`), literal(`Vector Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector`), namedNode(`${dcterms}description`), literal(`A Vector Type is a data type that specifies the properties of data structures that hold vectors.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector`), namedNode(`${rdfs}subClassOf`), blankNodes[36], namedNode(qudt)),
        quad(namedNode(`${qudt}Vector`), namedNode(`${rdfs}subClassOf`), blankNodes[37], namedNode(qudt)),
        quad(namedNode(`${qudt}Vector`), namedNode(`${rdfs}subClassOf`), blankNodes[38], namedNode(qudt)),
        quad(namedNode(`${qudt}Vector`), namedNode(`${rdfs}subClassOf`), blankNodes[39], namedNode(qudt)),
        quad(namedNode(`${qudt}Vector`), namedNode(`${rdfs}subClassOf`), blankNodes[40], namedNode(qudt)),
        quad(blankNodes[35], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[35], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[35], namedNode(`${owl}hasValue`), namedNode(`${ns24}UNSIGNED-INTEGER`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayIndexType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayIndexType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayIndexType`), namedNode(`${rdfs}label`), literal(`Array Index Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayIndexType`), namedNode(`${dcterms}description`), literal(`An Array Index Type is a data type that specifies the properties of data structures that hold array indexes.`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayIndexType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}VectorType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayIndexType`), namedNode(`${sh}property`), namedNode(`${qudt}ArrayIndex-elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorType`), namedNode(`${rdfs}label`), literal(`Vector Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorType`), namedNode(`${dcterms}description`), literal(`A Vector Type is a data type that specifies the properties of data structures that hold vectors.`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorType`), namedNode(`${sh}property`), namedNode(`${qudt}Vector-dimension`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorType`), namedNode(`${sh}property`), namedNode(`${qudt}Vector-dimensionality`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorType`), namedNode(`${sh}property`), namedNode(`${qudt}Vector-referenceFrame`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-byRow`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-byRow`), namedNode(`${sh}datatype`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-byRow`), namedNode(`${sh}path`), namedNode(`${qudt}byRow`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-byRow`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}byRow`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}byRow`), namedNode(`${rdf}type`), namedNode(`${owl}DeprecatedProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}byRow`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}byRow`), namedNode(`${rdfs}label`), literal(`by row`), namedNode(qudt)),
        quad(namedNode(`${qudt}byRow`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}byRow`), namedNode(`${dcterms}description`), literal(`A boolean to specify whether an array is presented row by row or column by column.`), namedNode(qudt)),
        quad(namedNode(`${qudt}byRow`), namedNode(`${vaem}rationale`), literal(`Replaced with an enumeration. See type:ArrayDataOrderType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-dataOrder`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-dataOrder`), namedNode(`${sh}path`), namedNode(`${qudt}dataOrder`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-dataOrder`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-dataOrder`), namedNode(`${sh}class`), namedNode(`${qudt}ArrayDataOrderType`), namedNode(qudt)),
        quad(namedNode(`${qudt}dataOrder`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dataOrder`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}dataOrder`), namedNode(`${rdfs}label`), literal(`data order`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-dimensionVector`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-dimensionVector`), namedNode(`${sh}path`), namedNode(`${qudt}dimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-dimensionVector`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-dimensionVector`), namedNode(`${sh}class`), namedNode(`${qudt}DimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}DimensionVector`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}DimensionVector`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}DimensionVector`), namedNode(`${rdfs}label`), literal(`Dimension Vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}DimensionVector`), namedNode(`${rdfs}subClassOf`), namedNode(`${skos}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionVector`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionVector`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionVector`), namedNode(`${rdfs}label`), literal(`dimension vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionVector`), namedNode(`${rdfs}range`), namedNode(`${qudt}DimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-dimensionality`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-dimensionality`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-dimensionality`), namedNode(`${sh}path`), namedNode(`${qudt}dimensionality`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-dimensionality`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionality`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionality`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionality`), namedNode(`${rdfs}label`), literal(`dimensionality`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionality`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionality`), namedNode(`${dcterms}description`), literal(`The number of dimensions making up an array. For example a 4 by 4 array has a dimensionality of 2. Whereas a vector or a string has a dimensionality of 1.`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-typeMatrix`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-typeMatrix`), namedNode(`${sh}path`), namedNode(`${qudt}typeMatrix`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-typeMatrix`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType-typeMatrix`), namedNode(`${sh}class`), namedNode(`${qudt}typeMatrix`), namedNode(qudt)),
        quad(namedNode(`${qudt}typeMatrix`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}typeMatrix`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}typeMatrix`), namedNode(`${rdfs}label`), literal(`type matrix`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType`), namedNode(`${rdfs}label`), literal(`Array Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType`), namedNode(`${rdfs}comment`), literal(`<p>An <em>array type</em> is a type specification for ordered entries of values arranged according to the dimensions given. The dimensions are given as a list of integers where each integer is the cardinality of each dimension. The number of dimensions is specified in the attribute 'dimensionality'.</p>

<p>Optionally a reference can be made to a variable, whose values are the array entries. The data type of the array entries is an optional field, 'elementType', which points to a data type definition. If the data type is given, then it applies to all elements.  If it is not given then the elements can be of different types for each position in the array.</p>

<p>The property <em>qudt:typeMatrix</em> must refer to a matrix of types.  If a default value is given this can be used to place the appropriate value in a cell when an entry value is not known. If no dimensionality or dimension vector is specified the array is under-specified but still legitimate as a place-holder for a data type.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType`), namedNode(`${sh}property`), namedNode(`${qudt}ArrayType-byRow`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType`), namedNode(`${sh}property`), namedNode(`${qudt}ArrayType-dataOrder`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType`), namedNode(`${sh}property`), namedNode(`${qudt}ArrayType-dimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType`), namedNode(`${sh}property`), namedNode(`${qudt}ArrayType-dimensionality`), namedNode(qudt)),
        quad(namedNode(`${qudt}ArrayType`), namedNode(`${sh}property`), namedNode(`${qudt}ArrayType-typeMatrix`), namedNode(qudt)),
        quad(namedNode(`${qudt}Article`), namedNode(`${rdf}type`), namedNode(`${qudt}PubEnumeratedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Article`), namedNode(`${rdfs}label`), literal(`Pub article type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Article`), namedNode(`${dtype}literal`), literal(`article`), namedNode(qudt)),
        quad(namedNode(`${qudt}PubEnumeratedType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}PubEnumeratedType`), namedNode(`${rdfs}label`), literal(`Pub enumerated type`), namedNode(qudt)),
        quad(namedNode(`${qudt}PubEnumeratedType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}PubEnumeratedType`), namedNode(`${owl}oneOf`), blankNodes[41], namedNode(qudt)),
        quad(namedNode(`${qudt}Aspect`), namedNode(`${rdf}type`), namedNode(`${qudt}AspectClass`), namedNode(qudt)),
        quad(namedNode(`${qudt}Aspect`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Aspect`), namedNode(`${rdfs}label`), literal(`QUDT Aspect`), namedNode(qudt)),
        quad(namedNode(`${qudt}Aspect`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(qudt)),
        quad(namedNode(`${qudt}Aspect`), namedNode(`${rdfs}comment`), literal(`An aspect is an abstract type class that defines properties that can be reused.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}AspectClass`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}AspectClass`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}AspectClass`), namedNode(`${rdfs}label`), literal(`Aspect Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}AspectClass`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}AssociativeArray`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}AssociativeArray`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}AssociativeArray`), namedNode(`${rdfs}label`), literal(`Associative Array`), namedNode(qudt)),
        quad(namedNode(`${qudt}AssociativeArray`), namedNode(`${dcterms}description`), literal(`An Associative Array (or Map) is an abstract data type composed of a collection of keys and a collection of values, where each key is associated with one value. The operation of finding the value associated with a key is called a lookup or indexing, and this is the most important operation supported by an associative array. The relationship between a key and its value is sometimes called a mapping or binding.`), namedNode(qudt)),
        quad(namedNode(`${qudt}AssociativeArray`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Collection`), namedNode(qudt)),
        quad(namedNode(`${qudt}AssociativeArray`), namedNode(`${owl}equivalentClass`), namedNode(`${qudt}Map`), namedNode(qudt)),
        quad(namedNode(`${qudt}Collection`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Collection`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Collection`), namedNode(`${rdfs}label`), literal(`Collection Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Collection`), namedNode(`${dcterms}description`), literal(`A collection is a grouping of some variable number of zero or more data items that need to be operated upon together in some controlled fashion. Generally, the data items will all share the same data type or are derived from some common ancestor data type.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Collection`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}AbstractDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Map`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Map`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Map`), namedNode(`${rdfs}label`), literal(`Map Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Map`), namedNode(`${dcterms}description`), literal(`A Map Type is an abstract data type that defines the properties of map data structures. A Map (or Associative Array) is an abstract data structure composed of a collection of keys and a collection of values, where each key is associated with one value. The operation of finding the value associated with a key is called a lookup or indexing, and this is the most important operation supported by an associative array. The relationship between a key and its value is sometimes called a mapping or binding.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Map`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Collection`), namedNode(qudt)),
        quad(namedNode(`${qudt}Map`), namedNode(`${owl}equivalentClass`), namedNode(`${qudt}AssociativeArray`), namedNode(qudt)),
        quad(namedNode(`${qudt}AssociativeArrayType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}AssociativeArrayType`), namedNode(`${rdfs}label`), literal(`Associative Array Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}AssociativeArrayType`), namedNode(`${dcterms}description`), literal(`An Associative Array (or Map) is an abstract data type composed of a collection of keys and a collection of values, where each key is associated with one value. The operation of finding the value associated with a key is called a lookup or indexing, and this is the most important operation supported by an associative array. The relationship between a key and its value is sometimes called a mapping or binding.`), namedNode(qudt)),
        quad(namedNode(`${qudt}AssociativeArrayType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CollectionType`), namedNode(qudt)),
        quad(namedNode(`${qudt}AssociativeArrayType`), namedNode(`${owl}equivalentClass`), namedNode(`${qudt}MapType`), namedNode(qudt)),
        quad(namedNode(`${qudt}CollectionType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CollectionType`), namedNode(`${rdfs}label`), literal(`Collection Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CollectionType`), namedNode(`${dcterms}description`), literal(`A collection is a grouping of some variable number of zero or more data items that need to be operated upon together in some controlled fashion. Generally, the data items will all share the same data type or are derived from some common ancestor data type.`), namedNode(qudt)),
        quad(namedNode(`${qudt}CollectionType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}AbstractDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}MapType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}MapType`), namedNode(`${rdfs}label`), literal(`Map Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}MapType`), namedNode(`${dcterms}description`), literal(`A Map Type is an abstract data type that defines the properties of map data structures. A Map (or Associative Array) is an abstract data structure composed of a collection of keys and a collection of values, where each key is associated with one value. The operation of finding the value associated with a key is called a lookup or indexing, and this is the most important operation supported by an associative array. The relationship between a key and its value is sometimes called a mapping or binding.`), namedNode(qudt)),
        quad(namedNode(`${qudt}MapType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CollectionType`), namedNode(qudt)),
        quad(namedNode(`${qudt}MapType`), namedNode(`${owl}equivalentClass`), namedNode(`${qudt}AssociativeArrayType`), namedNode(qudt)),
        quad(namedNode(`${qudt}AuralCue-sound`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}AuralCue-sound`), namedNode(`${sh}datatype`), namedNode(`${xsd}anyURI`), namedNode(qudt)),
        quad(namedNode(`${qudt}AuralCue-sound`), namedNode(`${sh}path`), namedNode(`${qudt}sound`), namedNode(qudt)),
        quad(namedNode(`${qudt}AuralCue-sound`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}AuralCue-sound`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}sound`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}sound`), namedNode(`${rdfs}label`), literal(`sound`), namedNode(qudt)),
        quad(namedNode(`${qudt}sound`), namedNode(`${rdfs}comment`), literal(`The intended use of the sound property is to be associated with modal enumerations`), namedNode(qudt)),
        quad(namedNode(`${qudt}AuralCue`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}AuralCue`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}AuralCue`), namedNode(`${rdfs}label`), literal(`Aural Cue`), namedNode(qudt)),
        quad(namedNode(`${qudt}AuralCue`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ModalCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}AuralCue`), namedNode(`${rdfs}comment`), literal(`An aural cue is a sound produced by a device or a system that is used to alert personnel of of an advisory, cautionary, warning, or emergency state.`), namedNode(qudt)),
        quad(namedNode(`${qudt}AuralCue`), namedNode(`${sh}property`), namedNode(`${qudt}AuralCue-sound`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalCue`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalCue`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalCue`), namedNode(`${rdfs}label`), literal(`Modal Cue`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalCue`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalCue`), namedNode(`${sh}property`), namedNode(`${qudt}ModalCue-duration`), namedNode(qudt)),
        quad(namedNode(`${qudt}AuralCueEnumeration-defaultValue`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}AuralCueEnumeration-defaultValue`), namedNode(`${sh}path`), namedNode(`${qudt}defaultValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}AuralCueEnumeration-defaultValue`), namedNode(`${sh}class`), namedNode(`${qudt}AuralCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}defaultValue`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}defaultValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}defaultValue`), namedNode(`${rdfs}label`), literal(`Default Value`), namedNode(qudt)),
        quad(namedNode(`${qudt}AxialOrientationType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}AxialOrientationType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}AxialOrientationType`), namedNode(`${rdfs}label`), literal(`Axial Orientation Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}AxialOrientationType`), namedNode(`${dcterms}description`), literal(`The axial orientation of a coordinate system frame axis.`), namedNode(qudt)),
        quad(namedNode(`${qudt}AxialOrientationType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}AxialOrientationType`), namedNode(`${owl}oneOf`), blankNodes[42], namedNode(qudt)),
        quad(blankNodes[42], namedNode(`${rdf}first`), namedNode(`${ns24}PositiveZ`), namedNode(qudt)),
        quad(blankNodes[42], namedNode(`${rdf}rest`), blankNodes[43], namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${rdf}type`), namedNode(`${qudt}BooleanType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${rdfs}label`), literal(`BOOLEAN`), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${dcterms}description`), literal(`In computer science, the Boolean or logical data type is a data type, having two values (usually denoted true and false), intended to represent the truth values of logic and Boolean algebra. The Boolean data type is the primary result of conditional statements, which allow different actions and change control flow depending on whether a programmer-specified boolean condition evaluates to true or false.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${prov}wasInfluencedBy`), literal(`http://en.wikipedia.org/wiki/Boolean%5Fdata%5Ftype`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${prov}wasInfluencedBy`), literal(`http://msdn.microsoft.com/en-us/library/aa275635(v=sql.80).aspx`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${dtype}literal`), literal(`boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${qudt}ansiSQLName`), literal(`BOOLEAN`), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${qudt}encoding`), namedNode(`${qudt}BooleanEncoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${qudt}javaName`), literal(`boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${qudt}jsName`), literal(`Boolean()`), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${qudt}microsoftSQLServerName`), literal(`bit`), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${qudt}mySQLName`), literal(`BOOLEAN`), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${qudt}mySQLName`), literal(`BOOL`), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${qudt}mySQLName`), literal(`TINYINT(1)`), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${qudt}odbcName`), literal(`SQL_BIT`), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${qudt}oleDBName`), literal(`DBTYPE_BOOL`), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${qudt}oracleSQLName`), literal(`RAW(1)`), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${qudt}protocolBuffersName`), literal(`bool`), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${qudt}pythonName`), literal(`bool`), namedNode(qudt)),
        quad(namedNode(`${qudt}BOOLEAN`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}ansiSQLName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}ansiSQLName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}ansiSQLName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ansiSQLName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}ansiSQLName`), namedNode(`${rdfs}label`), literal(`ANSI SQL Name`), namedNode(qudt)),
        quad(namedNode(`${qudt}ansiSQLName`), namedNode(`${rdfs}label`), literal(`ANSI SQL name`), namedNode(qudt)),
        quad(namedNode(`${qudt}ansiSQLName`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}ansiSQLName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}id`), namedNode(qudt)),
        quad(namedNode(`${qudt}encoding`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}encoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}encoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}encoding`), namedNode(`${rdfs}label`), literal(`encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}BooleanEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanEncoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanEncoding`), namedNode(`${rdfs}label`), literal(`Boolean Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanEncoding`), namedNode(`${qudt}bits`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}javaName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}javaName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}javaName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}javaName`), namedNode(`${rdfs}label`), literal(`java name`), namedNode(qudt)),
        quad(namedNode(`${qudt}javaName`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}javaName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}id`), namedNode(qudt)),
        quad(namedNode(`${qudt}jsName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}jsName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}jsName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}jsName`), namedNode(`${rdfs}label`), literal(`Javascript name`), namedNode(qudt)),
        quad(namedNode(`${qudt}jsName`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}jsName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}id`), namedNode(qudt)),
        quad(namedNode(`${qudt}microsoftSQLServerName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}microsoftSQLServerName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}microsoftSQLServerName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}microsoftSQLServerName`), namedNode(`${rdfs}label`), literal(`Microsoft SQL Server name`), namedNode(qudt)),
        quad(namedNode(`${qudt}microsoftSQLServerName`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}microsoftSQLServerName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}id`), namedNode(qudt)),
        quad(namedNode(`${qudt}mySQLName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}mySQLName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}mySQLName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}mySQLName`), namedNode(`${rdfs}label`), literal(`MySQL name`), namedNode(qudt)),
        quad(namedNode(`${qudt}mySQLName`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}mySQLName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}id`), namedNode(qudt)),
        quad(namedNode(`${qudt}odbcName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}odbcName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}odbcName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}odbcName`), namedNode(`${rdfs}label`), literal(`ODBC name`), namedNode(qudt)),
        quad(namedNode(`${qudt}odbcName`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}odbcName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}id`), namedNode(qudt)),
        quad(namedNode(`${qudt}oleDBName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}oleDBName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}oleDBName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}oleDBName`), namedNode(`${rdfs}label`), literal(`OLE DB name`), namedNode(qudt)),
        quad(namedNode(`${qudt}oleDBName`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}oleDBName`), namedNode(`${dcterms}description`), literal(`OLE DB (Object Linking and Embedding, Database, sometimes written as OLEDB or OLE-DB), an API designed by Microsoft, allows accessing data from a variety of sources in a uniform manner. The API provides a set of interfaces implemented using the Component Object Model (COM); it is otherwise unrelated to OLE. `), namedNode(qudt)),
        quad(namedNode(`${qudt}oleDBName`), namedNode(`${prov}wasInfluencedBy`), namedNode(`${ns18}OLE_DB`), namedNode(qudt)),
        quad(namedNode(`${qudt}oleDBName`), namedNode(`${prov}wasInfluencedBy`), namedNode(`${ns27}ms714931(v=vs.85).aspx`), namedNode(qudt)),
        quad(namedNode(`${qudt}oleDBName`), namedNode(`${qudt}informativeReference`), literal(`http://en.wikipedia.org/wiki/OLE_DB`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}oleDBName`), namedNode(`${qudt}informativeReference`), literal(`http://msdn.microsoft.com/en-us/library/windows/desktop/ms714931(v=vs.85).aspx`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}oleDBName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}id`), namedNode(qudt)),
        quad(namedNode(`${qudt}oracleSQLName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}oracleSQLName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}oracleSQLName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}oracleSQLName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}oracleSQLName`), namedNode(`${rdfs}label`), literal(`ORACLE SQL name`), namedNode(qudt)),
        quad(namedNode(`${qudt}oracleSQLName`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}oracleSQLName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}id`), namedNode(qudt)),
        quad(namedNode(`${qudt}oracleSQLName`), namedNode(`${rdfs}domain`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}protocolBuffersName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}protocolBuffersName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}protocolBuffersName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}protocolBuffersName`), namedNode(`${rdfs}label`), literal(`protocol buffers name`), namedNode(qudt)),
        quad(namedNode(`${qudt}protocolBuffersName`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}protocolBuffersName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}id`), namedNode(qudt)),
        quad(namedNode(`${qudt}pythonName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}pythonName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}pythonName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}pythonName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}pythonName`), namedNode(`${rdfs}label`), literal(`python name`), namedNode(qudt)),
        quad(namedNode(`${qudt}pythonName`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}pythonName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}id`), namedNode(qudt)),
        quad(namedNode(`${qudt}rdfsDatatype`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}rdfsDatatype`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}rdfsDatatype`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}rdfsDatatype`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}rdfsDatatype`), namedNode(`${rdfs}label`), literal(`rdfs datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanType`), namedNode(`${rdfs}label`), literal(`Boolean Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanType`), namedNode(`${dcterms}description`), literal(`A boolean data type can take on only two values.`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}OrdinalType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanType`), namedNode(`${rdfs}subClassOf`), blankNodes[44], namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanType`), namedNode(`${sh}property`), namedNode(`${qudt}BooleanType-encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}BYTE`), namedNode(`${rdf}type`), namedNode(`${qudt}SignedShortIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BYTE`), namedNode(`${rdfs}label`), literal(`Byte`), namedNode(qudt)),
        quad(namedNode(`${qudt}BYTE`), namedNode(`${dcterms}description`), literal(`The byte data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum value of 127 (inclusive). The byte data type can be useful for saving memory in large arrays, where the memory savings actually matters. They can also be used in place of int where their limits help to clarify your code; the fact that a variable's range is limited can serve as a form of documentation.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BYTE`), namedNode(`${prov}wasInfluencedBy`), literal(`http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BYTE`), namedNode(`${dtype}literal`), literal(`byte`), namedNode(qudt)),
        quad(namedNode(`${qudt}BYTE`), namedNode(`${qudt}encoding`), namedNode(`${qudt}OctetEncoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}BYTE`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${xsd}byte`), namedNode(qudt)),
        quad(namedNode(`${qudt}BYTE`), namedNode(`${qudt}abbreviation`), literal(`SI8`), namedNode(qudt)),
        quad(namedNode(`${qudt}BYTE`), namedNode(`${qudt}cName`), literal(`Byte`), namedNode(qudt)),
        quad(namedNode(`${qudt}BYTE`), namedNode(`${qudt}maxInclusive`), literal(`127`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BYTE`), namedNode(`${qudt}minInclusive`), literal(`-128`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BYTE`), namedNode(`${qudt}octets`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BYTE`), namedNode(`${qudt}signedness`), namedNode(`${qudt}SIGNED`), namedNode(qudt)),
        quad(namedNode(`${qudt}abbreviation`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}abbreviation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}abbreviation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}abbreviation`), namedNode(`${rdfs}label`), literal(`abbreviation`), namedNode(qudt)),
        quad(namedNode(`${qudt}abbreviation`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}abbreviation`), namedNode(`${dcterms}description`), literal(`An abbreviation for a unit is a short ASCII string that is used in place of the full name for the unit in contexts where non-ASCII characters would be problematic, or where using the abbreviation will enhance readability. When a power of abase unit needs to be expressed, such as squares this can be done using abbreviations rather than symbols. For example, <em>sq ft</em> means <em>square foot</em>, and <em>cu ft</em> means <em>cubic foot</em>.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}cName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}cName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}cName`), namedNode(`${rdfs}label`), literal(`C Language name`), namedNode(qudt)),
        quad(namedNode(`${qudt}cName`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}cName`), namedNode(`${rdfs}comment`), literal(`Datatype name in the C programming language`), namedNode(qudt)),
        quad(namedNode(`${qudt}cName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}id`), namedNode(qudt)),
        quad(namedNode(`${qudt}OctetEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}BooleanEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}OctetEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}ByteEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}OctetEncoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}OctetEncoding`), namedNode(`${rdfs}label`), literal(`OCTET Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}OctetEncoding`), namedNode(`${qudt}bytes`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}maxInclusive`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxInclusive`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxInclusive`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxInclusive`), namedNode(`${rdfs}label`), literal(`max inclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxInclusive`), namedNode(`${dcterms}description`), literal(`maxInclusive is the inclusive upper bound of the value space for a datatype with the ordered property. The value of maxInclusive must be in the value space of the base type.`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxInclusive`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}upperBound`), namedNode(qudt)),
        quad(namedNode(`${qudt}minInclusive`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}minInclusive`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}minInclusive`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}minInclusive`), namedNode(`${rdfs}label`), literal(`min inclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}minInclusive`), namedNode(`${dcterms}description`), literal(`minInclusive is the inclusive lower bound of the value space for a datatype with the ordered property. The value of minInclusive must be in the value space of the base type.`), namedNode(qudt)),
        quad(namedNode(`${qudt}minInclusive`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}lowerBound`), namedNode(qudt)),
        quad(namedNode(`${qudt}octets`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}octets`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}octets`), namedNode(`${rdfs}label`), literal(`octets`), namedNode(qudt)),
        quad(namedNode(`${qudt}octets`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}signedness`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}signedness`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}signedness`), namedNode(`${rdfs}label`), literal(`signedness`), namedNode(qudt)),
        quad(namedNode(`${qudt}SIGNED`), namedNode(`${rdf}type`), namedNode(`${qudt}SignednessType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SIGNED`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}SIGNED`), namedNode(`${rdfs}label`), literal(`Signed`), namedNode(qudt)),
        quad(namedNode(`${qudt}SIGNED`), namedNode(`${dtype}literal`), literal(`signed`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedShortIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedShortIntegerType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedShortIntegerType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedShortIntegerType`), namedNode(`${rdfs}label`), literal(`Signed Short Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedShortIntegerType`), namedNode(`${dcterms}description`), literal(`A Signed Short Integer is a signed integer that can be represented in four octets (32 bits) of machine memory.`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedShortIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}SignedIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedShortIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ShortIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedShortIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[45], namedNode(qudt)),
        quad(namedNode(`${qudt}SignedShortIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}SignedShortIntegerType-abbreviation`), namedNode(qudt)),
        quad(namedNode(`${qudt}BalancedTree-maxDepth`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}BalancedTree-maxDepth`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}BalancedTree-maxDepth`), namedNode(`${sh}path`), namedNode(`${qudt}maxDepth`), namedNode(qudt)),
        quad(namedNode(`${qudt}BalancedTree-maxDepth`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}maxDepth`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxDepth`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxDepth`), namedNode(`${rdfs}label`), literal(`max depth`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxDepth`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}BalancedTree`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}BalancedTree`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BalancedTree`), namedNode(`${rdfs}label`), literal(`Balanced Tree Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}BalancedTree`), namedNode(`${dcterms}description`), literal(`A Balanced Tree Type is a data type that defines the properties of data structures that represent balanced trees. A balanced tree is a tree where no leaf is much farther away from the root than any other leaf. Different balancing schemes allow different definitions of "much farther" and different amounts of work to keep them balanced.`), namedNode(qudt)),
        quad(namedNode(`${qudt}BalancedTree`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Tree`), namedNode(qudt)),
        quad(namedNode(`${qudt}BalancedTree`), namedNode(`${rdfs}subClassOf`), blankNodes[46], namedNode(qudt)),
        quad(namedNode(`${qudt}Tree`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tree`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tree`), namedNode(`${rdfs}label`), literal(`Tree Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tree`), namedNode(`${dcterms}description`), literal(`A "Tree" is a data type that defines the properties of data structures that represent trees. A tree is a graph data structure accessed beginning at the root node. Each node is either a leaf or an internal node. An internal node has one or more child nodes and is called the parent of its child nodes. Leaf nodes have no chidren. Nodes that share the same parent are siblings. In graph theoretic terminology, a tree is a connected, undirected, acyclic graph.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tree`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Graph`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tree`), namedNode(`${prov}wasInfluencedBy`), namedNode(`${ns18}Tree_(data_structure)`), namedNode(qudt)),
        quad(blankNodes[46], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[46], namedNode(`${owl}onProperty`), namedNode(`${qudt}maxDepth`), namedNode(qudt)),
        quad(blankNodes[46], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BalancedTreeType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}BalancedTreeType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}BalancedTreeType`), namedNode(`${rdfs}label`), literal(`Balanced Tree Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}BalancedTreeType`), namedNode(`${dcterms}description`), literal(`A Balanced Tree Type is a data type that defines the properties of data structures that represent balanced trees. A balanced tree is a tree where no leaf is much farther away from the root than any other leaf. Different balancing schemes allow different definitions of "much farther" and different amounts of work to keep them balanced.`), namedNode(qudt)),
        quad(namedNode(`${qudt}BalancedTreeType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TreeType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BalancedTreeType`), namedNode(`${sh}property`), namedNode(`${qudt}BalancedTree-maxDepth`), namedNode(qudt)),
        quad(namedNode(`${qudt}TreeType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TreeType`), namedNode(`${rdfs}label`), literal(`Tree Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TreeType`), namedNode(`${dcterms}description`), literal(`A "Tree" is a data type that defines the properties of data structures that represent trees. A tree is a graph data structure accessed beginning at the root node. Each node is either a leaf or an internal node. An internal node has one or more child nodes and is called the parent of its child nodes. Leaf nodes have no chidren. Nodes that share the same parent are siblings. In graph theoretic terminology, a tree is a connected, undirected, acyclic graph.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TreeType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}GraphType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TreeType`), namedNode(`${prov}wasInfluencedBy`), namedNode(`${ns18}Tree_(data_structure)`), namedNode(qudt)),
        quad(namedNode(`${qudt}BaseDimensionMagnitude`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}BaseDimensionMagnitude`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}BaseDimensionMagnitude`), namedNode(`${rdfs}label`), literal(`Base Dimension Magnitude`), namedNode(qudt)),
        quad(namedNode(`${qudt}BaseDimensionMagnitude`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}BaseDimensionMagnitude`), namedNode(`${rdfs}subClassOf`), blankNodes[47], namedNode(qudt)),
        quad(namedNode(`${qudt}BaseDimensionMagnitude`), namedNode(`${rdfs}subClassOf`), blankNodes[48], namedNode(qudt)),
        quad(namedNode(`${qudt}BaseDimensionMagnitude`), namedNode(`${rdfs}subClassOf`), blankNodes[49], namedNode(qudt)),
        quad(namedNode(`${qudt}BaseDimensionMagnitude`), namedNode(`${rdfs}subClassOf`), blankNodes[50], namedNode(qudt)),
        quad(namedNode(`${qudt}BaseDimensionMagnitude`), namedNode(`${rdfs}comment`), literal(`<p class="lm-para">A <em>Dimension</em> expresses a magnitude for a base quantiy kind such as mass, length and time.</p>
<p class="lm-para">DEPRECATED - each exponent is expressed as a property. Keep until a validaiton of this has been done.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BaseDimensionMagnitude`), namedNode(`${qudt}informativeReference`), literal(`http://en.wikipedia.org/wiki/Dimensional_analysis`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BaseDimensionMagnitude`), namedNode(`${qudt}informativeReference`), literal(`http://web.mit.edu/2.25/www/pdf/DA_unified.pdf`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}informativeReference`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}informativeReference`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}informativeReference`), namedNode(`${rdfs}label`), literal(`informative reference`), namedNode(qudt)),
        quad(namedNode(`${qudt}informativeReference`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(qudt)),
        quad(namedNode(`${qudt}informativeReference`), namedNode(`${dcterms}description`), literal(`Provides a way to reference a source that provided useful but non-normative information.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(blankNodes[47], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[47], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}QuantityKind`), namedNode(qudt)),
        quad(blankNodes[47], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasBaseQuantityKind`), namedNode(qudt)),
        quad(blankNodes[48], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[48], namedNode(`${owl}onProperty`), namedNode(`${qudt}vectorMagnitude`), namedNode(qudt)),
        quad(blankNodes[48], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(blankNodes[49], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[49], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(blankNodes[49], namedNode(`${owl}onProperty`), namedNode(`${qudt}vectorMagnitude`), namedNode(qudt)),
        quad(blankNodes[50], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[50], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasBaseQuantityKind`), namedNode(qudt)),
        quad(blankNodes[50], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BigEndian`), namedNode(`${rdf}type`), namedNode(`${qudt}EndianType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BigEndian`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}BigEndian`), namedNode(`${rdfs}label`), literal(`Big Endian`), namedNode(qudt)),
        quad(namedNode(`${qudt}BigEndian`), namedNode(`${dtype}literal`), literal(`big`), namedNode(qudt)),
        quad(namedNode(`${qudt}EndianType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}EndianType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}EndianType`), namedNode(`${rdfs}label`), literal(`Endian Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}EndianType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}EndianType`), namedNode(`${owl}oneOf`), blankNodes[51], namedNode(qudt)),
        quad(namedNode(`${qudt}EndianType`), namedNode(`${qudt}informativeReference`), literal(`http://en.wikipedia.org/wiki/Endianness`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}EndianType`), namedNode(`${qudt}plainTextDescription`), literal(`In computing, endianness is the ordering used to represent some kind of data as a sequence of smaller units. Typical cases are the order in which integer values are stored as bytes in computer memory (relative to a given memory addressing scheme) and the transmission order over a network or other medium. When specifically talking about bytes, endianness is also referred to simply as byte order.  Most computer processors simply store integers as sequences of bytes, so that, conceptually, the encoded value can be obtained by simple concatenation. For an 'n-byte' integer value this allows 'n!' (n factorial) possible representations (one for each byte permutation). The two most common of them are: increasing numeric significance with increasing memory addresses, known as little-endian, and its opposite, called big-endian.`), namedNode(qudt)),
        quad(namedNode(`${qudt}BigIntegerType-octets`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}BigIntegerType-octets`), namedNode(`${sh}hasValue`), literal(`8`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BigIntegerType-octets`), namedNode(`${sh}path`), namedNode(`${qudt}octets`), namedNode(qudt)),
        quad(namedNode(`${qudt}BigIntegerType-octets`), namedNode(`${sh}or`), namedNode(`${qudt}IntegerUnionList`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerUnionList`), namedNode(`${rdf}type`), namedNode(`${rdf}List`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerUnionList`), namedNode(`${rdfs}label`), literal(`Integer union list`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerUnionList`), namedNode(`${rdf}first`), blankNodes[52], namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerUnionList`), namedNode(`${rdf}rest`), blankNodes[53], namedNode(qudt)),
        quad(namedNode(`${qudt}BigIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}BigIntegerType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}BigIntegerType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BigIntegerType`), namedNode(`${rdfs}label`), literal(`Big Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}BigIntegerType`), namedNode(`${dcterms}description`), literal(`A Big Integer is an integer that can be represented in eight octets (64 bits) of machine memory. Big integers may be signed or unsigned.`), namedNode(qudt)),
        quad(namedNode(`${qudt}BigIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}IntegerDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BigIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[54], namedNode(qudt)),
        quad(namedNode(`${qudt}BigIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[55], namedNode(qudt)),
        quad(namedNode(`${qudt}BigIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}BigIntegerType-octets`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerDatatype`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerDatatype`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerDatatype`), namedNode(`${rdfs}label`), literal(`Integer Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerDatatype`), namedNode(`${dcterms}description`), literal(`An Integer Type is a data type that specifies how integer numbers are represented and stored in machine memory.`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerDatatype`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}OrdinalType`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerDatatype`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}NumericType`), namedNode(qudt)),
        quad(blankNodes[54], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[54], namedNode(`${owl}onProperty`), namedNode(`${qudt}bits`), namedNode(qudt)),
        quad(blankNodes[54], namedNode(`${owl}hasValue`), literal(`64`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[55], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[55], namedNode(`${owl}onProperty`), namedNode(`${qudt}octets`), namedNode(qudt)),
        quad(blankNodes[55], namedNode(`${owl}hasValue`), literal(`8`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BinaryPrefix`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}BinaryPrefix`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}BinaryPrefix`), namedNode(`${rdfs}label`), literal(`Binary Prefix`), namedNode(qudt)),
        quad(namedNode(`${qudt}BinaryPrefix`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Prefix`), namedNode(qudt)),
        quad(namedNode(`${qudt}BinaryPrefix`), namedNode(`${rdfs}comment`), literal(`A <em>Binary Prefix</em> is a prefix for multiples of units in data processing, data transmission, and digital information, notably the bit and the byte, to indicate multiplication by a power of 2.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Prefix`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Prefix`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Prefix`), namedNode(`${rdfs}label`), literal(`Prefix`), namedNode(qudt)),
        quad(namedNode(`${qudt}Prefix`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}Prefix`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Verifiable`), namedNode(qudt)),
        quad(namedNode(`${qudt}Prefix`), namedNode(`${rdfs}subClassOf`), blankNodes[56], namedNode(qudt)),
        quad(namedNode(`${qudt}Prefix`), namedNode(`${rdfs}subClassOf`), blankNodes[57], namedNode(qudt)),
        quad(namedNode(`${qudt}Prefix`), namedNode(`${rdfs}subClassOf`), blankNodes[58], namedNode(qudt)),
        quad(namedNode(`${qudt}Prefix`), namedNode(`${rdfs}subClassOf`), blankNodes[59], namedNode(qudt)),
        quad(namedNode(`${qudt}BinaryTree`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}BinaryTree`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BinaryTree`), namedNode(`${rdfs}label`), literal(`Binary Tree Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}BinaryTree`), namedNode(`${dcterms}description`), literal(`A Binary Tree Type is a data type that defines the properties of data structures that represent binary trees. A binary tree is a tree in which each node has at most 2 children. `), namedNode(qudt)),
        quad(namedNode(`${qudt}BinaryTree`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Tree`), namedNode(qudt)),
        quad(namedNode(`${qudt}BinaryTreeType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}BinaryTreeType`), namedNode(`${rdfs}label`), literal(`Binary Tree Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}BinaryTreeType`), namedNode(`${dcterms}description`), literal(`A Binary Tree Type is a data type that defines the properties of data structures that represent binary trees. A binary tree is a tree in which each node has at most 2 children. `), namedNode(qudt)),
        quad(namedNode(`${qudt}BinaryTreeType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TreeType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitAligned`), namedNode(`${rdf}type`), namedNode(`${qudt}AlignmentType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitAligned`), namedNode(`${rdfs}label`), literal(`Bit Aligned`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitAligned`), namedNode(`${dtype}literal`), literal(`bit`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}BitEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitEncoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitEncoding`), namedNode(`${rdfs}label`), literal(`Bit Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitEncoding`), namedNode(`${qudt}bits`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}bits`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}bits`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}bits`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}bits`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}bits`), namedNode(`${rdfs}label`), literal(`bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}bits`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitEncodingType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitEncodingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitEncodingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitEncodingType`), namedNode(`${rdfs}label`), literal(`Bit Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitEncodingType`), namedNode(`${dcterms}description`), literal(`A bit encoding is a correspondence between the two possible values of a bit, 0 or 1, and some interpretation. For example, in a boolean encoding, a bit denotes a truth value, where 0 corresponds to False and 1 corresponds to True.`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitEncodingType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitEncodingType`), namedNode(`${owl}oneOf`), blankNodes[60], namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding`), namedNode(`${rdfs}label`), literal(`Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding`), namedNode(`${dcterms}description`), literal(`An encoding is a rule or algorithm that is used to convert data from a native, or unspecified form into a specific form that satisfies the encoding rules. Examples of encodings include character encodings, such as UTF-8.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding`), namedNode(`${rdfs}subClassOf`), namedNode(`${skos}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding`), namedNode(`${rdfs}subClassOf`), blankNodes[61], namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding`), namedNode(`${rdfs}subClassOf`), blankNodes[62], namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding`), namedNode(`${rdfs}subClassOf`), blankNodes[63], namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding`), namedNode(`${rdfs}subClassOf`), blankNodes[64], namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding`), namedNode(`${sh}property`), namedNode(`${qudt}Encoding-bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding`), namedNode(`${sh}property`), namedNode(`${qudt}Encoding-bytes`), namedNode(qudt)),
        quad(blankNodes[60], namedNode(`${rdf}first`), namedNode(`${qudt}BitEncoding`), namedNode(qudt)),
        quad(blankNodes[60], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField01`), namedNode(`${rdf}type`), namedNode(`${qudt}BitFieldType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField01`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField01`), namedNode(`${rdfs}label`), literal(`Bit Field of 1 bit`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField01`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField01`), namedNode(`${prov}wasInfluencedBy`), literal(`http://dev.mysql.com/doc/refman/5.0/en/bit-type.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField01`), namedNode(`${dtype}literal`), literal(`B1`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField01`), namedNode(`${owl}equivalentClass`), blankNodes[65], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField01`), namedNode(`${qudt}mySQLName`), literal(`BIT(1)`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField01`), namedNode(`${qudt}abbreviation`), literal(`bf1`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField01`), namedNode(`${qudt}bits`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BitFieldType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitFieldType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitFieldType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitFieldType`), namedNode(`${rdfs}label`), literal(`Bit Field Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitFieldType`), namedNode(`${dcterms}description`), literal(`A bit field is a common idiom used in computer programming to store a set of Boolean datatype flags compactly, as a series of bits. The bit field is stored in an integral type of known, fixed bit-width. Each Boolean flag is stored in a separate bit. Usually the source code will define a set of constants, each a power of two, that semantically associate each individual bit with its respective Boolean flag. The bitwise operators and, or, and not are used in combination to set, reset and test the flags.`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitFieldType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ScalarDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitFieldType`), namedNode(`${rdfs}subClassOf`), blankNodes[66], namedNode(qudt)),
        quad(namedNode(`${qudt}BitFieldType`), namedNode(`${rdfs}subClassOf`), blankNodes[67], namedNode(qudt)),
        quad(namedNode(`${qudt}BitFieldType`), namedNode(`${sh}property`), namedNode(`${qudt}BitFieldType-encodedValue`), namedNode(qudt)),
        quad(blankNodes[65], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[65], namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[65], namedNode(`${owl}withRestrictions`), blankNodes[68], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField02`), namedNode(`${rdf}type`), namedNode(`${qudt}BitFieldType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField02`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField02`), namedNode(`${rdfs}label`), literal(`Bit Field of 2 bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField02`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField02`), namedNode(`${prov}wasInfluencedBy`), literal(`http://dev.mysql.com/doc/refman/5.0/en/bit-type.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField02`), namedNode(`${dtype}literal`), literal(`B2`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField02`), namedNode(`${owl}equivalentClass`), blankNodes[69], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField02`), namedNode(`${qudt}mySQLName`), literal(`BIT(2)`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField02`), namedNode(`${qudt}abbreviation`), literal(`bf2`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField02`), namedNode(`${qudt}bits`), literal(`2`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[69], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[69], namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[69], namedNode(`${owl}withRestrictions`), blankNodes[70], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField03`), namedNode(`${rdf}type`), namedNode(`${qudt}BitFieldType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField03`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField03`), namedNode(`${rdfs}label`), literal(`Bit Field of 3 bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField03`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField03`), namedNode(`${prov}wasInfluencedBy`), literal(`http://dev.mysql.com/doc/refman/5.0/en/bit-type.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField03`), namedNode(`${dtype}literal`), literal(`B3`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField03`), namedNode(`${owl}equivalentClass`), blankNodes[71], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField03`), namedNode(`${qudt}mySQLName`), literal(`BIT(3)`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField03`), namedNode(`${qudt}abbreviation`), literal(`bf3`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField03`), namedNode(`${qudt}bits`), literal(`3`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[71], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[71], namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[71], namedNode(`${owl}withRestrictions`), blankNodes[72], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField04`), namedNode(`${rdf}type`), namedNode(`${qudt}BitFieldType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField04`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField04`), namedNode(`${rdfs}label`), literal(`Bit Field of 4 bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField04`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField04`), namedNode(`${prov}wasInfluencedBy`), literal(`http://dev.mysql.com/doc/refman/5.0/en/bit-type.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField04`), namedNode(`${dtype}literal`), literal(`B4`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField04`), namedNode(`${owl}equivalentClass`), blankNodes[73], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField04`), namedNode(`${qudt}mySQLName`), literal(`BIT(4)`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField04`), namedNode(`${qudt}abbreviation`), literal(`bf4`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField04`), namedNode(`${qudt}bits`), literal(`4`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[73], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[73], namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[73], namedNode(`${owl}withRestrictions`), blankNodes[74], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField05`), namedNode(`${rdf}type`), namedNode(`${qudt}BitFieldType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField05`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField05`), namedNode(`${rdfs}label`), literal(`Bit Field of 5 bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField05`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField05`), namedNode(`${prov}wasInfluencedBy`), literal(`http://dev.mysql.com/doc/refman/5.0/en/bit-type.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField05`), namedNode(`${dtype}literal`), literal(`B5`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField05`), namedNode(`${owl}equivalentClass`), blankNodes[75], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField05`), namedNode(`${qudt}mySQLName`), literal(`BIT(5)`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField05`), namedNode(`${qudt}abbreviation`), literal(`bf5`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField05`), namedNode(`${qudt}bits`), literal(`5`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[75], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[75], namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[75], namedNode(`${owl}withRestrictions`), blankNodes[76], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField06`), namedNode(`${rdf}type`), namedNode(`${qudt}BitFieldType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField06`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField06`), namedNode(`${rdfs}label`), literal(`Bit Field of 6 bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField06`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField06`), namedNode(`${prov}wasInfluencedBy`), literal(`http://dev.mysql.com/doc/refman/5.0/en/bit-type.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField06`), namedNode(`${dtype}literal`), literal(`B6`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField06`), namedNode(`${owl}equivalentClass`), blankNodes[77], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField06`), namedNode(`${qudt}mySQLName`), literal(`BIT(6)`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField06`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${qudt}BitField06`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField06`), namedNode(`${qudt}abbreviation`), literal(`bf6`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField06`), namedNode(`${qudt}bits`), literal(`6`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[77], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[77], namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[77], namedNode(`${owl}withRestrictions`), blankNodes[78], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField07`), namedNode(`${rdf}type`), namedNode(`${qudt}BitFieldType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField07`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField07`), namedNode(`${rdfs}label`), literal(`Bit Field of 7 bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField07`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField07`), namedNode(`${prov}wasInfluencedBy`), literal(`http://dev.mysql.com/doc/refman/5.0/en/bit-type.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField07`), namedNode(`${dtype}literal`), literal(`B7`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField07`), namedNode(`${owl}equivalentClass`), blankNodes[79], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField07`), namedNode(`${qudt}mySQLName`), literal(`BIT(7)`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField07`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${qudt}BitField07`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField07`), namedNode(`${qudt}abbreviation`), literal(`bf7`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField07`), namedNode(`${qudt}bits`), literal(`7`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[79], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[79], namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[79], namedNode(`${owl}withRestrictions`), blankNodes[80], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField08`), namedNode(`${rdf}type`), namedNode(`${qudt}BitFieldType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField08`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField08`), namedNode(`${rdfs}label`), literal(`Bit Field of 8 bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField08`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField08`), namedNode(`${prov}wasInfluencedBy`), literal(`http://dev.mysql.com/doc/refman/5.0/en/bit-type.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField08`), namedNode(`${dtype}literal`), literal(`B8`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField08`), namedNode(`${owl}equivalentClass`), blankNodes[81], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField08`), namedNode(`${qudt}mySQLName`), literal(`BIT(8)`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField08`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${qudt}BitField08`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField08`), namedNode(`${qudt}abbreviation`), literal(`bf8`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField08`), namedNode(`${qudt}bits`), literal(`8`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[81], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[81], namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[81], namedNode(`${owl}withRestrictions`), blankNodes[82], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField09`), namedNode(`${rdf}type`), namedNode(`${qudt}BitFieldType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField09`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField09`), namedNode(`${rdfs}label`), literal(`Bit Field of 9 bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField09`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField09`), namedNode(`${prov}wasInfluencedBy`), literal(`http://dev.mysql.com/doc/refman/5.0/en/bit-type.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField09`), namedNode(`${dtype}literal`), literal(`B9`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField09`), namedNode(`${owl}equivalentClass`), blankNodes[83], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField09`), namedNode(`${qudt}mySQLName`), literal(`BIT(9)`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField09`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${qudt}BitField09`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField09`), namedNode(`${qudt}abbreviation`), literal(`bf9`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField09`), namedNode(`${qudt}bits`), literal(`9`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[83], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[83], namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[83], namedNode(`${owl}withRestrictions`), blankNodes[84], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField10`), namedNode(`${rdf}type`), namedNode(`${qudt}BitFieldType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField10`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField10`), namedNode(`${rdf}type`), namedNode(`${owl}DataRange`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField10`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField10`), namedNode(`${rdfs}label`), literal(`Bit Field Of 10 Bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField10`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField10`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}BitField`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField10`), namedNode(`${prov}wasInfluencedBy`), literal(`http://dev.mysql.com/doc/refman/5.0/en/bit-type.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField10`), namedNode(`${dtype}literal`), literal(`B10`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField10`), namedNode(`${owl}equivalentClass`), blankNodes[85], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField10`), namedNode(`${qudt}mySQLName`), literal(`BIT(10)`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField10`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${qudt}BitField10`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField10`), namedNode(`${qudt}abbreviation`), literal(`bf10`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField10`), namedNode(`${qudt}bits`), literal(`10`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField10`), namedNode(`${qudt}bitOrder`), namedNode(`${qudt}BigEndian`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField10`), namedNode(`${qudt}byteOrder`), namedNode(`${qudt}BigEndian`), namedNode(qudt)),
        quad(namedNode(`${qudt}bitOrder`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}bitOrder`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}bitOrder`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}bitOrder`), namedNode(`${rdfs}label`), literal(`bit order`), namedNode(qudt)),
        quad(namedNode(`${qudt}bitOrder`), namedNode(`${rdfs}range`), namedNode(`${qudt}EndianType`), namedNode(qudt)),
        quad(namedNode(`${qudt}byteOrder`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}byteOrder`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}byteOrder`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}byteOrder`), namedNode(`${rdfs}label`), literal(`byte order`), namedNode(qudt)),
        quad(namedNode(`${qudt}byteOrder`), namedNode(`${rdfs}range`), namedNode(`${qudt}EndianType`), namedNode(qudt)),
        quad(namedNode(`${qudt}byteOrder`), namedNode(`${dcterms}description`), literal(`Byte order is an enumeration of two values: 'Big Endian' and 'Little Endian' and is used to denote whether the most signiticant byte is either first or last, respectively.`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField`), namedNode(`${rdf}type`), namedNode(`${owl}DataRange`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField`), namedNode(`${rdfs}label`), literal(`bitfield`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField`), namedNode(`${rdfs}subClassOf`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[85], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[85], namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[85], namedNode(`${owl}withRestrictions`), blankNodes[86], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField11`), namedNode(`${rdf}type`), namedNode(`${qudt}BitFieldType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField11`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField11`), namedNode(`${rdf}type`), namedNode(`${owl}DataRange`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField11`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField11`), namedNode(`${rdfs}label`), literal(`Bit Field Of 11 Bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField11`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField11`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}BitField`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField11`), namedNode(`${prov}wasInfluencedBy`), literal(`http://dev.mysql.com/doc/refman/5.0/en/bit-type.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField11`), namedNode(`${dtype}literal`), literal(`B11`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField11`), namedNode(`${owl}equivalentClass`), blankNodes[87], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField11`), namedNode(`${qudt}mySQLName`), literal(`BIT(11)`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField11`), namedNode(`${qudt}abbreviation`), literal(`bf11`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField11`), namedNode(`${qudt}bits`), literal(`11`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[87], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[87], namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[87], namedNode(`${owl}withRestrictions`), blankNodes[88], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField12`), namedNode(`${rdf}type`), namedNode(`${qudt}BitFieldType`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField12`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField12`), namedNode(`${rdf}type`), namedNode(`${owl}DataRange`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField12`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField12`), namedNode(`${rdfs}label`), literal(`Bit Field of 12 bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField12`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField12`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}BitField`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField12`), namedNode(`${dtype}literal`), literal(`B12`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField12`), namedNode(`${owl}equivalentClass`), blankNodes[89], namedNode(qudt)),
        quad(namedNode(`${qudt}BitField12`), namedNode(`${qudt}mySQLName`), literal(`BIT(12)`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField12`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${qudt}BitField12`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField12`), namedNode(`${qudt}abbreviation`), literal(`bf12`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitField12`), namedNode(`${qudt}bits`), literal(`12`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[89], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[89], namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[89], namedNode(`${owl}withRestrictions`), blankNodes[90], namedNode(qudt)),
        quad(namedNode(`${qudt}BitFieldType-encodedValue`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitFieldType-encodedValue`), namedNode(`${sh}path`), namedNode(`${qudt}encodedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitFieldType-encodedValue`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}BitFieldType-encodedValue`), namedNode(`${sh}class`), namedNode(`${qudt}BitField`), namedNode(qudt)),
        quad(namedNode(`${qudt}BitFieldType-encodedValue`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}encodedValue`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}encodedValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}encodedValue`), namedNode(`${rdfs}label`), literal(`encoded value`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}label`), literal(`Scalar Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${dcterms}description`), literal(`Scalar data types are those that have a single value. The permissible values are defined over a domain that may be integers, float, character or boolean. Often a scalar data type is referred to as a primitive data type.`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[91], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[92], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[93], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[94], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[95], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[96], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[97], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[98], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[99], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[100], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[101], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[102], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[103], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[104], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[105], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[106], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[107], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[108], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[109], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[110], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[111], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[112], namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}ScalarDatatype-bitOrder`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}ScalarDatatype-bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}ScalarDatatype-byteOrder`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}ScalarDatatype-bytes`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}ScalarDatatype-encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}ScalarDatatype-length`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}ScalarDatatype-maxExclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}ScalarDatatype-maxInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}ScalarDatatype-minExclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}ScalarDatatype-minInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}ScalarDatatype-rdfsDatatype`), namedNode(qudt)),
        quad(blankNodes[66], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[66], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}BitField`), namedNode(qudt)),
        quad(blankNodes[66], namedNode(`${owl}onProperty`), namedNode(`${qudt}encodedValue`), namedNode(qudt)),
        quad(blankNodes[67], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[67], namedNode(`${owl}onProperty`), namedNode(`${qudt}encodedValue`), namedNode(qudt)),
        quad(blankNodes[67], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Book`), namedNode(`${rdf}type`), namedNode(`${qudt}PubEnumeratedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Book`), namedNode(`${rdfs}label`), literal(`Pub book type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Book`), namedNode(`${dtype}literal`), literal(`book`), namedNode(qudt)),
        quad(namedNode(`${qudt}Booklet`), namedNode(`${rdf}type`), namedNode(`${qudt}PubEnumeratedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Booklet`), namedNode(`${rdfs}label`), literal(`Pub booklet type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Booklet`), namedNode(`${dtype}literal`), literal(`booklet`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanEncodingType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanEncodingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanEncodingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanEncodingType`), namedNode(`${rdfs}label`), literal(`Boolean encoding type`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanEncodingType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanEncodingType`), namedNode(`${owl}oneOf`), blankNodes[113], namedNode(qudt)),
        quad(blankNodes[113], namedNode(`${rdf}first`), namedNode(`${qudt}BooleanEncoding`), namedNode(qudt)),
        quad(blankNodes[113], namedNode(`${rdf}rest`), blankNodes[114], namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanType-encoding`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanType-encoding`), namedNode(`${sh}path`), namedNode(`${qudt}encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanType-encoding`), namedNode(`${sh}class`), namedNode(`${qudt}BooleanEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrdinalType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrdinalType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrdinalType`), namedNode(`${rdfs}label`), literal(`Ordinal Data Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrdinalType`), namedNode(`${dcterms}description`), literal(`An ordinal data type is a data type that specifies the properties of values that can easily be put in a one to one correspondence with a subset of the natural numbers. Examples include boolean, character, and integer data types.`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrdinalType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ScalarDatatype`), namedNode(qudt)),
        quad(blankNodes[44], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[44], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}BooleanEncodingType`), namedNode(qudt)),
        quad(blankNodes[44], namedNode(`${owl}onProperty`), namedNode(`${qudt}encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanTypeEnumeratedValue`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanTypeEnumeratedValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanTypeEnumeratedValue`), namedNode(`${rdfs}label`), literal(`boolean value`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanTypeEnumeratedValue`), namedNode(`${dcterms}description`), literal(`Specifies how a boolean value is expressed`), namedNode(qudt)),
        quad(namedNode(`${qudt}BooleanTypeEnumeratedValue`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByColumn`), namedNode(`${rdf}type`), namedNode(`${qudt}ArrayDataOrderType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByColumn`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByColumn`), namedNode(`${rdfs}label`), literal(`By Column`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByColumn`), namedNode(`${dtype}literal`), literal(`byColumn`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByLeftMostIndex`), namedNode(`${rdf}type`), namedNode(`${qudt}ArrayDataOrderType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByLeftMostIndex`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByLeftMostIndex`), namedNode(`${rdfs}label`), literal(`By Left Most Index`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByLeftMostIndex`), namedNode(`${dtype}literal`), literal(`byLeftMostIndex`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByRow`), namedNode(`${rdf}type`), namedNode(`${qudt}ArrayDataOrderType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByRow`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByRow`), namedNode(`${rdfs}label`), literal(`By Row`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByRow`), namedNode(`${dtype}literal`), literal(`byRow`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByteAligned`), namedNode(`${rdf}type`), namedNode(`${qudt}AlignmentType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByteAligned`), namedNode(`${rdfs}label`), literal(`Byte Aligned`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByteAligned`), namedNode(`${dtype}literal`), literal(`byte`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByteEncodingType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByteEncodingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByteEncodingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByteEncodingType`), namedNode(`${rdfs}label`), literal(`Byte Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByteEncodingType`), namedNode(`${dcterms}description`), literal(`This class contains the various ways that information may be encoded into bytes.`), namedNode(qudt)),
        quad(namedNode(`${qudt}ByteEncodingType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}CCT_EarthCentered`), namedNode(`${rdf}type`), namedNode(`${qudt}CoordinateCenterType`), namedNode(qudt)),
        quad(namedNode(`${qudt}CCT_EarthCentered`), namedNode(`${rdfs}label`), literal(`Earth-centered Coordinate System Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateCenterType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateCenterType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateCenterType`), namedNode(`${rdfs}label`), literal(`Coordinate Center Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateCenterType`), namedNode(`${dcterms}description`), literal(`An enumeration of coordinate centers for coordinate systems, such as "Earth centered", "Mars centered", "Moon centered", "Sun centered",  and "Vehicle centered".`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateCenterType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateCenterType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}NominalScale`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateCenterType`), namedNode(`${owl}oneOf`), blankNodes[115], namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateCenterType`), namedNode(`${skos}prefLabel`), literal(`Coordinate center type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateCenterType`), namedNode(`${skos}prefLabel`), literal(`Coordinate center`), namedNode(qudt)),
        quad(namedNode(`${qudt}CCT_MarsCentered`), namedNode(`${rdf}type`), namedNode(`${qudt}CoordinateCenterType`), namedNode(qudt)),
        quad(namedNode(`${qudt}CCT_MarsCentered`), namedNode(`${rdfs}label`), literal(`Mars-centered Coordinate System Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CCT_MoonCentered`), namedNode(`${rdf}type`), namedNode(`${qudt}CoordinateCenterType`), namedNode(qudt)),
        quad(namedNode(`${qudt}CCT_MoonCentered`), namedNode(`${rdfs}label`), literal(`Moon-centered Coordinate System Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CCT_SunCentered`), namedNode(`${rdf}type`), namedNode(`${qudt}CoordinateCenterType`), namedNode(qudt)),
        quad(namedNode(`${qudt}CCT_SunCentered`), namedNode(`${rdfs}label`), literal(`Sun-centered Coordinate System Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CCT_VehicleCentered`), namedNode(`${rdf}type`), namedNode(`${qudt}CoordinateCenterType`), namedNode(qudt)),
        quad(namedNode(`${qudt}CCT_VehicleCentered`), namedNode(`${rdfs}label`), literal(`Vehicle-centered Coordinate System Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CFN_ConcatenateMatrixRows`), namedNode(`${rdf}type`), namedNode(`${qudt}CompositionFunction`), namedNode(qudt)),
        quad(namedNode(`${qudt}CFN_ConcatenateMatrixRows`), namedNode(`${rdfs}label`), literal(`Concatenate matrix rows`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositionFunction`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositionFunction`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositionFunction`), namedNode(`${rdfs}label`), literal(`Composition function`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositionFunction`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Function`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_AMBER`), namedNode(`${rdf}type`), namedNode(`${qudt}ColorCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_AMBER`), namedNode(`${rdfs}label`), literal(`Amber Color`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_AMBER`), namedNode(`${qudt}literal`), literal(`amber`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_AMBER`), namedNode(`${qudt}rgbCode`), literal(`#FFBF00`), namedNode(qudt)),
        quad(namedNode(`${qudt}literal`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}literal`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}literal`), namedNode(`${rdfs}label`), literal(`literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}literal`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}literal`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${dtype}literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}rgbCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}rgbCode`), namedNode(`${rdfs}label`), literal(`rgb code`), namedNode(qudt)),
        quad(namedNode(`${qudt}ColorCue`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ColorCue`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ColorCue`), namedNode(`${rdfs}label`), literal(`Color Cue`), namedNode(qudt)),
        quad(namedNode(`${qudt}ColorCue`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}VisualCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}ColorCue`), namedNode(`${rdfs}comment`), literal(`A visual cue that uses color to distinguish it from other cues. Each color cue has exactly one corresponding coordinate point in the RGB space.`), namedNode(qudt)),
        quad(namedNode(`${qudt}ColorCue`), namedNode(`${sh}property`), namedNode(`${qudt}ColorCue-rgbCode`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_GREEN`), namedNode(`${rdf}type`), namedNode(`${qudt}ColorCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_GREEN`), namedNode(`${rdfs}label`), literal(`Green color`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_GREEN`), namedNode(`${qudt}literal`), literal(`green`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_GREEN`), namedNode(`${qudt}rgbCode`), literal(`#008000`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_ORANGE`), namedNode(`${rdf}type`), namedNode(`${qudt}ColorCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_ORANGE`), namedNode(`${rdfs}label`), literal(`Orange color`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_ORANGE`), namedNode(`${qudt}literal`), literal(`orange`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_ORANGE`), namedNode(`${qudt}rgbCode`), literal(`#FFA500`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_RED`), namedNode(`${rdf}type`), namedNode(`${qudt}ColorCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_RED`), namedNode(`${rdfs}label`), literal(`Red color`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_RED`), namedNode(`${qudt}literal`), literal(`red`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_RED`), namedNode(`${qudt}rgbCode`), literal(`#FF0000`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_YELLOW`), namedNode(`${rdf}type`), namedNode(`${qudt}ColorCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_YELLOW`), namedNode(`${rdfs}label`), literal(`Yellow color`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_YELLOW`), namedNode(`${qudt}literal`), literal(`yellow`), namedNode(qudt)),
        quad(namedNode(`${qudt}COLOR_YELLOW`), namedNode(`${qudt}rgbCode`), literal(`#FFFF00`), namedNode(qudt)),
        quad(namedNode(`${qudt}CRC32`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}CRC32`), namedNode(`${rdf}type`), namedNode(`${owl}DataRange`), namedNode(qudt)),
        quad(namedNode(`${qudt}CRC32`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}CRC32`), namedNode(`${rdfs}label`), literal(`CRC-32`), namedNode(qudt)),
        quad(namedNode(`${qudt}CRC32`), namedNode(`${rdfs}subClassOf`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}CRC32`), namedNode(`${owl}equivalentClass`), blankNodes[116], namedNode(qudt)),
        quad(blankNodes[116], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[116], namedNode(`${owl}onDatatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(blankNodes[116], namedNode(`${owl}withRestrictions`), blankNodes[117], namedNode(qudt)),
        quad(namedNode(`${qudt}CT_COUNTABLY-INFINITE`), namedNode(`${rdf}type`), namedNode(`${qudt}CardinalityType`), namedNode(qudt)),
        quad(namedNode(`${qudt}CT_COUNTABLY-INFINITE`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}CT_COUNTABLY-INFINITE`), namedNode(`${rdfs}label`), literal(`Countably Infinite Cardinality Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CT_COUNTABLY-INFINITE`), namedNode(`${dcterms}description`), literal(`A set of numbers is called countably infinite if there is a way to enumerate them.  Formally this is done with a bijection function that associates each number in the set with exactly one of the positive integers.  The set of all fractions is also countably infinite.  In other words, any set \\(X\\) that has the same cardinality as the set of the natural numbers, or \\(| X | \\; =  \\; | \\mathbb N | \\; = \\; \\aleph0\\), is said to be a countably infinite set.`, namedNode(`${qudt}LatexString`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CT_COUNTABLY-INFINITE`), namedNode(`${qudt}informativeReference`), literal(`http://www.math.vanderbilt.edu/~schectex/courses/infinity.pdf`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CT_COUNTABLY-INFINITE`), namedNode(`${qudt}literal`), literal(`countable`), namedNode(qudt)),
        quad(namedNode(`${qudt}CardinalityType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CardinalityType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}CardinalityType`), namedNode(`${rdfs}label`), literal(`Cardinality Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CardinalityType`), namedNode(`${dcterms}description`), literal(`<p class="lm-para">In mathematics, the cardinality of a set is a measure of the number of elements of the set.  For example, the set \\(A = {2, 4, 6}\\) contains 3 elements, and therefore \\(A\\) has a cardinality of 3. There are two approaches to cardinality – one which compares sets directly using bijections and injections, and another which uses cardinal numbers.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CardinalityType`), namedNode(`${dcterms}description`), literal(`In mathematics, the cardinality of a set is a measure of the number of elements of the set.  For example, the set \\(A = {2, 4, 6}\\) contains 3 elements, and therefore \\(A\\) has a cardinality of 3. There are two approaches to cardinality – one which compares sets directly using bijections and injections, and another which uses cardinal numbers.`, namedNode(`${qudt}LatexString`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CardinalityType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}CardinalityType`), namedNode(`${prov}wasInfluencedBy`), namedNode(`${ns18}Cardinal_number`), namedNode(qudt)),
        quad(namedNode(`${qudt}CardinalityType`), namedNode(`${prov}wasInfluencedBy`), namedNode(`${ns18}Cardinality`), namedNode(qudt)),
        quad(namedNode(`${qudt}CardinalityType`), namedNode(`${owl}oneOf`), blankNodes[118], namedNode(qudt)),
        quad(namedNode(`${qudt}CardinalityType`), namedNode(`${owl}oneOf`), blankNodes[119], namedNode(qudt)),
        quad(namedNode(`${qudt}CardinalityType`), namedNode(`${qudt}informativeReference`), literal(`http://en.wikipedia.org/wiki/Cardinal_number`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CardinalityType`), namedNode(`${qudt}informativeReference`), literal(`http://en.wikipedia.org/wiki/Cardinality`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CardinalityType`), namedNode(`${qudt}plainTextDescription`), literal(`In mathematics, the cardinality of a set is a measure of the number of elements of the set.  For example, the set 'A = {2, 4, 6}' contains 3 elements, and therefore 'A' has a cardinality of 3. There are two approaches to cardinality – one which compares sets directly using bijections and injections, and another which uses cardinal numbers.`), namedNode(qudt)),
        quad(namedNode(`${qudt}CT_FINITE`), namedNode(`${rdf}type`), namedNode(`${qudt}CardinalityType`), namedNode(qudt)),
        quad(namedNode(`${qudt}CT_FINITE`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}CT_FINITE`), namedNode(`${rdfs}label`), literal(`Finite Cardinality Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CT_FINITE`), namedNode(`${dcterms}description`), literal(`Any set \(X\) with cardinality less than that of the natural numbers, or \(| X | \\; <  \; | \\mathbb N | \), is said to be a finite set.`, namedNode(`${qudt}LatexString`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CT_FINITE`), namedNode(`${qudt}literal`), literal(`finite`), namedNode(qudt)),
        quad(namedNode(`${qudt}CT_UNCOUNTABLE`), namedNode(`${rdf}type`), namedNode(`${qudt}CardinalityType`), namedNode(qudt)),
        quad(namedNode(`${qudt}CT_UNCOUNTABLE`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}CT_UNCOUNTABLE`), namedNode(`${rdfs}label`), literal(`Uncountable Cardinality Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CT_UNCOUNTABLE`), namedNode(`${dcterms}description`), literal(`Any set with cardinality greater than that of the natural numbers, or \\(| X | \\; >  \\; | \\mathbb N | \\),  for example \\(| R| \\; =  \\;  c  \\; > |\\mathbb N |\\), is said to be uncountable.`, namedNode(`${qudt}LatexString`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CT_UNCOUNTABLE`), namedNode(`${qudt}literal`), literal(`uncountable`), namedNode(qudt)),
        quad(namedNode(`${qudt}plainTextDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}plainTextDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}plainTextDescription`), namedNode(`${rdfs}label`), literal(`description (plain text)`), namedNode(qudt)),
        quad(namedNode(`${qudt}plainTextDescription`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}plainTextDescription`), namedNode(`${dcterms}description`), literal(`A plain text description is used to provide a description with only simple ASCII characters for cases where LaTeX , HTML or other markup would not be appropriate.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(blankNodes[118], namedNode(`${rdf}first`), namedNode(`${qudt}CT_COUNTABLY-INFINITE`), namedNode(qudt)),
        quad(blankNodes[118], namedNode(`${rdf}rest`), blankNodes[120], namedNode(qudt)),
        quad(blankNodes[119], namedNode(`${rdf}first`), namedNode(`${qudt}CT_COUNTABLY-INFINITE`), namedNode(qudt)),
        quad(blankNodes[119], namedNode(`${rdf}rest`), blankNodes[121], namedNode(qudt)),
        quad(namedNode(`${qudt}CartesianCoordinates`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CartesianCoordinates`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}CartesianCoordinates`), namedNode(`${rdfs}label`), literal(`Cartesian Coordinate Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CartesianCoordinates`), namedNode(`${dcterms}description`), literal(`A set of  variables which fix a geometric object. If the coordinates are distances measured along perpendicular axes, they are known as Cartesian coordinates.`), namedNode(qudt)),
        quad(namedNode(`${qudt}CartesianCoordinates`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Coordinates`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates`), namedNode(`${rdfs}label`), literal(`Coordinate System Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates`), namedNode(`${dcterms}description`), literal(`A coordinate system is a mathematical structure for assigning a unique n-tuple of numbers or scalars to each point in an n-dimensional space. A Coordinate System Type is a data type that defines the properties of data structures that represent coordinate systems.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Tuple`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates`), namedNode(`${rdfs}subClassOf`), blankNodes[122], namedNode(qudt)),
        quad(namedNode(`${qudt}CartesianCoordinatesType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CartesianCoordinatesType`), namedNode(`${rdfs}label`), literal(`Cartesian Coordinate Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CartesianCoordinatesType`), namedNode(`${dcterms}description`), literal(`A set of  variables which fix a geometric object. If the coordinates are distances measured along perpendicular axes, they are known as Cartesian coordinates.`), namedNode(qudt)),
        quad(namedNode(`${qudt}CartesianCoordinatesType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}BooleanEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}CharEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharEncoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharEncoding`), namedNode(`${rdfs}label`), literal(`Char Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharEncoding`), namedNode(`${dc11}description`), literal(`7 bits of 1 octet`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharEncoding`), namedNode(`${qudt}bytes`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}bytes`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}bytes`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}bytes`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}bytes`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}bytes`), namedNode(`${rdfs}label`), literal(`bytes`), namedNode(qudt)),
        quad(namedNode(`${qudt}bytes`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharEncodingType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharEncodingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharEncodingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharEncodingType`), namedNode(`${rdfs}label`), literal(`Char Encoding Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharEncodingType`), namedNode(`${dcterms}description`), literal(`The class of all character encoding schemes, each of which defines a rule or algorithm for encoding character data as a sequence of bits or bytes.`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharEncodingType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharEncodingType`), namedNode(`${owl}oneOf`), blankNodes[123], namedNode(qudt)),
        quad(blankNodes[123], namedNode(`${rdf}first`), namedNode(`${qudt}CharEncoding`), namedNode(qudt)),
        quad(blankNodes[123], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharacterType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharacterType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharacterType`), namedNode(`${rdfs}label`), literal(`Character Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharacterType`), namedNode(`${dcterms}description`), literal(`A Character Type is a data type that defines the type and encoding of single characters.`), namedNode(qudt)),
        quad(namedNode(`${qudt}CharacterType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}OrdinalType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Citation`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Citation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Citation`), namedNode(`${rdfs}label`), literal(`Citation`), namedNode(qudt)),
        quad(namedNode(`${qudt}Citation`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}Citation`), namedNode(`${rdfs}subClassOf`), blankNodes[124], namedNode(qudt)),
        quad(namedNode(`${qudt}Citation`), namedNode(`${rdfs}subClassOf`), blankNodes[125], namedNode(qudt)),
        quad(namedNode(`${qudt}Citation`), namedNode(`${rdfs}comment`), literal(`Provides a simple way of making citations.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(blankNodes[124], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[124], namedNode(`${owl}onProperty`), namedNode(`${qudt}url`), namedNode(qudt)),
        quad(blankNodes[124], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[125], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[125], namedNode(`${owl}onProperty`), namedNode(`${dcterms}description`), namedNode(qudt)),
        quad(blankNodes[125], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ColorCue-rgbCode`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ColorCue-rgbCode`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}ColorCue-rgbCode`), namedNode(`${sh}path`), namedNode(`${qudt}rgbCode`), namedNode(qudt)),
        quad(namedNode(`${qudt}ColorCue-rgbCode`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ColorCue-rgbCode`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}VisualCue`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}VisualCue`), namedNode(`${rdfs}label`), literal(`Visual Cue`), namedNode(qudt)),
        quad(namedNode(`${qudt}VisualCue`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ModalCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}Comment`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Comment`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Comment`), namedNode(`${rdfs}label`), literal(`Comment`), namedNode(qudt)),
        quad(namedNode(`${qudt}Comment`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(qudt)),
        quad(namedNode(`${qudt}Comment`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Verifiable`), namedNode(qudt)),
        quad(namedNode(`${qudt}Comment`), namedNode(`${rdfs}subClassOf`), blankNodes[126], namedNode(qudt)),
        quad(namedNode(`${qudt}Comment`), namedNode(`${rdfs}subClassOf`), blankNodes[127], namedNode(qudt)),
        quad(namedNode(`${qudt}Verifiable`), namedNode(`${rdf}type`), namedNode(`${qudt}AspectClass`), namedNode(qudt)),
        quad(namedNode(`${qudt}Verifiable`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Verifiable`), namedNode(`${rdfs}label`), literal(`Verifiable`), namedNode(qudt)),
        quad(namedNode(`${qudt}Verifiable`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Aspect`), namedNode(qudt)),
        quad(namedNode(`${qudt}Verifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[128], namedNode(qudt)),
        quad(namedNode(`${qudt}Verifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[129], namedNode(qudt)),
        quad(namedNode(`${qudt}Verifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[130], namedNode(qudt)),
        quad(namedNode(`${qudt}Verifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[131], namedNode(qudt)),
        quad(namedNode(`${qudt}Verifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[132], namedNode(qudt)),
        quad(namedNode(`${qudt}Verifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[133], namedNode(qudt)),
        quad(namedNode(`${qudt}Verifiable`), namedNode(`${rdfs}comment`), literal(`An aspect class that holds properties that provide external knowledge and specifications of a given resource.`), namedNode(qudt)),
        quad(blankNodes[126], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[126], namedNode(`${owl}onProperty`), namedNode(`${qudt}rationale`), namedNode(qudt)),
        quad(blankNodes[126], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[127], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[127], namedNode(`${owl}onProperty`), namedNode(`${dcterms}description`), namedNode(qudt)),
        quad(blankNodes[127], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDataStructure-dataElement`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDataStructure-dataElement`), namedNode(`${sh}path`), namedNode(`${qudt}field`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDataStructure-dataElement`), namedNode(`${sh}class`), namedNode(`${qudt}DataSetElement`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement`), namedNode(`${rdfs}label`), literal(`QUDT DataSet Element`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Tuple`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}DataElement`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement`), namedNode(`${rdfs}comment`), literal(`A field is a tuple that carries a name, a type and optionally other properties that characterize a member element of a composite data strucuture.`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement`), namedNode(`${sh}property`), namedNode(`${qudt}DataSetElement-elementLabel`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement`), namedNode(`${sh}property`), namedNode(`${qudt}DataSetElement-optional`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement`), namedNode(`${sh}property`), namedNode(`${qudt}DataSetElement-quantityKind`), namedNode(qudt)),
        quad(namedNode(`${qudt}field`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDataStructure`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDataStructure`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDataStructure`), namedNode(`${rdfs}label`), literal(`Composite Data Structure`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDataStructure`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDataStructure`), namedNode(`${prov}wasInfluencedBy`), namedNode(`${ns25}List_of_data_structures`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDataStructure`), namedNode(`${prov}wasInfluencedBy`), namedNode(`${ns25}Record_(computer_science)`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDataStructure`), namedNode(`${rdfs}comment`), literal(`'Composite Data Structure', also referred to as 'Data Record' is a datatype that aggregates element of possibly different types. The aggregated items are called fields or members and are usually identified or indexed by field labels.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDataStructure`), namedNode(`${sh}property`), namedNode(`${qudt}CompositeDataStructure-dataElement`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype-alignment`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype-alignment`), namedNode(`${sh}path`), namedNode(`${qudt}alignment`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype-alignment`), namedNode(`${sh}class`), namedNode(`${qudt}AlignmentType`), namedNode(qudt)),
        quad(namedNode(`${qudt}alignment`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}alignment`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}alignment`), namedNode(`${rdfs}label`), literal(`alignment`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype-elementType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype-elementType`), namedNode(`${sh}path`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype-elementType`), namedNode(`${sh}class`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}label`), literal(`QUDT Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${dcterms}description`), literal(`A data type is a definition of a set of values (for example, "all integers between 0 and 10"), and the allowable operations on those values; the meaning of the data; and the way values of that type can be stored. Some types are primitive - built-in to the language, with no visible internal structure - e.g. Boolean; others are composite - constructed from one or more other types (of either kind) - e.g. lists, arrays, structures, unions. Object-oriented programming extends this with classes which encapsulate both the structure of a type and the operations that can be performed on it. Some languages provide strong typing, others allow implicit type conversion and/or explicit type conversion.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[134], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[135], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[136], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[137], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[138], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[139], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[140], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[141], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[142], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[143], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[144], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[145], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[146], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[147], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[148], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[149], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[150], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[151], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[152], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[153], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${rdfs}subClassOf`), blankNodes[154], namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${qudt}informativeReference`), literal(`http://en.wikipedia.org/wiki/Data_type`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${qudt}informativeReference`), literal(`http://foldoc.org/data+type`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype`), namedNode(`${qudt}informativeReference`), literal(`http://www.princeton.edu/~achaney/tmve/wiki100k/docs/Data_type.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype-padding`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype-padding`), namedNode(`${sh}path`), namedNode(`${qudt}padding`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype-padding`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeDatatype-padding`), namedNode(`${sh}class`), namedNode(`${qudt}PaddingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}PaddingType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}PaddingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}PaddingType`), namedNode(`${rdfs}label`), literal(`Padding type`), namedNode(qudt)),
        quad(namedNode(`${qudt}PaddingType`), namedNode(`${dcterms}description`), literal(`This describes how unused bits of a field are filled. Unused bits could be set to one or zero. A third option is "don't care".`), namedNode(qudt)),
        quad(namedNode(`${qudt}PaddingType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}PaddingType`), namedNode(`${owl}oneOf`), blankNodes[155], namedNode(qudt)),
        quad(namedNode(`${qudt}padding`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}padding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}padding`), namedNode(`${rdfs}label`), literal(`padding`), namedNode(qudt)),
        quad(blankNodes[29], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[29], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}TypeList`), namedNode(qudt)),
        quad(blankNodes[29], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementTypeList`), namedNode(qudt)),
        quad(blankNodes[30], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[30], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}PaddingType`), namedNode(qudt)),
        quad(blankNodes[30], namedNode(`${owl}onProperty`), namedNode(`${qudt}padding`), namedNode(qudt)),
        quad(blankNodes[31], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[31], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}AlignmentType`), namedNode(qudt)),
        quad(blankNodes[31], namedNode(`${owl}onProperty`), namedNode(`${qudt}alignment`), namedNode(qudt)),
        quad(blankNodes[32], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[32], namedNode(`${owl}onProperty`), namedNode(`${qudt}padding`), namedNode(qudt)),
        quad(blankNodes[32], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeTable`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeTable`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeTable`), namedNode(`${rdfs}label`), literal(`Composite Table Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeTable`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Table Type'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositeTable`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Table`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table`), namedNode(`${rdfs}label`), literal(`Table Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table`), namedNode(`${dcterms}description`), literal(`A Table Type is a data type that specifies the properties of table data structures. A table is both a mode of visual communication and a means of arranging data. The use of tables is pervasive throughout NASA The precise conventions and terminology for describing tables varies depending on the context. Moreover, tables differ significantly in variety, structure, flexibility, notation, representation and use.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Array`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table`), namedNode(`${rdfs}subClassOf`), blankNodes[156], namedNode(qudt)),
        quad(namedNode(`${qudt}Table`), namedNode(`${rdfs}subClassOf`), blankNodes[157], namedNode(qudt)),
        quad(namedNode(`${qudt}Table`), namedNode(`${rdfs}subClassOf`), blankNodes[158], namedNode(qudt)),
        quad(namedNode(`${qudt}Table`), namedNode(`${rdfs}subClassOf`), blankNodes[159], namedNode(qudt)),
        quad(namedNode(`${qudt}Function`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Function`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Function`), namedNode(`${rdfs}label`), literal(`Function`), namedNode(qudt)),
        quad(namedNode(`${qudt}Function`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositionTreeType-compositionFunction`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositionTreeType-compositionFunction`), namedNode(`${sh}path`), namedNode(`${qudt}function`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositionTreeType-compositionFunction`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositionTreeType-compositionFunction`), namedNode(`${sh}class`), namedNode(`${qudt}CompositionFunction`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositionTreeType-compositionFunction`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositionTreeType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositionTreeType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositionTreeType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TreeType`), namedNode(qudt)),
        quad(namedNode(`${qudt}CompositionTreeType`), namedNode(`${sh}property`), namedNode(`${qudt}CompositionTreeType-compositionFunction`), namedNode(qudt)),
        quad(blankNodes[6], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[6], namedNode(`${owl}onProperty`), namedNode(`${qudt}abbreviation`), namedNode(qudt)),
        quad(blankNodes[6], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(blankNodes[7], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[7], namedNode(`${owl}onProperty`), namedNode(`${qudt}id`), namedNode(qudt)),
        quad(blankNodes[7], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(blankNodes[8], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[8], namedNode(`${owl}onProperty`), namedNode(`${qudt}plainTextDescription`), namedNode(qudt)),
        quad(blankNodes[8], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(blankNodes[9], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[9], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Rule`), namedNode(qudt)),
        quad(blankNodes[9], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasRule`), namedNode(qudt)),
        quad(blankNodes[10], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[10], namedNode(`${owl}onProperty`), namedNode(`${dcterms}description`), namedNode(qudt)),
        quad(blankNodes[10], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Conference`), namedNode(`${rdf}type`), namedNode(`${qudt}PubEnumeratedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Conference`), namedNode(`${rdfs}label`), literal(`Pub techreport type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Conference`), namedNode(`${dtype}literal`), literal(`conference`), namedNode(qudt)),
        quad(namedNode(`${qudt}ConstantValue`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ConstantValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}ConstantValue`), namedNode(`${rdfs}label`), literal(`Constant value`), namedNode(qudt)),
        quad(namedNode(`${qudt}ConstantValue`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}QuantityValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}ConstantValue`), namedNode(`${rdfs}subClassOf`), blankNodes[160], namedNode(qudt)),
        quad(namedNode(`${qudt}ConstantValue`), namedNode(`${rdfs}comment`), literal(`Used to specify the values of a constant.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValue`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValue`), namedNode(`${rdfs}label`), literal(`Quantity value`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValue`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValue`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Quantifiable`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValue`), namedNode(`${rdfs}subClassOf`), blankNodes[161], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValue`), namedNode(`${rdfs}comment`), literal(`A <i>Quantity Value</i> expresses the magnitude and kind of a quantity and is given by the product of a numerical value <code>n</code> and a unit of measure <code>U</code>. The number multiplying the unit is referred to as the numerical value of the quantity expressed in that unit. Refer to <a href="http://physics.nist.gov/Pubs/SP811/sec07.html">NIST SP 811 section 7</a> for more on quantity values.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(blankNodes[160], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[160], namedNode(`${owl}onProperty`), namedNode(`${qudt}exactConstant`), namedNode(qudt)),
        quad(blankNodes[160], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Container-elementTypeCount`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Container-elementTypeCount`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}Container-elementTypeCount`), namedNode(`${sh}hasValue`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Container-elementTypeCount`), namedNode(`${sh}path`), namedNode(`${qudt}elementTypeCount`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementTypeCount`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementTypeCount`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementTypeCount`), namedNode(`${rdfs}label`), literal(`element type count`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementTypeCount`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementTypeCount`), namedNode(`${dcterms}description`), literal(`This property determines the allowed number of element types that a structured data type may have.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Container`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Container`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Container`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Container`), namedNode(`${rdfs}label`), literal(`Container`), namedNode(qudt)),
        quad(namedNode(`${qudt}Container`), namedNode(`${dcterms}description`), literal(`A container is a class, a data structure, or an abstract data type (ADT) whose instances are collections of other objects. They are used to store objects in an organized way following specific access rules.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Container`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}AbstractDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Container`), namedNode(`${rdfs}subClassOf`), blankNodes[162], namedNode(qudt)),
        quad(namedNode(`${qudt}Container`), namedNode(`${sh}property`), namedNode(`${qudt}Container-elementTypeCount`), namedNode(qudt)),
        quad(namedNode(`${qudt}Container`), namedNode(`${owl}equivalentClass`), namedNode(`${qudt}Collection`), namedNode(qudt)),
        quad(namedNode(`${qudt}Container`), namedNode(`${owl}equivalentClass`), namedNode(`${qudt}CollectionType`), namedNode(qudt)),
        quad(blankNodes[162], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[162], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementTypeCount`), namedNode(qudt)),
        quad(blankNodes[162], namedNode(`${owl}hasValue`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}NominalScale`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}NominalScale`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}NominalScale`), namedNode(`${rdfs}label`), literal(`Nominal scale`), namedNode(qudt)),
        quad(namedNode(`${qudt}NominalScale`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Scale`), namedNode(qudt)),
        quad(namedNode(`${qudt}NominalScale`), namedNode(`${rdfs}comment`), literal(`A nominal scale differentiates between items or subjects based only on their names or (meta-)categories and other qualitative classifications they belong to; thus dichotomous data involves the construction of classifications as well as the classification of items. Discovery of an exception to a classification can be viewed as progress. Numbers may be used to represent the variables but the numbers do not have numerical value or relationship: For example, a Globally unique identifier. Examples of these classifications include gender, nationality, ethnicity, language, genre, style, biological species, and form. In a university one could also use hall of affiliation as an example.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}NominalScale`), namedNode(`${rdfs}seeAlso`), namedNode(`${qudt}IntervalScale`), namedNode(qudt)),
        quad(namedNode(`${qudt}NominalScale`), namedNode(`${rdfs}seeAlso`), namedNode(`${qudt}OrdinalScale`), namedNode(qudt)),
        quad(namedNode(`${qudt}NominalScale`), namedNode(`${rdfs}seeAlso`), namedNode(`${qudt}RatioScale`), namedNode(qudt)),
        quad(namedNode(`${qudt}NominalScale`), namedNode(`${qudt}informativeReference`), literal(`https://en.wikipedia.org/wiki/Level_of_measurement`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(blankNodes[115], namedNode(`${rdf}first`), namedNode(`${ns24}CC_MarsCentered`), namedNode(qudt)),
        quad(blankNodes[115], namedNode(`${rdf}rest`), blankNodes[163], namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateMember`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateMember`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateMember`), namedNode(`${rdfs}label`), literal(`Coordinate Member Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateMember`), namedNode(`${dcterms}description`), literal(`A Coordinate Member Type is a data type that defines the properties of a coordinate in a coordinate system.`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateMember`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TupleMember`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateMember`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TupleMemberType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMember`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMember`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMember`), namedNode(`${rdfs}label`), literal(`Tuple Member Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMember`), namedNode(`${dcterms}description`), literal(`A Tuple Member Type is a data type that defines the properties of a member of a tuple. It is used to provide fine grained type specification to the elements of tuples.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMember`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMember`), namedNode(`${rdfs}subClassOf`), blankNodes[164], namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMember`), namedNode(`${rdfs}subClassOf`), blankNodes[165], namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMemberType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMemberType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMemberType`), namedNode(`${rdfs}label`), literal(`Tuple Member Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMemberType`), namedNode(`${dcterms}description`), literal(`A Tuple Member Type is a data type that defines the properties of a member of a tuple. It is used to provide fine grained type specification to the elements of tuples.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMemberType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMemberType`), namedNode(`${sh}property`), namedNode(`${qudt}TupleMember-elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMemberType`), namedNode(`${sh}property`), namedNode(`${qudt}TupleMember-orderInStructure`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem-abbreviation`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem-abbreviation`), namedNode(`${sh}path`), namedNode(`${qudt}abbreviation`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem-abbreviation`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem-acronym`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem-acronym`), namedNode(`${sh}path`), namedNode(`${vaem}acronym`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem-acronym`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem-coordinateCenter`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem-coordinateCenter`), namedNode(`${sh}path`), namedNode(`${qudt}coordinateCenter`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem-coordinateCenter`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem-coordinateCenter`), namedNode(`${sh}class`), namedNode(`${qudt}CoordinateCenterType`), namedNode(qudt)),
        quad(namedNode(`${qudt}coordinateCenter`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}coordinateCenter`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}coordinateCenter`), namedNode(`${rdfs}label`), literal(`coordinate center`), namedNode(qudt)),
        quad(namedNode(`${qudt}coordinateCenter`), namedNode(`${rdfs}range`), namedNode(`${qudt}CoordinateCenterType`), namedNode(qudt)),
        quad(namedNode(`${qudt}coordinateCenter`), namedNode(`${skos}prefLabel`), literal(`coordinate center`), namedNode(qudt)),
        quad(namedNode(`${qudt}coordinateCenter`), namedNode(`${rdfs}domain`), namedNode(`${qudt}CoordinateSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem-referenceFrame`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem-referenceFrame`), namedNode(`${sh}path`), namedNode(`${qudt}referenceFrame`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem-referenceFrame`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystem-referenceFrame`), namedNode(`${sh}class`), namedNode(`${qudt}ReferenceFrame`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${rdfs}label`), literal(`Reference Frame`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${dcterms}description`), literal(`A reference frame (or frame of reference) in physics, may refer to a coordinate system or set of axes.
The frame serves as the datum to measure the position, orientation, and other properties of objects in it.
Reference frame may refer to an observational reference frame tied to the state of motion of an observer. 
Reference frame may also refer to both an observational reference frame and an attached coordinate system as a unit.`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${rdfs}subClassOf`), namedNode(`${skos}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${rdfs}subClassOf`), blankNodes[166], namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${rdfs}subClassOf`), blankNodes[167], namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${rdfs}subClassOf`), blankNodes[168], namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${rdfs}subClassOf`), blankNodes[169], namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${rdfs}subClassOf`), blankNodes[170], namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${rdfs}subClassOf`), blankNodes[171], namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${rdfs}subClassOf`), blankNodes[172], namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${rdfs}subClassOf`), blankNodes[173], namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${rdfs}subClassOf`), blankNodes[174], namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${rdfs}subClassOf`), blankNodes[175], namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${sh}property`), namedNode(`${qudt}ReferenceFrame-comment`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${sh}property`), namedNode(`${qudt}ReferenceFrame-description`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${sh}property`), namedNode(`${qudt}ReferenceFrame-frameType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${sh}property`), namedNode(`${qudt}ReferenceFrame-realization`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${sh}property`), namedNode(`${qudt}ReferenceFrame-xAxisDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${sh}property`), namedNode(`${qudt}ReferenceFrame-xCoordinateDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${sh}property`), namedNode(`${qudt}ReferenceFrame-yAxisDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${sh}property`), namedNode(`${qudt}ReferenceFrame-yCoordinateDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${sh}property`), namedNode(`${qudt}ReferenceFrame-zAxisDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame`), namedNode(`${sh}property`), namedNode(`${qudt}ReferenceFrame-zCoordinateDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}referenceFrame`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}referenceFrame`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}referenceFrame`), namedNode(`${rdfs}label`), literal(`reference frame`), namedNode(qudt)),
        quad(namedNode(`${qudt}referenceFrame`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}coordinateSystemFrame`), namedNode(qudt)),
        quad(blankNodes[11], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[11], namedNode(`${owl}onProperty`), namedNode(`${qudt}referenceFrame`), namedNode(qudt)),
        quad(blankNodes[11], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[12], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[12], namedNode(`${owl}onProperty`), namedNode(`${qudt}coordinateCenter`), namedNode(qudt)),
        quad(blankNodes[12], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[13], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[13], namedNode(`${owl}onProperty`), namedNode(`${qudt}abbreviation`), namedNode(qudt)),
        quad(blankNodes[13], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[14], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[14], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}ReferenceFrame`), namedNode(qudt)),
        quad(blankNodes[14], namedNode(`${owl}onProperty`), namedNode(`${qudt}referenceFrame`), namedNode(qudt)),
        quad(blankNodes[15], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[15], namedNode(`${owl}onProperty`), namedNode(`${vaem}acronym`), namedNode(qudt)),
        quad(blankNodes[15], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemFrame`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemFrame`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemFrame`), namedNode(`${rdfs}label`), literal(`Coordinate system frame`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemFrame`), namedNode(`${rdfs}subClassOf`), namedNode(`${skos}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType-originDefinition`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType-originDefinition`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType-originDefinition`), namedNode(`${sh}path`), namedNode(`${qudt}originDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType-originDefinition`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType-originDefinition`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}originDefinition`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}originDefinition`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}originDefinition`), namedNode(`${rdfs}label`), literal(`origin definition`), namedNode(qudt)),
        quad(namedNode(`${qudt}originDefinition`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType`), namedNode(`${rdfs}label`), literal(`Coordinate System Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType`), namedNode(`${rdfs}label`), literal(`Coordinate system type`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType`), namedNode(`${dcterms}description`), literal(`The primary attributes of any coordinate system are the coordinate frame or orientation of the axes of the coordinate system and the coordinate center or origin of the coordinate system. The coordinate center is the easier of the two attributes to define and in trajectory-related coordinate systems is often taken to be the center of mass of natural solar system bodies such as the Earth, the Moon, or Mars. Precise definition of the coordinate frame, however, usually takes much more effort. As a result, the primary purpose of this section is to provide a detailed description of a number of different coordinate frames commonly used in lunar and Mars mission analysis. All of the coordinate frames described in this section are standard, right-handed coordinate frames with orthogonal axes at the origin. In general, the coordinate frame and the coordinate center are independent quantities. In other words, multiple coordinate systems can be defined using the same coordinate center (with different frames) or the same coordinate frame (with different centers). `), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TupleType`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType`), namedNode(`${rdfs}subClassOf`), blankNodes[176], namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType`), namedNode(`${rdfs}comment`), literal(`<p>A coordinate system is a mathematical structure for assigning a unique n-tuple of numbers or scalars to each point in an n-dimensional space. A Coordinate System Type is a data type that defines the properties of data structures that represent coordinate systems.</p>

<p>The primary attributes of any coordinate system are the coordinate frame or orientation of the axes of the coordinate system and the coordinate center or origin of the coordinate system. The coordinate center is the easier of the two attributes to define and in trajectory-related coordinate systems is often taken to be the center of mass of natural solar system bodies such as the Earth, the Moon, or Mars. Precise definition of the coordinate frame, however, usually takes much more effort. As a result, the primary purpose of this section is to provide a detailed description of a number of different coordinate frames commonly used in lunar and Mars mission analysis. </p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType`), namedNode(`${sh}property`), namedNode(`${qudt}CoordinateSystemType-originDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}CoordinateSystemType`), namedNode(`${sh}property`), namedNode(`${qudt}Coordinates-elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleType`), namedNode(`${rdfs}label`), literal(`Tuple Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleType`), namedNode(`${dcterms}description`), literal(`<p>The term <em>Tuple</em> originated as an abstraction of the sequence: single, double, triple, quadruple, quintuple, n-tuple.  In mathematics, a tuple is a finite sequence (also known as an <em>Ordered List</em> of objects, each of a specified type. The <em>n</em> can be any non-negative integer.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleType`), namedNode(`${sh}property`), namedNode(`${qudt}Tuple-elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleType`), namedNode(`${sh}property`), namedNode(`${qudt}Tuple-elementTypeCount`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleType`), namedNode(`${sh}property`), namedNode(`${qudt}Tuple-length`), namedNode(qudt)),
        quad(blankNodes[176], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[176], namedNode(`${owl}onProperty`), namedNode(`${qudt}originDefinition`), namedNode(qudt)),
        quad(blankNodes[176], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-elementType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-elementType`), namedNode(`${sh}path`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-elementType`), namedNode(`${sh}class`), namedNode(`${qudt}CoordinateMember`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision-Double_X`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision-Double_X`), namedNode(`${sh}datatype`), namedNode(`${xsd}double`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision-Double_X`), namedNode(`${sh}path`), namedNode(`${qudt}Double_X`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision-Double_X`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision-Double_X`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision-Double_Y`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision-Double_Y`), namedNode(`${sh}datatype`), namedNode(`${xsd}double`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision-Double_Y`), namedNode(`${sh}path`), namedNode(`${qudt}Double_Y`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision-Double_Y`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision-Double_Y`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision`), namedNode(`${rdf}type`), namedNode(`${qudt}Coordinates-2D-Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision`), namedNode(`${rdfs}label`), literal(`Coordinates-2D-Double precision`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision`), namedNode(`${dcterms}description`), literal(`2D coordinates in double floating point precision for locating a point in physical space`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Coordinates-2D`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[177], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[178], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[179], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[180], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-DoublePrecision`), namedNode(`${qudt}elementTypeCount`), literal(`2`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-Type`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-Type`), namedNode(`${rdfs}label`), literal(`2D Coordinate Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-Type`), namedNode(`${dcterms}description`), literal(`A 2D coordinate system is a system for assigning a two-tuple of numbers or scalars to each point in an 2-dimensional space. A 2D Coordinate Type is a data type that defines the data type for each coordinate (tuple member) in a 2D coordinate system.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-Type`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CartesianCoordinatesType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-Type`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TwoTupleType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D`), namedNode(`${rdfs}label`), literal(`2D Coordinate Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D`), namedNode(`${dcterms}description`), literal(`A 2D coordinate system is a system for assigning a two-tuple of numbers or scalars to each point in an 2-dimensional space. A 2D Coordinate Type is a data type that defines the data type for each coordinate (tuple member) in a 2D coordinate system.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CartesianCoordinates`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Two-Tuple`), namedNode(qudt)),
        quad(blankNodes[177], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[177], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}double`), namedNode(qudt)),
        quad(blankNodes[177], namedNode(`${owl}onProperty`), namedNode(`${ns26}Double_Y`), namedNode(qudt)),
        quad(blankNodes[178], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[178], namedNode(`${owl}onProperty`), namedNode(`${ns26}Double_X`), namedNode(qudt)),
        quad(blankNodes[178], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[179], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[179], namedNode(`${owl}onProperty`), namedNode(`${ns26}Double_Y`), namedNode(qudt)),
        quad(blankNodes[179], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[180], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[180], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}double`), namedNode(qudt)),
        quad(blankNodes[180], namedNode(`${owl}onProperty`), namedNode(`${ns26}Double_X`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision-float_X`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision-float_X`), namedNode(`${sh}datatype`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision-float_X`), namedNode(`${sh}path`), namedNode(`${qudt}float_X`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision-float_X`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision-float_X`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}float_X`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}float_X`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}float_X`), namedNode(`${rdfs}label`), literal(`float X`), namedNode(qudt)),
        quad(namedNode(`${qudt}float_X`), namedNode(`${rdfs}range`), namedNode(`${xsd}anySimpleType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision-float_Y`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision-float_Y`), namedNode(`${sh}datatype`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision-float_Y`), namedNode(`${sh}path`), namedNode(`${qudt}float_Y`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision-float_Y`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision-float_Y`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}float_Y`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}float_Y`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}float_Y`), namedNode(`${rdfs}label`), literal(`float Y`), namedNode(qudt)),
        quad(namedNode(`${qudt}float_Y`), namedNode(`${rdfs}range`), namedNode(`${xsd}anySimpleType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision`), namedNode(`${rdf}type`), namedNode(`${qudt}Coordinates-2D-Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision`), namedNode(`${rdfs}label`), literal(`Cartesian Coordinates 2D Single Precision`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision`), namedNode(`${dcterms}description`), literal(`2D coordinates in single floating point precision for locating a point in physical space`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Coordinates-2D`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[181], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[182], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[183], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[184], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-2D-SinglePrecision`), namedNode(`${qudt}elementTypeCount`), literal(`2`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[181], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[181], namedNode(`${owl}onProperty`), namedNode(`${qudt}float_X`), namedNode(qudt)),
        quad(blankNodes[181], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[182], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[182], namedNode(`${owl}onProperty`), namedNode(`${qudt}float_Y`), namedNode(qudt)),
        quad(blankNodes[182], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[183], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[183], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(blankNodes[183], namedNode(`${owl}onProperty`), namedNode(`${qudt}float_X`), namedNode(qudt)),
        quad(blankNodes[184], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[184], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(blankNodes[184], namedNode(`${owl}onProperty`), namedNode(`${qudt}float_Y`), namedNode(qudt)),
        quad(namedNode(`${qudt}TwoTupleType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TwoTupleType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TwoTupleType`), namedNode(`${rdfs}label`), literal(`Two-Tuple Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TwoTupleType`), namedNode(`${dcterms}description`), literal(`A 2-tuple is called a pair. For example, a complex number can be represented as a 2-tuple, and 2D coordinates are sometimes represented as 2-tuples.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TwoTupleType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}N-TupleType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TwoTupleType`), namedNode(`${sh}property`), namedNode(`${qudt}Two-Tuple-elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TwoTupleType`), namedNode(`${sh}property`), namedNode(`${qudt}Two-Tuple-elementTypeCount`), namedNode(qudt)),
        quad(namedNode(`${qudt}Two-Tuple`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Two-Tuple`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Two-Tuple`), namedNode(`${rdfs}label`), literal(`Two-Tuple Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Two-Tuple`), namedNode(`${dcterms}description`), literal(`A 2-tuple is called a pair. For example, a complex number can be represented as a 2-tuple, and 2D coordinates are sometimes represented as 2-tuples.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Two-Tuple`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}N-Tuple`), namedNode(qudt)),
        quad(namedNode(`${qudt}Two-Tuple`), namedNode(`${rdfs}subClassOf`), blankNodes[185], namedNode(qudt)),
        quad(namedNode(`${qudt}Two-Tuple`), namedNode(`${rdfs}subClassOf`), blankNodes[186], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Double_X`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Double_X`), namedNode(`${sh}datatype`), namedNode(`${xsd}double`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Double_X`), namedNode(`${sh}path`), namedNode(`${qudt}Double_X`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Double_X`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Double_X`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Double_Y`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Double_Y`), namedNode(`${sh}datatype`), namedNode(`${xsd}double`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Double_Y`), namedNode(`${sh}path`), namedNode(`${qudt}Double_Y`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Double_Y`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Double_Y`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Double_Z`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Double_Z`), namedNode(`${sh}datatype`), namedNode(`${xsd}double`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Double_Z`), namedNode(`${sh}path`), namedNode(`${qudt}Double_Z`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Double_Z`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Double_Z`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Type`), namedNode(`${rdf}type`), namedNode(`${qudt}Coordinates-3D-Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Type`), namedNode(`${rdfs}label`), literal(`3D Coordinates (Double Precision) type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Type`), namedNode(`${dcterms}description`), literal(`3D coordinates in double floating point precision for locating a point in physical space`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision-Type`), namedNode(`${qudt}elementTypeCount`), literal(`3`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-Type`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-Type`), namedNode(`${rdfs}label`), literal(`3D Coordinate Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-Type`), namedNode(`${dcterms}description`), literal(`A 3D coordinate system is a system for assigning a three-tuple of numbers or scalars to each point in an 3-dimensional space. A 3D Coordinate Type is a data type that defines the data type for each coordinate (tuple member) in a 3D coordinate system.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-Type`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CartesianCoordinatesType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-Type`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ThreeTupleType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision`), namedNode(`${rdfs}label`), literal(`3D Coordinates (Double Precision)`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision`), namedNode(`${dcterms}description`), literal(`3D coordinates in double floating point precision for locating a point in physical space`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Coordinates-3D`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[187], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[188], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[189], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[190], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[191], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-DoublePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[192], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D`), namedNode(`${rdfs}label`), literal(`3D Coordinate Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D`), namedNode(`${dcterms}description`), literal(`A 3D coordinate system is a system for assigning a three-tuple of numbers or scalars to each point in an 3-dimensional space. A 3D Coordinate Type is a data type that defines the data type for each coordinate (tuple member) in a 3D coordinate system.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CartesianCoordinates`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Three-Tuple`), namedNode(qudt)),
        quad(blankNodes[187], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[187], namedNode(`${owl}onProperty`), namedNode(`${ns26}Double_Z`), namedNode(qudt)),
        quad(blankNodes[187], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[188], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[188], namedNode(`${owl}onProperty`), namedNode(`${ns26}Double_Y`), namedNode(qudt)),
        quad(blankNodes[188], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[189], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[189], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}double`), namedNode(qudt)),
        quad(blankNodes[189], namedNode(`${owl}onProperty`), namedNode(`${ns26}Double_X`), namedNode(qudt)),
        quad(blankNodes[190], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[190], namedNode(`${owl}onProperty`), namedNode(`${ns26}Double_X`), namedNode(qudt)),
        quad(blankNodes[190], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[191], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[191], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}double`), namedNode(qudt)),
        quad(blankNodes[191], namedNode(`${owl}onProperty`), namedNode(`${ns26}Double_Y`), namedNode(qudt)),
        quad(blankNodes[192], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[192], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}double`), namedNode(qudt)),
        quad(blankNodes[192], namedNode(`${owl}onProperty`), namedNode(`${ns26}Double_Z`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-Type`), namedNode(`${rdf}type`), namedNode(`${qudt}Coordinates-3D-Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-Type`), namedNode(`${rdfs}label`), literal(`3D Coordinates (Single Precision)`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-Type`), namedNode(`${dcterms}description`), literal(`3D coordinates in single floating point precision for locating a point in physical space`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-Type`), namedNode(`${qudt}elementTypeCount`), literal(`3`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-float_X`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-float_X`), namedNode(`${sh}datatype`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-float_X`), namedNode(`${sh}path`), namedNode(`${qudt}float_X`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-float_X`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-float_X`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-float_Y`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-float_Y`), namedNode(`${sh}datatype`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-float_Y`), namedNode(`${sh}path`), namedNode(`${qudt}float_Y`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-float_Y`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-float_Y`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-float_Z`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-float_Z`), namedNode(`${sh}datatype`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-float_Z`), namedNode(`${sh}path`), namedNode(`${qudt}float_Z`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-float_Z`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision-float_Z`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}float_Z`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}float_Z`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}float_Z`), namedNode(`${rdfs}label`), literal(`float Z`), namedNode(qudt)),
        quad(namedNode(`${qudt}float_Z`), namedNode(`${rdfs}range`), namedNode(`${xsd}anySimpleType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision`), namedNode(`${rdfs}label`), literal(`3D Coordinates (Single Precision)`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision`), namedNode(`${dcterms}description`), literal(`3D coordinates in single floating point precision for locating a point in physical space`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Coordinates-3D`), namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[193], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[194], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[195], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[196], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[197], namedNode(qudt)),
        quad(namedNode(`${qudt}Coordinates-3D-SinglePrecision`), namedNode(`${rdfs}subClassOf`), blankNodes[198], namedNode(qudt)),
        quad(blankNodes[193], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[193], namedNode(`${owl}onProperty`), namedNode(`${qudt}float_X`), namedNode(qudt)),
        quad(blankNodes[193], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[194], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[194], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(blankNodes[194], namedNode(`${owl}onProperty`), namedNode(`${qudt}float_Z`), namedNode(qudt)),
        quad(blankNodes[195], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[195], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(blankNodes[195], namedNode(`${owl}onProperty`), namedNode(`${qudt}float_X`), namedNode(qudt)),
        quad(blankNodes[196], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[196], namedNode(`${owl}onProperty`), namedNode(`${qudt}float_Z`), namedNode(qudt)),
        quad(blankNodes[196], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[197], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[197], namedNode(`${owl}onProperty`), namedNode(`${qudt}float_Y`), namedNode(qudt)),
        quad(blankNodes[197], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[198], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[198], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(blankNodes[198], namedNode(`${owl}onProperty`), namedNode(`${qudt}float_Y`), namedNode(qudt)),
        quad(namedNode(`${qudt}ThreeTupleType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ThreeTupleType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ThreeTupleType`), namedNode(`${rdfs}label`), literal(`Three-Tuple Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}ThreeTupleType`), namedNode(`${dcterms}description`), literal(`A three-tuple is a tuple with exactly three members. A Three-Tuple Type is a data type that defines the type properties of a class of three-tuples and their members.`), namedNode(qudt)),
        quad(namedNode(`${qudt}ThreeTupleType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}N-TupleType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ThreeTupleType`), namedNode(`${sh}property`), namedNode(`${qudt}Three-Tuple-elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ThreeTupleType`), namedNode(`${sh}property`), namedNode(`${qudt}Three-Tuple-elementTypeCount`), namedNode(qudt)),
        quad(namedNode(`${qudt}Three-Tuple`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Three-Tuple`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Three-Tuple`), namedNode(`${rdfs}label`), literal(`Three-Tuple Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Three-Tuple`), namedNode(`${dcterms}description`), literal(`A three-tuple is a tuple with exactly three members. A Three-Tuple Type is a data type that defines the type properties of a class of three-tuples and their members.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Three-Tuple`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}N-Tuple`), namedNode(qudt)),
        quad(namedNode(`${qudt}Three-Tuple`), namedNode(`${rdfs}subClassOf`), blankNodes[199], namedNode(qudt)),
        quad(namedNode(`${qudt}Three-Tuple`), namedNode(`${rdfs}subClassOf`), blankNodes[200], namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple`), namedNode(`${rdfs}label`), literal(`Tuple Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple`), namedNode(`${dcterms}description`), literal(`<p>The term <em>Tuple</em> originated as an abstraction of the sequence: single, double, triple, quadruple, quintuple, n-tuple.  In mathematics, a tuple is a finite sequence (also known as an <em>Ordered List</em> of objects, each of a specified type. The <em>n</em> can be any non-negative integer.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple`), namedNode(`${rdfs}subClassOf`), blankNodes[201], namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple`), namedNode(`${rdfs}subClassOf`), blankNodes[202], namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple`), namedNode(`${rdfs}subClassOf`), blankNodes[203], namedNode(qudt)),
        quad(blankNodes[122], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[122], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}CoordinateMember`), namedNode(qudt)),
        quad(blankNodes[122], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}CountingUnit`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CountingUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}CountingUnit`), namedNode(`${rdfs}label`), literal(`Counting Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}CountingUnit`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}DimensionlessUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}CountingUnit`), namedNode(`${rdfs}comment`), literal(`Used for all units that express counts. Examples are Atomic Number, Number, Number per Year, Percent and Sample per Second.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CurrencyUnit`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}CurrencyUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}CurrencyUnit`), namedNode(`${rdfs}label`), literal(`Currency Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}CurrencyUnit`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}DimensionlessUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}CurrencyUnit`), namedNode(`${rdfs}comment`), literal(`Currency Units have their own subclass of unit because: (a) they have additonal properites such as 'country' and (b) their URIs do not conform to the same rules as other units.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}CurrencyUnit`), namedNode(`${rdfs}comment`), literal(`Used for all units that express currency.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}DATE`), namedNode(`${rdf}type`), namedNode(`${qudt}DateStringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}DATE`), namedNode(`${rdfs}label`), literal(`Date`), namedNode(qudt)),
        quad(namedNode(`${qudt}DATE`), namedNode(`${dcterms}description`), literal(`Provides the date expressed in year, month and day.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}DATE`), namedNode(`${qudt}dimensionality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}DATE`), namedNode(`${dtype}literal`), literal(`date`), namedNode(qudt)),
        quad(namedNode(`${qudt}DATE`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${xsd}date`), namedNode(qudt)),
        quad(namedNode(`${qudt}DATE`), namedNode(`${qudt}encodingDescription`), literal(`YYYY:MM:DD, where YYYY is a 4 digit year, MM is a 2 digit month and DD is a 2 digit day.`), namedNode(qudt)),
        quad(namedNode(`${qudt}encodingDescription`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}encodingDescription`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}encodingDescription`), namedNode(`${rdfs}label`), literal(`encoding description`), namedNode(qudt)),
        quad(namedNode(`${qudt}encodingDescription`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateStringType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateStringType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateStringType`), namedNode(`${rdfs}label`), literal(`Date String Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateStringType`), namedNode(`${dcterms}description`), literal(`Date String Types are scalar data types that define the properties of strings that represent calendar dates.`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateStringType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}DateTimeStringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}DATETIME`), namedNode(`${rdf}type`), namedNode(`${qudt}DateStringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}DATETIME`), namedNode(`${rdfs}label`), literal(`Date Time`), namedNode(qudt)),
        quad(namedNode(`${qudt}DATETIME`), namedNode(`${dcterms}description`), literal(`A time stamp encoded as a string 'YYYY-MM-DDThh:mm:ss[.dd]' or 'YYYY-DDDThh:mm:ss[.dd]', where 'YYYY' is the year, 'MM' is the two-digit month, 'DD' is the two-digit day, 'DDD' is the three digit day of year, 'T' is constant, 'hh:mm:ss[.dd]' is the UTC time in hours, minutes, seconds, and optional fractional seconds. As many 'd' characters to the right of the period as required may be used to obtain the required precision. All fields require leading zeros.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}DATETIME`), namedNode(`${qudt}dimensionality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}DATETIME`), namedNode(`${dtype}literal`), literal(`datetime`), namedNode(qudt)),
        quad(namedNode(`${qudt}DATETIME`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${xsd}dateTime`), namedNode(qudt)),
        quad(namedNode(`${qudt}DATETIME`), namedNode(`${owl}sameAs`), namedNode(`${qudt}UTC-DATETIME`), namedNode(qudt)),
        quad(namedNode(`${xsd}dateTime`), namedNode(`${dcterms}description`), literal(`YYYY-MM-DDThh:mm:ss[.dd] or YYYY-DDDThh:mm:ss[.dd], where 'YYYY' is the year, 'MM' is the two-digit month, 'DD' is the two-digit day, 'DDD' is the three digit day of year, 'T' is constant, 'hh:mm:ss[.dd]' is the UTC time in hours, minutes, seconds, and optional fractional seconds. As many 'd' characters to the right of the period as required may be used to obtain the required precision. All fields require leading zeros.`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DATETIME`), namedNode(`${rdf}type`), namedNode(`${qudt}DateStringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DATETIME`), namedNode(`${rdfs}label`), literal(`UTC Date Time`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DATETIME`), namedNode(`${dcterms}description`), literal(`UTC is the time-scale maintained by the BIPM, with assistance from the IERS, which forms the basis of a coordinated dissemination of standard frequencies and time signals. It corresponds exactly in rate with  the international reference scale of atomic time (TAI) but differs from it by an integer number of seconds.  TAI, based on the second (SI), as realized on the rotating geoid, is formed by the BIPM on the basis of clock data supplied by cooperating establishments. It is in the form of a continuous scale, e.g. in days, hours, minutes and seconds from the origin 1 January, 1958 (adopted by the CGPM 1971). `, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DATETIME`), namedNode(`${qudt}dimensionality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DATETIME`), namedNode(`${dtype}literal`), literal(`utc-date`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DATETIME`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${xsd}dateTime`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DATETIME`), namedNode(`${owl}sameAs`), namedNode(`${qudt}DATETIME`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DATETIME`), namedNode(`${qudt}encodingDescription`), literal(`YYYY-MM-DDThh:mm:ss[.dd] or YYYY-DDDThh:mm:ss[.dd], where 'YYYY' is the year, 'MM' is the two-digit month, 'DD' is the two-digit day, 'DDD' is the three digit day of year, 'T' is constant, 'hh:mm:ss[.dd]' is the UTC time in hours, minutes, seconds, and optional fractional seconds. As many 'd' characters to the right of the period as required may be used to obtain the required precision. All fields require leading zeros.`), namedNode(qudt)),
        quad(namedNode(`${qudt}DECIMAL`), namedNode(`${rdf}type`), namedNode(`${qudt}NumericType`), namedNode(qudt)),
        quad(namedNode(`${qudt}DECIMAL`), namedNode(`${rdfs}label`), literal(`Decimal`), namedNode(qudt)),
        quad(namedNode(`${qudt}DECIMAL`), namedNode(`${dtype}literal`), literal(`numeric`), namedNode(qudt)),
        quad(namedNode(`${qudt}DECIMAL`), namedNode(`${qudt}ansiSQLName`), literal(`DECIMAL(p,s)`), namedNode(qudt)),
        quad(namedNode(`${qudt}DECIMAL`), namedNode(`${qudt}odbcName`), literal(`SQL_DECIMAL(p,s)`), namedNode(qudt)),
        quad(namedNode(`${qudt}DECIMAL`), namedNode(`${qudt}oracleSQLName`), literal(`NUMBER(p,s)`), namedNode(qudt)),
        quad(namedNode(`${qudt}DECIMAL`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${xsd}decimal`), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType`), namedNode(`${rdfs}label`), literal(`Numeric Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType`), namedNode(`${dcterms}description`), literal(`Numeric data types are data types whose values denote quantities (in some mathematical number system).`), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType`), namedNode(`${dcterms}description`), literal(`Numeric data types are data types whose values denote quantities as defined by a mathematical number system.`), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ScalarDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType`), namedNode(`${rdfs}subClassOf`), blankNodes[204], namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType`), namedNode(`${rdfs}subClassOf`), blankNodes[205], namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType`), namedNode(`${rdfs}subClassOf`), blankNodes[206], namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType`), namedNode(`${sh}property`), namedNode(`${qudt}NumericType-accuracy`), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType`), namedNode(`${sh}property`), namedNode(`${qudt}NumericType-signedness`), namedNode(qudt)),
        quad(namedNode(`${qudt}DV_2x4`), namedNode(`${rdf}type`), namedNode(`${qudt}DimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}DV_2x4`), namedNode(`${rdfs}label`), literal(`Dimension Vector 2x4`), namedNode(qudt)),
        quad(namedNode(`${qudt}DV_2x4`), namedNode(`${rdf}first`), literal(`2`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}DV_2x4`), namedNode(`${rdf}rest`), blankNodes[207], namedNode(qudt)),
        quad(blankNodes[207], namedNode(`${rdf}first`), literal(`4`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[207], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(namedNode(`${qudt}DV_4x4`), namedNode(`${rdf}type`), namedNode(`${qudt}DimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}DV_4x4`), namedNode(`${rdfs}label`), literal(`Dimension Vector 4x4`), namedNode(qudt)),
        quad(namedNode(`${qudt}DV_4x4`), namedNode(`${rdf}first`), literal(`4`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}DV_4x4`), namedNode(`${rdf}rest`), blankNodes[208], namedNode(qudt)),
        quad(blankNodes[208], namedNode(`${rdf}first`), literal(`4`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[208], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataElement-type`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataElement-type`), namedNode(`${sh}path`), namedNode(`${qudt}dataType`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataElement-type`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}DataElement-type`), namedNode(`${sh}class`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataElement-type`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}dataType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dataType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}dataType`), namedNode(`${rdfs}label`), literal(`datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataEncoding`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataEncoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataEncoding`), namedNode(`${rdfs}label`), literal(`Data Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataEncoding`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Aspect`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataEncoding`), namedNode(`${rdfs}subClassOf`), blankNodes[209], namedNode(qudt)),
        quad(namedNode(`${qudt}DataEncoding`), namedNode(`${rdfs}subClassOf`), blankNodes[210], namedNode(qudt)),
        quad(namedNode(`${qudt}DataEncoding`), namedNode(`${rdfs}subClassOf`), blankNodes[211], namedNode(qudt)),
        quad(namedNode(`${qudt}DataEncoding`), namedNode(`${rdfs}subClassOf`), blankNodes[212], namedNode(qudt)),
        quad(namedNode(`${qudt}DataEncoding`), namedNode(`${rdfs}subClassOf`), blankNodes[213], namedNode(qudt)),
        quad(namedNode(`${qudt}DataEncoding`), namedNode(`${rdfs}comment`), literal(`<p><em>Data Encoding</em> expresses the properties that specify how data is represented at the bit and byte level. These properties are applicable to describing raw data.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(blankNodes[209], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[209], namedNode(`${owl}onProperty`), namedNode(`${qudt}byteOrder`), namedNode(qudt)),
        quad(blankNodes[209], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[210], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[210], namedNode(`${owl}onProperty`), namedNode(`${qudt}encoding`), namedNode(qudt)),
        quad(blankNodes[210], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[211], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[211], namedNode(`${owl}onProperty`), namedNode(`${qudt}bitOrder`), namedNode(qudt)),
        quad(blankNodes[211], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[212], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[212], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Encoding`), namedNode(qudt)),
        quad(blankNodes[212], namedNode(`${owl}onProperty`), namedNode(`${qudt}encoding`), namedNode(qudt)),
        quad(blankNodes[213], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[213], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}EndianType`), namedNode(qudt)),
        quad(blankNodes[213], namedNode(`${owl}onProperty`), namedNode(`${qudt}bitOrder`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement-elementLabel`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement-elementLabel`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement-elementLabel`), namedNode(`${sh}path`), namedNode(`${qudt}elementLabel`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement-elementLabel`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement-elementLabel`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}elementLabel`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementLabel`), namedNode(`${rdfs}label`), literal(`element label`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementLabel`), namedNode(`${dcterms}description`), literal(`This property is used to label the field of a composite data structure.`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement-optional`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement-optional`), namedNode(`${sh}datatype`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement-optional`), namedNode(`${sh}path`), namedNode(`${qudt}optional`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement-optional`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement-optional`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}optional`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}optional`), namedNode(`${rdfs}label`), literal(`optional`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement-quantityKind`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement-quantityKind`), namedNode(`${sh}path`), namedNode(`${qudt}hasQuantityKind`), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement-quantityKind`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}DataSetElement-quantityKind`), namedNode(`${sh}class`), namedNode(`${qudt}QuantityKind`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}label`), literal(`Quantity Kind`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}AbstractQuantityKind`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Verifiable`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[214], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[215], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[216], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[217], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[218], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[219], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[220], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[221], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[222], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[223], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[224], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[225], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[226], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[227], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[228], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[229], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[230], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[231], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[232], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[233], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[234], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[235], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[236], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${rdfs}comment`), literal(`A <b>Quantity Kind</b> is any observable property that can be  measured and quantified numerically. Familiar examples include physical properties such as length, mass, time, force, energy, power, electric charge, etc. Less familiar examples include currency, interest rate, price to earning ratio, and information capacity.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKind`), namedNode(`${qudt}informativeReference`), literal(`http://www.electropedia.org/iev/iev.nsf/display?openform&ievref=112-01-04`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}hasQuantityKind`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasQuantityKind`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasQuantityKind`), namedNode(`${rdfs}label`), literal(`has quantity kind`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasQuantityKind`), namedNode(`${rdfs}range`), namedNode(`${qudt}QuantityKind`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasQuantityKind`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}isQuantityKindOf`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-ansiSQLName`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-ansiSQLName`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-ansiSQLName`), namedNode(`${sh}path`), namedNode(`${qudt}ansiSQLName`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-ansiSQLName`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-basis`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-basis`), namedNode(`${sh}path`), namedNode(`${qudt}basis`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-basis`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-basis`), namedNode(`${sh}class`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}basis`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}basis`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}basis`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}basis`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}basis`), namedNode(`${rdfs}label`), literal(`basis`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-bounded`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-bounded`), namedNode(`${sh}path`), namedNode(`${qudt}bounded`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-bounded`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-bounded`), namedNode(`${sh}class`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}bounded`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}bounded`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}bounded`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}bounded`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}bounded`), namedNode(`${rdfs}label`), literal(`bounded`), namedNode(qudt)),
        quad(namedNode(`${qudt}bounded`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}bounded`), namedNode(`${dcterms}description`), literal(`A datatype is bounded if its value space has either a finite upper and lower bound. Either bound may be inclusive or exclusive. `), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-cName`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-cName`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-cName`), namedNode(`${sh}path`), namedNode(`${qudt}cName`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-cName`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-cardinality`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-cardinality`), namedNode(`${sh}path`), namedNode(`${qudt}cardinality`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-cardinality`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-cardinality`), namedNode(`${sh}class`), namedNode(`${qudt}CardinalityType`), namedNode(qudt)),
        quad(namedNode(`${qudt}cardinality`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}cardinality`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}cardinality`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}cardinality`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}cardinality`), namedNode(`${rdfs}label`), literal(`cardinality`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-description`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-description`), namedNode(`${sh}path`), namedNode(`${vaem}description`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-description`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-description`), namedNode(`${sh}deactivated`), literal(`true`, namedNode(`${xsd}boolean`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-id`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-id`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-id`), namedNode(`${sh}path`), namedNode(`${qudt}id`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-id`), namedNode(`${sh}deactivated`), literal(`true`, namedNode(`${xsd}boolean`)), namedNode(qudt)),
        quad(namedNode(`${qudt}id`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}id`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}id`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}id`), namedNode(`${rdfs}label`), literal(`id`), namedNode(qudt)),
        quad(namedNode(`${qudt}id`), namedNode(`${rdfs}label`), literal(`qudt id`), namedNode(qudt)),
        quad(namedNode(`${qudt}id`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}id`), namedNode(`${dcterms}description`), literal(`The "qudt:id" is an identifier string that uniquely identifies a QUDT concept.  The identifier is constructed using a prefix. For example, units are coded using the pattern: "UCCCENNNN", where "CCC" is a numeric code or a category and "NNNN" is a digit string for a member element of that category. For scaled units there may be an addition field that has the format "QNN" where "NN" is a digit string representing an exponent power, and "Q" is a qualifier that indicates with the code "P" that the power is a positive decimal exponent, or the code "N" for a negative decimal exponent, or the code "B" for binary positive exponents.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}id`), namedNode(`${rdfs}domain`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-javaName`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-javaName`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-javaName`), namedNode(`${sh}path`), namedNode(`${qudt}javaName`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-javaName`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-jsName`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-jsName`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-jsName`), namedNode(`${sh}path`), namedNode(`${qudt}jsName`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-jsName`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-matlabName`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-matlabName`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-matlabName`), namedNode(`${sh}path`), namedNode(`${qudt}matlabName`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-matlabName`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}matlabName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}matlabName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}matlabName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}matlabName`), namedNode(`${rdfs}label`), literal(`matlab name`), namedNode(qudt)),
        quad(namedNode(`${qudt}matlabName`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}matlabName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}id`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-microsoftSQLServerName`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-microsoftSQLServerName`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-microsoftSQLServerName`), namedNode(`${sh}path`), namedNode(`${qudt}microsoftSQLServerName`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-microsoftSQLServerName`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-mySQLName`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-mySQLName`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-mySQLName`), namedNode(`${sh}path`), namedNode(`${qudt}mySQLName`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-mySQLName`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-odbcName`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-odbcName`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-odbcName`), namedNode(`${sh}path`), namedNode(`${qudt}odbcName`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-odbcName`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-oleDBName`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-oleDBName`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-oleDBName`), namedNode(`${sh}path`), namedNode(`${qudt}oleDBName`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-oleDBName`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-oracleSQLName`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-oracleSQLName`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-oracleSQLName`), namedNode(`${sh}path`), namedNode(`${qudt}oracleSQLName`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-oracleSQLName`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-protocolBuffersName`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-protocolBuffersName`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-protocolBuffersName`), namedNode(`${sh}path`), namedNode(`${qudt}protocolBuffersName`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-protocolBuffersName`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-pythonName`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-pythonName`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-pythonName`), namedNode(`${sh}path`), namedNode(`${qudt}pythonName`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-pythonName`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-vbName`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-vbName`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-vbName`), namedNode(`${sh}path`), namedNode(`${qudt}vbName`), namedNode(qudt)),
        quad(namedNode(`${qudt}Datatype-vbName`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}vbName`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}vbName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}vbName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}vbName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}vbName`), namedNode(`${rdfs}label`), literal(`Visual Basic name`), namedNode(qudt)),
        quad(namedNode(`${qudt}vbName`), namedNode(`${rdfs}label`), literal(`Vusal Basic name`), namedNode(qudt)),
        quad(namedNode(`${qudt}vbName`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}vbName`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}id`), namedNode(qudt)),
        quad(blankNodes[134], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[134], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(blankNodes[134], namedNode(`${owl}onProperty`), namedNode(`${qudt}basis`), namedNode(qudt)),
        quad(blankNodes[135], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[135], namedNode(`${owl}onProperty`), namedNode(`${qudt}odbcName`), namedNode(qudt)),
        quad(blankNodes[135], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[136], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[136], namedNode(`${owl}onProperty`), namedNode(`${qudt}vbName`), namedNode(qudt)),
        quad(blankNodes[136], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[137], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[137], namedNode(`${owl}onProperty`), namedNode(`${qudt}jsName`), namedNode(qudt)),
        quad(blankNodes[137], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[138], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[138], namedNode(`${owl}onProperty`), namedNode(`${qudt}bounded`), namedNode(qudt)),
        quad(blankNodes[138], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[139], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[139], namedNode(`${owl}onProperty`), namedNode(`${qudt}id`), namedNode(qudt)),
        quad(blankNodes[139], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[140], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[140], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}CardinalityType`), namedNode(qudt)),
        quad(blankNodes[140], namedNode(`${owl}onProperty`), namedNode(`${qudt}cardinality`), namedNode(qudt)),
        quad(blankNodes[141], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[141], namedNode(`${owl}onProperty`), namedNode(`${qudt}oracleSQLName`), namedNode(qudt)),
        quad(blankNodes[141], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[142], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[142], namedNode(`${owl}onProperty`), namedNode(`${qudt}ansiSQLName`), namedNode(qudt)),
        quad(blankNodes[142], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[143], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[143], namedNode(`${owl}onProperty`), namedNode(`${qudt}microsoftSQLServerName`), namedNode(qudt)),
        quad(blankNodes[143], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[144], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[144], namedNode(`${owl}onProperty`), namedNode(`${qudt}cName`), namedNode(qudt)),
        quad(blankNodes[144], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[145], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[145], namedNode(`${owl}onProperty`), namedNode(`${qudt}matlabName`), namedNode(qudt)),
        quad(blankNodes[145], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[146], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[146], namedNode(`${owl}onProperty`), namedNode(`${qudt}orderedType`), namedNode(qudt)),
        quad(blankNodes[146], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[147], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[147], namedNode(`${owl}onProperty`), namedNode(`${qudt}basis`), namedNode(qudt)),
        quad(blankNodes[147], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[148], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[148], namedNode(`${owl}onProperty`), namedNode(`${qudt}protocolBuffersName`), namedNode(qudt)),
        quad(blankNodes[148], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[149], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[149], namedNode(`${owl}onProperty`), namedNode(`${qudt}cardinality`), namedNode(qudt)),
        quad(blankNodes[149], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[150], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[150], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}OrderedType`), namedNode(qudt)),
        quad(blankNodes[150], namedNode(`${owl}onProperty`), namedNode(`${qudt}orderedType`), namedNode(qudt)),
        quad(blankNodes[151], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[151], namedNode(`${owl}onProperty`), namedNode(`${qudt}oleDBName`), namedNode(qudt)),
        quad(blankNodes[151], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[152], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[152], namedNode(`${owl}onProperty`), namedNode(`${qudt}javaName`), namedNode(qudt)),
        quad(blankNodes[152], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[153], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[153], namedNode(`${owl}onProperty`), namedNode(`${qudt}pythonName`), namedNode(qudt)),
        quad(blankNodes[153], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[154], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[154], namedNode(`${owl}onProperty`), namedNode(`${qudt}mySQLName`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringType`), namedNode(`${rdfs}label`), literal(`Temporal Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringType`), namedNode(`${dcterms}description`), literal(`A class of data types for structures that represent temporal quantities. I.e. calendar dates, times, duration of time since a given epoch, etc.`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}StringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringType`), namedNode(`${rdfs}subClassOf`), blankNodes[237], namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringType`), namedNode(`${rdfs}subClassOf`), blankNodes[238], namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringType`), namedNode(`${sh}property`), namedNode(`${qudt}DateTimeStringType-encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringEncodingType-allowedPattern`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringEncodingType-allowedPattern`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringEncodingType-allowedPattern`), namedNode(`${sh}path`), namedNode(`${qudt}allowedPattern`), namedNode(qudt)),
        quad(namedNode(`${qudt}allowedPattern`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}allowedPattern`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}allowedPattern`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}allowedPattern`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}allowedPattern`), namedNode(`${rdfs}label`), literal(`allowed pattern`), namedNode(qudt)),
        quad(namedNode(`${qudt}allowedPattern`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}allowedPattern`), namedNode(`${dcterms}description`), literal(`This property relates a date string encoding (c.f. type:DateStringEncodingType) to one or more XML Schema compliant regular expressions that together determine the allowed lexical expressions that can be unambiguously parsed to determine a temporal quantity.`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringEncodingType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringEncodingType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringEncodingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringEncodingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringEncodingType`), namedNode(`${rdfs}label`), literal(`Date Time String Encoding Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringEncodingType`), namedNode(`${dcterms}description`), literal(`Date Time encodings are logical encodings for expressing date/time quantities as strings by applying unambiguous formatting and parsing rules.`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringEncodingType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}StringEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringEncodingType`), namedNode(`${rdfs}subClassOf`), blankNodes[239], namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringEncodingType`), namedNode(`${rdfs}subClassOf`), blankNodes[240], namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringEncodingType`), namedNode(`${sh}property`), namedNode(`${qudt}DateTimeStringEncodingType-allowedPattern`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringEncodingType`), namedNode(`${sh}property`), blankNodes[241], namedNode(qudt)),
        quad(namedNode(`${qudt}StringEncodingType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringEncodingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringEncodingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringEncodingType`), namedNode(`${rdfs}label`), literal(`String Encoding Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringEncodingType`), namedNode(`${dcterms}description`), literal(`A "Encoding" with the following instance(s): "UTF-16 String", "UTF-8 Encoding".`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringEncodingType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Encoding`), namedNode(qudt)),
        quad(blankNodes[239], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[239], namedNode(`${owl}onProperty`), namedNode(`${qudt}allowedPattern`), namedNode(qudt)),
        quad(blankNodes[239], namedNode(`${owl}minCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[240], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[240], namedNode(`${owl}onProperty`), namedNode(`${qudt}allowedPattern`), namedNode(qudt)),
        quad(blankNodes[240], namedNode(`${owl}minQualifiedCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[240], namedNode(`${owl}onDataRange`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[241], namedNode(`${sh}path`), namedNode(`${qudt}allowedPattern`), namedNode(qudt)),
        quad(blankNodes[241], namedNode(`${sh}qualifiedMinCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[241], namedNode(`${sh}qualifiedValueShape`), blankNodes[242], namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringType-encoding`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringType-encoding`), namedNode(`${sh}path`), namedNode(`${qudt}encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringType-encoding`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}DateTimeStringType-encoding`), namedNode(`${sh}class`), namedNode(`${qudt}DateTimeStringEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${rdfs}label`), literal(`String Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${dcterms}description`), literal(`A String Type is a data type that specifies the properties of data structures that hold strings. `), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Array`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ArrayType`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ScalarDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${rdfs}subClassOf`), blankNodes[243], namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${rdfs}subClassOf`), blankNodes[244], namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${rdfs}subClassOf`), blankNodes[245], namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${rdfs}subClassOf`), blankNodes[246], namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${rdfs}subClassOf`), blankNodes[247], namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${sh}property`), namedNode(`${qudt}StringType-dimensionality`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${sh}property`), namedNode(`${qudt}StringType-elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${sh}property`), namedNode(`${qudt}StringType-isByteString`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${sh}property`), namedNode(`${qudt}StringType-maxLength`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType`), namedNode(`${sh}property`), namedNode(`${qudt}StringType-typeMatrix`), namedNode(qudt)),
        quad(blankNodes[237], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[237], namedNode(`${owl}onProperty`), namedNode(`${qudt}encoding`), namedNode(qudt)),
        quad(blankNodes[237], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[238], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[238], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}DateTimeStringEncodingType`), namedNode(qudt)),
        quad(blankNodes[238], namedNode(`${owl}onProperty`), namedNode(`${qudt}encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}DecimalPrefix`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}DecimalPrefix`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}DecimalPrefix`), namedNode(`${rdfs}label`), literal(`Decimal Prefix`), namedNode(qudt)),
        quad(namedNode(`${qudt}DecimalPrefix`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Prefix`), namedNode(qudt)),
        quad(namedNode(`${qudt}DecimalPrefix`), namedNode(`${rdfs}comment`), literal(`A <em>Decimal Prefix</em> is a prefix for multiples of units that are powers of 10.`), namedNode(qudt)),
        quad(namedNode(`${qudt}DecimalScaledUnit`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Scaled unit'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}DerivedCoherentUnit`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Derived Unit'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}DerivedNonCoherentUnit`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Derived Unit'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}DerivedUnit`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}DerivedUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}DerivedUnit`), namedNode(`${rdfs}label`), literal(`Derived Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}DerivedUnit`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}DerivedUnit`), namedNode(`${rdfs}comment`), literal(`A DerivedUnit is a type specification for units that are derived from other units.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}DerivedUnit`), namedNode(`${qudt}dbpediaMatch`), literal(`http://dbpedia.org/resource/Category:SI_derived_units`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}dbpediaMatch`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dbpediaMatch`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}dbpediaMatch`), namedNode(`${rdfs}label`), literal(`dbpedia match`), namedNode(qudt)),
        quad(namedNode(`${qudt}dbpediaMatch`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}label`), literal(`Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${dcterms}description`), literal(`A unit of measure, or unit, is a particular quantity value that has been chosen as a scale for measuring other quantities the same kind (more generally of equivalent dimension). For example, the meter is a quantity of length that has been rigorously defined and standardized by the BIPM (International Board of Weights and Measures). Any measurement of the length can be expressed as a number multiplied by the unit meter. More formally, the value of a physical quantity Q with respect to a unit (U) is expressed as the scalar multiple of a real number (n) and U, as  \\(Q = nU\\).`, namedNode(`${qudt}LatexString`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Verifiable`), namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[248], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[249], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[250], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[251], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[252], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[253], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[254], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[255], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[256], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[257], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[258], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[259], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[260], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[261], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[262], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[263], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[264], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[265], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[266], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[267], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${rdfs}subClassOf`), blankNodes[268], namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${qudt}informativeReference`), literal(`http://dbpedia.org/resource/Category:Units_of_measure`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Unit`), namedNode(`${qudt}informativeReference`), literal(`http://www.allmeasures.com/Fullconversion.asp`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Dictionary`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Dictionary`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Dictionary`), namedNode(`${rdfs}label`), literal(`Dictionary Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Dictionary`), namedNode(`${dcterms}description`), literal(`A "Map".`), namedNode(qudt)),
        quad(namedNode(`${qudt}Dictionary`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Map`), namedNode(qudt)),
        quad(namedNode(`${qudt}DictionaryType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}DictionaryType`), namedNode(`${rdfs}label`), literal(`Dictionary Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}DictionaryType`), namedNode(`${dcterms}description`), literal(`A kind of "Map".`), namedNode(qudt)),
        quad(namedNode(`${qudt}DictionaryType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}MapType`), namedNode(qudt)),
        quad(namedNode(`${qudt}DimensionalDatatype`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}DimensionalDatatype`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}DimensionalDatatype`), namedNode(`${rdfs}label`), literal(`Dimensional Data Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}DimensionalDatatype`), namedNode(`${dcterms}description`), literal(`A dimensional data type is a data type that specifies a physical quantity or unit of measure. Information about the physical dimensions of the quantities and units is embedded in their types.`), namedNode(qudt)),
        quad(namedNode(`${qudt}DimensionalDatatype`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}StructuredDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Discipline`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Discipline`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Discipline`), namedNode(`${rdfs}label`), literal(`Discipline`), namedNode(qudt)),
        quad(namedNode(`${qudt}Discipline`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}DiscreteState`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}DiscreteState`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}DiscreteState`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}DoublePrecisionEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}FloatingPointEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}DoublePrecisionEncoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}DoublePrecisionEncoding`), namedNode(`${rdfs}label`), literal(`Single Precision Real Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}DoublePrecisionEncoding`), namedNode(`${qudt}bytes`), literal(`64`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}FloatingPointEncodingType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}FloatingPointEncodingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}FloatingPointEncodingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}FloatingPointEncodingType`), namedNode(`${rdfs}label`), literal(`Floating Point Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}FloatingPointEncodingType`), namedNode(`${dcterms}description`), literal(`A "Encoding" with the following instance(s): "Double Precision Encoding", "Single Precision Real Encoding".`), namedNode(qudt)),
        quad(namedNode(`${qudt}FloatingPointEncodingType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}FloatingPointEncodingType`), namedNode(`${owl}oneOf`), blankNodes[269], namedNode(qudt)),
        quad(namedNode(`${qudt}DoublePrecisionType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}DoublePrecisionType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}DoublePrecisionType`), namedNode(`${rdfs}label`), literal(`Double Precision Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}DoublePrecisionType`), namedNode(`${dcterms}description`), literal(`A double precision data type specifies how a numeric value, such as an integer or real number, is stored in memory that occupies two words in computer memory, where the byte length of a word depends on machine address size of the computer processor. For example, on 32-bit machine architectures, a word is four bytes, and so double precision data value on a 32-bit machine architecture occupies eight bytes of memory.`), namedNode(qudt)),
        quad(namedNode(`${qudt}DoublePrecisionType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}NumericType`), namedNode(qudt)),
        quad(namedNode(`${qudt}DoublePrecisionType`), namedNode(`${owl}disjointWith`), namedNode(`${qudt}SinglePrecisionType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SinglePrecisionType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SinglePrecisionType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}SinglePrecisionType`), namedNode(`${rdfs}label`), literal(`Single Precision Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}SinglePrecisionType`), namedNode(`${dcterms}description`), literal(`A single precision data type specifies how a numeric value, such as an integer or real number, is stored in memory that occupies one word in computer memory, where the byte length of a word depends on machine address size of the computer processor. For example, on 32-bit machine architectures, a word is four bytes, and so a single precision data value on a 32-bit machine architecture occupies four bytes of memory.`), namedNode(qudt)),
        quad(namedNode(`${qudt}SinglePrecisionType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}NumericType`), namedNode(qudt)),
        quad(namedNode(`${qudt}EarthCoordinateSystem-coordinateCenter`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}EarthCoordinateSystem-coordinateCenter`), namedNode(`${sh}hasValue`), namedNode(`${ns24}CC_EarthCentered`), namedNode(qudt)),
        quad(namedNode(`${qudt}EarthCoordinateSystem-coordinateCenter`), namedNode(`${sh}path`), namedNode(`${qudt}coordinateCenter`), namedNode(qudt)),
        quad(namedNode(`${qudt}EarthCoordinateSystem-coordinateCenter`), namedNode(`${sh}class`), namedNode(`${qudt}CoordinateCenterType`), namedNode(qudt)),
        quad(namedNode(`${qudt}EarthCoordinateSystem`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}EarthCoordinateSystem`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}EarthCoordinateSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}EarthCoordinateSystem`), namedNode(`${rdfs}label`), literal(`Earth Coordinate System Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}EarthCoordinateSystem`), namedNode(`${dcterms}description`), literal(`A"Trajectory Coordinate System" for all earth-centered coordinates, such as "Earth mean equator and prime meridian coordinate system", "Earth true equator and prime meridian of epoch coordinate system", "International celestial reference system", "International terrestrial reference system", "Sun centered international celestial reference system", "Vehicle centered international celestial reference system".`), namedNode(qudt)),
        quad(namedNode(`${qudt}EarthCoordinateSystem`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TrajectoryCoordinateSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}EarthCoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[270], namedNode(qudt)),
        quad(namedNode(`${qudt}EarthCoordinateSystem`), namedNode(`${sh}property`), namedNode(`${qudt}EarthCoordinateSystem-coordinateCenter`), namedNode(qudt)),
        quad(namedNode(`${qudt}TrajectoryCoordinateSystem`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TrajectoryCoordinateSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TrajectoryCoordinateSystem`), namedNode(`${rdfs}label`), literal(`Trajectory Coordinate System`), namedNode(qudt)),
        quad(namedNode(`${qudt}TrajectoryCoordinateSystem`), namedNode(`${dcterms}description`), literal(`A "Coordinate System".`), namedNode(qudt)),
        quad(namedNode(`${qudt}TrajectoryCoordinateSystem`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}AerospaceCoordinateSystem`), namedNode(qudt)),
        quad(blankNodes[270], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[270], namedNode(`${owl}onProperty`), namedNode(`${qudt}coordinateCenter`), namedNode(qudt)),
        quad(blankNodes[270], namedNode(`${owl}hasValue`), namedNode(`${ns24}CC_EarthCentered`), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding-bits`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding-bits`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding-bits`), namedNode(`${sh}path`), namedNode(`${qudt}bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding-bits`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding-bytes`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding-bytes`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding-bytes`), namedNode(`${sh}path`), namedNode(`${qudt}bytes`), namedNode(qudt)),
        quad(namedNode(`${qudt}Encoding-bytes`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[61], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[61], namedNode(`${owl}onProperty`), namedNode(`${qudt}bits`), namedNode(qudt)),
        quad(blankNodes[61], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[62], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[62], namedNode(`${owl}onProperty`), namedNode(`${qudt}bits`), namedNode(qudt)),
        quad(blankNodes[62], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[63], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[63], namedNode(`${owl}onProperty`), namedNode(`${qudt}bytes`), namedNode(qudt)),
        quad(blankNodes[63], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[64], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[64], namedNode(`${owl}onProperty`), namedNode(`${qudt}bytes`), namedNode(qudt)),
        quad(blankNodes[64], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[51], namedNode(`${rdf}first`), namedNode(`${ns24}LittleEndian`), namedNode(qudt)),
        quad(blankNodes[51], namedNode(`${rdf}rest`), blankNodes[271], namedNode(qudt)),
        quad(namedNode(`${qudt}EngineeringValueTupleMember-elementType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}EngineeringValueTupleMember-elementType`), namedNode(`${sh}path`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}EngineeringValueTupleMember-elementType`), namedNode(`${sh}class`), namedNode(`${qudt}RealSinglePrecisionType`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealSinglePrecisionType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealSinglePrecisionType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealSinglePrecisionType`), namedNode(`${rdfs}label`), literal(`Real Single Precision Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealSinglePrecisionType`), namedNode(`${dcterms}description`), literal(`A real single precision data type specifies how a real number, or an approximation of a real number is stored in memory that occupies one word in computer memory, where the byte length of a word depends on machine address size of the computer processor. For example, on 32-bit machine architectures, a word is four bytes. An example of a real single precisoin data type specification is the IEEE 754 standard for encoding binary or decimal floating point numbers in 4 bytes for storage on 32-bit machine architectures.`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealSinglePrecisionType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}SinglePrecisionType`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealSinglePrecisionType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}RealDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealSinglePrecisionType`), namedNode(`${owl}equivalentClass`), blankNodes[272], namedNode(qudt)),
        quad(namedNode(`${qudt}EngineeringValueTupleMember`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}EngineeringValueTupleMember`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}EngineeringValueTupleMember`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}EngineeringValueTupleMember`), namedNode(`${rdfs}label`), literal(`Engineering Value Tuple Member`), namedNode(qudt)),
        quad(namedNode(`${qudt}EngineeringValueTupleMember`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Tuple Member Type'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}EngineeringValueTupleMember`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TupleMember`), namedNode(qudt)),
        quad(namedNode(`${qudt}EngineeringValueTupleMember`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TupleMemberType`), namedNode(qudt)),
        quad(namedNode(`${qudt}EngineeringValueTupleMember`), namedNode(`${rdfs}subClassOf`), blankNodes[273], namedNode(qudt)),
        quad(namedNode(`${qudt}EngineeringValueTupleMember`), namedNode(`${sh}property`), namedNode(`${qudt}EngineeringValueTupleMember-elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}EngineeringValueTupleMember`), namedNode(`${owl}equivalentClass`), blankNodes[274], namedNode(qudt)),
        quad(namedNode(`${qudt}EngineeringValueTupleMember`), namedNode(`${owl}disjointWith`), namedNode(`${qudt}RawValueTupleMember`), namedNode(qudt)),
        quad(namedNode(`${qudt}EngineeringValueTupleMember`), namedNode(`${owl}disjointWith`), namedNode(`${qudt}RawValueTupleMemberType`), namedNode(qudt)),
        quad(blankNodes[273], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[273], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}RealSinglePrecisionType`), namedNode(qudt)),
        quad(blankNodes[273], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}RawValueTupleMember`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}RawValueTupleMember`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}RawValueTupleMember`), namedNode(`${rdfs}label`), literal(`Raw value tuple member`), namedNode(qudt)),
        quad(namedNode(`${qudt}RawValueTupleMember`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Tuple Member Type'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}RawValueTupleMember`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TupleMember`), namedNode(qudt)),
        quad(namedNode(`${qudt}RawValueTupleMember`), namedNode(`${rdfs}subClassOf`), blankNodes[275], namedNode(qudt)),
        quad(namedNode(`${qudt}RawValueTupleMember`), namedNode(`${owl}equivalentClass`), blankNodes[276], namedNode(qudt)),
        quad(namedNode(`${qudt}RawValueTupleMemberType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}RawValueTupleMemberType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}RawValueTupleMemberType`), namedNode(`${rdfs}label`), literal(`Raw value tuple member type`), namedNode(qudt)),
        quad(namedNode(`${qudt}RawValueTupleMemberType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TupleMemberType`), namedNode(qudt)),
        quad(namedNode(`${qudt}RawValueTupleMemberType`), namedNode(`${sh}property`), namedNode(`${qudt}RawValueTupleMember-elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}RawValueTupleMemberType`), namedNode(`${owl}equivalentClass`), blankNodes[277], namedNode(qudt)),
        quad(blankNodes[274], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(blankNodes[274], namedNode(`${owl}intersectionOf`), blankNodes[278], namedNode(qudt)),
        quad(blankNodes[17], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[17], namedNode(`${owl}onProperty`), namedNode(`${qudt}symbol`), namedNode(qudt)),
        quad(blankNodes[17], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(blankNodes[18], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[18], namedNode(`${owl}onProperty`), namedNode(`${dcterms}description`), namedNode(qudt)),
        quad(blankNodes[18], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(blankNodes[19], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[19], namedNode(`${owl}onProperty`), namedNode(`${qudt}abbreviation`), namedNode(qudt)),
        quad(blankNodes[19], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration-bits`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration-bits`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration-bits`), namedNode(`${sh}path`), namedNode(`${qudt}bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration-bits`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration-defaultValue`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration-defaultValue`), namedNode(`${sh}path`), namedNode(`${qudt}defaultValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration-defaultValue`), namedNode(`${sh}class`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration-encoding`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration-encoding`), namedNode(`${sh}path`), namedNode(`${qudt}encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration-encoding`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration-value`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration-value`), namedNode(`${sh}path`), namedNode(`${dtype}value`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration-value`), namedNode(`${sh}class`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}label`), literal(`Enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}label`), literal(`QUDT Enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}StructuredDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}subClassOf`), namedNode(`${dtype}Enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[279], namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[280], namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[281], namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[282], namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[283], namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[284], namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[285], namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[286], namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[287], namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${rdfs}comment`), literal(`<p>An enumeration is a set of literals from which a single value is selected. Each literal can have a tag as an integer within a standard encoding appropriate to the range of integer values. Consistency of enumeration types will allow them, and the enumerated values, to be referred to unambiguously either through symbolic name or encoding. Enumerated values are also controlled vocabularies and as such need to be standardized. Without this consistency enumeration literals can be stated differently and result in  data conflicts and misinterpretations.</p>

<p>The tags are a set of positive whole numbers, not necessarily contiguous and having no numerical significance, each corresponding to the associated literal identifier. An order attribute can also be given on the enumeration elements. An enumeration can itself be a member of an enumeration. This allows enumerations to be enumerated in a selection. Enumerations are also subclasses of <em>Scalar Datatype</em>. This allows them to be used as the reference of a datatype specification.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${sh}property`), namedNode(`${qudt}Enumeration-bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${sh}property`), namedNode(`${qudt}Enumeration-defaultValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${sh}property`), namedNode(`${qudt}Enumeration-encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${sh}property`), namedNode(`${qudt}Enumeration-value`), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${qudt}informativeReference`), literal(`http://en.wikipedia.org/wiki/Enumeration`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${qudt}informativeReference`), literal(`http://en.wikipedia.org/wiki/Enumerated_type`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Enumeration`), namedNode(`${qudt}dbpediaMatch`), literal(`http://dbpedia.org/resource/Enumeration`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(blankNodes[279], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[279], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(blankNodes[279], namedNode(`${owl}onProperty`), namedNode(`${dtype}value`), namedNode(qudt)),
        quad(blankNodes[280], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[280], namedNode(`${dcterms}description`), literal(`The number of bits allocated to the field for encoding any tags associated with elements.`), namedNode(qudt)),
        quad(blankNodes[280], namedNode(`${owl}onProperty`), namedNode(`${qudt}bits`), namedNode(qudt)),
        quad(blankNodes[280], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[281], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[281], namedNode(`${owl}onProperty`), namedNode(`${qudt}encoding`), namedNode(qudt)),
        quad(blankNodes[281], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[282], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[282], namedNode(`${owl}onProperty`), namedNode(`${qudt}default`), namedNode(qudt)),
        quad(blankNodes[282], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[283], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[283], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(blankNodes[283], namedNode(`${owl}onProperty`), namedNode(`${qudt}defaultValue`), namedNode(qudt)),
        quad(blankNodes[284], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[284], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(blankNodes[284], namedNode(`${owl}onProperty`), namedNode(`${qudt}default`), namedNode(qudt)),
        quad(blankNodes[285], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[285], namedNode(`${owl}onProperty`), namedNode(`${qudt}element`), namedNode(qudt)),
        quad(blankNodes[285], namedNode(`${owl}minCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[286], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[286], namedNode(`${owl}onProperty`), namedNode(`${qudt}abbreviation`), namedNode(qudt)),
        quad(blankNodes[286], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(blankNodes[287], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[287], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(blankNodes[287], namedNode(`${owl}onProperty`), namedNode(`${qudt}element`), namedNode(qudt)),
        quad(namedNode(`${qudt}EnumerationScale`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}EnumerationScale`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}EnumerationScale`), namedNode(`${rdfs}label`), literal(`Enumeration scale`), namedNode(qudt)),
        quad(namedNode(`${qudt}EnumerationScale`), namedNode(`${dcterms}description`), literal(`A sub-type of 'DTYPE Enumeration'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}EnumerationScale`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Scale'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}EnumerationScale`), namedNode(`${rdfs}subClassOf`), namedNode(`${dtype}Enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}EnumerationScale`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Scale`), namedNode(qudt)),
        quad(namedNode(`${qudt}Scale`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Scale`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Scale`), namedNode(`${rdfs}label`), literal(`Scale`), namedNode(qudt)),
        quad(namedNode(`${qudt}Scale`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}Scale`), namedNode(`${rdfs}subClassOf`), blankNodes[288], namedNode(qudt)),
        quad(namedNode(`${qudt}Scale`), namedNode(`${rdfs}subClassOf`), blankNodes[289], namedNode(qudt)),
        quad(namedNode(`${qudt}Scale`), namedNode(`${rdfs}subClassOf`), blankNodes[290], namedNode(qudt)),
        quad(namedNode(`${qudt}Scale`), namedNode(`${rdfs}subClassOf`), blankNodes[291], namedNode(qudt)),
        quad(namedNode(`${qudt}Scale`), namedNode(`${rdfs}subClassOf`), blankNodes[292], namedNode(qudt)),
        quad(namedNode(`${qudt}Scale`), namedNode(`${rdfs}comment`), literal(`Scales (also called "scales of measurement" or "levels of measurement")  are expressions that typically refer to the theory of scale types.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}FALSE`), namedNode(`${rdf}type`), namedNode(`${qudt}BooleanTypeEnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}FALSE`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}FALSE`), namedNode(`${rdfs}label`), literal(`False`), namedNode(qudt)),
        quad(namedNode(`${qudt}FALSE`), namedNode(`${dtype}literal`), literal(`false`), namedNode(qudt)),
        quad(namedNode(`${qudt}FLAG`), namedNode(`${rdf}type`), namedNode(`${qudt}BooleanType`), namedNode(qudt)),
        quad(namedNode(`${qudt}FLAG`), namedNode(`${rdfs}label`), literal(`FLAG`), namedNode(qudt)),
        quad(namedNode(`${qudt}FLAG`), namedNode(`${dtype}literal`), literal(`flag`), namedNode(qudt)),
        quad(namedNode(`${qudt}FLAG`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}FT_INERTIAL`), namedNode(`${rdf}type`), namedNode(`${qudt}FrameType`), namedNode(qudt)),
        quad(namedNode(`${qudt}FT_INERTIAL`), namedNode(`${rdfs}label`), literal(`Inertial Frame Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}FrameType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}FrameType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}FrameType`), namedNode(`${rdfs}label`), literal(`Frame Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}FrameType`), namedNode(`${dcterms}description`), literal(`This class contains elements which specify the intertial type of a coordinate frame as either inertial, rotating, or non-rotating.`), namedNode(qudt)),
        quad(namedNode(`${qudt}FrameType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}FrameType`), namedNode(`${owl}oneOf`), blankNodes[293], namedNode(qudt)),
        quad(namedNode(`${qudt}FT_NON-ROTATING`), namedNode(`${rdf}type`), namedNode(`${qudt}FrameType`), namedNode(qudt)),
        quad(namedNode(`${qudt}FT_NON-ROTATING`), namedNode(`${rdfs}label`), literal(`Non-rotating Frame Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}FT_ROTATING`), namedNode(`${rdf}type`), namedNode(`${qudt}FrameType`), namedNode(qudt)),
        quad(namedNode(`${qudt}FT_ROTATING`), namedNode(`${rdfs}label`), literal(`Rotating Frame Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-elementName`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-elementName`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-elementName`), namedNode(`${sh}path`), namedNode(`${qudt}elementName`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-elementName`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-elementName`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}elementName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementName`), namedNode(`${rdfs}label`), literal(`element name`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-elementType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-elementType`), namedNode(`${sh}path`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-elementType`), namedNode(`${sh}class`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-fieldLabel`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-fieldLabel`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-fieldLabel`), namedNode(`${sh}path`), namedNode(`${qudt}fieldLabel`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-fieldLabel`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-fieldLabel`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-fieldType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-fieldType`), namedNode(`${sh}path`), namedNode(`${qudt}fieldType`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-fieldType`), namedNode(`${sh}class`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-fieldType`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-optional`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-optional`), namedNode(`${sh}datatype`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-optional`), namedNode(`${sh}path`), namedNode(`${qudt}optional`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-optional`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType-optional`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType`), namedNode(`${rdfs}label`), literal(`Field Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Composite Data Type'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType`), namedNode(`${rdfs}subClassOf`), blankNodes[294], namedNode(qudt)),
        quad(namedNode(`${qudt}FieldType`), namedNode(`${rdfs}subClassOf`), blankNodes[295], namedNode(qudt)),
        quad(blankNodes[294], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[294], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(blankNodes[294], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[295], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[295], namedNode(`${owl}onProperty`), namedNode(`${qudt}fieldName`), namedNode(qudt)),
        quad(blankNodes[295], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Figure`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Figure`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Figure`), namedNode(`${rdfs}label`), literal(`Figure`), namedNode(qudt)),
        quad(namedNode(`${qudt}Figure`), namedNode(`${dcterms}description`), literal(`A sub-type of 'QUDT Concept'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Figure`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}Figure`), namedNode(`${rdfs}subClassOf`), blankNodes[296], namedNode(qudt)),
        quad(namedNode(`${qudt}Figure`), namedNode(`${rdfs}subClassOf`), blankNodes[297], namedNode(qudt)),
        quad(namedNode(`${qudt}Figure`), namedNode(`${rdfs}subClassOf`), blankNodes[298], namedNode(qudt)),
        quad(namedNode(`${qudt}Figure`), namedNode(`${rdfs}subClassOf`), blankNodes[299], namedNode(qudt)),
        quad(namedNode(`${qudt}Figure`), namedNode(`${rdfs}subClassOf`), blankNodes[300], namedNode(qudt)),
        quad(namedNode(`${qudt}Figure`), namedNode(`${rdfs}subClassOf`), blankNodes[301], namedNode(qudt)),
        quad(namedNode(`${qudt}Figure`), namedNode(`${rdfs}subClassOf`), blankNodes[302], namedNode(qudt)),
        quad(blankNodes[296], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[296], namedNode(`${owl}onProperty`), namedNode(`${qudt}landscape`), namedNode(qudt)),
        quad(blankNodes[296], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[297], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[297], namedNode(`${owl}onProperty`), namedNode(`${qudt}height`), namedNode(qudt)),
        quad(blankNodes[297], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[298], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[298], namedNode(`${owl}onProperty`), namedNode(`${qudt}figureCaption`), namedNode(qudt)),
        quad(blankNodes[298], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[299], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[299], namedNode(`${owl}onProperty`), namedNode(`${qudt}width`), namedNode(qudt)),
        quad(blankNodes[299], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[300], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[300], namedNode(`${owl}onProperty`), namedNode(`${qudt}figureLabel`), namedNode(qudt)),
        quad(blankNodes[300], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[301], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[301], namedNode(`${owl}onProperty`), namedNode(`${qudt}image`), namedNode(qudt)),
        quad(blankNodes[301], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[302], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[302], namedNode(`${owl}onProperty`), namedNode(`${qudt}imageLocation`), namedNode(qudt)),
        quad(blankNodes[302], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(namedNode(`${qudt}FileFormat`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}FileFormat`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}FileFormat`), namedNode(`${rdfs}label`), literal(`File format`), namedNode(qudt)),
        quad(namedNode(`${qudt}FileFormat`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Enumerated Value'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}FileFormat`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}FixedIntervalTimeSeriesArray`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}FixedIntervalTimeSeriesArray`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}FixedIntervalTimeSeriesArray`), namedNode(`${rdfs}label`), literal(`Fixed Interval Time Series Array Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}FixedIntervalTimeSeriesArray`), namedNode(`${dcterms}description`), literal(`A Fixed Interval Time Series Array Type is a data type that specifies the properties of arrays that hold time series data that has been sampled over uniformly spaced time intervals. A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals.`), namedNode(qudt)),
        quad(namedNode(`${qudt}FixedIntervalTimeSeriesArray`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TimeSeriesArray`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray`), namedNode(`${rdfs}label`), literal(`Time Series Array Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray`), namedNode(`${dcterms}description`), literal(`A Time Series Array Type is a data type that specifies the properties of arrays that hold time series data. A time series is a sequence of data points, measured at successive time intervals. The time intervals may be uniformly or non-uniformly spaced.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray`), namedNode(`${dcterms}description`), literal(`A Time Series Array Type is a data type that specifies the properties of arrays that hold time series data. A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Array`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray`), namedNode(`${rdfs}subClassOf`), blankNodes[303], namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray`), namedNode(`${rdfs}subClassOf`), blankNodes[304], namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray`), namedNode(`${rdfs}subClassOf`), blankNodes[305], namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray`), namedNode(`${rdfs}subClassOf`), blankNodes[306], namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray`), namedNode(`${rdfs}subClassOf`), blankNodes[307], namedNode(qudt)),
        quad(namedNode(`${qudt}FixedIntervalTimeSeriesArrayType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}FixedIntervalTimeSeriesArrayType`), namedNode(`${rdfs}label`), literal(`Fixed Interval Time Series Array Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}FixedIntervalTimeSeriesArrayType`), namedNode(`${dcterms}description`), literal(`A Fixed Interval Time Series Array Type is a data type that specifies the properties of arrays that hold time series data that has been sampled over uniformly spaced time intervals. A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals.`), namedNode(qudt)),
        quad(namedNode(`${qudt}FixedIntervalTimeSeriesArrayType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TimeSeriesArrayType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArrayType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArrayType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArrayType`), namedNode(`${rdfs}label`), literal(`Time Series Array Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArrayType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ArrayType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArrayType`), namedNode(`${sh}property`), namedNode(`${qudt}TimeSeriesArray-dimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArrayType`), namedNode(`${sh}property`), namedNode(`${qudt}TimeSeriesArray-incrementDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArrayType`), namedNode(`${sh}property`), namedNode(`${qudt}TimeSeriesArray-vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArrayType`), namedNode(`${rdf}comment`), literal(`A Time Series Array Type is a data type that specifies the properties of arrays that hold time series data. A time series is a sequence of data points, measured at successive time intervals. The time intervals may be uniformly or non-uniformly spaced.`), namedNode(qudt)),
        quad(blankNodes[269], namedNode(`${rdf}first`), namedNode(`${qudt}DoublePrecisionEncoding`), namedNode(qudt)),
        quad(blankNodes[269], namedNode(`${rdf}rest`), blankNodes[308], namedNode(qudt)),
        quad(blankNodes[293], namedNode(`${rdf}first`), namedNode(`${qudt}FT_ROTATING`), namedNode(qudt)),
        quad(blankNodes[293], namedNode(`${rdf}rest`), blankNodes[309], namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype-argType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype-argType`), namedNode(`${sh}path`), namedNode(`${qudt}argType`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype-argType`), namedNode(`${sh}class`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}argType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}argType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}argType`), namedNode(`${rdfs}label`), literal(`argType`), namedNode(qudt)),
        quad(namedNode(`${qudt}argType`), namedNode(`${dcterms}description`), literal(`This property relates a function data type with the type of one of its arguments.`), namedNode(qudt)),
        quad(namedNode(`${qudt}argType`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype-functionArity`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype-functionArity`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype-functionArity`), namedNode(`${sh}path`), namedNode(`${qudt}functionArity`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype-functionArity`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype-functionArity`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}functionArity`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}functionArity`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}functionArity`), namedNode(`${rdfs}label`), literal(`function arity`), namedNode(qudt)),
        quad(namedNode(`${qudt}functionArity`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}functionArity`), namedNode(`${dcterms}description`), literal(`This property is used to state the number of arguments for a function type.`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype-returnType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype-returnType`), namedNode(`${sh}path`), namedNode(`${qudt}returnType`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype-returnType`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype-returnType`), namedNode(`${sh}class`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype-returnType`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}returnType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}returnType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}returnType`), namedNode(`${rdfs}label`), literal(`return type`), namedNode(qudt)),
        quad(namedNode(`${qudt}returnType`), namedNode(`${dcterms}description`), literal(`This property is used to state the return type of a function type.`), namedNode(qudt)),
        quad(namedNode(`${qudt}returnType`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype`), namedNode(`${rdfs}label`), literal(`Function Data Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype`), namedNode(`${dcterms}description`), literal(`A function data type defines the input and output data type for a function or method. It includes at least the function name and the number of its parameters. In some programming languages, it may also specify the function's return type or the types of its arguments.`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype`), namedNode(`${dcterms}description`), literal(`A function data type defines the inputs and outputs for a function or method. It includes at least the function name and the number of its parameters. In some programming languages, it may also specify the function's return type or the types of its arguments. [Wikipedia]`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}StructuredDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[310], namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[311], namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[312], namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[313], namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}FunctionDatatype-argType`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}FunctionDatatype-functionArity`), namedNode(qudt)),
        quad(namedNode(`${qudt}FunctionDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}FunctionDatatype-returnType`), namedNode(qudt)),
        quad(blankNodes[310], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[310], namedNode(`${owl}onProperty`), namedNode(`${qudt}returnType`), namedNode(qudt)),
        quad(blankNodes[310], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[311], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[311], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(blankNodes[311], namedNode(`${owl}onProperty`), namedNode(`${qudt}returnType`), namedNode(qudt)),
        quad(blankNodes[312], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[312], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(blankNodes[312], namedNode(`${owl}onProperty`), namedNode(`${qudt}argType`), namedNode(qudt)),
        quad(blankNodes[313], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[313], namedNode(`${owl}onProperty`), namedNode(`${qudt}functionArity`), namedNode(qudt)),
        quad(blankNodes[313], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Graph`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Graph`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Graph`), namedNode(`${rdfs}label`), literal(`Graph Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Graph`), namedNode(`${dcterms}description`), literal(`A graph is a kind of abstract data type, that consists of a set of nodes (also called vertices) and a set of edges that establish relationships (connections) between the nodes. A Graph Type is a data type that defines the properties of data structures that represent graphs and their members (nodes and edges).`), namedNode(qudt)),
        quad(namedNode(`${qudt}Graph`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Collection`), namedNode(qudt)),
        quad(namedNode(`${qudt}GraphType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}GraphType`), namedNode(`${rdfs}label`), literal(`Graph Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}GraphType`), namedNode(`${dcterms}description`), literal(`A graph is a kind of abstract data type, that consists of a set of nodes (also called vertices) and a set of edges that establish relationships (connections) between the nodes. A Graph Type is a data type that defines the properties of data structures that represent graphs and their members (nodes and edges).`), namedNode(qudt)),
        quad(namedNode(`${qudt}GraphType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CollectionType`), namedNode(qudt)),
        quad(namedNode(`${qudt}GreekCharacter`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Symbol'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}GroundCoordinateSystem`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}GroundCoordinateSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}GroundCoordinateSystem`), namedNode(`${rdfs}label`), literal(`Ground coordinate system`), namedNode(qudt)),
        quad(namedNode(`${qudt}GroundCoordinateSystem`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Aerospace coordinate system'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}GroundCoordinateSystem`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}AerospaceCoordinateSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}HEAP`), namedNode(`${rdf}type`), namedNode(`${qudt}HeapType`), namedNode(qudt)),
        quad(namedNode(`${qudt}HEAP`), namedNode(`${rdfs}label`), literal(`HEAP`), namedNode(qudt)),
        quad(namedNode(`${qudt}HeapType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}HeapType`), namedNode(`${rdfs}label`), literal(`Heap Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}HeapType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}OrderedTreeType`), namedNode(qudt)),
        quad(namedNode(`${qudt}HeapType`), namedNode(`${prov}wasInfluencedBy`), namedNode(`${ns18}Heap_(data_structure)`), namedNode(qudt)),
        quad(namedNode(`${qudt}HeapType`), namedNode(`${rdfs}comment`), literal(`A heap is a specialized tree-based data structure that satisfies the condition: if B is a child node of A, then <em>key(A) &gt; key(B)</em>. This implies that an element with the greatest key is always in the root node, and so such a heap is sometimes called a max heap. Alternatively, if the comparison is reversed, the smallest element is always in the root node, which results in a min heap. The function or method that implements the key() operator is specified by the heap type.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}HEXBINARY`), namedNode(`${rdf}type`), namedNode(`${qudt}HexBinaryType`), namedNode(qudt)),
        quad(namedNode(`${qudt}HEXBINARY`), namedNode(`${rdfs}label`), literal(`HEXBINARY`), namedNode(qudt)),
        quad(namedNode(`${qudt}HEXBINARY`), namedNode(`${qudt}dimensionality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}HEXBINARY`), namedNode(`${dtype}literal`), literal(`hexbinary`), namedNode(qudt)),
        quad(namedNode(`${qudt}HEXBINARY`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${qudt}hexbinary`), namedNode(qudt)),
        quad(namedNode(`${qudt}hexbinary`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}hexbinary`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}hexbinary`), namedNode(`${rdfs}label`), literal(`hexbinary`), namedNode(qudt)),
        quad(namedNode(`${qudt}hexbinary`), namedNode(`${rdfs}subClassOf`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}hexbinary`), namedNode(`${owl}equivalentClass`), blankNodes[314], namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType`), namedNode(`${rdfs}label`), literal(`Hexidecimal Binary Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType`), namedNode(`${dcterms}description`), literal(`A string composed of hex characters.`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TextStringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType`), namedNode(`${rdfs}subClassOf`), blankNodes[315], namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType`), namedNode(`${rdfs}subClassOf`), blankNodes[316], namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType`), namedNode(`${rdfs}subClassOf`), blankNodes[317], namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType`), namedNode(`${rdfs}subClassOf`), blankNodes[318], namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType`), namedNode(`${sh}property`), namedNode(`${qudt}HexBinaryType-length`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType`), namedNode(`${sh}property`), namedNode(`${qudt}HexBinaryType-maxLength`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType`), namedNode(`${sh}property`), namedNode(`${qudt}HexBinaryType-minLength`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType`), namedNode(`${sh}property`), namedNode(`${qudt}HexBinaryType-pattern`), namedNode(qudt)),
        quad(namedNode(`${qudt}HashTable`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}HashTable`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}HashTable`), namedNode(`${rdfs}label`), literal(`Hash Table Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}HashTable`), namedNode(`${dcterms}description`), literal(`A hash table is a kind of map that utilizes a hash function to perform efficient lookup: given a key (e.g., a person's name), find the corresponding value (e.g., that person's telephone number). Hash tables support the efficient lookup, insertion and deletion of elements in constant time on average. A Hash Table Type is a data type that defines the types of a hash table's key-value pairs.`), namedNode(qudt)),
        quad(namedNode(`${qudt}HashTable`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Map`), namedNode(qudt)),
        quad(namedNode(`${qudt}HashTable`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TableType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TableType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TableType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TableType`), namedNode(`${rdfs}label`), literal(`Table Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TableType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ArrayType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TableType`), namedNode(`${rdfs}comment`), literal(`A Table Type is a data type that specifies the properties of table data structures. A table is both a mode of visual communication and a means of arranging data. The use of tables is pervasive throughout NASA The precise conventions and terminology for describing tables varies depending on the context. Moreover, tables differ significantly in variety, structure, flexibility, notation, representation and use.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TableType`), namedNode(`${sh}property`), namedNode(`${qudt}Table-byRow`), namedNode(qudt)),
        quad(namedNode(`${qudt}TableType`), namedNode(`${sh}property`), namedNode(`${qudt}Table-columns`), namedNode(qudt)),
        quad(namedNode(`${qudt}TableType`), namedNode(`${sh}property`), namedNode(`${qudt}Table-dimensionality`), namedNode(qudt)),
        quad(namedNode(`${qudt}TableType`), namedNode(`${sh}property`), namedNode(`${qudt}Table-rows`), namedNode(qudt)),
        quad(namedNode(`${qudt}HashTableType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}HashTableType`), namedNode(`${rdfs}label`), literal(`Hash Table Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}HashTableType`), namedNode(`${dcterms}description`), literal(`A hash table is a kind of map that utilizes a hash function to perform efficient lookup: given a key (e.g., a person's name), find the corresponding value (e.g., that person's telephone number). Hash tables support the efficient lookup, insertion and deletion of elements in constant time on average. A Hash Table Type is a data type that defines the types of a hash table's key-value pairs.`), namedNode(qudt)),
        quad(namedNode(`${qudt}HashTableType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}MapType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Heap`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Heap`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Heap`), namedNode(`${rdfs}label`), literal(`Heap Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Heap`), namedNode(`${dcterms}description`), literal(`<p class="lm-para">A heap is a specialized tree-based data structure that satisfies the condition: if B is a child node of A, then \\(key(A) \\ge key(B)\\). This implies that an element with the greatest key is always in the root node, and so such a heap is sometimes called a max heap. Alternatively, if the comparison is reversed, the smallest element is always in the root node, which results in a min heap. The function or method that implements the key() operator is specified by the heap type.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Heap`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}OrderedTree`), namedNode(qudt)),
        quad(namedNode(`${qudt}Heap`), namedNode(`${prov}wasInfluencedBy`), namedNode(`${ns18}Heap_(data_structure)`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedTree`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedTree`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedTree`), namedNode(`${rdfs}label`), literal(`Ordered Tree Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedTree`), namedNode(`${dcterms}description`), literal(`<p class="lm-para">An "Ordered Tree Type" is a data type that defines the properties of data structures that represent ordered trees. An ordered tree is a tree where the children of every node are ordered, that is, there is a first child, second child, third child, etc. Typically a type specification for an ordered tree will include the comparison operator (such as \\(\\lt\\) or \\(\\gt\\)) that is used to order the nodes.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedTree`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Tree`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedTree`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}OrderedCollection`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedTreeType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedTreeType`), namedNode(`${rdfs}label`), literal(`Ordered Tree Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedTreeType`), namedNode(`${dcterms}description`), literal(`An "Ordered Tree Type" is a data type that defines the properties of data structures that represent ordered trees. An ordered tree is a tree where the children of every node are ordered, that is, there is a first child, second child, third child, etc. Typically a type specification for an ordered tree will include the comparison operator (such as $\\lt$ or $\\gt$) that is used to order the nodes.`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedTreeType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TreeType`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedTreeType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}OrderedCollectionType`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType-length`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType-length`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType-length`), namedNode(`${sh}path`), namedNode(`${qudt}length`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType-length`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}length`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}length`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}length`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}length`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}length`), namedNode(`${rdfs}label`), literal(`length`), namedNode(qudt)),
        quad(namedNode(`${qudt}length`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}length`), namedNode(`${dcterms}description`), literal(`The length of a structure, for example the size of a vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}length`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}maxLength`), namedNode(qudt)),
        quad(namedNode(`${qudt}length`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}minLength`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType-maxLength`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType-maxLength`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType-maxLength`), namedNode(`${sh}path`), namedNode(`${qudt}maxLength`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType-maxLength`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}maxLength`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxLength`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxLength`), namedNode(`${rdfs}label`), literal(`max length`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxLength`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType-minLength`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType-minLength`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType-minLength`), namedNode(`${sh}path`), namedNode(`${qudt}minLength`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType-minLength`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}minLength`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}minLength`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}minLength`), namedNode(`${rdfs}label`), literal(`min length`), namedNode(qudt)),
        quad(namedNode(`${qudt}minLength`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType-pattern`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType-pattern`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType-pattern`), namedNode(`${sh}path`), namedNode(`${qudt}pattern`), namedNode(qudt)),
        quad(namedNode(`${qudt}HexBinaryType-pattern`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}pattern`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}pattern`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}pattern`), namedNode(`${rdfs}label`), literal(`pattern`), namedNode(qudt)),
        quad(namedNode(`${qudt}pattern`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}pattern`), namedNode(`${dcterms}description`), literal(`A pattern is a constraint on the value space of a datatype which is achieved by constraining the lexical space to literals which match a specific pattern. The value of pattern must be a regular expression.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TextStringType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TextStringType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TextStringType`), namedNode(`${rdfs}label`), literal(`Text String Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TextStringType`), namedNode(`${dcterms}description`), literal(`A text string. Encodings can be specified as subclass or in connection to character arrays in Structured Datatypes.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TextStringType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}StringType`), namedNode(qudt)),
        quad(blankNodes[315], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[315], namedNode(`${owl}onProperty`), namedNode(`${qudt}minLength`), namedNode(qudt)),
        quad(blankNodes[315], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[316], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[316], namedNode(`${owl}onProperty`), namedNode(`${qudt}pattern`), namedNode(qudt)),
        quad(blankNodes[316], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[317], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[317], namedNode(`${owl}onProperty`), namedNode(`${qudt}length`), namedNode(qudt)),
        quad(blankNodes[317], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[318], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[318], namedNode(`${owl}onProperty`), namedNode(`${qudt}maxLength`), namedNode(qudt)),
        quad(blankNodes[318], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}HighToLow`), namedNode(`${rdf}type`), namedNode(`${qudt}MemoryOrderType`), namedNode(qudt)),
        quad(namedNode(`${qudt}HighToLow`), namedNode(`${rdfs}label`), literal(`High To Low`), namedNode(qudt)),
        quad(namedNode(`${qudt}HighToLow`), namedNode(`${dtype}literal`), literal(`high`), namedNode(qudt)),
        quad(namedNode(`${qudt}MemoryOrderType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}MemoryOrderType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}MemoryOrderType`), namedNode(`${rdfs}label`), literal(`Memory order type`), namedNode(qudt)),
        quad(namedNode(`${qudt}MemoryOrderType`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Enumerated Value'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}MemoryOrderType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MemoryOrderType`), namedNode(`${owl}oneOf`), blankNodes[319], namedNode(qudt)),
        quad(namedNode(`${qudt}IEEE754_1985RealEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}FloatingPointEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}IEEE754_1985RealEncoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}IEEE754_1985RealEncoding`), namedNode(`${rdfs}label`), literal(`IEEE 754 1985 Real Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}IEEE754_1985RealEncoding`), namedNode(`${qudt}bytes`), literal(`32`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}IERS-TN-32-2004`), namedNode(`${rdf}type`), namedNode(`${qudt}Citation`), namedNode(qudt)),
        quad(namedNode(`${qudt}IERS-TN-32-2004`), namedNode(`${rdfs}label`), literal(`IERS-TN-32-2004`), namedNode(qudt)),
        quad(namedNode(`${qudt}IERS-TN-32-2004`), namedNode(`${dcterms}description`), literal(`IERS Conventions (2003), D. D. McCarthy and Gérard Petit (eds.), IERS Technical Note No. 32, 2004; http://www.iers.org/iers/publications/tn/tn32.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}IERS-TN-32-2004`), namedNode(`${skos}prefLabel`), literal(`IERS-TN-32-2004`), namedNode(qudt)),
        quad(namedNode(`${qudt}IERS-TN-32-2004`), namedNode(`${qudt}url`), literal(`http://www.iers.org/iers/publications/tn/tn32.`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}url`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}url`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}url`), namedNode(`${rdfs}label`), literal(`url`), namedNode(qudt)),
        quad(namedNode(`${qudt}url`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(qudt)),
        quad(namedNode(`${qudt}IMPERIAL-DimensionVector`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Quantity Dimension Vector'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}ISO-DimensionVector`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Quantity Dimension Vector'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}ISO8601-UTCDateTime-BasicFormat`), namedNode(`${rdf}type`), namedNode(`${qudt}DateTimeStringEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ISO8601-UTCDateTime-BasicFormat`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}ISO8601-UTCDateTime-BasicFormat`), namedNode(`${rdfs}label`), literal(`ISO 8601 UTC Date Time - Basic Format`), namedNode(qudt)),
        quad(namedNode(`${qudt}ISO8601-UTCDateTime-BasicFormat`), namedNode(`${qudt}allowedPattern`), literal(`[0-9]{4}[0-9]{2}[0-9]{2}T[0-9]{2}[0-9]{2}[0-9]{2}.[0-9]+Z`), namedNode(qudt)),
        quad(namedNode(`${qudt}ISO8601-UTCDateTime-BasicFormat`), namedNode(`${qudt}allowedPattern`), literal(`[0-9]{4}[0-9]{2}[0-9]{2}T[0-9]{2}[0-9]{2}[0-9]{2}Z`), namedNode(qudt)),
        quad(namedNode(`${qudt}IconicCue-image`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}IconicCue-image`), namedNode(`${sh}path`), namedNode(`${qudt}image`), namedNode(qudt)),
        quad(namedNode(`${qudt}IconicCue-image`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}IconicCue-image`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}image`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}image`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}image`), namedNode(`${rdfs}label`), literal(`image`), namedNode(qudt)),
        quad(namedNode(`${qudt}image`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(qudt)),
        quad(namedNode(`${qudt}IconicCue`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}IconicCue`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}IconicCue`), namedNode(`${rdfs}label`), literal(`Iconic enumeration literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}IconicCue`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ModalCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}IconicCue`), namedNode(`${sh}property`), namedNode(`${qudt}IconicCue-image`), namedNode(qudt)),
        quad(namedNode(`${qudt}IconicCue`), namedNode(`${owl}disjointWith`), namedNode(`${qudt}AuralCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}IconicCue`), namedNode(`${owl}disjointWith`), namedNode(`${qudt}VisualCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}IconicCue`), namedNode(`${owl}disjointWith`), namedNode(`${qudt}KinestheticCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}KinestheticCue`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}KinestheticCue`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}KinestheticCue`), namedNode(`${rdfs}label`), literal(`Kinesthetic Cue`), namedNode(qudt)),
        quad(namedNode(`${qudt}KinestheticCue`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ModalCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}KinestheticCue`), namedNode(`${sh}property`), namedNode(`${qudt}KinestheticCue-code`), namedNode(qudt)),
        quad(namedNode(`${qudt}IconicCueEnumeration-defaultValue`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}IconicCueEnumeration-defaultValue`), namedNode(`${sh}path`), namedNode(`${qudt}defaultValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}IconicCueEnumeration-defaultValue`), namedNode(`${sh}class`), namedNode(`${qudt}IconicCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}ImperialUnit`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Standards unit'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}InBook`), namedNode(`${rdf}type`), namedNode(`${qudt}PubEnumeratedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}InBook`), namedNode(`${rdfs}label`), literal(`Pub inbook type`), namedNode(qudt)),
        quad(namedNode(`${qudt}InBook`), namedNode(`${dtype}literal`), literal(`inbook`), namedNode(qudt)),
        quad(namedNode(`${qudt}InCollection`), namedNode(`${rdf}type`), namedNode(`${qudt}PubEnumeratedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}InCollection`), namedNode(`${rdfs}label`), literal(`Pub incollection type`), namedNode(qudt)),
        quad(namedNode(`${qudt}InCollection`), namedNode(`${dtype}literal`), literal(`incollection`), namedNode(qudt)),
        quad(namedNode(`${qudt}InProceedings`), namedNode(`${rdf}type`), namedNode(`${qudt}PubEnumeratedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}InProceedings`), namedNode(`${rdfs}label`), literal(`Pub inproceedings type`), namedNode(qudt)),
        quad(namedNode(`${qudt}InProceedings`), namedNode(`${dtype}literal`), literal(`inproceedings`), namedNode(qudt)),
        quad(namedNode(`${qudt}InertialCoordinateFrame-frameType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}InertialCoordinateFrame-frameType`), namedNode(`${sh}hasValue`), namedNode(`${ns24}FT_NON-ROTATING`), namedNode(qudt)),
        quad(namedNode(`${qudt}InertialCoordinateFrame-frameType`), namedNode(`${sh}path`), namedNode(`${qudt}frameType`), namedNode(qudt)),
        quad(namedNode(`${qudt}frameType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}frameType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}frameType`), namedNode(`${rdfs}label`), literal(`frame type`), namedNode(qudt)),
        quad(namedNode(`${qudt}InertialCoordinateFrame`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}InertialCoordinateFrame`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}InertialCoordinateFrame`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}InertialCoordinateFrame`), namedNode(`${rdfs}label`), literal(`Inertial Coordinate Frame`), namedNode(qudt)),
        quad(namedNode(`${qudt}InertialCoordinateFrame`), namedNode(`${dcterms}description`), literal(`A "Coordinate Frame".`), namedNode(qudt)),
        quad(namedNode(`${qudt}InertialCoordinateFrame`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}InertialReferenceFrame`), namedNode(qudt)),
        quad(namedNode(`${qudt}InertialCoordinateFrame`), namedNode(`${rdfs}subClassOf`), blankNodes[320], namedNode(qudt)),
        quad(namedNode(`${qudt}InertialCoordinateFrame`), namedNode(`${sh}property`), namedNode(`${qudt}InertialCoordinateFrame-frameType`), namedNode(qudt)),
        quad(namedNode(`${qudt}InertialCoordinateFrame`), namedNode(`${owl}equivalentClass`), namedNode(`${qudt}NonRotatingInertialFrame`), namedNode(qudt)),
        quad(namedNode(`${qudt}InertialReferenceFrame`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}InertialReferenceFrame`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}InertialReferenceFrame`), namedNode(`${rdfs}label`), literal(`Inertial reference frame`), namedNode(qudt)),
        quad(namedNode(`${qudt}InertialReferenceFrame`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Reference Frame'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}InertialReferenceFrame`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ReferenceFrame`), namedNode(qudt)),
        quad(blankNodes[320], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[320], namedNode(`${owl}onProperty`), namedNode(`${qudt}frameType`), namedNode(qudt)),
        quad(blankNodes[320], namedNode(`${owl}hasValue`), namedNode(`${ns24}FT_NON-ROTATING`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonRotatingInertialFrame`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonRotatingInertialFrame`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonRotatingInertialFrame`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonRotatingInertialFrame`), namedNode(`${rdfs}label`), literal(`Non Rotating Coordinate Frame`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonRotatingInertialFrame`), namedNode(`${dcterms}description`), literal(`The non-rotating (or "inertial") coordinate frames are defined by taking a "snapshot" of the orientation of a particular set of right-handed, orthogonal axes at a specific epoch or time. In other words, the non-rotating coordinate frame, however it is defined, is frozen or fixed at a specific time - for all time. These non-rotating coordinate frames are referred to as "of Epoch" coordinate frames.`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonRotatingInertialFrame`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}InertialReferenceFrame`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonRotatingInertialFrame`), namedNode(`${rdfs}subClassOf`), blankNodes[321], namedNode(qudt)),
        quad(namedNode(`${qudt}NonRotatingInertialFrame`), namedNode(`${sh}property`), namedNode(`${qudt}NonRotatingInertialFrame-frameType`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonRotatingInertialFrame`), namedNode(`${owl}equivalentClass`), namedNode(`${qudt}InertialCoordinateFrame`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerEncodingType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerEncodingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerEncodingType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerEncodingType`), namedNode(`${rdfs}label`), literal(`Integer Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerEncodingType`), namedNode(`${dcterms}description`), literal(`The encoding scheme for integer types`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerEncodingType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerEncodingType`), namedNode(`${owl}oneOf`), blankNodes[322], namedNode(qudt)),
        quad(blankNodes[322], namedNode(`${rdf}first`), namedNode(`${qudt}LongUnsignedIntegerEncoding`), namedNode(qudt)),
        quad(blankNodes[322], namedNode(`${rdf}rest`), blankNodes[323], namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerList-first`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerList-first`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerList-first`), namedNode(`${sh}path`), namedNode(`${rdf}first`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerList-rest`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerList-rest`), namedNode(`${sh}path`), namedNode(`${rdf}rest`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerList`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerList`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerList`), namedNode(`${rdfs}label`), literal(`Integer list`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerList`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}List`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerList`), namedNode(`${sh}property`), namedNode(`${qudt}IntegerList-first`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerList`), namedNode(`${sh}property`), namedNode(`${qudt}IntegerList-rest`), namedNode(qudt)),
        quad(namedNode(`${qudt}List`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}List`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}List`), namedNode(`${rdfs}label`), literal(`List`), namedNode(qudt)),
        quad(namedNode(`${qudt}List`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Collection Type'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}List`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Collection`), namedNode(qudt)),
        quad(namedNode(`${qudt}List`), namedNode(`${rdfs}subClassOf`), blankNodes[324], namedNode(qudt)),
        quad(namedNode(`${qudt}List`), namedNode(`${rdfs}subClassOf`), blankNodes[325], namedNode(qudt)),
        quad(blankNodes[52], namedNode(`${sh}datatype`), namedNode(`${xsd}nonNegativeInteger`), namedNode(qudt)),
        quad(blankNodes[53], namedNode(`${rdf}first`), blankNodes[326], namedNode(qudt)),
        quad(blankNodes[53], namedNode(`${rdf}rest`), blankNodes[327], namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerVector`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerVector`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerVector`), namedNode(`${rdfs}label`), literal(`Integer vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerVector`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerVector`), namedNode(`${sh}property`), namedNode(`${qudt}IntegerList-first`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntegerVector`), namedNode(`${sh}property`), namedNode(`${qudt}IntegerList-rest`), namedNode(qudt)),
        quad(namedNode(`${qudt}InterpolatedTable`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}InterpolatedTable`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}InterpolatedTable`), namedNode(`${rdfs}label`), literal(`Interpolated Table Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}InterpolatedTable`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Table Type'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}InterpolatedTable`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Table`), namedNode(qudt)),
        quad(namedNode(`${qudt}InterpolatedTable`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TableType`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntervalScale`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntervalScale`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntervalScale`), namedNode(`${rdfs}label`), literal(`Interval scale`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntervalScale`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Scale`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntervalScale`), namedNode(`${rdfs}comment`), literal(`<p>The interval type allows for the degree of difference between items, but not the ratio between them. Examples include temperature with the Celsius scale, which has two defined points (the freezing and boiling point of water at specific conditions) and then separated into 100 intervals, date when measured from an arbitrary epoch (such as AD), percentage such as a percentage return on a stock,[16] location in Cartesian coordinates, and direction measured in degrees from true or magnetic north. Ratios are not meaningful since 20 °C cannot be said to be "twice as hot" as 10 °C, nor can multiplication/division be carried out between any two dates directly. However, ratios of differences can be expressed; for example, one difference can be twice another. Interval type variables are sometimes also called "scaled variables", but the formal mathematical term is an affine space (in this case an affine line).</p>
<p>Characteristics: median, percentile &amp; Monotonic increasing (order (&lt;) &amp; totally ordered set</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}IntervalScale`), namedNode(`${rdfs}comment`), literal(`median, percentile & Monotonic increasing (order (<)) & totally ordered set`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}IntervalScale`), namedNode(`${rdfs}seeAlso`), namedNode(`${qudt}NominalScale`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntervalScale`), namedNode(`${rdfs}seeAlso`), namedNode(`${qudt}OrdinalScale`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntervalScale`), namedNode(`${rdfs}seeAlso`), namedNode(`${qudt}RatioScale`), namedNode(qudt)),
        quad(namedNode(`${qudt}IntervalScale`), namedNode(`${qudt}informativeReference`), literal(`https://en.wikipedia.org/wiki/Level_of_measurement`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}OrdinalScale`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrdinalScale`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrdinalScale`), namedNode(`${rdfs}label`), literal(`Ordinal scale`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrdinalScale`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Scale`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrdinalScale`), namedNode(`${rdfs}subClassOf`), blankNodes[328], namedNode(qudt)),
        quad(namedNode(`${qudt}OrdinalScale`), namedNode(`${rdfs}comment`), literal(`The ordinal type allows for rank order (1st, 2nd, 3rd, etc.) by which data can be sorted, but still does not allow for relative degree of difference between them. Examples include, on one hand, dichotomous data with dichotomous (or dichotomized) values such as 'sick' vs. 'healthy' when measuring health, 'guilty' vs. 'innocent' when making judgments in courts, 'wrong/false' vs. 'right/true' when measuring truth value, and, on the other hand, non-dichotomous data consisting of a spectrum of values, such as 'completely agree', 'mostly agree', 'mostly disagree', 'completely disagree' when measuring opinion.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}OrdinalScale`), namedNode(`${rdfs}seeAlso`), namedNode(`${qudt}NominalScale`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrdinalScale`), namedNode(`${rdfs}seeAlso`), namedNode(`${qudt}IntervalScale`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrdinalScale`), namedNode(`${rdfs}seeAlso`), namedNode(`${qudt}RatioScale`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrdinalScale`), namedNode(`${qudt}informativeReference`), literal(`https://en.wikipedia.org/wiki/Level_of_measurement`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}RatioScale`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}RatioScale`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}RatioScale`), namedNode(`${rdfs}label`), literal(`Ratio scale`), namedNode(qudt)),
        quad(namedNode(`${qudt}RatioScale`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Scale`), namedNode(qudt)),
        quad(namedNode(`${qudt}RatioScale`), namedNode(`${rdfs}comment`), literal(`The ratio type takes its name from the fact that measurement is the estimation of the ratio between a magnitude of a continuous quantity and a unit magnitude of the same kind (Michell, 1997, 1999). A ratio scale possesses a meaningful (unique and non-arbitrary) zero value. Most measurement in the physical sciences and engineering is done on ratio scales. Examples include mass, length, duration, plane angle, energy and electric charge. In contrast to interval scales, ratios are now meaningful because having a non-arbitrary zero point makes it meaningful to say, for example, that one object has "twice the length" of another (= is "twice as long"). Very informally, many ratio scales can be described as specifying "how much" of something (i.e. an amount or magnitude) or "how many" (a count). The Kelvin temperature scale is a ratio scale because it has a unique, non-arbitrary zero point called absolute zero.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}RatioScale`), namedNode(`${rdfs}seeAlso`), namedNode(`${qudt}NominalScale`), namedNode(qudt)),
        quad(namedNode(`${qudt}RatioScale`), namedNode(`${rdfs}seeAlso`), namedNode(`${qudt}IntervalScale`), namedNode(qudt)),
        quad(namedNode(`${qudt}RatioScale`), namedNode(`${rdfs}seeAlso`), namedNode(`${qudt}OrdinalScale`), namedNode(qudt)),
        quad(namedNode(`${qudt}RatioScale`), namedNode(`${qudt}informativeReference`), literal(`https://en.wikipedia.org/wiki/Level_of_measurement`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}KinestheticCue-code`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}KinestheticCue-code`), namedNode(`${sh}path`), namedNode(`${qudt}code`), namedNode(qudt)),
        quad(namedNode(`${qudt}KinestheticCue-code`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}KinestheticCue-code`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}code`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}code`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}code`), namedNode(`${rdfs}label`), literal(`code`), namedNode(qudt)),
        quad(namedNode(`${qudt}code`), namedNode(`${dcterms}description`), literal(`A code is a string that uniquely identifies a QUDT concept. The use of this property has been deprecated.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}code`), namedNode(`${owl}deprecated`), literal(`true`, namedNode(`${xsd}boolean`)), namedNode(qudt)),
        quad(namedNode(`${qudt}code`), namedNode(`${rdfs}domain`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}KinestheticCueEnumeration-defaultValue`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}KinestheticCueEnumeration-defaultValue`), namedNode(`${sh}path`), namedNode(`${qudt}defaultValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}KinestheticCueEnumeration-defaultValue`), namedNode(`${sh}class`), namedNode(`${qudt}KinestheticCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}LIST`), namedNode(`${rdf}type`), namedNode(`${qudt}List`), namedNode(qudt)),
        quad(namedNode(`${qudt}LIST`), namedNode(`${rdfs}label`), literal(`LIST`), namedNode(qudt)),
        quad(namedNode(`${qudt}LargeObject`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}LargeObject`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}LargeObject`), namedNode(`${rdfs}label`), literal(`Large object`), namedNode(qudt)),
        quad(namedNode(`${qudt}LargeObject`), namedNode(`${dcterms}description`), literal(`A 'LargeObject' datatype is used to store blocks of unstructured data (such as text, graphic images, video clips, and sound waveforms). They often are used to allow efficient, random, piece-wise access to the data.`), namedNode(qudt)),
        quad(namedNode(`${qudt}LargeObject`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}LargeObjectType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}LargeObjectType`), namedNode(`${rdfs}label`), literal(`Large object`), namedNode(qudt)),
        quad(namedNode(`${qudt}LargeObjectType`), namedNode(`${dcterms}description`), literal(`A 'LargeObject' datatype is used to store blocks of unstructured data (such as text, graphic images, video clips, and sound waveforms). They often are used to allow efficient, random, piece-wise access to the data.`), namedNode(qudt)),
        quad(namedNode(`${qudt}LargeObjectType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}LatexString`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}LatexString`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}LatexString`), namedNode(`${rdfs}label`), literal(`Latex String`), namedNode(qudt)),
        quad(namedNode(`${qudt}LatexString`), namedNode(`${rdfs}subClassOf`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}LatexString`), namedNode(`${rdfs}comment`), literal(`A type of string in which some characters may be wrapped with '\\(' and '\\) characters for LaTeX rendering.`), namedNode(qudt)),
        quad(namedNode(`${qudt}LimitType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}LimitType`), namedNode(`${rdfs}label`), literal(`Limit type`), namedNode(qudt)),
        quad(namedNode(`${qudt}LimitType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}List-first`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}List-first`), namedNode(`${sh}path`), namedNode(`${rdf}first`), namedNode(qudt)),
        quad(namedNode(`${qudt}List-first`), namedNode(`${sh}class`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}List-rest`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}List-rest`), namedNode(`${sh}path`), namedNode(`${rdf}rest`), namedNode(qudt)),
        quad(namedNode(`${qudt}List-rest`), namedNode(`${sh}class`), namedNode(`${qudt}List`), namedNode(qudt)),
        quad(blankNodes[324], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[324], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(blankNodes[324], namedNode(`${owl}onProperty`), namedNode(`${rdf}first`), namedNode(qudt)),
        quad(blankNodes[325], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[325], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}List`), namedNode(qudt)),
        quad(blankNodes[325], namedNode(`${owl}onProperty`), namedNode(`${rdf}rest`), namedNode(qudt)),
        quad(namedNode(`${qudt}ListType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ListType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ListType`), namedNode(`${rdfs}label`), literal(`List type`), namedNode(qudt)),
        quad(namedNode(`${qudt}ListType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CollectionType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ListType`), namedNode(`${sh}property`), namedNode(`${qudt}List-first`), namedNode(qudt)),
        quad(namedNode(`${qudt}ListType`), namedNode(`${sh}property`), namedNode(`${qudt}List-rest`), namedNode(qudt)),
        quad(namedNode(`${qudt}LittleEndian`), namedNode(`${rdf}type`), namedNode(`${qudt}EndianType`), namedNode(qudt)),
        quad(namedNode(`${qudt}LittleEndian`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}LittleEndian`), namedNode(`${rdfs}label`), literal(`Little Endian`), namedNode(qudt)),
        quad(namedNode(`${qudt}LittleEndian`), namedNode(`${dtype}literal`), literal(`little`), namedNode(qudt)),
        quad(namedNode(`${qudt}LocalCoordinateSystem`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}LocalCoordinateSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}LocalCoordinateSystem`), namedNode(`${rdfs}label`), literal(`Local Coordinate System Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}LocalCoordinateSystem`), namedNode(`${dcterms}description`), literal(`A "Trajectory Coordinate System" with the following instance(s): "Local vertical curvilinear coordinate system", "Local vertical local horizontal coordinate system", "Vehicle centered local vertical curvilinear coordinate system".`), namedNode(qudt)),
        quad(namedNode(`${qudt}LocalCoordinateSystem`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TrajectoryCoordinateSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}LogarithmicUnit`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}LogarithmicUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}LogarithmicUnit`), namedNode(`${rdfs}label`), literal(`Logarithmic Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}LogarithmicUnit`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}DimensionlessUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}LogarithmicUnit`), namedNode(`${rdfs}comment`), literal(`Logarithmic units are abstract mathematical units that can be used to express any quantities (physical or mathematical) that are defined on a logarithmic scale, that is, as being proportional to the value of a logarithm function. Examples of logarithmic units include common units of information and entropy, such as the bit, and the byte, as well as units of relative signal strength magnitude such as the decibel.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}LongIntegerType-octets`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}LongIntegerType-octets`), namedNode(`${sh}hasValue`), literal(`4`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}LongIntegerType-octets`), namedNode(`${sh}path`), namedNode(`${qudt}octets`), namedNode(qudt)),
        quad(namedNode(`${qudt}LongIntegerType-octets`), namedNode(`${sh}or`), namedNode(`${qudt}IntegerUnionList`), namedNode(qudt)),
        quad(namedNode(`${qudt}LongIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}LongIntegerType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}LongIntegerType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}LongIntegerType`), namedNode(`${rdfs}label`), literal(`Long Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}LongIntegerType`), namedNode(`${dcterms}description`), literal(`A Long Integer is an integer that can be represented in four octets (32 bits) of machine memory. Long integers may be signed or unsigned.`), namedNode(qudt)),
        quad(namedNode(`${qudt}LongIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}IntegerDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}LongIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[329], namedNode(qudt)),
        quad(namedNode(`${qudt}LongIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[330], namedNode(qudt)),
        quad(namedNode(`${qudt}LongIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}LongIntegerType-octets`), namedNode(qudt)),
        quad(blankNodes[329], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[329], namedNode(`${owl}onProperty`), namedNode(`${qudt}bits`), namedNode(qudt)),
        quad(blankNodes[329], namedNode(`${owl}hasValue`), literal(`32`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[330], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[330], namedNode(`${owl}onProperty`), namedNode(`${qudt}octets`), namedNode(qudt)),
        quad(blankNodes[330], namedNode(`${owl}hasValue`), literal(`4`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}LongUnsignedIntegerEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}IntegerEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}LongUnsignedIntegerEncoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}LongUnsignedIntegerEncoding`), namedNode(`${rdfs}label`), literal(`Long Unsigned Integer Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}LongUnsignedIntegerEncoding`), namedNode(`${qudt}bytes`), literal(`8`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}LowToHigh`), namedNode(`${rdf}type`), namedNode(`${qudt}MemoryOrderType`), namedNode(qudt)),
        quad(namedNode(`${qudt}LowToHigh`), namedNode(`${rdfs}label`), literal(`Low To High`), namedNode(qudt)),
        quad(namedNode(`${qudt}LowToHigh`), namedNode(`${dtype}literal`), literal(`low`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-coordinateCenter`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-coordinateCenter`), namedNode(`${sh}hasValue`), namedNode(`${ns24}CC_MoonCentered`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-coordinateCenter`), namedNode(`${sh}path`), namedNode(`${qudt}coordinateCenter`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-coordinateCenter`), namedNode(`${sh}class`), namedNode(`${qudt}CoordinateCenterType`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-realization`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-realization`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-realization`), namedNode(`${sh}path`), namedNode(`${qudt}realization`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-realization`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}realization`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}realization`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}realization`), namedNode(`${rdfs}label`), literal(`realization`), namedNode(qudt)),
        quad(namedNode(`${qudt}realization`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-xAxisDefinition`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-xAxisDefinition`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-xAxisDefinition`), namedNode(`${sh}path`), namedNode(`${qudt}xAxisDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-xAxisDefinition`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}xAxisDefinition`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}xAxisDefinition`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}xAxisDefinition`), namedNode(`${rdfs}label`), literal(`X-Axis Definition`), namedNode(qudt)),
        quad(namedNode(`${qudt}xAxisDefinition`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}xAxisDefinition`), namedNode(`${dcterms}description`), literal(`The definition of the X-Axis could be an intersection, cross-product or other function of a  meridian or orbit. It could also mention any aspects of rotation, for example, the rotation equator of the Earth,  Sun, Moon or other celestial body. An epoch might also be given.`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-yAxisDefinition`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-yAxisDefinition`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-yAxisDefinition`), namedNode(`${sh}path`), namedNode(`${qudt}yAxisDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-yAxisDefinition`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}yAxisDefinition`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}yAxisDefinition`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}yAxisDefinition`), namedNode(`${rdfs}label`), literal(`Y-Axis definition`), namedNode(qudt)),
        quad(namedNode(`${qudt}yAxisDefinition`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}yAxisDefinition`), namedNode(`${dcterms}description`), literal(`The definition of the Y-Axis could be an intersection, cross-product or other function of a meridian or orbit. It could also mention any aspects of rotation, for example, the rotation equator of the Earth,  Sun, Moon or other celestial body. An epoch might also be given.`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-zAxisDefinition`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-zAxisDefinition`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-zAxisDefinition`), namedNode(`${sh}path`), namedNode(`${qudt}zAxisDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem-zAxisDefinition`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}zAxisDefinition`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}zAxisDefinition`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}zAxisDefinition`), namedNode(`${rdfs}label`), literal(`Z-Axis definition`), namedNode(qudt)),
        quad(namedNode(`${qudt}zAxisDefinition`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}zAxisDefinition`), namedNode(`${dcterms}description`), literal(`The definition of the Y-Axis could be an intersection, croos-product or other function of a meridian or orbit. It could also mention any aspects of rotation, for example, the rotation equator of the Earth,  Sun, Moon or other celestial body. An epoch might also be given.`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem`), namedNode(`${rdfs}label`), literal(`Lunar Coordinate System`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem`), namedNode(`${dcterms}description`), literal(`Two slightly different coordinate frames are commonly used to define the orientation of the axes of a lunar body-fixed coordinate system: a mean Earth/rotation frame and a principal axis coordinate frame. The mean Earth/rotation frame (sometimes called the "Mean Earth/polar axis" frame) is a lunar body-fixed coordinate frame with the X-axis aligned with the mean direction from the Moon to the Earth and the Z-axis aligned with the mean axis of rotation of the Moon. The principal axis frame is a lunar body-fixed coordinate frame aligned with the principal axes of the Moon. Due to the fact that the Moon is synchronously rotating but is not exactly symmetric, the principal axes and the mean Earth/rotation axes of the Moon do not coincide.`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TrajectoryCoordinateSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[331], namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[332], namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[333], namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[334], namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[335], namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem`), namedNode(`${sh}property`), namedNode(`${qudt}LunarCoordinateSystem-coordinateCenter`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem`), namedNode(`${sh}property`), namedNode(`${qudt}LunarCoordinateSystem-realization`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem`), namedNode(`${sh}property`), namedNode(`${qudt}LunarCoordinateSystem-xAxisDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem`), namedNode(`${sh}property`), namedNode(`${qudt}LunarCoordinateSystem-yAxisDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}LunarCoordinateSystem`), namedNode(`${sh}property`), namedNode(`${qudt}LunarCoordinateSystem-zAxisDefinition`), namedNode(qudt)),
        quad(blankNodes[331], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[331], namedNode(`${owl}onProperty`), namedNode(`${qudt}xAxisDefinition`), namedNode(qudt)),
        quad(blankNodes[331], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[332], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[332], namedNode(`${owl}onProperty`), namedNode(`${qudt}zAxisDefinition`), namedNode(qudt)),
        quad(blankNodes[332], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[333], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[333], namedNode(`${owl}onProperty`), namedNode(`${qudt}yAxisDefinition`), namedNode(qudt)),
        quad(blankNodes[333], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[334], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[334], namedNode(`${owl}onProperty`), namedNode(`${qudt}realization`), namedNode(qudt)),
        quad(blankNodes[334], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[335], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[335], namedNode(`${owl}onProperty`), namedNode(`${qudt}coordinateCenter`), namedNode(qudt)),
        quad(blankNodes[335], namedNode(`${owl}hasValue`), namedNode(`${ns24}CC_MoonCentered`), namedNode(qudt)),
        quad(namedNode(`${qudt}MASS-PROPERTIES-ARRAY`), namedNode(`${rdf}type`), namedNode(`${qudt}MassPropertiesArrayType`), namedNode(qudt)),
        quad(namedNode(`${qudt}MASS-PROPERTIES-ARRAY`), namedNode(`${rdfs}label`), literal(`MASS PROPERTIES ARRAY`), namedNode(qudt)),
        quad(namedNode(`${qudt}MassPropertiesArrayType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}MassPropertiesArrayType`), namedNode(`${rdfs}label`), literal(`Mass Properties Array Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}MassPropertiesArrayType`), namedNode(`${dcterms}description`), literal(`The Mass Properties of an object are its: Center of Gravity, Mass, Moment of Inertia, and Product of Inertia. A mass properties array is an array whose elements contain these measured quantities for some object. A mass properties array data type provides the type specification for a class of arrays in which the data types of the elements are constrained to be one of these four properties.`), namedNode(qudt)),
        quad(namedNode(`${qudt}MassPropertiesArrayType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ArrayType`), namedNode(qudt)),
        quad(namedNode(`${qudt}MATRIX-TYPE_2x4`), namedNode(`${rdf}type`), namedNode(`${qudt}MatrixType`), namedNode(qudt)),
        quad(namedNode(`${qudt}MATRIX-TYPE_2x4`), namedNode(`${rdfs}label`), literal(`Matrix type  2x4`), namedNode(qudt)),
        quad(namedNode(`${qudt}MATRIX-TYPE_2x4`), namedNode(`${qudt}byRow`), literal(`true`, namedNode(`${xsd}boolean`)), namedNode(qudt)),
        quad(namedNode(`${qudt}MATRIX-TYPE_2x4`), namedNode(`${qudt}dimensionVector`), namedNode(`${qudt}DV_2x4`), namedNode(qudt)),
        quad(namedNode(`${qudt}MATRIX-TYPE_2x4`), namedNode(`${qudt}dimensionality`), literal(`2`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}MATRIX-TYPE_2x4`), namedNode(`${qudt}columns`), literal(`4`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}MATRIX-TYPE_2x4`), namedNode(`${qudt}rows`), literal(`2`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}MATRIX-TYPE_2x4`), namedNode(`${qudt}rows`), literal(`4`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}columns`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}columns`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}columns`), namedNode(`${rdfs}label`), literal(`columns`), namedNode(qudt)),
        quad(namedNode(`${qudt}columns`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}rows`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}rows`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}rows`), namedNode(`${rdfs}label`), literal(`rows`), namedNode(qudt)),
        quad(namedNode(`${qudt}rows`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}MatrixType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}MatrixType`), namedNode(`${rdfs}label`), literal(`Matrix Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}MatrixType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}MultiDimensionalArrayType`), namedNode(qudt)),
        quad(namedNode(`${qudt}MATRIX`), namedNode(`${rdf}type`), namedNode(`${qudt}MatrixType`), namedNode(qudt)),
        quad(namedNode(`${qudt}MATRIX`), namedNode(`${rdfs}label`), literal(`MATRIX`), namedNode(qudt)),
        quad(namedNode(`${qudt}MKS-Unit`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Standards unit'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}MULTi-DIMENSIONAL-ARRAY`), namedNode(`${rdf}type`), namedNode(`${qudt}MultiDimensionalArrayType`), namedNode(qudt)),
        quad(namedNode(`${qudt}MULTi-DIMENSIONAL-ARRAY`), namedNode(`${rdfs}label`), literal(`MULTI-DIMENSIONAL ARRAY`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalArrayType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalArrayType`), namedNode(`${rdfs}label`), literal(`Multi Dimensional Array Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalArrayType`), namedNode(`${dcterms}description`), literal(`Ordinary or one-dimensional arrays are indexed by a single integer. For a multi-dimensional array, the index into the array uses an ordered list of integers, such as in a[3,1,5]. The length of the list of integers used to index into the multi-dimensional array is always the same and is referred to as the array's dimensionality. The bounds on each of these are called the array's dimensions.`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalArrayType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ArrayType`), namedNode(qudt)),
        quad(namedNode(`${qudt}MajorMinorType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}MajorMinorType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}MajorMinorType`), namedNode(`${rdfs}label`), literal(`Major minor type`), namedNode(qudt)),
        quad(namedNode(`${qudt}MajorMinorType`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Enumerated Value'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}MajorMinorType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MajorMinorType`), namedNode(`${owl}oneOf`), blankNodes[336], namedNode(qudt)),
        quad(blankNodes[336], namedNode(`${rdf}first`), namedNode(`${ns24}Minor`), namedNode(qudt)),
        quad(blankNodes[336], namedNode(`${rdf}rest`), blankNodes[337], namedNode(qudt)),
        quad(namedNode(`${qudt}Manual`), namedNode(`${rdf}type`), namedNode(`${qudt}PubEnumeratedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Manual`), namedNode(`${rdfs}label`), literal(`Pub manual type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Manual`), namedNode(`${dtype}literal`), literal(`manual`), namedNode(qudt)),
        quad(namedNode(`${qudt}MarsCoordinateSystem-coordinateCenter`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}MarsCoordinateSystem-coordinateCenter`), namedNode(`${sh}hasValue`), namedNode(`${ns24}CC_MarsCentered`), namedNode(qudt)),
        quad(namedNode(`${qudt}MarsCoordinateSystem-coordinateCenter`), namedNode(`${sh}path`), namedNode(`${qudt}coordinateCenter`), namedNode(qudt)),
        quad(namedNode(`${qudt}MarsCoordinateSystem-coordinateCenter`), namedNode(`${sh}class`), namedNode(`${qudt}CoordinateCenterType`), namedNode(qudt)),
        quad(namedNode(`${qudt}MarsCoordinateSystem`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}MarsCoordinateSystem`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}MarsCoordinateSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}MarsCoordinateSystem`), namedNode(`${rdfs}label`), literal(`Mars Coordinate System Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}MarsCoordinateSystem`), namedNode(`${dcterms}description`), literal(`A "Trajectory Coordinate System" with the following instance(s): "Mars mean equator and IAU-Node of epoch", "Mars mean equator and prime meridian body-fixed".`), namedNode(qudt)),
        quad(namedNode(`${qudt}MarsCoordinateSystem`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TrajectoryCoordinateSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}MarsCoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[338], namedNode(qudt)),
        quad(namedNode(`${qudt}MarsCoordinateSystem`), namedNode(`${sh}property`), namedNode(`${qudt}MarsCoordinateSystem-coordinateCenter`), namedNode(qudt)),
        quad(blankNodes[338], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[338], namedNode(`${owl}onProperty`), namedNode(`${qudt}coordinateCenter`), namedNode(qudt)),
        quad(blankNodes[338], namedNode(`${owl}hasValue`), namedNode(`${ns24}CC_MarsCentered`), namedNode(qudt)),
        quad(namedNode(`${qudt}MassPropertiesArray`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}MassPropertiesArray`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}MassPropertiesArray`), namedNode(`${rdfs}label`), literal(`Mass Properties Array Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}MassPropertiesArray`), namedNode(`${dcterms}description`), literal(`The Mass Properties of an object are its: Center of Gravity, Mass, Moment of Inertia, and Product of Inertia. A mass properties array is an array whose elements contain these measured quantities for some object. A mass properties array data type provides the type specification for a class of arrays in which the data types of the elements are constrained to be one of these four properties.`), namedNode(qudt)),
        quad(namedNode(`${qudt}MassPropertiesArray`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Array`), namedNode(qudt)),
        quad(namedNode(`${qudt}MathsFunctionType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}MathsFunctionType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}MathsFunctionType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}MathsFunctionType`), namedNode(`${rdfs}label`), literal(`Maths Function Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}MathsFunctionType`), namedNode(`${dcterms}description`), literal(`A sub-type of 'QUDT Concept'. Detailed description to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}MathsFunctionType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}Matrix`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Matrix`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Matrix`), namedNode(`${rdfs}label`), literal(`Matrix Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Matrix`), namedNode(`${dcterms}description`), literal(`A Matrix Type is a data type that specifies the properties of data structures that hold matricies.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Matrix`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}MultiDimensionalArray`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalArray`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalArray`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalArray`), namedNode(`${rdfs}label`), literal(`Multi Dimensional Array Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalArray`), namedNode(`${dcterms}description`), literal(`Ordinary or one-dimensional arrays are indexed by a single integer. For a multi-dimensional array, the index into the array uses an ordered list of integers, such as in a[3,1,5]. The length of the list of integers used to index into the multi-dimensional array is always the same and is referred to as the array's dimensionality. The bounds on each of these are called the array's dimensions.`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalArray`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Array`), namedNode(qudt)),
        quad(blankNodes[319], namedNode(`${rdf}first`), namedNode(`${ns24}HighToLow`), namedNode(qudt)),
        quad(blankNodes[319], namedNode(`${rdf}rest`), blankNodes[339], namedNode(qudt)),
        quad(namedNode(`${qudt}Misc`), namedNode(`${rdf}type`), namedNode(`${qudt}PubEnumeratedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Misc`), namedNode(`${rdfs}label`), literal(`Pub misc type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Misc`), namedNode(`${dtype}literal`), literal(`misc`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalCue-duration`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalCue-duration`), namedNode(`${sh}path`), namedNode(`${qudt}duration`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalCue-duration`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalEnumeration-defaultValue`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalEnumeration-defaultValue`), namedNode(`${sh}path`), namedNode(`${qudt}defaultValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalEnumeration-defaultValue`), namedNode(`${sh}class`), namedNode(`${qudt}ModalCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalEnumeration`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalEnumeration`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalEnumeration`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalEnumeration`), namedNode(`${rdfs}label`), literal(`Modal Enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalEnumeration`), namedNode(`${dcterms}description`), literal(`A sub-type of 'QUDT Enumeration'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalEnumeration`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}ModalEnumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[340], namedNode(qudt)),
        quad(namedNode(`${qudt}ModalEnumeration`), namedNode(`${sh}property`), namedNode(`${qudt}ModalEnumeration-defaultValue`), namedNode(qudt)),
        quad(blankNodes[340], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[340], namedNode(`${owl}allValuesFrom`), namedNode(`${ns26}ModalCue`), namedNode(qudt)),
        quad(blankNodes[340], namedNode(`${owl}onProperty`), namedNode(`${qudt}defaultValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalDataFormat-descriptor`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalDataFormat-descriptor`), namedNode(`${sh}path`), namedNode(`${qudt}descriptor`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalDataFormat-descriptor`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalDataFormat-descriptor`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalDataFormat`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalDataFormat`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalDataFormat`), namedNode(`${rdfs}label`), literal(`Multi dimensional data format`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalDataFormat`), namedNode(`${dcterms}description`), literal(`Data formats for storing and manipulating scalar and multidimensional data in a platform and discipline independent manner, for example HDF, CDF and netCDF.`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalDataFormat`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalDataFormat`), namedNode(`${rdfs}subClassOf`), blankNodes[341], namedNode(qudt)),
        quad(blankNodes[341], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[341], namedNode(`${owl}onProperty`), namedNode(`${ns26}descriptor`), namedNode(qudt)),
        quad(blankNodes[341], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalDataFormatType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalDataFormatType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalDataFormatType`), namedNode(`${rdfs}label`), literal(`Multi Dimensional Data Format Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalDataFormatType`), namedNode(`${dcterms}description`), literal(`Data formats for storing and manipulating scalar and multidimensional data in a platform and discipline independent manner, for example HDF, CDF and netCDF.`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalDataFormatType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiDimensionalDataFormatType`), namedNode(`${sh}property`), namedNode(`${qudt}MultiDimensionalDataFormat-descriptor`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration-auralCueEnumeration`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration-auralCueEnumeration`), namedNode(`${sh}path`), namedNode(`${qudt}auralCueEnumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration-auralCueEnumeration`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}auralCueEnumeration`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}auralCueEnumeration`), namedNode(`${rdfs}label`), literal(`aural cue enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}auralCueEnumeration`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}modalCueEnumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration-iconicCueEnumeration`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration-iconicCueEnumeration`), namedNode(`${sh}path`), namedNode(`${qudt}iconicCueEnumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration-iconicCueEnumeration`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}iconicCueEnumeration`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}iconicCueEnumeration`), namedNode(`${rdfs}label`), literal(`iconic cue enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}iconicCueEnumeration`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}modalCueEnumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration-kinestheticCueEnumeration`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration-kinestheticCueEnumeration`), namedNode(`${sh}path`), namedNode(`${qudt}kinestheticCueEnumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration-kinestheticCueEnumeration`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}kinestheticCueEnumeration`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}kinestheticCueEnumeration`), namedNode(`${rdfs}label`), literal(`kinesthetic cue enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}kinestheticCueEnumeration`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}modalCueEnumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration-modalCueEnumeration`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration-modalCueEnumeration`), namedNode(`${sh}path`), namedNode(`${qudt}modalCueEnumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration-modalCueEnumeration`), namedNode(`${sh}class`), namedNode(`${qudt}ModalEnumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}modalCueEnumeration`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}modalCueEnumeration`), namedNode(`${rdfs}label`), literal(`modal cue enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}modalCueEnumeration`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration-visualCueEnumeration`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration-visualCueEnumeration`), namedNode(`${sh}path`), namedNode(`${qudt}visualCueEnumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration-visualCueEnumeration`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}visualCueEnumeration`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}visualCueEnumeration`), namedNode(`${rdfs}label`), literal(`visual cue enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}visualCueEnumeration`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}modalCueEnumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration`), namedNode(`${rdfs}label`), literal(`Multi modal enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration`), namedNode(`${dcterms}description`), literal(`A sub-type of 'QUDT Enumeration'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[342], namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[343], namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[344], namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[345], namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[346], namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration`), namedNode(`${sh}property`), namedNode(`${qudt}MultiModalEnumeration-auralCueEnumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration`), namedNode(`${sh}property`), namedNode(`${qudt}MultiModalEnumeration-iconicCueEnumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration`), namedNode(`${sh}property`), namedNode(`${qudt}MultiModalEnumeration-kinestheticCueEnumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration`), namedNode(`${sh}property`), namedNode(`${qudt}MultiModalEnumeration-modalCueEnumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalEnumeration`), namedNode(`${sh}property`), namedNode(`${qudt}MultiModalEnumeration-visualCueEnumeration`), namedNode(qudt)),
        quad(blankNodes[342], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[342], namedNode(`${owl}onProperty`), namedNode(`${ns26}iconicCueEnumeration`), namedNode(qudt)),
        quad(blankNodes[342], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[343], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[343], namedNode(`${owl}onProperty`), namedNode(`${ns26}kinestheticCueEnumeration`), namedNode(qudt)),
        quad(blankNodes[343], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[344], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[344], namedNode(`${owl}onProperty`), namedNode(`${ns26}auralCueEnumeration`), namedNode(qudt)),
        quad(blankNodes[344], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[345], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[345], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}ModalEnumeration`), namedNode(qudt)),
        quad(blankNodes[345], namedNode(`${owl}onProperty`), namedNode(`${ns26}modalCueEnumeration`), namedNode(qudt)),
        quad(blankNodes[346], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[346], namedNode(`${owl}onProperty`), namedNode(`${ns26}visualCueEnumeration`), namedNode(qudt)),
        quad(blankNodes[346], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType-auralCue`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType-auralCue`), namedNode(`${sh}path`), namedNode(`${qudt}auralCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType-auralCue`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}auralCue`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}auralCue`), namedNode(`${rdfs}label`), literal(`aural cue`), namedNode(qudt)),
        quad(namedNode(`${qudt}auralCue`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}modalCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType-iconicCue`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType-iconicCue`), namedNode(`${sh}path`), namedNode(`${qudt}iconicCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType-iconicCue`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}iconicCue`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}iconicCue`), namedNode(`${rdfs}label`), literal(`iconic cue`), namedNode(qudt)),
        quad(namedNode(`${qudt}iconicCue`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}modalCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType-kinestheticCue`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType-kinestheticCue`), namedNode(`${sh}path`), namedNode(`${qudt}kinestheticCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType-kinestheticCue`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}kinestheticCue`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}kinestheticCue`), namedNode(`${rdfs}label`), literal(`kinesthetic cue`), namedNode(qudt)),
        quad(namedNode(`${qudt}kinestheticCue`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}modalCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType-modalCue`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType-modalCue`), namedNode(`${sh}path`), namedNode(`${qudt}modalCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType-modalCue`), namedNode(`${sh}class`), namedNode(`${qudt}ModalCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}modalCue`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}modalCue`), namedNode(`${rdfs}label`), literal(`modal cue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType-visualCue`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType-visualCue`), namedNode(`${sh}path`), namedNode(`${qudt}visualCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType-visualCue`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}visualCue`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}visualCue`), namedNode(`${rdfs}label`), literal(`visual cue`), namedNode(qudt)),
        quad(namedNode(`${qudt}visualCue`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}modalCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${rdfs}label`), literal(`Multi Modal Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Enumerated Value'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${rdfs}subClassOf`), blankNodes[347], namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${rdfs}subClassOf`), blankNodes[348], namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${rdfs}subClassOf`), blankNodes[349], namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${rdfs}subClassOf`), blankNodes[350], namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${rdfs}subClassOf`), blankNodes[351], namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${rdfs}subClassOf`), blankNodes[352], namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${sh}property`), namedNode(`${qudt}MultiModalType-auralCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${sh}property`), namedNode(`${qudt}MultiModalType-iconicCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${sh}property`), namedNode(`${qudt}MultiModalType-kinestheticCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${sh}property`), namedNode(`${qudt}MultiModalType-modalCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiModalType`), namedNode(`${sh}property`), namedNode(`${qudt}MultiModalType-visualCue`), namedNode(qudt)),
        quad(blankNodes[347], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[347], namedNode(`${owl}onProperty`), namedNode(`${ns26}modalCue`), namedNode(qudt)),
        quad(blankNodes[347], namedNode(`${owl}someValuesFrom`), namedNode(`${ns26}ModalCue`), namedNode(qudt)),
        quad(blankNodes[348], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[348], namedNode(`${owl}onProperty`), namedNode(`${ns26}kinestheticCue`), namedNode(qudt)),
        quad(blankNodes[348], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[349], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[349], namedNode(`${owl}onProperty`), namedNode(`${ns26}visualCue`), namedNode(qudt)),
        quad(blankNodes[349], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[350], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[350], namedNode(`${owl}allValuesFrom`), namedNode(`${ns26}ModalCue`), namedNode(qudt)),
        quad(blankNodes[350], namedNode(`${owl}onProperty`), namedNode(`${ns26}modalCue`), namedNode(qudt)),
        quad(blankNodes[351], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[351], namedNode(`${owl}onProperty`), namedNode(`${ns26}auralCue`), namedNode(qudt)),
        quad(blankNodes[351], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[352], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[352], namedNode(`${owl}onProperty`), namedNode(`${ns26}iconicCue`), namedNode(qudt)),
        quad(blankNodes[352], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiSet`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiSet`), namedNode(`${rdfs}label`), literal(`Bag`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiSet`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Collection`), namedNode(qudt)),
        quad(namedNode(`${qudt}MultiSet`), namedNode(`${rdfs}comment`), literal(`A bag is a set in which elements may be repeated.`), namedNode(qudt)),
        quad(namedNode(`${qudt}N-Tuple-elementType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}N-Tuple-elementType`), namedNode(`${sh}path`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}N-Tuple-elementType`), namedNode(`${sh}class`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}N-Tuple-elementType`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}N-Tuple`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}N-Tuple`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}N-Tuple`), namedNode(`${rdfs}label`), literal(`N-Tuple Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}N-Tuple`), namedNode(`${dcterms}description`), literal(`A tuple containing n objects is known as an "n-tuple". For example the 4-tuple (or "quadruple"), with components of respective types PERSON, DAY, MONTH and YEAR, could be used to record that a certain person was born on a certain day of a certain month of a certain year.`), namedNode(qudt)),
        quad(namedNode(`${qudt}N-Tuple`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Tuple`), namedNode(qudt)),
        quad(namedNode(`${qudt}N-Tuple`), namedNode(`${rdfs}subClassOf`), blankNodes[353], namedNode(qudt)),
        quad(blankNodes[353], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[353], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[353], namedNode(`${owl}minCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}N-TupleType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}N-TupleType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}N-TupleType`), namedNode(`${rdfs}label`), literal(`N-Tuple Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}N-TupleType`), namedNode(`${dcterms}description`), literal(`A tuple containing n objects is known as an "n-tuple". For example the 4-tuple (or "quadruple"), with components of respective types PERSON, DAY, MONTH and YEAR, could be used to record that a certain person was born on a certain day of a certain month of a certain year.`), namedNode(qudt)),
        quad(namedNode(`${qudt}N-TupleType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TupleType`), namedNode(qudt)),
        quad(namedNode(`${qudt}N-TupleType`), namedNode(`${sh}property`), namedNode(`${qudt}N-Tuple-elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}NIST_SP811_Comment`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}NIST_SP811_Comment`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}NIST_SP811_Comment`), namedNode(`${rdfs}label`), literal(`NIST SP~811 Comment`), namedNode(qudt)),
        quad(namedNode(`${qudt}NIST_SP811_Comment`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Comment`), namedNode(qudt)),
        quad(namedNode(`${qudt}NIST_SP811_Comment`), namedNode(`${dc11}description`), literal(`National Institute of Standards and Technology (NIST) Special Publication 811 Comments on some quantities and their units`), namedNode(qudt)),
        quad(namedNode(`${qudt}NUMERIC`), namedNode(`${rdf}type`), namedNode(`${qudt}NumericType`), namedNode(qudt)),
        quad(namedNode(`${qudt}NUMERIC`), namedNode(`${rdfs}label`), literal(`Numeric`), namedNode(qudt)),
        quad(namedNode(`${qudt}NUMERIC`), namedNode(`${dtype}literal`), literal(`numeric`), namedNode(qudt)),
        quad(namedNode(`${qudt}NUMERIC`), namedNode(`${qudt}ansiSQLName`), literal(`DECIMAL(p,s)`), namedNode(qudt)),
        quad(namedNode(`${qudt}NUMERIC`), namedNode(`${qudt}odbcName`), literal(`SQL_DECIMAL(p,s)`), namedNode(qudt)),
        quad(namedNode(`${qudt}NUMERIC`), namedNode(`${qudt}oracleSQLName`), literal(`NUMBER(p,s)`), namedNode(qudt)),
        quad(namedNode(`${qudt}No`), namedNode(`${rdf}type`), namedNode(`${qudt}YesNoType`), namedNode(qudt)),
        quad(namedNode(`${qudt}No`), namedNode(`${rdfs}label`), literal(`No`), namedNode(qudt)),
        quad(namedNode(`${qudt}No`), namedNode(`${qudt}literal`), literal(`N`), namedNode(qudt)),
        quad(namedNode(`${qudt}YesNoType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}YesNoType`), namedNode(`${rdfs}label`), literal(`Yes no type`), namedNode(qudt)),
        quad(namedNode(`${qudt}YesNoType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonModifiableParameter`), namedNode(`${rdf}type`), namedNode(`${qudt}ParameterModifiabilityType`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonModifiableParameter`), namedNode(`${rdfs}label`), literal(`Non modifiable parameter`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonModifiableParameter`), namedNode(`${rdfs}comment`), literal(`Parameter is fixed, not modifiable.`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonModifiableParameter`), namedNode(`${qudt}literal`), literal(`fixed`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonModifiableParameter`), namedNode(`${qudt}code`), literal(`0`), namedNode(qudt)),
        quad(namedNode(`${qudt}ParameterModifiabilityType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ParameterModifiabilityType`), namedNode(`${rdfs}label`), literal(`Parameter modifiability type`), namedNode(qudt)),
        quad(namedNode(`${qudt}ParameterModifiabilityType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}ParameterModifiabilityType`), namedNode(`${rdfs}comment`), literal(`An enumeration of literals that signify whether a parameter is modifiable and if so, by whom.`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonNegativeIntegerUnionList`), namedNode(`${rdf}type`), namedNode(`${rdf}List`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonNegativeIntegerUnionList`), namedNode(`${rdfs}label`), literal(`Non-negative union list`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonNegativeIntegerUnionList`), namedNode(`${rdf}first`), blankNodes[354], namedNode(qudt)),
        quad(namedNode(`${qudt}NonNegativeIntegerUnionList`), namedNode(`${rdf}rest`), blankNodes[355], namedNode(qudt)),
        quad(blankNodes[354], namedNode(`${sh}datatype`), namedNode(`${xsd}nonNegativeInteger`), namedNode(qudt)),
        quad(blankNodes[355], namedNode(`${rdf}first`), blankNodes[356], namedNode(qudt)),
        quad(blankNodes[355], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonRotatingInertialFrame-frameType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonRotatingInertialFrame-frameType`), namedNode(`${sh}hasValue`), namedNode(`${ns24}FT_NON-ROTATING`), namedNode(qudt)),
        quad(namedNode(`${qudt}NonRotatingInertialFrame-frameType`), namedNode(`${sh}path`), namedNode(`${qudt}frameType`), namedNode(qudt)),
        quad(blankNodes[321], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[321], namedNode(`${owl}onProperty`), namedNode(`${qudt}frameType`), namedNode(qudt)),
        quad(blankNodes[321], namedNode(`${owl}hasValue`), namedNode(`${ns24}FT_NON-ROTATING`), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType-accuracy`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType-accuracy`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType-accuracy`), namedNode(`${sh}path`), namedNode(`${qudt}accuracy`), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType-accuracy`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}accuracy`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}accuracy`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}accuracy`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}accuracy`), namedNode(`${rdfs}label`), literal(`accuracy`), namedNode(qudt)),
        quad(namedNode(`${qudt}accuracy`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}accuracy`), namedNode(`${dcterms}description`), literal(`Accuracy is the degree to which a given quantity is correct and free from error. For example, a quantity specified as 100+/-1 has an (absolute) accuracy of +/-1 (meaning its true value can fall in the range 99-101), while a quantity specified as 100+/-2% has a (relative) accuracy of +/-2% (meaning its true value can fall in the range 98-102).

The concepts of accuracy and precision are both closely related and often confused. While the accuracy of a number x is given by the number of significant decimal (or other) digits to the right of the decimal point in x, the precision of x is the total number of significant decimal (or other) digits. `), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType-signedness`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType-signedness`), namedNode(`${sh}path`), namedNode(`${qudt}signedness`), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType-signedness`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}NumericType-signedness`), namedNode(`${sh}class`), namedNode(`${qudt}SignednessType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignednessType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignednessType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignednessType`), namedNode(`${rdfs}label`), literal(`Signedness type`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignednessType`), namedNode(`${dcterms}description`), literal(`Specifics whether a value should be signed or unsigned.`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignednessType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignednessType`), namedNode(`${owl}oneOf`), blankNodes[357], namedNode(qudt)),
        quad(blankNodes[204], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[204], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}SignednessType`), namedNode(qudt)),
        quad(blankNodes[204], namedNode(`${owl}onProperty`), namedNode(`${qudt}signedness`), namedNode(qudt)),
        quad(blankNodes[205], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[205], namedNode(`${owl}onProperty`), namedNode(`${qudt}accuracy`), namedNode(qudt)),
        quad(blankNodes[205], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[206], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[206], namedNode(`${owl}onProperty`), namedNode(`${qudt}signedness`), namedNode(qudt)),
        quad(blankNodes[206], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_OFF`), namedNode(`${rdf}type`), namedNode(`${qudt}OnOffStateType`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_OFF`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_OFF`), namedNode(`${rdfs}label`), literal(`Off`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_OFF`), namedNode(`${qudt}literal`), literal(`off`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_OFF`), namedNode(`${qudt}code`), literal(`0`), namedNode(qudt)),
        quad(namedNode(`${qudt}OnOffStateType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}OnOffStateType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}OnOffStateType`), namedNode(`${rdfs}label`), literal(`On off state type`), namedNode(qudt)),
        quad(namedNode(`${qudt}OnOffStateType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}DiscreteState`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_ON`), namedNode(`${rdf}type`), namedNode(`${qudt}OnOffStateType`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_ON`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_ON`), namedNode(`${rdfs}label`), literal(`On`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_ON`), namedNode(`${qudt}literal`), literal(`on`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_ON`), namedNode(`${qudt}code`), literal(`0`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_ZERO-MEANS-OFF`), namedNode(`${rdf}type`), namedNode(`${qudt}OnOffStateType`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_ZERO-MEANS-OFF`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_ZERO-MEANS-OFF`), namedNode(`${rdfs}label`), literal(`Zero means off`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_ZERO-MEANS-OFF`), namedNode(`${dtype}literal`), literal(`zero-means-off`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_ZERO-MEANS-OFF`), namedNode(`${qudt}inverted`), literal(`true`, namedNode(`${xsd}boolean`)), namedNode(qudt)),
        quad(namedNode(`${qudt}inverted`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}inverted`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}inverted`), namedNode(`${rdfs}label`), literal(`inverted`), namedNode(qudt)),
        quad(namedNode(`${qudt}inverted`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_ZERO-MEANS-ON`), namedNode(`${rdf}type`), namedNode(`${qudt}OnOffStateType`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_ZERO-MEANS-ON`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_ZERO-MEANS-ON`), namedNode(`${rdfs}label`), literal(`Zero means on`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_ZERO-MEANS-ON`), namedNode(`${dtype}literal`), literal(`zero-means-on`), namedNode(qudt)),
        quad(namedNode(`${qudt}OOST_ZERO-MEANS-ON`), namedNode(`${qudt}inverted`), literal(`true`, namedNode(`${xsd}boolean`)), namedNode(qudt)),
        quad(namedNode(`${qudt}OctetType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}OctetType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}OctetType`), namedNode(`${rdfs}label`), literal(`Octet Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}OctetType`), namedNode(`${dcterms}description`), literal(`An 8 bit unsigned integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}OctetType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}UnsignedIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedIntegerType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedIntegerType`), namedNode(`${rdfs}label`), literal(`Unsigned Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedIntegerType`), namedNode(`${dcterms}description`), literal(`Unsgned Integers are integers that are either strictly non-negative or non-positive.`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}IntegerDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}UnsignedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedIntegerType`), namedNode(`${owl}equivalentClass`), blankNodes[358], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedIntegerType`), namedNode(`${owl}disjointWith`), namedNode(`${qudt}SignedIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}OffOnStateTypeEnumeration`), namedNode(`${rdfs}comment`), literal(`A discrete state enumeration whose values are 'off' and 'on'. The 'off' value is encoded as a zero (0) and the 'on' value as a one (1).`), namedNode(qudt)),
        quad(namedNode(`${qudt}On`), namedNode(`${rdf}type`), namedNode(`${qudt}OnOffStateType`), namedNode(qudt)),
        quad(namedNode(`${qudt}On`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}On`), namedNode(`${rdfs}label`), literal(`On`), namedNode(qudt)),
        quad(namedNode(`${qudt}On`), namedNode(`${qudt}literal`), literal(`on`), namedNode(qudt)),
        quad(namedNode(`${qudt}On`), namedNode(`${qudt}code`), literal(`1`), namedNode(qudt)),
        quad(namedNode(`${qudt}OnOffStateTypeEnumeration`), namedNode(`${rdfs}comment`), literal(`A discrete state enumeration whose values are 'off' and 'on'. The 'on' value is encoded as a zero (0) and the 'off' value as a one (1).`), namedNode(qudt)),
        quad(namedNode(`${qudt}OnOffStateTypeEnumeration`), namedNode(`${qudt}inverted`), literal(`true`, namedNode(`${xsd}boolean`)), namedNode(qudt)),
        quad(namedNode(`${qudt}OneMeansOff`), namedNode(`${rdf}type`), namedNode(`${qudt}OnOffStateType`), namedNode(qudt)),
        quad(namedNode(`${qudt}OneMeansOff`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}OneMeansOff`), namedNode(`${rdfs}label`), literal(`One means off`), namedNode(qudt)),
        quad(namedNode(`${qudt}OneMeansOff`), namedNode(`${qudt}literal`), literal(`off`), namedNode(qudt)),
        quad(namedNode(`${qudt}OneMeansOff`), namedNode(`${qudt}inverted`), literal(`true`, namedNode(`${xsd}boolean`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Open`), namedNode(`${rdf}type`), namedNode(`${qudt}OpenCloseStateType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Open`), namedNode(`${rdfs}label`), literal(`Open`), namedNode(qudt)),
        quad(namedNode(`${qudt}Open`), namedNode(`${qudt}literal`), literal(`open`), namedNode(qudt)),
        quad(namedNode(`${qudt}Open`), namedNode(`${qudt}code`), literal(`1`), namedNode(qudt)),
        quad(namedNode(`${qudt}OpenCloseStateType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}OpenCloseStateType`), namedNode(`${rdfs}label`), literal(`Open Close State Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}OpenCloseStateType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}DiscreteState`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection-first`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection-first`), namedNode(`${sh}path`), namedNode(`${rdf}first`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection-first`), namedNode(`${sh}class`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection-orderingRelation`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection-orderingRelation`), namedNode(`${sh}path`), namedNode(`${qudt}orderingRelation`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection-orderingRelation`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection-orderingRelation`), namedNode(`${sh}class`), namedNode(`${dtype}ComparisonOperator`), namedNode(qudt)),
        quad(namedNode(`${qudt}orderingRelation`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}orderingRelation`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}orderingRelation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}orderingRelation`), namedNode(`${rdfs}label`), literal(`Ordering Relation`), namedNode(qudt)),
        quad(namedNode(`${qudt}orderingRelation`), namedNode(`${dcterms}description`), literal(`This property identifies the mathematical comparison operator (such as "<" or ">") that is used to order the elements of a collection.`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection-rest`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection-rest`), namedNode(`${sh}path`), namedNode(`${rdf}rest`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection-rest`), namedNode(`${sh}class`), namedNode(`${qudt}OrderedCollectionType`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollectionType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollectionType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollectionType`), namedNode(`${rdfs}label`), literal(`Ordered Collection Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollectionType`), namedNode(`${dcterms}description`), literal(`An Ordered Collection Type is an abstract data type that defines the properties of collection data structures whose members can be linearly ordered. An ordered collection is a collection together with an ordering relation (such as greater than) that linearly orders the collection elements.`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollectionType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CollectionType`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollectionType`), namedNode(`${sh}property`), namedNode(`${qudt}OrderedCollection-first`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollectionType`), namedNode(`${sh}property`), namedNode(`${qudt}OrderedCollection-orderingRelation`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollectionType`), namedNode(`${sh}property`), namedNode(`${qudt}OrderedCollection-rest`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection`), namedNode(`${rdfs}label`), literal(`Ordered Collection Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection`), namedNode(`${dcterms}description`), literal(`An Ordered Collection Type is an abstract data type that defines the properties of collection data structures whose members can be linearly ordered. An ordered collection is a collection together with an ordering relation (such as greater than) that linearly orders the collection elements.`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Collection`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection`), namedNode(`${rdfs}subClassOf`), blankNodes[359], namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection`), namedNode(`${rdfs}subClassOf`), blankNodes[360], namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedCollection`), namedNode(`${rdfs}subClassOf`), blankNodes[361], namedNode(qudt)),
        quad(blankNodes[359], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[359], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}OrderedCollection`), namedNode(qudt)),
        quad(blankNodes[359], namedNode(`${owl}onProperty`), namedNode(`${rdf}rest`), namedNode(qudt)),
        quad(blankNodes[360], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[360], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(blankNodes[360], namedNode(`${owl}onProperty`), namedNode(`${rdf}first`), namedNode(qudt)),
        quad(blankNodes[361], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[361], namedNode(`${owl}allValuesFrom`), namedNode(`${dtype}ComparisonOperator`), namedNode(qudt)),
        quad(blankNodes[361], namedNode(`${owl}onProperty`), namedNode(`${qudt}orderingRelation`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedType`), namedNode(`${rdfs}label`), literal(`Ordered type`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedType`), namedNode(`${dcterms}description`), literal(`Describes how a data or information structure is ordered.`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}OrderedType`), namedNode(`${owl}oneOf`), blankNodes[362], namedNode(qudt)),
        quad(blankNodes[362], namedNode(`${rdf}first`), namedNode(`${qudt}Unordered`), namedNode(qudt)),
        quad(blankNodes[362], namedNode(`${rdf}rest`), blankNodes[363], namedNode(qudt)),
        quad(blankNodes[328], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[328], namedNode(`${owl}onProperty`), namedNode(`${qudt}order`), namedNode(qudt)),
        quad(blankNodes[328], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Organization`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Organization`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Organization`), namedNode(`${rdfs}label`), literal(`Organization`), namedNode(qudt)),
        quad(namedNode(`${qudt}Organization`), namedNode(`${dcterms}description`), literal(`A sub-type of 'QUDT Concept'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Organization`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}Organization`), namedNode(`${rdfs}subClassOf`), blankNodes[364], namedNode(qudt)),
        quad(blankNodes[364], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[364], namedNode(`${owl}onProperty`), namedNode(`${qudt}url`), namedNode(qudt)),
        quad(blankNodes[364], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(namedNode(`${qudt}PARTIAL-ARRAY`), namedNode(`${rdf}type`), namedNode(`${qudt}ArrayType`), namedNode(qudt)),
        quad(namedNode(`${qudt}PARTIAL-ARRAY`), namedNode(`${rdfs}label`), literal(`PARTIAL ARRAY`), namedNode(qudt)),
        quad(blankNodes[155], namedNode(`${rdf}first`), namedNode(`${ns24}PadWithOnes`), namedNode(qudt)),
        quad(blankNodes[155], namedNode(`${rdf}rest`), blankNodes[365], namedNode(qudt)),
        quad(namedNode(`${qudt}PartiallyOrdered`), namedNode(`${rdf}type`), namedNode(`${qudt}OrderedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}PartiallyOrdered`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}PartiallyOrdered`), namedNode(`${rdfs}label`), literal(`Partially Ordered`), namedNode(qudt)),
        quad(namedNode(`${qudt}PartiallyOrdered`), namedNode(`${qudt}literal`), literal(`partial`), namedNode(qudt)),
        quad(namedNode(`${qudt}PartiallyOrdered`), namedNode(`${qudt}plainTextDescription`), literal(`Partial ordered structure.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Percentage`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Percentage`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Percentage`), namedNode(`${rdfs}label`), literal(`Percentage Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Percentage`), namedNode(`${dcterms}description`), literal(`A Scalar Datatype for expressing a dimensionless ratio.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Percentage`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}NumericType`), namedNode(qudt)),
        quad(namedNode(`${qudt}PhysicalAddress`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}PhysicalAddress`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}PhysicalAddress`), namedNode(`${rdfs}label`), literal(`Physical Address Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}PhysicalAddress`), namedNode(`${dcterms}description`), literal(`A "Structured Datatype".`), namedNode(qudt)),
        quad(namedNode(`${qudt}PhysicalAddress`), namedNode(`${dcterms}description`), literal(`A physical address is a pointer to a memory location.`), namedNode(qudt)),
        quad(namedNode(`${qudt}PhysicalAddress`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}PhysicalConstant`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}PhysicalConstant`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}PhysicalConstant`), namedNode(`${rdfs}label`), literal(`Physical Constant`), namedNode(qudt)),
        quad(namedNode(`${qudt}PhysicalConstant`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Quantity`), namedNode(qudt)),
        quad(namedNode(`${qudt}PhysicalConstant`), namedNode(`${rdfs}subClassOf`), blankNodes[366], namedNode(qudt)),
        quad(namedNode(`${qudt}PhysicalConstant`), namedNode(`${rdfs}subClassOf`), blankNodes[367], namedNode(qudt)),
        quad(namedNode(`${qudt}PhysicalConstant`), namedNode(`${rdfs}subClassOf`), blankNodes[368], namedNode(qudt)),
        quad(namedNode(`${qudt}PhysicalConstant`), namedNode(`${rdfs}comment`), literal(`A physical constant is a physical quantity that is generally believed to be both universal in nature and constant in time. It can be contrasted with a mathematical constant, which is a fixed numerical value but does not directly involve any physical measurement. There are many physical constants in science, some of the most widely recognized being the speed of light in vacuum c, Newton's gravitational constant G, Planck's constant h, the electric permittivity of free space ε0, and the elementary charge e. Physical constants can take many dimensional forms, or may be dimensionless depending on the system of quantities and units used.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}PhysicalConstant`), namedNode(`${qudt}dbpediaMatch`), literal(`http://dbpedia.org/resource/Physical_constant`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Quantity`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Quantity`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Quantity`), namedNode(`${rdfs}label`), literal(`Quantity`), namedNode(qudt)),
        quad(namedNode(`${qudt}Quantity`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}Quantity`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Quantifiable`), namedNode(qudt)),
        quad(namedNode(`${qudt}Quantity`), namedNode(`${rdfs}subClassOf`), blankNodes[369], namedNode(qudt)),
        quad(namedNode(`${qudt}Quantity`), namedNode(`${rdfs}subClassOf`), blankNodes[370], namedNode(qudt)),
        quad(namedNode(`${qudt}Quantity`), namedNode(`${rdfs}subClassOf`), blankNodes[371], namedNode(qudt)),
        quad(namedNode(`${qudt}Quantity`), namedNode(`${rdfs}subClassOf`), blankNodes[372], namedNode(qudt)),
        quad(namedNode(`${qudt}Quantity`), namedNode(`${rdfs}comment`), literal(`<p class="lm-para">A <b>quantity</b> is the measurement of an observable property of a particular object, event, or physical system. A quantity is always associated with the context of measurement (i.e. the thing measured, the measured value, the accuracy of measurement, etc.) whereas the underlying <b>quantity kind</b> is independent of any particular measurement. Thus, length is a quantity kind while the height of a rocket is a specific quantity of length; its magnitude that may be expressed in meters, feet, inches, etc. Examples of physical quantities include physical constants, such as the speed of light in a vacuum, Planck's constant, the electric permittivity of free space, and the fine structure constant. </p>

<p class="lm-para">In other words, quantities are quantifiable aspects of the world, such as the duration of a movie, the distance between two points, velocity of a car, the pressure of the atmosphere, and a person's weight; and units are used to describe their numerical measure. 

<p class="lm-para">Many <b>quantity kinds</b> are related to each other by various physical laws, and as a result, the associated units of some quantity kinds can be expressed as products (or ratios) of powers of other quantity kinds (e.g., momentum is mass times velocity and velocity is defined as distance divided by time). In this way, some quantities can be calculated from other measured quantities using their associations to the quantity kinds in these expressions. These quantity kind relationships are also discussed in dimensional analysis. Those that cannot be so expressed can be regarded as "fundamental" in this sense.</p>
<p class="lm-para">A quantity is distinguished from a "quantity kind" in that the former carries a value and the latter is a type specifier.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Quantity`), namedNode(`${qudt}dbpediaMatch`), literal(`http://dbpedia.org/resource/Quantity`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(blankNodes[366], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[366], namedNode(`${owl}onProperty`), namedNode(`${qudt}latexSymbol`), namedNode(qudt)),
        quad(blankNodes[366], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[367], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[367], namedNode(`${owl}onProperty`), namedNode(`${qudt}mathMLdefinition`), namedNode(qudt)),
        quad(blankNodes[367], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[368], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[368], namedNode(`${owl}onProperty`), namedNode(`${qudt}latexDefinition`), namedNode(qudt)),
        quad(blankNodes[368], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(namedNode(`${qudt}PlaneAngleUnit`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}PlaneAngleUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}PlaneAngleUnit`), namedNode(`${rdfs}label`), literal(`Plane Angle Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}PlaneAngleUnit`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}AngleUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}PolarCoordinates`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}PolarCoordinates`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}PolarCoordinates`), namedNode(`${rdfs}label`), literal(`Polar Coordinate System Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}PolarCoordinates`), namedNode(`${dcterms}description`), literal(`A set of  variables which fix a geometric object. If the coordinates of a point P are determined by the distance from P to the origin and the angle subtended by the radial vector at P and a fixed axis, they are known as polar coordinates. Typically, the angle is measured with respect to the x-axis.`), namedNode(qudt)),
        quad(namedNode(`${qudt}PolarCoordinates`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Coordinates`), namedNode(qudt)),
        quad(namedNode(`${qudt}PolarCoordinatesType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}PolarCoordinatesType`), namedNode(`${rdfs}label`), literal(`Polar Coordinate System Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}PolarCoordinatesType`), namedNode(`${dcterms}description`), literal(`A set of  variables which fix a geometric object. If the coordinates of a point P are determined by the distance from P to the origin and the angle subtended by the radial vector at P and a fixed axis, they are known as polar coordinates. Typically, the angle is measured with respect to the x-axis.`), namedNode(qudt)),
        quad(namedNode(`${qudt}PolarCoordinatesType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CoordinateSystemType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Polarity`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Polarity`), namedNode(`${rdfs}label`), literal(`Polarity`), namedNode(qudt)),
        quad(namedNode(`${qudt}Polarity`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}Polarity`), namedNode(`${rdfs}comment`), literal(`A "Tagged Enumeration" with the following instance(s): "negative", "positive".`), namedNode(qudt)),
        quad(namedNode(`${qudt}PositiveIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}PositiveIntegerType`), namedNode(`${rdfs}label`), literal(`Positive Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}PositiveIntegerType`), namedNode(`${dcterms}description`), literal(`Positive Integers are integers that are either non-zero and non-negative.`), namedNode(qudt)),
        quad(namedNode(`${qudt}PositiveIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}IntegerDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}PositiveIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}UnsignedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}PositiveIntegerType`), namedNode(`${owl}equivalentClass`), blankNodes[373], namedNode(qudt)),
        quad(namedNode(`${qudt}PositiveIntegerType`), namedNode(`${owl}disjointWith`), namedNode(`${qudt}SignedIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedType`), namedNode(`${rdfs}label`), literal(`Unsigned Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedType`), namedNode(`${dcterms}description`), literal(`An unsigned data type is a numeric type that does not distinguish between positive and negative values.`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}NumericType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedType`), namedNode(`${rdfs}subClassOf`), blankNodes[374], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedType`), namedNode(`${sh}property`), namedNode(`${qudt}UnsignedType-signedness`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedType`), namedNode(`${owl}equivalentClass`), blankNodes[375], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedType`), namedNode(`${owl}disjointWith`), namedNode(`${qudt}SignedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedIntegerType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedIntegerType`), namedNode(`${rdfs}label`), literal(`Signed Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedIntegerType`), namedNode(`${dcterms}description`), literal(`Signed Integers are integers can take on both positive and negative values.`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}IntegerDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}SignedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedIntegerType`), namedNode(`${owl}equivalentClass`), blankNodes[376], namedNode(qudt)),
        quad(blankNodes[373], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(blankNodes[373], namedNode(`${owl}intersectionOf`), blankNodes[377], namedNode(qudt)),
        quad(blankNodes[56], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[56], namedNode(`${owl}onProperty`), namedNode(`${qudt}prefixMultiplier`), namedNode(qudt)),
        quad(blankNodes[56], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[57], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[57], namedNode(`${owl}onProperty`), namedNode(`${qudt}latexSymbol`), namedNode(qudt)),
        quad(blankNodes[57], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[58], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[58], namedNode(`${owl}onProperty`), namedNode(`${qudt}symbol`), namedNode(qudt)),
        quad(blankNodes[58], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[59], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[59], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}UCUMcs-term`), namedNode(qudt)),
        quad(blankNodes[59], namedNode(`${owl}onProperty`), namedNode(`${qudt}ucumCode`), namedNode(qudt)),
        quad(namedNode(`${qudt}PrefixUnit`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Unit'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Proceedings`), namedNode(`${rdf}type`), namedNode(`${qudt}PubEnumeratedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Proceedings`), namedNode(`${rdfs}label`), literal(`Pub proceedings type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Proceedings`), namedNode(`${dtype}literal`), literal(`proceedings`), namedNode(qudt)),
        quad(blankNodes[41], namedNode(`${rdf}first`), namedNode(`${qudt}Article`), namedNode(qudt)),
        quad(blankNodes[41], namedNode(`${rdf}rest`), blankNodes[378], namedNode(qudt)),
        quad(namedNode(`${qudt}Quantifiable`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Quantifiable`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Quantifiable`), namedNode(`${rdfs}label`), literal(`Quantifiable`), namedNode(qudt)),
        quad(namedNode(`${qudt}Quantifiable`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Aspect`), namedNode(qudt)),
        quad(namedNode(`${qudt}Quantifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[379], namedNode(qudt)),
        quad(namedNode(`${qudt}Quantifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[380], namedNode(qudt)),
        quad(namedNode(`${qudt}Quantifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[381], namedNode(qudt)),
        quad(namedNode(`${qudt}Quantifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[382], namedNode(qudt)),
        quad(namedNode(`${qudt}Quantifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[383], namedNode(qudt)),
        quad(namedNode(`${qudt}Quantifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[384], namedNode(qudt)),
        quad(namedNode(`${qudt}Quantifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[385], namedNode(qudt)),
        quad(namedNode(`${qudt}Quantifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[386], namedNode(qudt)),
        quad(namedNode(`${qudt}Quantifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[387], namedNode(qudt)),
        quad(namedNode(`${qudt}Quantifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[388], namedNode(qudt)),
        quad(namedNode(`${qudt}Quantifiable`), namedNode(`${rdfs}subClassOf`), blankNodes[389], namedNode(qudt)),
        quad(namedNode(`${qudt}Quantifiable`), namedNode(`${rdfs}comment`), literal(`<p><em>Quantifiable</em> ascribes to some thing the capability of being measured, observed, or counted.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(blankNodes[379], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[379], namedNode(`${owl}onProperty`), namedNode(`${qudt}standardUncertainty`), namedNode(qudt)),
        quad(blankNodes[379], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(blankNodes[380], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[380], namedNode(`${owl}onProperty`), namedNode(`${qudt}dataType`), namedNode(qudt)),
        quad(blankNodes[380], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(blankNodes[381], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[381], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(blankNodes[381], namedNode(`${owl}onProperty`), namedNode(`${qudt}dataType`), namedNode(qudt)),
        quad(blankNodes[382], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[382], namedNode(`${owl}onProperty`), namedNode(`${qudt}unit`), namedNode(qudt)),
        quad(blankNodes[382], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[383], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[383], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}double`), namedNode(qudt)),
        quad(blankNodes[383], namedNode(`${owl}onProperty`), namedNode(`${qudt}standardUncertainty`), namedNode(qudt)),
        quad(blankNodes[384], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[384], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}double`), namedNode(qudt)),
        quad(blankNodes[384], namedNode(`${owl}onProperty`), namedNode(`${qudt}relativeStandardUncertainty`), namedNode(qudt)),
        quad(blankNodes[385], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[385], namedNode(`${owl}onProperty`), namedNode(`${qudt}relativeStandardUncertainty`), namedNode(qudt)),
        quad(blankNodes[385], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(blankNodes[386], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[386], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(blankNodes[386], namedNode(`${owl}onProperty`), namedNode(`${qudt}unit`), namedNode(qudt)),
        quad(blankNodes[387], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[387], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}DataEncoding`), namedNode(qudt)),
        quad(blankNodes[387], namedNode(`${owl}onProperty`), namedNode(`${qudt}dataEncoding`), namedNode(qudt)),
        quad(blankNodes[388], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[388], namedNode(`${owl}onProperty`), namedNode(`${qudt}value`), namedNode(qudt)),
        quad(blankNodes[388], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[389], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[389], namedNode(`${owl}onProperty`), namedNode(`${qudt}dataEncoding`), namedNode(qudt)),
        quad(blankNodes[389], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[369], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[369], namedNode(`${dcterms}description`), literal(`a reference to the dimension that quantifies the property`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(blankNodes[369], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}QuantityValue`), namedNode(qudt)),
        quad(blankNodes[369], namedNode(`${owl}onProperty`), namedNode(`${qudt}quantityValue`), namedNode(qudt)),
        quad(blankNodes[370], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[370], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(blankNodes[370], namedNode(`${owl}onProperty`), namedNode(`${qudt}isDeltaQuantity`), namedNode(qudt)),
        quad(blankNodes[371], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[371], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}QuantityKind`), namedNode(qudt)),
        quad(blankNodes[371], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasQuantityKind`), namedNode(qudt)),
        quad(blankNodes[372], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[372], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasQuantityKind`), namedNode(qudt)),
        quad(blankNodes[372], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[214], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[214], namedNode(`${owl}onProperty`), namedNode(`${qudt}applicableUSCustomaryUnit`), namedNode(qudt)),
        quad(blankNodes[214], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[215], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[215], namedNode(`${owl}onProperty`), namedNode(`${qudt}mathMLdefinition`), namedNode(qudt)),
        quad(blankNodes[215], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[216], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[216], namedNode(`${owl}onProperty`), namedNode(`${qudt}baseUnitDimensions`), namedNode(qudt)),
        quad(blankNodes[216], namedNode(`${owl}maxCardinality`), literal(`4`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[217], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[217], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}QuantityKindDimensionVector_SI`), namedNode(qudt)),
        quad(blankNodes[217], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionVectorForSI`), namedNode(qudt)),
        quad(blankNodes[218], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[218], namedNode(`${owl}onProperty`), namedNode(`${qudt}applicableUnit`), namedNode(qudt)),
        quad(blankNodes[218], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[219], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[219], namedNode(`${owl}onProperty`), namedNode(`${qudt}expression`), namedNode(qudt)),
        quad(blankNodes[219], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[220], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[220], namedNode(`${owl}onProperty`), namedNode(`${qudt}baseImperialUnitDimensions`), namedNode(qudt)),
        quad(blankNodes[220], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[221], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[221], namedNode(`${owl}onProperty`), namedNode(`${qudt}generalization`), namedNode(qudt)),
        quad(blankNodes[221], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(blankNodes[222], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[222], namedNode(`${owl}onProperty`), namedNode(`${qudt}applicableISOUnit`), namedNode(qudt)),
        quad(blankNodes[222], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[223], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[223], namedNode(`${owl}onProperty`), namedNode(`${qudt}qkdvDenominator`), namedNode(qudt)),
        quad(blankNodes[223], namedNode(`${owl}onClass`), namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(qudt)),
        quad(blankNodes[223], namedNode(`${owl}maxQualifiedCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[224], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[224], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}QuantityKind`), namedNode(qudt)),
        quad(blankNodes[224], namedNode(`${owl}onProperty`), namedNode(`${qudt}generalization`), namedNode(qudt)),
        quad(blankNodes[225], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[225], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}SystemOfQuantityKinds`), namedNode(qudt)),
        quad(blankNodes[225], namedNode(`${owl}onProperty`), namedNode(`${qudt}isQuantityKindOf`), namedNode(qudt)),
        quad(blankNodes[226], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[226], namedNode(`${owl}onProperty`), namedNode(`${qudt}baseCGSUnitDimensions`), namedNode(qudt)),
        quad(blankNodes[226], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[227], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[227], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionVectorForSI`), namedNode(qudt)),
        quad(blankNodes[227], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[228], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[228], namedNode(`${owl}onProperty`), namedNode(`${qudt}baseUSCustomaryUnitDimensions`), namedNode(qudt)),
        quad(blankNodes[228], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[229], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[229], namedNode(`${owl}onProperty`), namedNode(`${qudt}applicableCGSUnit`), namedNode(qudt)),
        quad(blankNodes[229], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[230], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[230], namedNode(`${owl}onProperty`), namedNode(`${qudt}applicableSIUnit`), namedNode(qudt)),
        quad(blankNodes[230], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[231], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[231], namedNode(`${owl}onProperty`), namedNode(`${qudt}latexDefinition`), namedNode(qudt)),
        quad(blankNodes[231], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[232], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[232], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(qudt)),
        quad(blankNodes[232], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasDimensionVector`), namedNode(qudt)),
        quad(blankNodes[233], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[233], namedNode(`${owl}onProperty`), namedNode(`${qudt}qkdvNumerator`), namedNode(qudt)),
        quad(blankNodes[233], namedNode(`${owl}onClass`), namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(qudt)),
        quad(blankNodes[233], namedNode(`${owl}maxQualifiedCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[234], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[234], namedNode(`${owl}onProperty`), namedNode(`${qudt}applicableImperialUnit`), namedNode(qudt)),
        quad(blankNodes[234], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[235], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[235], namedNode(`${owl}onProperty`), namedNode(`${qudt}baseSIUnitDimensions`), namedNode(qudt)),
        quad(blankNodes[235], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[236], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[236], namedNode(`${owl}onProperty`), namedNode(`${qudt}baseISOUnitDimensions`), namedNode(qudt)),
        quad(blankNodes[236], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${rdfs}label`), literal(`Quantity Kind Dimension Vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${rdfs}subClassOf`), blankNodes[390], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${rdfs}subClassOf`), blankNodes[391], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${rdfs}subClassOf`), blankNodes[392], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${rdfs}subClassOf`), blankNodes[393], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${rdfs}subClassOf`), blankNodes[394], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${rdfs}subClassOf`), blankNodes[395], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${rdfs}subClassOf`), blankNodes[396], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${rdfs}subClassOf`), blankNodes[397], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${rdfs}subClassOf`), blankNodes[398], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${rdfs}subClassOf`), blankNodes[399], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${rdfs}comment`), literal(`<p class="lm-para">A  <em>Quantity Kind Dimension Vector</em> describes the dimensionality of a quantity kind in the context of a system of units. In the SI system of units, the dimensions of a quantity kind are expressed as a product of the basic physical dimensions mass (\\(M\\)), length (\\(L\\)), time (\\(T\\)) current (\\(I\\)), amount of substance (\\(N\\)), luminous intensity (\\(J\\)) and absolute temperature (\\(\\theta\\)) as \\(dim \\, Q = L^{\\alpha} \\, M^{\\beta} \\, T^{\\gamma} \\, I ^{\\delta} \\, \\theta ^{\\epsilon} \\, N^{\\eta} \\, J ^{\nu}\\).</p>

<p class="lm-para">The rational powers of the dimensional exponents, \\(\\alpha, \\, \\beta, \\, \\gamma, \\, \\delta, \\, \\epsilon, \\, \\eta, \\, \nu\\), are positive, negative, or zero.</p>

<p class="lm-para">For example, the dimension of the physical quantity kind \\(\\it{speed}\\) is \\(\\boxed{length/time}\\), \\(L/T\\) or \\(LT^{-1}\\), and the dimension of the physical quantity kind force is \\(\\boxed{mass \\times acceleration}\\) or \\(\\boxed{mass \\times (length/time)/time}\\), \\(ML/T^2\\) or \\(MLT^{-2}\\) respectively.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${qudt}informativeReference`), literal(`http://en.wikipedia.org/wiki/Dimensional_analysis`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(`${qudt}informativeReference`), literal(`http://web.mit.edu/2.25/www/pdf/DA_unified.pdf`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(blankNodes[390], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[390], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionExponentForThermodynamicTemperature`), namedNode(qudt)),
        quad(blankNodes[390], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[391], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[391], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionExponentForElectricCurrent`), namedNode(qudt)),
        quad(blankNodes[391], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[392], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[392], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionExponentForMass`), namedNode(qudt)),
        quad(blankNodes[392], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[393], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[393], namedNode(`${owl}onProperty`), namedNode(`${qudt}baseUnitDimensions`), namedNode(qudt)),
        quad(blankNodes[393], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[394], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[394], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionlessExponent`), namedNode(qudt)),
        quad(blankNodes[394], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[395], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[395], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionExponentForLuminousIntensity`), namedNode(qudt)),
        quad(blankNodes[395], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[396], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[396], namedNode(`${owl}onProperty`), namedNode(`${qudt}latexDefinition`), namedNode(qudt)),
        quad(blankNodes[396], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[397], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[397], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionExponentForLength`), namedNode(qudt)),
        quad(blankNodes[397], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[398], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[398], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionExponentForTime`), namedNode(qudt)),
        quad(blankNodes[398], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[399], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[399], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionExponentForAmountOfSubstance`), namedNode(qudt)),
        quad(blankNodes[399], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-EMU`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-EMU`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-EMU`), namedNode(`${rdfs}label`), literal(`CGS EMU Dimension vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-EMU`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}QuantityKindDimensionVector_CGS`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-EMU`), namedNode(`${rdfs}comment`), literal(`A <em>CGS EMU Dimension Vector</em> is used to specify the dimensions for EMU C.G.S. quantity kind.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS`), namedNode(`${rdfs}label`), literal(`CGS Dimension vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS`), namedNode(`${rdfs}comment`), literal(`A <em>CGS Dimension Vector</em> is used to specify the dimensions for a C.G.S. quantity kind.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-ESU`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-ESU`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-ESU`), namedNode(`${rdfs}label`), literal(`CGS ESU Dimension vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-ESU`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}QuantityKindDimensionVector_CGS`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-ESU`), namedNode(`${rdfs}comment`), literal(`A <em>CGS ESU Dimension Vector</em> is used to specify the dimensions for ESU C.G.S. quantity kind.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-GAUSS`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-GAUSS`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-GAUSS`), namedNode(`${rdfs}label`), literal(`CGS GAUSS Dimension vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-GAUSS`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}QuantityKindDimensionVector_CGS`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-GAUSS`), namedNode(`${rdfs}comment`), literal(`A <em>CGS GAUSS Dimension Vector</em> is used to specify the dimensions for Gaussioan C.G.S. quantity kind.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-LH`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-LH`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-LH`), namedNode(`${rdfs}label`), literal(`CGS LH Dimension vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-LH`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}QuantityKindDimensionVector_CGS`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_CGS-LH`), namedNode(`${rdfs}comment`), literal(`A <em>CGS LH Dimension Vector</em> is used to specify the dimensions for Lorentz-Heaviside C.G.S. quantity kind.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_ISO`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_ISO`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_ISO`), namedNode(`${rdfs}label`), literal(`ISO Dimension vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_ISO`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_Imperial`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_Imperial`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_Imperial`), namedNode(`${rdfs}label`), literal(`Imperial dimension vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_Imperial`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_SI`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_SI`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_SI`), namedNode(`${rdfs}label`), literal(`Quantity Kind Dimension vector (SI)`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_SI`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Quantity Dimension Vector'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityKindDimensionVector_SI`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityType`), namedNode(`${rdfs}label`), literal(`Quantity type`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityType`), namedNode(`${dcterms}description`), literal(`\\(\\textit{Quantity Type}\\) is an enumeration of quanity kinds. It specializes \\(\\boxed{dtype:EnumeratedValue}\\) by constrinaing \\(\\boxed{dtype:value}\\) to instances of \\(\\boxed{qudt:QuantityKind}\\).`, namedNode(`${qudt}LatexString`)), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityType`), namedNode(`${rdfs}subClassOf`), blankNodes[400], namedNode(qudt)),
        quad(blankNodes[400], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[400], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}QuantityKind`), namedNode(qudt)),
        quad(blankNodes[400], namedNode(`${owl}onProperty`), namedNode(`${dtype}value`), namedNode(qudt)),
        quad(blankNodes[161], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[161], namedNode(`${owl}onProperty`), namedNode(`${qudt}unit`), namedNode(qudt)),
        quad(blankNodes[161], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType-basis`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType-basis`), namedNode(`${sh}path`), namedNode(`${qudt}basis`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType-basis`), namedNode(`${sh}class`), namedNode(`${qudt}QuantityType`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType-elementType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType-elementType`), namedNode(`${sh}path`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType-elementType`), namedNode(`${sh}class`), namedNode(`${qudt}NumericType`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType-elementUnit`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType-elementUnit`), namedNode(`${sh}path`), namedNode(`${qudt}elementUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType-elementUnit`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType-elementUnit`), namedNode(`${sh}class`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementUnit`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementUnit`), namedNode(`${rdfs}label`), literal(`element unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType`), namedNode(`${rdfs}label`), literal(`Quantity value type`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Dimensional Data Type'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}DimensionalDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType`), namedNode(`${rdfs}subClassOf`), blankNodes[401], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType`), namedNode(`${rdfs}subClassOf`), blankNodes[402], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType`), namedNode(`${rdfs}subClassOf`), blankNodes[403], namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType`), namedNode(`${sh}property`), namedNode(`${qudt}QuantityValueType-basis`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType`), namedNode(`${sh}property`), namedNode(`${qudt}QuantityValueType-elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}QuantityValueType`), namedNode(`${sh}property`), namedNode(`${qudt}QuantityValueType-elementUnit`), namedNode(qudt)),
        quad(blankNodes[401], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[401], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(blankNodes[401], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementUnit`), namedNode(qudt)),
        quad(blankNodes[402], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[402], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}NumericType`), namedNode(qudt)),
        quad(blankNodes[402], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[403], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[403], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}QuantityType`), namedNode(qudt)),
        quad(blankNodes[403], namedNode(`${owl}onProperty`), namedNode(`${qudt}basis`), namedNode(qudt)),
        quad(namedNode(`${qudt}RELATIVE-DATETIME`), namedNode(`${rdf}type`), namedNode(`${qudt}DateStringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}RELATIVE-DATETIME`), namedNode(`${rdfs}label`), literal(`Relative Date And Time`), namedNode(qudt)),
        quad(namedNode(`${qudt}RELATIVE-DATETIME`), namedNode(`${dcterms}description`), literal(`Days and time relative to some Epoch`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}RELATIVE-DATETIME`), namedNode(`${qudt}dimensionality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}RELATIVE-DATETIME`), namedNode(`${dtype}literal`), literal(`reldate`), namedNode(qudt)),
        quad(namedNode(`${qudt}RELATIVE-DATETIME`), namedNode(`${qudt}encodingDescription`), literal(`TBD`), namedNode(qudt)),
        quad(namedNode(`${qudt}RN_BINARY-BASE`), namedNode(`${rdf}type`), namedNode(`${qudt}RealNumberType`), namedNode(qudt)),
        quad(namedNode(`${qudt}RN_BINARY-BASE`), namedNode(`${rdfs}label`), literal(`Real number binary base`), namedNode(qudt)),
        quad(namedNode(`${qudt}RN_BINARY-BASE`), namedNode(`${rdfs}comment`), literal(`A rational number can be expressed in the form m*b^e, where m (the mantissa), b (the base), and e (the exponent) are integers. In this case b is chosen to be 2, and then the values of m and e are determined given this choice of base.`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealNumberType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealNumberType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealNumberType`), namedNode(`${rdfs}label`), literal(`Real number type`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealNumberType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}RealDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealNumberType`), namedNode(`${rdfs}comment`), literal(`This is the class of data values that approximate real numbers in finite precision. Often, such values are expressed in "mantissa, base, exponent" form. Any rational number can be expressed in the form m*b^e, where m (the mantissa), b (the base), and e (the exponent) are integers. Typically, b is chosen to be either 2 or 10, and then the values of m and e are determined given the choice of base.`), namedNode(qudt)),
        quad(namedNode(`${qudt}RN_DECIMAL-BASE`), namedNode(`${rdf}type`), namedNode(`${qudt}RealNumberType`), namedNode(qudt)),
        quad(namedNode(`${qudt}RN_DECIMAL-BASE`), namedNode(`${rdfs}label`), literal(`Real number decminal base`), namedNode(qudt)),
        quad(namedNode(`${qudt}RN_DECIMAL-BASE`), namedNode(`${rdfs}comment`), literal(`A rational number can be expressed in the form m*b^e, where m (the mantissa), b (the base), and e (the exponent) are integers. In this case b is chosen to be 10, and then the values of m and e are determined given this choice of base.`), namedNode(qudt)),
        quad(namedNode(`${qudt}RawValueTupleMember-elementType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}RawValueTupleMember-elementType`), namedNode(`${sh}path`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}RawValueTupleMember-elementType`), namedNode(`${sh}class`), namedNode(`${qudt}UnsignedIntegerType`), namedNode(qudt)),
        quad(blankNodes[275], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[275], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}UnsignedIntegerType`), namedNode(qudt)),
        quad(blankNodes[275], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[276], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(blankNodes[276], namedNode(`${owl}intersectionOf`), blankNodes[404], namedNode(qudt)),
        quad(blankNodes[277], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(blankNodes[277], namedNode(`${owl}intersectionOf`), blankNodes[405], namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype-base`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype-base`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype-base`), namedNode(`${sh}path`), namedNode(`${qudt}base`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype-base`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}base`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}base`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}base`), namedNode(`${rdfs}label`), literal(`base`), namedNode(qudt)),
        quad(namedNode(`${qudt}base`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype-maxExponent`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype-maxExponent`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype-maxExponent`), namedNode(`${sh}path`), namedNode(`${qudt}maxExponent`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype-maxExponent`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}maxExponent`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxExponent`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxExponent`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxExponent`), namedNode(`${rdfs}label`), literal(`max exponent`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxExponent`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype-precision`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype-precision`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype-precision`), namedNode(`${sh}path`), namedNode(`${qudt}precision`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype-precision`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}precision`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}precision`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}precision`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}precision`), namedNode(`${rdfs}label`), literal(`precision`), namedNode(qudt)),
        quad(namedNode(`${qudt}precision`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}precision`), namedNode(`${dcterms}description`), literal(`Precision is the number of digits used to perform a given computation. The concepts of accuracy and precision are both closely related and often confused. While the accuracy of a number x is given by the number of significant decimal (or other) digits to the right of the decimal point in x, the precision of x is the total number of significant decimal (or other) digits.

For a given numeric data type, the value of type:precision (?p) is related to the values of type:maxMantissa (?M) and type:base (?b) by the formula 

?p := log(?b, ?M) 

where log(a,y) = x iff y=a^x.`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype`), namedNode(`${rdfs}label`), literal(`Real Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype`), namedNode(`${dcterms}description`), literal(`A real number is represented as a factor, called the mantissa, multiplied by a power (the exponent) of a base. Different bases yield different approximations to real numbers, and conversion between them is limited in accuracy.  Four floating-point types are defined in 'IEEE-754 Standard for Binary Floating-Point'. These types are 'single', 'extended single', 'double', and 'extended double'.`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}NumericType`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[406], namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[407], namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype`), namedNode(`${rdfs}subClassOf`), blankNodes[408], namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}RealDatatype-base`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}RealDatatype-maxExponent`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDatatype`), namedNode(`${sh}property`), namedNode(`${qudt}RealDatatype-precision`), namedNode(qudt)),
        quad(blankNodes[406], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[406], namedNode(`${owl}onProperty`), namedNode(`${qudt}maxExponent`), namedNode(qudt)),
        quad(blankNodes[406], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[407], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[407], namedNode(`${owl}onProperty`), namedNode(`${qudt}base`), namedNode(qudt)),
        quad(blankNodes[407], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[408], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[408], namedNode(`${owl}onProperty`), namedNode(`${qudt}precision`), namedNode(qudt)),
        quad(blankNodes[408], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDoublePrecisionType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDoublePrecisionType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDoublePrecisionType`), namedNode(`${rdfs}label`), literal(`Real Double Precision Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDoublePrecisionType`), namedNode(`${dcterms}description`), literal(`A real double precision data type specifies how a real number, or an approximation of a real number is stored in memory that occupies two words in computer memory, where the byte length of a word depends on machine address size of the computer processor. For example, on 32-bit machine architectures, a word is four bytes.

An example of a real double precision data type specification is the IEEE 754 standard for encoding binary or decimal floating point numbers in 8 bytes for storage on 32-bit machine architectures.`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDoublePrecisionType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}DoublePrecisionType`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDoublePrecisionType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}RealDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}RealDoublePrecisionType`), namedNode(`${owl}equivalentClass`), blankNodes[409], namedNode(qudt)),
        quad(blankNodes[409], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(blankNodes[409], namedNode(`${owl}intersectionOf`), blankNodes[410], namedNode(qudt)),
        quad(blankNodes[272], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(blankNodes[272], namedNode(`${owl}intersectionOf`), blankNodes[411], namedNode(qudt)),
        quad(namedNode(`${qudt}Record`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Record`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Record`), namedNode(`${rdfs}label`), literal(`Record Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Record`), namedNode(`${dcterms}description`), literal(`A Record Type is a type whose values are records, i.e. aggregates of several items of possibly different types. The aggregated items are called fields or members and are usually identified or indexed by field labels.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Record`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CompositeDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Record`), namedNode(`${rdfs}subClassOf`), blankNodes[412], namedNode(qudt)),
        quad(blankNodes[412], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[412], namedNode(`${owl}allValuesFrom`), namedNode(`${ns26}FieldTypeList`), namedNode(qudt)),
        quad(blankNodes[412], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementTypeList`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceDatatype`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceDatatype`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceDatatype`), namedNode(`${rdfs}label`), literal(`Reference Data Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceDatatype`), namedNode(`${dcterms}description`), literal(`A reference is an object containing information which refers to data stored elsewhere, as opposed to containing the data itself. A reference data type is a data type that specifies how a reference is represented and stored in memory, as well as the operations that can be performed on reference values. The most common example of a reference data type is a pointer. [Wikipedia]`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceDatatype`), namedNode(`${dcterms}description`), literal(`A reference is an object containing information which refers to data stored elsewhere, as opposed to containing the data itself. A reference data type is a data type that specifies how a reference is represented and stored in memory, as well as the operations that can be performed on reference values. The most common example of a reference data type is a pointer.`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceDatatype`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}StructuredDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-comment`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-comment`), namedNode(`${sh}path`), namedNode(`${vaem}comment`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-comment`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-description`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-description`), namedNode(`${sh}path`), namedNode(`${vaem}description`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-description`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-frameType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-frameType`), namedNode(`${sh}path`), namedNode(`${qudt}frameType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-frameType`), namedNode(`${sh}class`), namedNode(`${qudt}FrameType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-realization`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-realization`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-realization`), namedNode(`${sh}path`), namedNode(`${qudt}realization`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-realization`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-xAxisDefinition`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-xAxisDefinition`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-xAxisDefinition`), namedNode(`${sh}path`), namedNode(`${qudt}xAxisDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-xAxisDefinition`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-xCoordinateDefinition`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-xCoordinateDefinition`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-xCoordinateDefinition`), namedNode(`${sh}path`), namedNode(`${qudt}xCoordinateDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-xCoordinateDefinition`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}xCoordinateDefinition`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}xCoordinateDefinition`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}xCoordinateDefinition`), namedNode(`${rdfs}label`), literal(`X-Coordinate definition`), namedNode(qudt)),
        quad(namedNode(`${qudt}xCoordinateDefinition`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-yAxisDefinition`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-yAxisDefinition`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-yAxisDefinition`), namedNode(`${sh}path`), namedNode(`${qudt}yAxisDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-yAxisDefinition`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-yCoordinateDefinition`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-yCoordinateDefinition`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-yCoordinateDefinition`), namedNode(`${sh}path`), namedNode(`${qudt}yCoordinateDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-yCoordinateDefinition`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}yCoordinateDefinition`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}yCoordinateDefinition`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}yCoordinateDefinition`), namedNode(`${rdfs}label`), literal(`Y-Coordinate definition`), namedNode(qudt)),
        quad(namedNode(`${qudt}yCoordinateDefinition`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-zAxisDefinition`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-zAxisDefinition`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-zAxisDefinition`), namedNode(`${sh}path`), namedNode(`${qudt}zAxisDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-zAxisDefinition`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-zCoordinateDefinition`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-zCoordinateDefinition`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-zCoordinateDefinition`), namedNode(`${sh}path`), namedNode(`${qudt}zCoordinateDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}ReferenceFrame-zCoordinateDefinition`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}zCoordinateDefinition`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}zCoordinateDefinition`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}zCoordinateDefinition`), namedNode(`${rdfs}label`), literal(`Z-Coordinate definition`), namedNode(qudt)),
        quad(namedNode(`${qudt}zCoordinateDefinition`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[166], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[166], namedNode(`${owl}onProperty`), namedNode(`${vaem}description`), namedNode(qudt)),
        quad(blankNodes[166], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[167], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[167], namedNode(`${owl}onProperty`), namedNode(`${vaem}comment`), namedNode(qudt)),
        quad(blankNodes[167], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[168], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[168], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}FrameType`), namedNode(qudt)),
        quad(blankNodes[168], namedNode(`${owl}onProperty`), namedNode(`${qudt}frameType`), namedNode(qudt)),
        quad(blankNodes[169], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[169], namedNode(`${owl}onProperty`), namedNode(`${qudt}zAxisDefinition`), namedNode(qudt)),
        quad(blankNodes[169], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[170], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[170], namedNode(`${owl}onProperty`), namedNode(`${qudt}zCoordinateDefinition`), namedNode(qudt)),
        quad(blankNodes[170], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[171], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[171], namedNode(`${owl}onProperty`), namedNode(`${qudt}yAxisDefinition`), namedNode(qudt)),
        quad(blankNodes[171], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[172], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[172], namedNode(`${owl}onProperty`), namedNode(`${qudt}xCoordinateDefinition`), namedNode(qudt)),
        quad(blankNodes[172], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[173], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[173], namedNode(`${owl}onProperty`), namedNode(`${qudt}realization`), namedNode(qudt)),
        quad(blankNodes[173], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[174], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[174], namedNode(`${owl}onProperty`), namedNode(`${qudt}yCoordinateDefinition`), namedNode(qudt)),
        quad(blankNodes[174], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[175], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[175], namedNode(`${owl}onProperty`), namedNode(`${qudt}xAxisDefinition`), namedNode(qudt)),
        quad(blankNodes[175], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}RotatingReferenceFrame`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}RotatingReferenceFrame`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}RotatingReferenceFrame`), namedNode(`${rdfs}label`), literal(`Rotating reference frame`), namedNode(qudt)),
        quad(namedNode(`${qudt}RotatingReferenceFrame`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Reference Frame'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}RotatingReferenceFrame`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ReferenceFrame`), namedNode(qudt)),
        quad(namedNode(`${qudt}Rule`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Rule`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Rule`), namedNode(`${rdfs}label`), literal(`Rule`), namedNode(qudt)),
        quad(namedNode(`${qudt}Rule`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}Rule`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Verifiable`), namedNode(qudt)),
        quad(namedNode(`${qudt}Rule`), namedNode(`${rdfs}subClassOf`), blankNodes[413], namedNode(qudt)),
        quad(namedNode(`${qudt}Rule`), namedNode(`${rdfs}subClassOf`), blankNodes[414], namedNode(qudt)),
        quad(namedNode(`${qudt}Rule`), namedNode(`${rdfs}subClassOf`), blankNodes[415], namedNode(qudt)),
        quad(blankNodes[413], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[413], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}RuleType`), namedNode(qudt)),
        quad(blankNodes[413], namedNode(`${owl}onProperty`), namedNode(`${qudt}ruleType`), namedNode(qudt)),
        quad(blankNodes[414], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[414], namedNode(`${owl}onProperty`), namedNode(`${qudt}rationale`), namedNode(qudt)),
        quad(blankNodes[414], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[415], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[415], namedNode(`${owl}onProperty`), namedNode(`${qudt}example`), namedNode(qudt)),
        quad(blankNodes[415], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(namedNode(`${qudt}RuleType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}RuleType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}RuleType`), namedNode(`${rdfs}label`), literal(`Rule Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}RuleType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-SPACE-MATRIX`), namedNode(`${rdf}type`), namedNode(`${qudt}StateSpaceMatrixType`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-SPACE-MATRIX`), namedNode(`${rdfs}label`), literal(`STATE SPACE MATRIX`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceMatrixType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceMatrixType`), namedNode(`${rdfs}label`), literal(`State Space Matrix Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceMatrixType`), namedNode(`${dcterms}description`), literal(`In control engineering, a state space representation is a mathematical model of a physical system as a set of input, output and state variables related by first-order differential equations. To abstract from the number of inputs, outputs and states, the variables are expressed as vectors and the differential and algebraic equations are written in matrix form (the last one can be done when the dynamical system is linear and time invariant). `), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceMatrixType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}MatrixType`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-1`), namedNode(`${rdf}type`), namedNode(`${qudt}IndexedCollectionMember`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-1`), namedNode(`${rdfs}label`), literal(`STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-1`), namedNode(`${qudt}index`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-1`), namedNode(`${qudt}next`), namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-2`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-1`), namedNode(`${qudt}order`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-1`), namedNode(`${qudt}previous`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-1`), namedNode(`${qudt}type`), namedNode(`${qudt}FLOAT-DP`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-2`), namedNode(`${rdf}type`), namedNode(`${qudt}IndexedCollectionMember`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-2`), namedNode(`${rdfs}label`), literal(`STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-2`), namedNode(`${qudt}next`), namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-3`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-2`), namedNode(`${qudt}order`), literal(`2`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-2`), namedNode(`${qudt}type`), namedNode(`${qudt}FLOAT-DP`), namedNode(qudt)),
        quad(namedNode(`${qudt}order`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}order`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}order`), namedNode(`${rdfs}label`), literal(`order`), namedNode(qudt)),
        quad(namedNode(`${qudt}order`), namedNode(`${rdfs}range`), namedNode(`${xsd}nonNegativeInteger`), namedNode(qudt)),
        quad(namedNode(`${qudt}type`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}type`), namedNode(`${rdfs}label`), literal(`type`), namedNode(qudt)),
        quad(namedNode(`${qudt}type`), namedNode(`${rdfs}comment`), literal(`A reference to the specification of the data type of a variable or constant.`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-3`), namedNode(`${rdf}type`), namedNode(`${qudt}IndexedCollectionMember`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-3`), namedNode(`${rdfs}label`), literal(`STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-3`), namedNode(`${qudt}next`), namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-4`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-3`), namedNode(`${qudt}order`), literal(`3`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-3`), namedNode(`${qudt}type`), namedNode(`${qudt}FLOAT-DP`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-4`), namedNode(`${rdf}type`), namedNode(`${qudt}IndexedCollectionMember`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-4`), namedNode(`${rdfs}label`), literal(`STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-4`), namedNode(`${qudt}next`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-4`), namedNode(`${qudt}order`), literal(`4`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-4`), namedNode(`${qudt}type`), namedNode(`${qudt}FLOAT-DP`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST_MASS-PROPERTIES`), namedNode(`${rdf}type`), namedNode(`${qudt}IndexedList`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST_MASS-PROPERTIES`), namedNode(`${rdfs}label`), literal(`STATE-VECTOR-TYPE-LIST_MASS-PROPERTIES`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST_MASS-PROPERTIES`), namedNode(`${qudt}element`), namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-1`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST_MASS-PROPERTIES`), namedNode(`${qudt}element`), namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-2`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST_MASS-PROPERTIES`), namedNode(`${qudt}element`), namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-3`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR-TYPE-LIST_MASS-PROPERTIES`), namedNode(`${qudt}element`), namedNode(`${qudt}STATE-VECTOR-TYPE-LIST-MEMBER_MASS-PROPERTIES-ELEMENT-4`), namedNode(qudt)),
        quad(namedNode(`${qudt}element`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}element`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}element`), namedNode(`${rdfs}label`), literal(`element`), namedNode(qudt)),
        quad(namedNode(`${qudt}element`), namedNode(`${dcterms}description`), literal(`An element of an enumeration`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR_MASS-PROPERTIES`), namedNode(`${rdf}type`), namedNode(`${qudt}StateSpaceVectorType`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR_MASS-PROPERTIES`), namedNode(`${rdfs}label`), literal(`STATE-VECTOR-MASS-PROPERTIES`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR_MASS-PROPERTIES`), namedNode(`${qudt}type`), namedNode(`${qudt}StateSpaceVectorType`), namedNode(qudt)),
        quad(namedNode(`${qudt}STATE-VECTOR_MASS-PROPERTIES`), namedNode(`${qudt}objectValue`), namedNode(`${qudt}STATE-VECTOR-TYPE-LIST_MASS-PROPERTIES`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVectorType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVectorType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVectorType`), namedNode(`${rdfs}label`), literal(`State Space Vector Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVectorType`), namedNode(`${dcterms}description`), literal(`A state-space vector type in general control systems describes the observed states of an object in state space, e.g. in variables of the degrees of freedom for motion. As data types, state vector types are used to specify the structure of state vectors, such as how the observed state is encoded.`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVectorType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}VectorType`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVectorType`), namedNode(`${sh}property`), namedNode(`${qudt}StateSpaceVector-coordinateSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-bitOrder`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-bitOrder`), namedNode(`${sh}path`), namedNode(`${qudt}bitOrder`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-bitOrder`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-bitOrder`), namedNode(`${sh}class`), namedNode(`${qudt}EndianType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-bits`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-bits`), namedNode(`${sh}path`), namedNode(`${qudt}bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-bits`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-bits`), namedNode(`${sh}or`), namedNode(`${qudt}IntegerUnionList`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-byteOrder`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-byteOrder`), namedNode(`${sh}path`), namedNode(`${qudt}byteOrder`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-byteOrder`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-byteOrder`), namedNode(`${sh}class`), namedNode(`${qudt}EndianType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-bytes`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-bytes`), namedNode(`${sh}path`), namedNode(`${qudt}bytes`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-bytes`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-bytes`), namedNode(`${sh}or`), namedNode(`${qudt}IntegerUnionList`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-encoding`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-encoding`), namedNode(`${sh}path`), namedNode(`${qudt}encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-encoding`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-encoding`), namedNode(`${sh}class`), namedNode(`${qudt}Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-length`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-length`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-length`), namedNode(`${sh}path`), namedNode(`${qudt}length`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-length`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-maxExclusive`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-maxExclusive`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns29}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-maxExclusive`), namedNode(`${sh}path`), namedNode(`${qudt}maxExclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-maxExclusive`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-maxExclusive`), namedNode(`${sh}or`), namedNode(`${qudt}NumericUnionList`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxExclusive`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxExclusive`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxExclusive`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxExclusive`), namedNode(`${rdfs}label`), literal(`max exclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxExclusive`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxExclusive`), namedNode(`${dcterms}description`), literal(`maxExclusive is the exclusive upper bound of the value space for a datatype with the ordered property. The value of maxExclusive must be in the value space of the base type or be equal to {value} in {base type definition}.`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxExclusive`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}upperBound`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-maxInclusive`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-maxInclusive`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns29}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-maxInclusive`), namedNode(`${sh}path`), namedNode(`${qudt}maxInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-maxInclusive`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-maxInclusive`), namedNode(`${sh}or`), namedNode(`${qudt}NumericUnionList`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-minExclusive`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-minExclusive`), namedNode(`${sh}path`), namedNode(`${qudt}minExclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-minExclusive`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-minExclusive`), namedNode(`${sh}or`), namedNode(`${qudt}NumericUnionList`), namedNode(qudt)),
        quad(namedNode(`${qudt}minExclusive`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}minExclusive`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}minExclusive`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}minExclusive`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}minExclusive`), namedNode(`${rdfs}label`), literal(`min exclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}minExclusive`), namedNode(`${dcterms}description`), literal(`minExclusive is the exclusive lower bound of the value space for a datatype with the ordered property. The value of minExclusive must be in the value space of the base type or be equal to {value} in {base type definition}.`), namedNode(qudt)),
        quad(namedNode(`${qudt}minExclusive`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}lowerBound`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-minInclusive`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-minInclusive`), namedNode(`${sh}path`), namedNode(`${qudt}minInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-minInclusive`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-minInclusive`), namedNode(`${sh}or`), namedNode(`${qudt}NumericUnionList`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-rdfsDatatype`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-rdfsDatatype`), namedNode(`${sh}path`), namedNode(`${qudt}rdfsDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScalarDatatype-rdfsDatatype`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[91], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[91], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Encoding`), namedNode(qudt)),
        quad(blankNodes[91], namedNode(`${owl}onProperty`), namedNode(`${qudt}encoding`), namedNode(qudt)),
        quad(blankNodes[92], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[92], namedNode(`${owl}onProperty`), namedNode(`${qudt}bitOrder`), namedNode(qudt)),
        quad(blankNodes[92], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[93], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[93], namedNode(`${owl}onProperty`), namedNode(`${qudt}byteOrder`), namedNode(qudt)),
        quad(blankNodes[93], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[94], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[94], namedNode(`${owl}onProperty`), namedNode(`${qudt}encoding`), namedNode(qudt)),
        quad(blankNodes[94], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[95], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[95], namedNode(`${owl}onProperty`), namedNode(`${qudt}minExclusive`), namedNode(qudt)),
        quad(blankNodes[95], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[96], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[96], namedNode(`${owl}onProperty`), namedNode(`${qudt}minExclusive`), namedNode(qudt)),
        quad(blankNodes[96], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[97], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[97], namedNode(`${owl}onProperty`), namedNode(`${qudt}maxInclusive`), namedNode(qudt)),
        quad(blankNodes[97], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[98], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[98], namedNode(`${owl}onProperty`), namedNode(`${qudt}maxInclusive`), namedNode(qudt)),
        quad(blankNodes[98], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[99], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[99], namedNode(`${owl}onProperty`), namedNode(`${qudt}minInclusive`), namedNode(qudt)),
        quad(blankNodes[99], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[100], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[100], namedNode(`${owl}onProperty`), namedNode(`${qudt}minInclusive`), namedNode(qudt)),
        quad(blankNodes[100], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[101], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[101], namedNode(`${owl}onProperty`), namedNode(`${qudt}bits`), namedNode(qudt)),
        quad(blankNodes[101], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[102], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[102], namedNode(`${owl}onProperty`), namedNode(`${qudt}bits`), namedNode(qudt)),
        quad(blankNodes[102], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[103], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[103], namedNode(`${owl}onProperty`), namedNode(`${qudt}bytes`), namedNode(qudt)),
        quad(blankNodes[103], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[104], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[104], namedNode(`${owl}onProperty`), namedNode(`${qudt}bytes`), namedNode(qudt)),
        quad(blankNodes[104], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[105], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[105], namedNode(`${owl}allValuesFrom`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[105], namedNode(`${owl}onProperty`), namedNode(`${qudt}rdfsDatatype`), namedNode(qudt)),
        quad(blankNodes[106], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[106], namedNode(`${owl}allValuesFrom`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[106], namedNode(`${owl}onProperty`), namedNode(`${qudt}rdfsDatatype`), namedNode(qudt)),
        quad(blankNodes[107], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[107], namedNode(`${owl}onProperty`), namedNode(`${qudt}rdfsDatatype`), namedNode(qudt)),
        quad(blankNodes[107], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[108], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[108], namedNode(`${owl}onProperty`), namedNode(`${qudt}rdfsDatatype`), namedNode(qudt)),
        quad(blankNodes[108], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[109], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[109], namedNode(`${owl}onProperty`), namedNode(`${qudt}maxExclusive`), namedNode(qudt)),
        quad(blankNodes[109], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[110], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[110], namedNode(`${owl}onProperty`), namedNode(`${qudt}maxExclusive`), namedNode(qudt)),
        quad(blankNodes[110], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[111], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[111], namedNode(`${owl}onProperty`), namedNode(`${qudt}length`), namedNode(qudt)),
        quad(blankNodes[111], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[112], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[112], namedNode(`${owl}onProperty`), namedNode(`${qudt}length`), namedNode(qudt)),
        quad(blankNodes[112], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[288], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[288], namedNode(`${owl}onProperty`), namedNode(`${qudt}dataStructure`), namedNode(qudt)),
        quad(blankNodes[288], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[289], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[289], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}TransformType`), namedNode(qudt)),
        quad(blankNodes[289], namedNode(`${owl}onProperty`), namedNode(`${qudt}permissibleTransformation`), namedNode(qudt)),
        quad(blankNodes[290], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[290], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}MathsFunctionType`), namedNode(qudt)),
        quad(blankNodes[290], namedNode(`${owl}onProperty`), namedNode(`${qudt}permissibleMaths`), namedNode(qudt)),
        quad(blankNodes[291], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[291], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}ScaleType`), namedNode(qudt)),
        quad(blankNodes[291], namedNode(`${owl}onProperty`), namedNode(`${qudt}scaleType`), namedNode(qudt)),
        quad(blankNodes[292], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[292], namedNode(`${owl}onProperty`), namedNode(`${qudt}scaleType`), namedNode(qudt)),
        quad(blankNodes[292], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ScaleType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScaleType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScaleType`), namedNode(`${rdfs}label`), literal(`Scale type`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScaleType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScaleType`), namedNode(`${rdfs}subClassOf`), blankNodes[416], namedNode(qudt)),
        quad(namedNode(`${qudt}ScaleType`), namedNode(`${rdfs}subClassOf`), blankNodes[417], namedNode(qudt)),
        quad(namedNode(`${qudt}ScaleType`), namedNode(`${rdfs}subClassOf`), blankNodes[418], namedNode(qudt)),
        quad(namedNode(`${qudt}ScaleType`), namedNode(`${qudt}plainTextDescription`), literal(`Scales, or scales of measurement (or categorization) provide ways of quantifying measurements, values and other enumerated values according to a normative frame of reference.  Four different types of scales are typically used. These are interval, nominal, ordinal and ratio scales.`), namedNode(qudt)),
        quad(blankNodes[416], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[416], namedNode(`${owl}onProperty`), namedNode(`${qudt}dataStructure`), namedNode(qudt)),
        quad(blankNodes[416], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[417], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[417], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}TransformType`), namedNode(qudt)),
        quad(blankNodes[417], namedNode(`${owl}onProperty`), namedNode(`${qudt}permissibleTransformation`), namedNode(qudt)),
        quad(blankNodes[418], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[418], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}MathsFunctionType`), namedNode(qudt)),
        quad(blankNodes[418], namedNode(`${owl}onProperty`), namedNode(`${qudt}permissibleMaths`), namedNode(qudt)),
        quad(namedNode(`${qudt}ScaledUnit`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Unit'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Sequence-first`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Sequence-first`), namedNode(`${sh}path`), namedNode(`${rdf}first`), namedNode(qudt)),
        quad(namedNode(`${qudt}Sequence-first`), namedNode(`${sh}class`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Sequence-rest`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Sequence-rest`), namedNode(`${sh}path`), namedNode(`${rdf}rest`), namedNode(qudt)),
        quad(namedNode(`${qudt}Sequence-rest`), namedNode(`${sh}class`), namedNode(`${qudt}SequenceType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SequenceType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SequenceType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}SequenceType`), namedNode(`${rdfs}label`), literal(`Sequence`), namedNode(qudt)),
        quad(namedNode(`${qudt}SequenceType`), namedNode(`${dcterms}description`), literal(`A sequence is an enumerated collection of objects in which repetitions are allowed. Like a set, it contains members (also called elements, or terms). The number of elements (possibly infinite) is called the length of the sequence. Unlike a set, order matters, and exactly the same elements can appear multiple times at different positions in the sequence. Formally, a sequence can be defined as a function whose domain is either the set of the natural numbers (for infinite sequences) or the set of the first n natural numbers (for a sequence of finite length n). The position of an element in a sequence is its rank or index; it is the integer from which the element is the image. It depends on the context or of a specific convention, if the first element has index 0 or 1. [Wikipedia]`), namedNode(qudt)),
        quad(namedNode(`${qudt}SequenceType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CollectionType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SequenceType`), namedNode(`${sh}property`), namedNode(`${qudt}Sequence-first`), namedNode(qudt)),
        quad(namedNode(`${qudt}SequenceType`), namedNode(`${sh}property`), namedNode(`${qudt}Sequence-rest`), namedNode(qudt)),
        quad(namedNode(`${qudt}Sequence`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Sequence`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Sequence`), namedNode(`${rdfs}label`), literal(`Sequence`), namedNode(qudt)),
        quad(namedNode(`${qudt}Sequence`), namedNode(`${dcterms}description`), literal(`A "Structured Datatype".`), namedNode(qudt)),
        quad(namedNode(`${qudt}Sequence`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Collection`), namedNode(qudt)),
        quad(namedNode(`${qudt}Sequence`), namedNode(`${rdfs}subClassOf`), blankNodes[419], namedNode(qudt)),
        quad(namedNode(`${qudt}Sequence`), namedNode(`${rdfs}subClassOf`), blankNodes[420], namedNode(qudt)),
        quad(blankNodes[419], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[419], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(blankNodes[419], namedNode(`${owl}onProperty`), namedNode(`${rdf}first`), namedNode(qudt)),
        quad(blankNodes[420], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[420], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Sequence`), namedNode(qudt)),
        quad(blankNodes[420], namedNode(`${owl}onProperty`), namedNode(`${rdf}rest`), namedNode(qudt)),
        quad(namedNode(`${qudt}Set`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Set`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Set`), namedNode(`${rdfs}label`), literal(`Set Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Set`), namedNode(`${dcterms}description`), literal(`A Set Type is an abstract data type that defines the properties of sets. A set is a collection (container) of certain values, without any particular order, and no repeated values. It corresponds with a finite set in mathematics.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Set`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Collection`), namedNode(qudt)),
        quad(namedNode(`${qudt}SetType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SetType`), namedNode(`${rdfs}label`), literal(`Set Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}SetType`), namedNode(`${dcterms}description`), literal(`A Set Type is an abstract data type that defines the properties of sets. A set is a collection (container) of certain values, without any particular order, and no repeated values. It corresponds with a finite set in mathematics.`), namedNode(qudt)),
        quad(namedNode(`${qudt}SetType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}CollectionType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ShortIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ShortIntegerType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ShortIntegerType`), namedNode(`${rdfs}label`), literal(`Short Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}ShortIntegerType`), namedNode(`${dcterms}description`), literal(`A Short Integer is an integer that can be represented in two octets (16 bits) of machine memory. Short integers may be signed or unsigned.`), namedNode(qudt)),
        quad(namedNode(`${qudt}ShortIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}IntegerDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ShortSignedIntegerEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}IntegerEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ShortSignedIntegerEncoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}ShortSignedIntegerEncoding`), namedNode(`${rdfs}label`), literal(`Short Signed Integer Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}ShortSignedIntegerEncoding`), namedNode(`${qudt}bytes`), literal(`2`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ShortUnsignedIntegerEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}BooleanEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ShortUnsignedIntegerEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}IntegerEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}ShortUnsignedIntegerEncoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}ShortUnsignedIntegerEncoding`), namedNode(`${rdfs}label`), literal(`Short Unsigned Integer Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}ShortUnsignedIntegerEncoding`), namedNode(`${qudt}bytes`), literal(`2`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType-literal`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType-literal`), namedNode(`${sh}path`), namedNode(`${dtype}literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType-maxInclusive`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType-maxInclusive`), namedNode(`${sh}path`), namedNode(`${qudt}maxInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType-maxInclusive`), namedNode(`${sh}or`), namedNode(`${qudt}NumericUnionList`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType-minInclusive`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType-minInclusive`), namedNode(`${sh}path`), namedNode(`${qudt}minInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType-minInclusive`), namedNode(`${sh}or`), blankNodes[421], namedNode(qudt)),
        quad(blankNodes[421], namedNode(`${rdf}first`), blankNodes[422], namedNode(qudt)),
        quad(blankNodes[421], namedNode(`${rdf}rest`), blankNodes[423], namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType`), namedNode(`${rdfs}label`), literal(`Signed Big Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType`), namedNode(`${dcterms}description`), literal(`A Signed Big Integer is a signed integer that can be represented in eight octets (64 bits) of machine memory.`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}BigIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}SignedIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[424], namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[425], namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[426], namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}SignedBigIntegerType-literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}SignedBigIntegerType-maxInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedBigIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}SignedBigIntegerType-minInclusive`), namedNode(qudt)),
        quad(blankNodes[424], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[424], namedNode(`${owl}onProperty`), namedNode(`${qudt}minInclusive`), namedNode(qudt)),
        quad(blankNodes[424], namedNode(`${owl}hasValue`), literal(`-2^{63}`), namedNode(qudt)),
        quad(blankNodes[425], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[425], namedNode(`${owl}onProperty`), namedNode(`${dtype}literal`), namedNode(qudt)),
        quad(blankNodes[425], namedNode(`${owl}hasValue`), literal(`SI64`), namedNode(qudt)),
        quad(blankNodes[426], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[426], namedNode(`${owl}onProperty`), namedNode(`${qudt}maxInclusive`), namedNode(qudt)),
        quad(blankNodes[426], namedNode(`${owl}hasValue`), literal(`2^{63}-1`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedIntegerEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}IntegerEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedIntegerEncoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedIntegerEncoding`), namedNode(`${rdfs}label`), literal(`Signed Integer Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedIntegerEncoding`), namedNode(`${qudt}bytes`), literal(`4`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedType`), namedNode(`${rdfs}label`), literal(`Signed Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedType`), namedNode(`${dcterms}description`), literal(`A signed type is a numeric type that distinguishes between positive and negative numbers using an encoding scheme, such as sign and magnitude, one's compliment, and two's compliment to represent negative numbers.`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}NumericType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedType`), namedNode(`${rdfs}subClassOf`), blankNodes[427], namedNode(qudt)),
        quad(namedNode(`${qudt}SignedType`), namedNode(`${sh}property`), namedNode(`${qudt}SignedType-signedness`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedType`), namedNode(`${owl}equivalentClass`), blankNodes[428], namedNode(qudt)),
        quad(namedNode(`${qudt}SignedType`), namedNode(`${owl}disjointWith`), namedNode(`${qudt}UnsignedType`), namedNode(qudt)),
        quad(blankNodes[376], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(blankNodes[376], namedNode(`${owl}intersectionOf`), blankNodes[429], namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType-abbreviation`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType-abbreviation`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType-abbreviation`), namedNode(`${sh}hasValue`), literal(`SI32`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType-abbreviation`), namedNode(`${sh}path`), namedNode(`${qudt}abbreviation`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType-maxInclusive`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType-maxInclusive`), namedNode(`${sh}path`), namedNode(`${qudt}maxInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType-maxInclusive`), namedNode(`${sh}or`), namedNode(`${qudt}NumericUnionList`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType-minInclusive`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType-minInclusive`), namedNode(`${sh}path`), namedNode(`${qudt}minInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType-minInclusive`), namedNode(`${sh}or`), blankNodes[430], namedNode(qudt)),
        quad(blankNodes[430], namedNode(`${rdf}first`), blankNodes[431], namedNode(qudt)),
        quad(blankNodes[430], namedNode(`${rdf}rest`), blankNodes[432], namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType`), namedNode(`${rdfs}label`), literal(`Signed Long Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType`), namedNode(`${dcterms}description`), literal(`A Signed Long Integer is a signed integer that can be represented in four octets (32 bits) of machine memory.`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}LongIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}SignedIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[433], namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[434], namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[435], namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}SignedLongIntegerType-abbreviation`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}SignedLongIntegerType-maxInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedLongIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}SignedLongIntegerType-minInclusive`), namedNode(qudt)),
        quad(blankNodes[433], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[433], namedNode(`${owl}onProperty`), namedNode(`${dtype}literal`), namedNode(qudt)),
        quad(blankNodes[433], namedNode(`${owl}hasValue`), literal(`UI32`), namedNode(qudt)),
        quad(blankNodes[434], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[434], namedNode(`${owl}onProperty`), namedNode(`${qudt}minInclusive`), namedNode(qudt)),
        quad(blankNodes[434], namedNode(`${owl}hasValue`), literal(`-2^{31}`), namedNode(qudt)),
        quad(blankNodes[435], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[435], namedNode(`${owl}onProperty`), namedNode(`${qudt}maxInclusive`), namedNode(qudt)),
        quad(blankNodes[435], namedNode(`${owl}hasValue`), literal(`2^{31}-1`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedMediumIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedMediumIntegerType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedMediumIntegerType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedMediumIntegerType`), namedNode(`${rdfs}label`), literal(`Signed Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedMediumIntegerType`), namedNode(`${dcterms}description`), literal(`A "Signed Medium Integers" is an integer of 24 bits that can take on both positive and negative values.`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedMediumIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}SignedIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedMediumIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[436], namedNode(qudt)),
        quad(namedNode(`${qudt}SignedMediumIntegerType`), namedNode(`${owl}equivalentClass`), blankNodes[437], namedNode(qudt)),
        quad(blankNodes[436], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[436], namedNode(`${owl}onProperty`), namedNode(`${qudt}bytes`), namedNode(qudt)),
        quad(blankNodes[436], namedNode(`${owl}hasValue`), literal(`3`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[437], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(blankNodes[437], namedNode(`${owl}intersectionOf`), blankNodes[438], namedNode(qudt)),
        quad(namedNode(`${qudt}SignedShortIntegerType-abbreviation`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedShortIntegerType-abbreviation`), namedNode(`${sh}path`), namedNode(`${qudt}abbreviation`), namedNode(qudt)),
        quad(blankNodes[45], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[45], namedNode(`${owl}onProperty`), namedNode(`${dtype}literal`), namedNode(qudt)),
        quad(blankNodes[45], namedNode(`${owl}hasValue`), literal(`SI16`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedType-signedness`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedType-signedness`), namedNode(`${sh}path`), namedNode(`${qudt}signedness`), namedNode(qudt)),
        quad(blankNodes[427], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[427], namedNode(`${owl}onProperty`), namedNode(`${qudt}signedness`), namedNode(qudt)),
        quad(blankNodes[427], namedNode(`${owl}hasValue`), namedNode(`${ns24}Signed`), namedNode(qudt)),
        quad(blankNodes[428], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(blankNodes[428], namedNode(`${owl}intersectionOf`), blankNodes[439], namedNode(qudt)),
        quad(namedNode(`${qudt}SignedVariableLengthIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedVariableLengthIntegerType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedVariableLengthIntegerType`), namedNode(`${rdfs}label`), literal(`Signed Variable Length Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedVariableLengthIntegerType`), namedNode(`${dcterms}description`), literal(`A Signed Variable Length Integer data type defines a data structure for representing signed integers that uses a variable number of bits depending on the magnitude of the integer. Typically, variable length integer data types are between one and 64 bits in length.`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedVariableLengthIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}SignedIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SignedVariableLengthIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}VariableLengthIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType`), namedNode(`${rdfs}label`), literal(`Variable Length Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType`), namedNode(`${dcterms}description`), literal(`A Variable Length Integer data type defines a data structure for representing integers that uses a variable number of bits depending on the magnitude of the integer. Typically, variable length integer data types are between one and 64 bits in length.`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}IntegerDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[440], namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[441], namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}VariableLengthIntegerType-maxBits`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}VariableLengthIntegerType-minBits`), namedNode(qudt)),
        quad(blankNodes[357], namedNode(`${rdf}first`), namedNode(`${qudt}SIGNED`), namedNode(qudt)),
        quad(blankNodes[357], namedNode(`${rdf}rest`), blankNodes[442], namedNode(qudt)),
        quad(namedNode(`${qudt}SinglePrecisionRealEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}FloatingPointEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SinglePrecisionRealEncoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}SinglePrecisionRealEncoding`), namedNode(`${rdfs}label`), literal(`Single Precision Real Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}SinglePrecisionRealEncoding`), namedNode(`${qudt}bytes`), literal(`32`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}SolidAngleUnit`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SolidAngleUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}SolidAngleUnit`), namedNode(`${rdfs}label`), literal(`Solid Angle Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}SolidAngleUnit`), namedNode(`${dcterms}description`), literal(`The solid angle subtended by a surface S is defined as the surface area of a unit sphere covered by the surface S's projection onto the sphere. A solid angle is related to the surface of a sphere in the same way an ordinary angle is related to the circumference of a circle. Since the total surface area of the unit sphere is 4*pi, the measure of solid angle will always be between 0 and 4*pi.`), namedNode(qudt)),
        quad(namedNode(`${qudt}SolidAngleUnit`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}AngleUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}SplineCalibrator`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SplineCalibrator`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}SplineCalibrator`), namedNode(`${rdfs}label`), literal(`Spline calibrator`), namedNode(qudt)),
        quad(namedNode(`${qudt}SplineCalibrator`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Map Type'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}SplineCalibrator`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Map`), namedNode(qudt)),
        quad(namedNode(`${qudt}SplineCalibratorType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SplineCalibratorType`), namedNode(`${rdfs}label`), literal(`Spline calibrator type`), namedNode(qudt)),
        quad(namedNode(`${qudt}SplineCalibratorType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}MapType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SplinePoint`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SplinePoint`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}SplinePoint`), namedNode(`${rdfs}label`), literal(`Spline point`), namedNode(qudt)),
        quad(namedNode(`${qudt}SplinePoint`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Tuple Type'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}SplinePoint`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Tuple`), namedNode(qudt)),
        quad(namedNode(`${qudt}SplinePointType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SplinePointType`), namedNode(`${rdfs}label`), literal(`Spline point type`), namedNode(qudt)),
        quad(namedNode(`${qudt}SplinePointType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TupleType`), namedNode(qudt)),
        quad(namedNode(`${qudt}StandardsUnit`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Unit'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceMatrix`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceMatrix`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceMatrix`), namedNode(`${rdfs}label`), literal(`State Space Matrix Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceMatrix`), namedNode(`${dcterms}description`), literal(`In control engineering, a state space representation is a mathematical model of a physical system as a set of input, output and state variables related by first-order differential equations. To abstract from the number of inputs, outputs and states, the variables are expressed as vectors and the differential and algebraic equations are written in matrix form (the last one can be done when the dynamical system is linear and time invariant). `), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceMatrix`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Matrix`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVector-coordinateSystem`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVector-coordinateSystem`), namedNode(`${sh}path`), namedNode(`${qudt}coordinateSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVector-coordinateSystem`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVector-coordinateSystem`), namedNode(`${sh}class`), namedNode(`${qudt}CoordinateSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}coordinateSystem`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}coordinateSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}coordinateSystem`), namedNode(`${rdfs}label`), literal(`coordinate system`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVector`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVector`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVector`), namedNode(`${rdfs}label`), literal(`State Space Vector Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVector`), namedNode(`${dcterms}description`), literal(`A state vector in general control systems describes the observed states of an object in state space, e.g. in variables of the degrees of freedom for motion. As data types, state vector types are used to specify the structure of state vectors, such as how the observed state is encoded.`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVector`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVector`), namedNode(`${rdfs}subClassOf`), blankNodes[443], namedNode(qudt)),
        quad(namedNode(`${qudt}StateSpaceVector`), namedNode(`${rdfs}subClassOf`), blankNodes[444], namedNode(qudt)),
        quad(blankNodes[443], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[443], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}CoordinateSystem`), namedNode(qudt)),
        quad(blankNodes[443], namedNode(`${owl}onProperty`), namedNode(`${qudt}coordinateSystem`), namedNode(qudt)),
        quad(blankNodes[444], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[444], namedNode(`${owl}onProperty`), namedNode(`${qudt}coordinateSystem`), namedNode(qudt)),
        quad(blankNodes[444], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}StateVectorType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateVectorType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateVectorType`), namedNode(`${rdfs}label`), literal(`State Vector Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateVectorType`), namedNode(`${dcterms}description`), literal(`A state-space vector type in general control systems describes the observed states of an object in state space, e.g. in variables of the degrees of freedom for motion. As data types, state vector types are used to specify the structure of state vectors, such as how the observed state is encoded.`), namedNode(qudt)),
        quad(namedNode(`${qudt}StateVectorType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}VectorType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Statement`), namedNode(`${rdf}type`), namedNode(`${rdfs}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Statement`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Statement`), namedNode(`${rdfs}label`), literal(`Statement`), namedNode(qudt)),
        quad(namedNode(`${qudt}Statement`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdf}Statement`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringList-first`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringList-first`), namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringList-first`), namedNode(`${sh}path`), namedNode(`${rdf}first`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringList-rest`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringList-rest`), namedNode(`${sh}path`), namedNode(`${rdf}rest`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringList-rest`), namedNode(`${sh}class`), namedNode(`${qudt}StringList`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringList`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringList`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringList`), namedNode(`${rdfs}label`), literal(`String list`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringList`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}List`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringList`), namedNode(`${sh}property`), namedNode(`${qudt}StringList-first`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringList`), namedNode(`${sh}property`), namedNode(`${qudt}StringList-rest`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-dimensionality`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-dimensionality`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-dimensionality`), namedNode(`${sh}path`), namedNode(`${qudt}dimensionality`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-elementType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-elementType`), namedNode(`${sh}path`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-elementType`), namedNode(`${sh}class`), namedNode(`${qudt}CharacterType`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-isByteString`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-isByteString`), namedNode(`${sh}path`), namedNode(`${qudt}isByteString`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-isByteString`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-isByteString`), namedNode(`${sh}class`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}isByteString`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}isByteString`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}isByteString`), namedNode(`${rdfs}label`), literal(`is byte string`), namedNode(qudt)),
        quad(namedNode(`${qudt}isByteString`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-maxLength`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-maxLength`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-maxLength`), namedNode(`${sh}path`), namedNode(`${qudt}maxLength`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-maxLength`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-typeMatrix`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-typeMatrix`), namedNode(`${sh}path`), namedNode(`${qudt}typeMatrix`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-typeMatrix`), namedNode(`${sh}maxCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}StringType-typeMatrix`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[243], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[243], namedNode(`${owl}onProperty`), namedNode(`${qudt}isByteString`), namedNode(qudt)),
        quad(blankNodes[243], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[244], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[244], namedNode(`${owl}onProperty`), namedNode(`${qudt}maxLength`), namedNode(qudt)),
        quad(blankNodes[244], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[245], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[245], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}CharacterType`), namedNode(qudt)),
        quad(blankNodes[245], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[246], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[246], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionality`), namedNode(qudt)),
        quad(blankNodes[246], namedNode(`${owl}hasValue`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[247], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[247], namedNode(`${owl}onProperty`), namedNode(`${qudt}typeMatrix`), namedNode(qudt)),
        quad(blankNodes[247], namedNode(`${owl}cardinality`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF16-elementType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF16-elementType`), namedNode(`${sh}path`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF16-elementType`), namedNode(`${sh}class`), namedNode(`${qudt}CharacterType`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF16`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF16`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF16`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF16`), namedNode(`${rdfs}label`), literal(`String UTF16 Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF16`), namedNode(`${dcterms}description`), literal(`String UTF-16 Type is a string data type that specifies the properties of string data structures which encode strings using the UTF-16 encoding. UTF-16 is the native internal representation of text in the Microsoft Windows NT/Windows 2000/Windows XP/Windows CE, Qualcomm BREW, and Symbian operating systems; the Java and .NET byte code environments; Mac OS X's Cocoa and Core Foundation frameworks; and the Qt cross-platform graphical widget toolkit.`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF16`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}StringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF16`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TextStringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF16`), namedNode(`${rdfs}subClassOf`), blankNodes[445], namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF16`), namedNode(`${sh}property`), namedNode(`${qudt}StringUTF16-elementType`), namedNode(qudt)),
        quad(blankNodes[445], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[445], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[445], namedNode(`${owl}hasValue`), namedNode(`${qudt}UTF16-CHAR`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF8-elementType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF8-elementType`), namedNode(`${sh}path`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF8-elementType`), namedNode(`${sh}class`), namedNode(`${qudt}CharacterType`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF8`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF8`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF8`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF8`), namedNode(`${rdfs}label`), literal(`String UTF8 Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF8`), namedNode(`${dcterms}description`), literal(`String UTF-8 Type is a string data type that specifies the properties of string data structures which encode strings using the UTF-8 encoding. UTF-8 includes ASCII, otherwise referred to as IA-5 (International Alphabet 5, as standardized by International Organization for Standardization [ISO]) as the first 128 values. The Internet Engineering Task Force (IETF) requires all Internet protocols to identify the encoding used for character data with UTF-8 as at least one supported encoding. The Internet Mail Consortium (IMC) recommends that all e-mail programs must be able to display and create mail using UTF-8.`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF8`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}StringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF8`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TextStringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF8`), namedNode(`${rdfs}subClassOf`), blankNodes[446], namedNode(qudt)),
        quad(namedNode(`${qudt}StringUTF8`), namedNode(`${sh}property`), namedNode(`${qudt}StringUTF8-elementType`), namedNode(qudt)),
        quad(blankNodes[446], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[446], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[446], namedNode(`${owl}hasValue`), namedNode(`${qudt}UTF8-CHAR`), namedNode(qudt)),
        quad(namedNode(`${qudt}StructuredDatatype-elementType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}StructuredDatatype-elementType`), namedNode(`${sh}path`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}StructuredDatatype-elementType`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}StructuredDatatype-elementType`), namedNode(`${sh}class`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(blankNodes[0], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[0], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(blankNodes[0], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[1], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[1], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[1], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[2], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[2], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[2], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}SubjectArea`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SubjectArea`), namedNode(`${rdfs}label`), literal(`Subject Area`), namedNode(qudt)),
        quad(namedNode(`${qudt}SubjectArea`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(qudt)),
        quad(namedNode(`${qudt}SubjectArea`), namedNode(`${rdfs}comment`), literal(`A "Enumeration Literal".`), namedNode(qudt)),
        quad(namedNode(`${qudt}Symbol`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Symbol`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Symbol`), namedNode(`${rdfs}label`), literal(`Symbol`), namedNode(qudt)),
        quad(namedNode(`${qudt}Symbol`), namedNode(`${dcterms}description`), literal(`A sub-type of 'QUDT Concept'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Symbol`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemModifiableParameter`), namedNode(`${rdf}type`), namedNode(`${qudt}ParameterModifiabilityType`), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemModifiableParameter`), namedNode(`${rdfs}label`), literal(`System modifiable parameter`), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemModifiableParameter`), namedNode(`${rdfs}comment`), literal(`Parameter is modifiable by a (computer) system.`), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemModifiableParameter`), namedNode(`${qudt}literal`), literal(`system`), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemModifiableParameter`), namedNode(`${qudt}code`), literal(`1`), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfQuantityKinds`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfQuantityKinds`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfQuantityKinds`), namedNode(`${rdfs}label`), literal(`System of Quantity Kinds`), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfQuantityKinds`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfQuantityKinds`), namedNode(`${rdfs}subClassOf`), blankNodes[447], namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfQuantityKinds`), namedNode(`${rdfs}subClassOf`), blankNodes[448], namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfQuantityKinds`), namedNode(`${rdfs}subClassOf`), blankNodes[449], namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfQuantityKinds`), namedNode(`${rdfs}subClassOf`), blankNodes[450], namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfQuantityKinds`), namedNode(`${rdfs}subClassOf`), blankNodes[451], namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfQuantityKinds`), namedNode(`${rdfs}comment`), literal(`A system of quantity kinds is a set of one or more quantity kinds together with a set of zero or more algebraic equations that define relationships between quantity kinds in the set. In the physical sciences, the equations relating quantity kinds are typically physical laws and definitional relations, and constants of proportionality. Examples include Newton’s First Law of Motion, Coulomb’s Law, and the definition of velocity as the instantaneous change in position.  In almost all cases, the system identifies a subset of base quantity kinds. The base set is chosen so that all other quantity kinds of interest can be derived from the base quantity kinds and the algebraic equations. If the unit system is explicitly associated with a quantity kind system, then the unit system must define at least one unit for each quantity kind.  From a scientific point of view, the division of quantities into base quantities and derived quantities is a matter of convention.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(blankNodes[447], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[447], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasQuantityKind`), namedNode(qudt)),
        quad(blankNodes[447], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[448], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[448], namedNode(`${owl}onProperty`), namedNode(`${qudt}baseDimensionEnumeration`), namedNode(qudt)),
        quad(blankNodes[448], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(blankNodes[449], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[449], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}QuantityKind`), namedNode(qudt)),
        quad(blankNodes[449], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasQuantityKind`), namedNode(qudt)),
        quad(blankNodes[450], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[450], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Enumeration`), namedNode(qudt)),
        quad(blankNodes[450], namedNode(`${owl}onProperty`), namedNode(`${qudt}baseDimensionEnumeration`), namedNode(qudt)),
        quad(blankNodes[451], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[451], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}SystemOfUnits`), namedNode(qudt)),
        quad(blankNodes[451], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasUnitSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfUnits`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfUnits`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfUnits`), namedNode(`${rdfs}label`), literal(`System of Units`), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfUnits`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfUnits`), namedNode(`${rdfs}subClassOf`), blankNodes[452], namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfUnits`), namedNode(`${rdfs}subClassOf`), blankNodes[453], namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfUnits`), namedNode(`${rdfs}subClassOf`), blankNodes[454], namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfUnits`), namedNode(`${rdfs}subClassOf`), blankNodes[455], namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfUnits`), namedNode(`${rdfs}subClassOf`), blankNodes[456], namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfUnits`), namedNode(`${rdfs}subClassOf`), blankNodes[457], namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfUnits`), namedNode(`${rdfs}subClassOf`), blankNodes[458], namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfUnits`), namedNode(`${rdfs}subClassOf`), blankNodes[459], namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfUnits`), namedNode(`${rdfs}comment`), literal(`A system of units is a set of units which are chosen as the reference scales for some set of quantity kinds together with the definitions of each unit. Units may be defined by experimental observation or by proportion to another unit not included in the system. If the unit system is explicitly associated with a quantity kind system, then the unit system must define at least one unit for each quantity kind.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfUnits`), namedNode(`${qudt}informativeReference`), literal(`http://dbpedia.org/resource/Category:Systems_of_units`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}SystemOfUnits`), namedNode(`${qudt}informativeReference`), literal(`http://www.ieeeghn.org/wiki/index.php/System_of_Measurement_Units`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(blankNodes[452], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[452], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(blankNodes[452], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasCoherentUnit`), namedNode(qudt)),
        quad(blankNodes[453], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[453], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(blankNodes[453], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasBaseUnit`), namedNode(qudt)),
        quad(blankNodes[454], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[454], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(blankNodes[454], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasDefinedUnit`), namedNode(qudt)),
        quad(blankNodes[455], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[455], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(blankNodes[455], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasDerivedUnit`), namedNode(qudt)),
        quad(blankNodes[456], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[456], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}PhysicalConstant`), namedNode(qudt)),
        quad(blankNodes[456], namedNode(`${owl}onProperty`), namedNode(`${qudt}applicablePhysicalConstant`), namedNode(qudt)),
        quad(blankNodes[457], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[457], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(blankNodes[457], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasUnit`), namedNode(qudt)),
        quad(blankNodes[458], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[458], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(blankNodes[458], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasAllowedUnit`), namedNode(qudt)),
        quad(blankNodes[459], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[459], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(blankNodes[459], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasDerivedCoherentUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSITION-EXAMPLE-SUBTREE_1`), namedNode(`${rdf}type`), namedNode(`${qudt}Tree`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSITION-EXAMPLE-SUBTREE_1`), namedNode(`${rdfs}label`), literal(`TABLE-COMPOSITION-EXAMPLE-SUBTREE_1`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSITION-EXAMPLE-SUBTREE_1`), namedNode(`${qudt}node`), namedNode(`${qudt}TIME-SERIES-TABLE-A-2x4`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSITION-EXAMPLE-SUBTREE_2`), namedNode(`${rdf}type`), namedNode(`${qudt}Tree`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSITION-EXAMPLE-SUBTREE_2`), namedNode(`${rdfs}label`), literal(`TABLE-COMPOSITION-EXAMPLE-SUBTREE_2`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSITION-EXAMPLE-SUBTREE_2`), namedNode(`${qudt}node`), namedNode(`${qudt}TIME-SERIES-TABLE-B-2x4`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSITION-SUBTREE-LIST-MEMBER_1`), namedNode(`${rdf}type`), namedNode(`${qudt}TreeListMember`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSITION-SUBTREE-LIST-MEMBER_1`), namedNode(`${rdfs}label`), literal(`TABLE-COMPOSITION-SUBTREE-1`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSITION-SUBTREE-LIST-MEMBER_1`), namedNode(`${qudt}order`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSITION-SUBTREE-LIST-MEMBER_1`), namedNode(`${qudt}value`), namedNode(`${qudt}TABLE-COMPOSITION-EXAMPLE-SUBTREE_1`), namedNode(qudt)),
        quad(namedNode(`${qudt}value`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}value`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}value`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}value`), namedNode(`${rdfs}label`), literal(`value`), namedNode(qudt)),
        quad(namedNode(`${qudt}value`), namedNode(`${dcterms}description`), literal(`A property to relate an observable thing with a value that can be of any simple XSD type`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}value`), namedNode(`${rdfs}comment`), literal(`This property identifies the value associated with a data structure. The value may be a scalar or a reference to another object. The disjoint sub-properties of this data:value distinguish between scalar values and object references.`), namedNode(qudt)),
        quad(namedNode(`${qudt}value`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${rdf}value`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSITION-SUBTREE-LIST-MEMBER_2`), namedNode(`${rdf}type`), namedNode(`${qudt}IndexedCollectionMember`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSITION-SUBTREE-LIST-MEMBER_2`), namedNode(`${rdfs}label`), literal(`TABLE-COMPOSITION-SUBTREE_2`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSITION-SUBTREE-LIST-MEMBER_2`), namedNode(`${qudt}order`), literal(`2`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSITION-SUBTREE-LIST-MEMBER_2`), namedNode(`${qudt}value`), namedNode(`${qudt}TABLE-COMPOSITION-EXAMPLE-SUBTREE_2`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSTION-SUBTREE-LIST-EXAMPLE_1`), namedNode(`${rdf}type`), namedNode(`${qudt}TreeListMember`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSTION-SUBTREE-LIST-EXAMPLE_1`), namedNode(`${rdfs}label`), literal(`TABLE-COMPOSTION-SUBTREES-EXAMPLE_1`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSTION-SUBTREE-LIST-EXAMPLE_1`), namedNode(`${qudt}element`), namedNode(`${qudt}TABLE-COMPOSITION-SUBTREE-LIST-MEMBER_1`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-COMPOSTION-SUBTREE-LIST-EXAMPLE_1`), namedNode(`${qudt}element`), namedNode(`${qudt}TABLE-COMPOSITION-SUBTREE-LIST-MEMBER_2`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-TYPE_2x4`), namedNode(`${rdf}type`), namedNode(`${qudt}TableType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-TYPE_2x4`), namedNode(`${rdfs}label`), literal(`Table type  2x4`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-TYPE_2x4`), namedNode(`${qudt}byRow`), literal(`true`, namedNode(`${xsd}boolean`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-TYPE_2x4`), namedNode(`${qudt}dimensionVector`), namedNode(`${qudt}DV_2x4`), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-TYPE_2x4`), namedNode(`${qudt}dimensionality`), literal(`2`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-TYPE_2x4`), namedNode(`${qudt}columns`), literal(`4`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TABLE-TYPE_2x4`), namedNode(`${qudt}rows`), literal(`2`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TIME`), namedNode(`${rdf}type`), namedNode(`${qudt}TimeStringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TIME`), namedNode(`${rdfs}label`), literal(`TIME`), namedNode(qudt)),
        quad(namedNode(`${qudt}TIME`), namedNode(`${qudt}dimensionality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TIME`), namedNode(`${dtype}literal`), literal(`time`), namedNode(qudt)),
        quad(namedNode(`${qudt}TIME`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${xsd}time`), namedNode(qudt)),
        quad(namedNode(`${qudt}TIME`), namedNode(`${dc11}description`), literal(`Time in hh:mm:ss[Z|(+|-)hh:mm]format.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeStringType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeStringType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeStringType`), namedNode(`${rdfs}label`), literal(`Time Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeStringType`), namedNode(`${dcterms}description`), literal(`Time takes a number of forms, depending on the units used (e.g., year, day, minute, millisecond, or combinations thereof) and the origin (i.e., time zero) to which the time value is related.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeStringType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}DateTimeStringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeStringType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TextStringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TRUE`), namedNode(`${rdf}type`), namedNode(`${qudt}BooleanTypeEnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}TRUE`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TRUE`), namedNode(`${rdfs}label`), literal(`True`), namedNode(qudt)),
        quad(namedNode(`${qudt}TRUE`), namedNode(`${dtype}literal`), literal(`true`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table-byRow`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table-byRow`), namedNode(`${sh}datatype`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table-byRow`), namedNode(`${sh}path`), namedNode(`${qudt}byRow`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table-byRow`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Table-columns`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table-columns`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table-columns`), namedNode(`${sh}path`), namedNode(`${qudt}columns`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table-columns`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Table-dimensionality`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table-dimensionality`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table-dimensionality`), namedNode(`${sh}path`), namedNode(`${qudt}dimensionality`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table-dimensionality`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Table-rows`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table-rows`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table-rows`), namedNode(`${sh}path`), namedNode(`${qudt}rows`), namedNode(qudt)),
        quad(namedNode(`${qudt}Table-rows`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[156], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[156], namedNode(`${owl}onProperty`), namedNode(`${qudt}rows`), namedNode(qudt)),
        quad(blankNodes[156], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[157], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[157], namedNode(`${owl}onProperty`), namedNode(`${qudt}byRow`), namedNode(qudt)),
        quad(blankNodes[157], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[158], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[158], namedNode(`${owl}onProperty`), namedNode(`${qudt}columns`), namedNode(qudt)),
        quad(blankNodes[158], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[159], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[159], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionality`), namedNode(qudt)),
        quad(blankNodes[159], namedNode(`${owl}hasValue`), literal(`2`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TaggedEnumeration-code`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TaggedEnumeration-code`), namedNode(`${sh}path`), namedNode(`${dtype}code`), namedNode(qudt)),
        quad(namedNode(`${qudt}TaggedEnumeration-code`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TaggedEnumeration-code`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TaggedEnumeration`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TaggedEnumeration`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TaggedEnumeration`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TaggedEnumeration`), namedNode(`${rdfs}label`), literal(`Tagged Enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}TaggedEnumeration`), namedNode(`${dcterms}description`), literal(`An enumeration where each literal  has a tag that is a non-negative integer. These enumerations are likely to have their literals encoded - hence the need for the tag.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TaggedEnumeration`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}TaggedEnumeration`), namedNode(`${rdfs}subClassOf`), blankNodes[460], namedNode(qudt)),
        quad(namedNode(`${qudt}TaggedEnumeration`), namedNode(`${sh}property`), namedNode(`${qudt}TaggedEnumeration-code`), namedNode(qudt)),
        quad(namedNode(`${qudt}TaggedEnumeration`), namedNode(`${owl}equivalentClass`), blankNodes[461], namedNode(qudt)),
        quad(blankNodes[460], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[460], namedNode(`${owl}onProperty`), namedNode(`${dtype}code`), namedNode(qudt)),
        quad(blankNodes[460], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[461], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(blankNodes[461], namedNode(`${owl}intersectionOf`), blankNodes[462], namedNode(qudt)),
        quad(namedNode(`${qudt}TechReport`), namedNode(`${rdf}type`), namedNode(`${qudt}PubEnumeratedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TechReport`), namedNode(`${rdfs}label`), literal(`Pub techreport type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TechReport`), namedNode(`${dtype}literal`), literal(`techreport`), namedNode(qudt)),
        quad(namedNode(`${qudt}Term`), namedNode(`${rdfs}subClassOf`), namedNode(`${owl}Thing`), namedNode(qudt)),
        quad(namedNode(`${qudt}Three-Tuple-elementType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Three-Tuple-elementType`), namedNode(`${sh}path`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Three-Tuple-elementType`), namedNode(`${sh}class`), namedNode(`${qudt}TupleMemberType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Three-Tuple-elementType`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Three-Tuple-elementTypeCount`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Three-Tuple-elementTypeCount`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}Three-Tuple-elementTypeCount`), namedNode(`${sh}hasValue`), literal(`3`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Three-Tuple-elementTypeCount`), namedNode(`${sh}path`), namedNode(`${qudt}elementTypeCount`), namedNode(qudt)),
        quad(blankNodes[199], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[199], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[199], namedNode(`${owl}cardinality`), literal(`3`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[200], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[200], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementTypeCount`), namedNode(qudt)),
        quad(blankNodes[200], namedNode(`${owl}hasValue`), literal(`3`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ThreeBodyRotatingCoordinateSystem`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}ThreeBodyRotatingCoordinateSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}ThreeBodyRotatingCoordinateSystem`), namedNode(`${rdfs}label`), literal(`Three Body Rotating Coordinate System Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}ThreeBodyRotatingCoordinateSystem`), namedNode(`${dcterms}description`), literal(`The lunar coordinate systems are primarily used when operating in close proximity to the Moon. There are, however, a few additional coordinate systems that are also useful when analyzing (and depicting) trajectories in the vicinity of the Earth-Moon system. They are rotating coordinate systems associated with two different three-body systems: the Sun-Earth-spacecraft system and the Earth-Moon-spacecraft system. The Sun-Earth and Earth-Moon rotating coordinate frames are defined as follows. The pole vector or Z-axis of the coordinate frame is set equal to the instantaneous orbit normal of the secondary (smaller) body about the primary (larger) body and the X-axis is set equal to the vector from the primary body center of mass (CM) to the secondary body CM. The X-axis rotates at a rate equal to the instantaneous rotation rate of the secondary body about the primary body.`), namedNode(qudt)),
        quad(namedNode(`${qudt}ThreeBodyRotatingCoordinateSystem`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}AerospaceCoordinateSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}Time-type`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Time-type`), namedNode(`${sh}path`), namedNode(`${qudt}type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Time-type`), namedNode(`${sh}class`), namedNode(`${qudt}TimeStringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Time`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Time`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Time`), namedNode(`${rdfs}label`), literal(`Time`), namedNode(qudt)),
        quad(namedNode(`${qudt}Time`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Scalar`), namedNode(qudt)),
        quad(namedNode(`${qudt}Time`), namedNode(`${rdfs}comment`), literal(`The class of data values that denote a point in time. Time values may be encoded in a 12-hour clock or a 24-hour clock, such as 1:35 AM, or 13:35.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Time`), namedNode(`${sh}property`), namedNode(`${qudt}Time-type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeDataType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeDataType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeDataType`), namedNode(`${rdfs}label`), literal(`Time data type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeDataType`), namedNode(`${dcterms}description`), literal(`A sub-type of 'QUDT Enumeration'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeDataType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ScalarDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeDataType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeDataType`), namedNode(`${dtype}value`), namedNode(`${qudt}TIME`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeInterval-type`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeInterval-type`), namedNode(`${sh}path`), namedNode(`${qudt}type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeInterval-type`), namedNode(`${sh}class`), namedNode(`${qudt}TimeStringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeInterval`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeInterval`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeInterval`), namedNode(`${rdfs}label`), literal(`Time interval`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeInterval`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Parameter`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeInterval`), namedNode(`${rdfs}comment`), literal(`A relative interval that is an increment in time. For example, this is used in time series arrays to express the time point of a vector of values.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeInterval`), namedNode(`${sh}property`), namedNode(`${qudt}TimeInterval-type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray-dimensionVector`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray-dimensionVector`), namedNode(`${sh}path`), namedNode(`${qudt}dimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray-dimensionVector`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray-dimensionVector`), namedNode(`${sh}class`), namedNode(`${qudt}IntegerList`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray-dimensionVector`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray-incrementDatatype`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray-incrementDatatype`), namedNode(`${sh}path`), namedNode(`${qudt}incrementDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray-incrementDatatype`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray-incrementDatatype`), namedNode(`${sh}class`), namedNode(`${qudt}TimeStringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray-incrementDatatype`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray-vector`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray-vector`), namedNode(`${sh}path`), namedNode(`${qudt}vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray-vector`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray-vector`), namedNode(`${sh}class`), namedNode(`${qudt}StateSpaceVectorType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TimeSeriesArray-vector`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}vector`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}vector`), namedNode(`${rdfs}label`), literal(`vector`), namedNode(qudt)),
        quad(blankNodes[303], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[303], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}StateSpaceVector`), namedNode(qudt)),
        quad(blankNodes[303], namedNode(`${owl}onProperty`), namedNode(`${ns26}vector`), namedNode(qudt)),
        quad(blankNodes[304], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[304], namedNode(`${owl}onProperty`), namedNode(`${ns26}incrementDatatype`), namedNode(qudt)),
        quad(blankNodes[304], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[305], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[305], namedNode(`${owl}onProperty`), namedNode(`${ns26}vector`), namedNode(qudt)),
        quad(blankNodes[305], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[306], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[306], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}TimeStringType`), namedNode(qudt)),
        quad(blankNodes[306], namedNode(`${owl}onProperty`), namedNode(`${ns26}incrementDatatype`), namedNode(qudt)),
        quad(blankNodes[307], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[307], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionVector`), namedNode(qudt)),
        quad(blankNodes[307], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TotallyOrdered`), namedNode(`${rdf}type`), namedNode(`${qudt}OrderedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TotallyOrdered`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}TotallyOrdered`), namedNode(`${rdfs}label`), literal(`Totally Ordered`), namedNode(qudt)),
        quad(namedNode(`${qudt}TotallyOrdered`), namedNode(`${qudt}literal`), literal(`total`), namedNode(qudt)),
        quad(namedNode(`${qudt}TotallyOrdered`), namedNode(`${qudt}plainTextDescription`), literal(`Totally ordered structure.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TransformType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TransformType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}TransformType`), namedNode(`${rdfs}label`), literal(`Transform type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TransformType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}TransformType`), namedNode(`${skos}prefLabel`), literal(`Transform type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Triplet`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}Triplet`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}Triplet`), namedNode(`${rdfs}label`), literal(`Triplet`), namedNode(qudt)),
        quad(namedNode(`${qudt}Triplet`), namedNode(`${dcterms}description`), literal(`A "Tuple".`), namedNode(qudt)),
        quad(namedNode(`${qudt}Triplet`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ThreeTupleType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Triplet`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Three-Tuple`), namedNode(qudt)),
        quad(namedNode(`${qudt}Triplet`), namedNode(`${owl}equivalentClass`), namedNode(`${qudt}ThreeTupleType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Triplet`), namedNode(`${owl}equivalentClass`), namedNode(`${qudt}Three-Tuple`), namedNode(qudt)),
        quad(namedNode(`${qudt}True`), namedNode(`${rdf}type`), namedNode(`${qudt}BooleanStateType`), namedNode(qudt)),
        quad(namedNode(`${qudt}True`), namedNode(`${rdfs}label`), literal(`true`), namedNode(qudt)),
        quad(namedNode(`${qudt}True`), namedNode(`${qudt}literal`), literal(`true`), namedNode(qudt)),
        quad(namedNode(`${qudt}True`), namedNode(`${qudt}code`), literal(`1`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple-elementType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple-elementType`), namedNode(`${sh}path`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple-elementType`), namedNode(`${sh}class`), namedNode(`${qudt}TupleMemberType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple-elementTypeCount`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple-elementTypeCount`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple-elementTypeCount`), namedNode(`${sh}path`), namedNode(`${qudt}elementTypeCount`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple-elementTypeCount`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple-length`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple-length`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple-length`), namedNode(`${sh}path`), namedNode(`${qudt}length`), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple-length`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Tuple-length`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[201], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[201], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementTypeCount`), namedNode(qudt)),
        quad(blankNodes[201], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[202], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[202], namedNode(`${owl}onProperty`), namedNode(`${qudt}length`), namedNode(qudt)),
        quad(blankNodes[202], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[203], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[203], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}TupleMember`), namedNode(qudt)),
        quad(blankNodes[203], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMember-elementType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMember-elementType`), namedNode(`${sh}path`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMember-elementType`), namedNode(`${sh}class`), namedNode(`${qudt}ScalarDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMember-orderInStructure`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMember-orderInStructure`), namedNode(`${sh}path`), namedNode(`${qudt}orderInStructure`), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMember-orderInStructure`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TupleMember-orderInStructure`), namedNode(`${sh}minCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}orderInStructure`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}orderInStructure`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}orderInStructure`), namedNode(`${rdfs}label`), literal(`order in structure`), namedNode(qudt)),
        quad(blankNodes[164], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[164], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}ScalarDatatype`), namedNode(qudt)),
        quad(blankNodes[164], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[165], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[165], namedNode(`${owl}onProperty`), namedNode(`${qudt}orderInStructure`), namedNode(qudt)),
        quad(blankNodes[165], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Two-Tuple-elementType`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Two-Tuple-elementType`), namedNode(`${sh}path`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Two-Tuple-elementType`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Two-Tuple-elementTypeCount`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Two-Tuple-elementTypeCount`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}Two-Tuple-elementTypeCount`), namedNode(`${sh}hasValue`), literal(`2`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Two-Tuple-elementTypeCount`), namedNode(`${sh}path`), namedNode(`${qudt}elementTypeCount`), namedNode(qudt)),
        quad(blankNodes[185], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[185], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[185], namedNode(`${owl}cardinality`), literal(`2`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[186], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[186], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementTypeCount`), namedNode(qudt)),
        quad(blankNodes[186], namedNode(`${owl}hasValue`), literal(`2`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeList`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeList`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeList`), namedNode(`${rdfs}label`), literal(`Type list`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeList`), namedNode(`${dcterms}description`), literal(`A sub-type of 'QUDT Datatype'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeList`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeMatrix`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeMatrix`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeMatrix`), namedNode(`${rdfs}label`), literal(`Type matrix`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeMatrix`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}MatrixType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeMatrix`), namedNode(`${rdfs}comment`), literal(`Members of this class are matrix data structures that describe the datatypes of a class of matrices. That is, the members of this class are matrices with cells that contain datatypes (c.f. type:Datatype) and are used to describe the datatype structure of other matrices.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector-objectValue`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector-objectValue`), namedNode(`${sh}path`), namedNode(`${qudt}objectValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector-objectValue`), namedNode(`${sh}class`), namedNode(`${qudt}IndexedList`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector-type`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector-type`), namedNode(`${sh}path`), namedNode(`${qudt}type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector-type`), namedNode(`${sh}class`), namedNode(`${qudt}TypeVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector`), namedNode(`${rdfs}label`), literal(`Type Vector Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector`), namedNode(`${rdfs}label`), literal(`Type vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector`), namedNode(`${dcterms}description`), literal(`A Type Vector is a vector whose elements are data types. They are used, for instance, to specify the type of each component of a vector or class of vectors. A Type Vector Type is a further abstraction that specifies the structure of Type Vectors.`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}VectorType`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}DatatypeStructuredData`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector`), namedNode(`${rdfs}subClassOf`), blankNodes[463], namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector`), namedNode(`${rdfs}comment`), literal(`A Type Vector is a vector whose elements are data types. They are used, for instance, to specify the type of each component of a vector or class of vectors. A <em>Type Vector Type</em> is a further abstraction that specifies the structure of Type Vectors.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector`), namedNode(`${sh}property`), namedNode(`${qudt}TypeVector-objectValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector`), namedNode(`${sh}property`), namedNode(`${qudt}TypeVector-type`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector`), namedNode(`${sh}property`), namedNode(`${qudt}TypeVector-typeVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector-typeVector`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector-typeVector`), namedNode(`${sh}path`), namedNode(`${qudt}typeVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector-typeVector`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}TypeVector-typeVector`), namedNode(`${sh}class`), namedNode(`${qudt}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}typeVector`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}typeVector`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}typeVector`), namedNode(`${rdfs}label`), literal(`type vector`), namedNode(qudt)),
        quad(blankNodes[463], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[463], namedNode(`${owl}onProperty`), namedNode(`${qudt}typeVector`), namedNode(qudt)),
        quad(blankNodes[463], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[463], namedNode(`${owl}onClass`), namedNode(`${qudt}TypeVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMci-term`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMci-term`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMci-term`), namedNode(`${rdfs}label`), literal(`case-insensitive UCUM term`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMci-term`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Resource`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMci-term`), namedNode(`${rdfs}comment`), literal(`Lexical pattern for the terminal symbols in the case-insensitive version of UCUM code`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMci-term`), namedNode(`${owl}deprecated`), literal(`true`, namedNode(`${xsd}boolean`)), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMci-term`), namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMci-term`), namedNode(`${owl}withRestrictions`), blankNodes[464], namedNode(qudt)),
        quad(blankNodes[464], namedNode(`${rdf}first`), blankNodes[465], namedNode(qudt)),
        quad(blankNodes[464], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMci`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMci`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMci`), namedNode(`${rdfs}label`), literal(`case-insensitive UCUM code`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMci`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Resource`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMci`), namedNode(`${rdfs}comment`), literal(`Lexical pattern for the case-insensitive version of UCUM code`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMci`), namedNode(`${owl}deprecated`), literal(`true`, namedNode(`${xsd}boolean`)), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMci`), namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMci`), namedNode(`${owl}withRestrictions`), blankNodes[466], namedNode(qudt)),
        quad(blankNodes[466], namedNode(`${rdf}first`), blankNodes[467], namedNode(qudt)),
        quad(blankNodes[466], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs-term`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs-term`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs-term`), namedNode(`${rdfs}label`), literal(`case-sensitive UCUM terminal`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs-term`), namedNode(`${dcterms}source`), literal(`https://ucum.org/ucum.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs-term`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Resource`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs-term`), namedNode(`${rdfs}comment`), literal(`Lexical pattern for the terminal symbols in the case-sensitive version of UCUM code`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs-term`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns30}ucum.html`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs-term`), namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs-term`), namedNode(`${owl}withRestrictions`), blankNodes[468], namedNode(qudt)),
        quad(blankNodes[468], namedNode(`${rdf}first`), blankNodes[469], namedNode(qudt)),
        quad(blankNodes[468], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs`), namedNode(`${rdfs}label`), literal(`case-sensitive UCUM code`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs`), namedNode(`${dcterms}source`), literal(`https://ucum.org/ucum.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Resource`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs`), namedNode(`${rdfs}comment`), literal(`Lexical pattern for the case-sensitive version of UCUM code`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns30}ucum.html`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs`), namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}UCUMcs`), namedNode(`${owl}withRestrictions`), blankNodes[470], namedNode(qudt)),
        quad(blankNodes[470], namedNode(`${rdf}first`), blankNodes[471], namedNode(qudt)),
        quad(blankNodes[470], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(namedNode(`${qudt}UNARY-FUNCTION`), namedNode(`${rdf}type`), namedNode(`${qudt}FunctionDatatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}UNARY-FUNCTION`), namedNode(`${rdfs}label`), literal(`UNARY-FUNCTION`), namedNode(qudt)),
        quad(namedNode(`${qudt}UNARY-FUNCTION`), namedNode(`${dcterms}description`), literal(`This type identifies functions that have exactly one argument.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}UNARY-FUNCTION`), namedNode(`${qudt}functionArity`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}UNSIGNED`), namedNode(`${rdf}type`), namedNode(`${qudt}SignednessType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UNSIGNED`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}UNSIGNED`), namedNode(`${rdfs}label`), literal(`Unsigned`), namedNode(qudt)),
        quad(namedNode(`${qudt}UNSIGNED`), namedNode(`${dtype}literal`), literal(`unsigned`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DAYTIME`), namedNode(`${rdf}type`), namedNode(`${qudt}DateStringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DAYTIME`), namedNode(`${rdfs}label`), literal(`UTC DAY TIME`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DAYTIME`), namedNode(`${qudt}dimensionality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DAYTIME`), namedNode(`${dtype}literal`), literal(`utc-dayTime`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DAYTIME`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${qudt}UTC-DayTime`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DAYTIME`), namedNode(`${qudt}encodingDescription`), literal(`YYYY-DDDThh:mm:ss.ddZ, where each character is an ASCII character using one octet with the following meanings: YYYY = Year in four-character subfield with values 0001-9999, DDD = Day of year in three-character subfield with values 001-365 or -366, T =  Calendar-Time separator, hh = Hour in two-character subfield with values 00-23,  mm = Minute in two-character subfield with values 00-59, ss = Second in two-character subfield with values 00-59 (-58 or -60 during leap seconds), dd = Decimal fraction of second in one- to n-character subfield, each d has values 0-9, and Z = time code terminator (optional)`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DayTime`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DayTime`), namedNode(`${rdf}type`), namedNode(`${owl}DataRange`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DayTime`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DayTime`), namedNode(`${rdfs}label`), literal(`UTC Day time`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DayTime`), namedNode(`${dcterms}description`), literal(`YYYY-DDDThh:mm:ss.ddZ, where each character is an ASCII character using one octet with the following meanings: YYYY = Year in four-character subfield with values 0001-9999, DDD = Day of year in three-character subfield with values 001-365 or -366, T =  Calendar-Time separator, hh = Hour in two-character subfield with values 00-23,  mm = Minute in two-character subfield with values 00-59, ss = Second in two-character subfield with values 00-59 (-58 or -60 during leap seconds), dd = Decimal fraction of second in one- to n-character subfield, each d has values 0-9, and Z = time code terminator (optional)`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DayTime`), namedNode(`${rdfs}subClassOf`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTC-DayTime`), namedNode(`${owl}equivalentClass`), blankNodes[472], namedNode(qudt)),
        quad(blankNodes[472], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[472], namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[472], namedNode(`${owl}withRestrictions`), blankNodes[473], namedNode(qudt)),
        quad(namedNode(`${qudt}UTF16-STRING`), namedNode(`${rdf}type`), namedNode(`${qudt}StringUTF16`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF16-STRING`), namedNode(`${rdfs}label`), literal(`UTF16 String`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF16-STRING`), namedNode(`${qudt}elementType`), namedNode(`${qudt}UTF16-CHAR`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF16-STRING`), namedNode(`${qudt}dimensionality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF16-STRING`), namedNode(`${dtype}literal`), literal(`utf16`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF16-STRING`), namedNode(`${qudt}encoding`), namedNode(`${qudt}UTF16-StringEncoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF16-StringEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}StringEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF16-StringEncoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF16-StringEncoding`), namedNode(`${rdfs}label`), literal(`UTF-16 String`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF8-STRING`), namedNode(`${rdf}type`), namedNode(`${qudt}StringUTF8`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF8-STRING`), namedNode(`${rdfs}label`), literal(`UTF8 String`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF8-STRING`), namedNode(`${dcterms}description`), literal(`String consisting of UTF-8 characters`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF8-STRING`), namedNode(`${qudt}elementType`), namedNode(`${qudt}UTF8-CHAR`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF8-STRING`), namedNode(`${qudt}dimensionality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF8-STRING`), namedNode(`${dtype}literal`), literal(`utf8`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF8-STRING`), namedNode(`${qudt}encoding`), namedNode(`${qudt}UTF8-StringEncoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF8-STRING`), namedNode(`${owl}sameAs`), namedNode(`${qudt}STRING`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF8-StringEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}StringEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF8-StringEncoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF8-StringEncoding`), namedNode(`${rdfs}label`), literal(`UTF-8 Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}UTF8-StringEncoding`), namedNode(`${qudt}bytes`), literal(`8`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[248], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[248], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}UCUMcs`), namedNode(qudt)),
        quad(blankNodes[248], namedNode(`${owl}onProperty`), namedNode(`${qudt}ucumCode`), namedNode(qudt)),
        quad(blankNodes[249], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[249], namedNode(`${owl}onProperty`), namedNode(`${qudt}mathMLdefinition`), namedNode(qudt)),
        quad(blankNodes[249], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[250], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[250], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}QuantityKind`), namedNode(qudt)),
        quad(blankNodes[250], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasQuantityKind`), namedNode(qudt)),
        quad(blankNodes[251], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[251], namedNode(`${owl}onProperty`), namedNode(`${qudt}conversionMultiplier`), namedNode(qudt)),
        quad(blankNodes[251], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(blankNodes[252], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[252], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[252], namedNode(`${owl}onProperty`), namedNode(`${qudt}udunitsCode`), namedNode(qudt)),
        quad(blankNodes[253], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[253], namedNode(`${owl}onProperty`), namedNode(`${qudt}qkdvNumerator`), namedNode(qudt)),
        quad(blankNodes[253], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[254], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[254], namedNode(`${owl}onProperty`), namedNode(`${qudt}expression`), namedNode(qudt)),
        quad(blankNodes[254], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[255], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[255], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[255], namedNode(`${owl}onProperty`), namedNode(`${qudt}iec61360Code`), namedNode(qudt)),
        quad(blankNodes[256], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[256], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}SystemOfUnits`), namedNode(qudt)),
        quad(blankNodes[256], namedNode(`${owl}onProperty`), namedNode(`${qudt}allowedUnitOfSystem`), namedNode(qudt)),
        quad(blankNodes[257], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[257], namedNode(`${owl}allValuesFrom`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[257], namedNode(`${owl}onProperty`), namedNode(`${qudt}uneceCommonCode`), namedNode(qudt)),
        quad(blankNodes[258], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[258], namedNode(`${owl}onProperty`), namedNode(`${qudt}conversionOffset`), namedNode(qudt)),
        quad(blankNodes[258], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}int`)), namedNode(qudt)),
        quad(blankNodes[259], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[259], namedNode(`${owl}onProperty`), namedNode(`${qudt}symbol`), namedNode(qudt)),
        quad(blankNodes[259], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[260], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[260], namedNode(`${owl}onProperty`), namedNode(`${qudt}latexSymbol`), namedNode(qudt)),
        quad(blankNodes[260], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[261], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[261], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(qudt)),
        quad(blankNodes[261], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasDimensionVector`), namedNode(qudt)),
        quad(blankNodes[262], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[262], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(qudt)),
        quad(blankNodes[262], namedNode(`${owl}onProperty`), namedNode(`${qudt}qkdvNumerator`), namedNode(qudt)),
        quad(blankNodes[263], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[263], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}SystemOfUnits`), namedNode(qudt)),
        quad(blankNodes[263], namedNode(`${owl}onProperty`), namedNode(`${qudt}unitOfSystem`), namedNode(qudt)),
        quad(blankNodes[264], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[264], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasDimensionVector`), namedNode(qudt)),
        quad(blankNodes[264], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[265], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[265], namedNode(`${owl}onProperty`), namedNode(`${qudt}latexDefinition`), namedNode(qudt)),
        quad(blankNodes[265], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[266], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[266], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(qudt)),
        quad(blankNodes[266], namedNode(`${owl}onProperty`), namedNode(`${qudt}qkdvDenominator`), namedNode(qudt)),
        quad(blankNodes[267], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[267], namedNode(`${owl}onProperty`), namedNode(`${qudt}siUnitsExpression`), namedNode(qudt)),
        quad(blankNodes[267], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[268], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[268], namedNode(`${owl}onProperty`), namedNode(`${qudt}qkdvDenominator`), namedNode(qudt)),
        quad(blankNodes[268], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Unordered`), namedNode(`${rdf}type`), namedNode(`${qudt}OrderedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Unordered`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Unordered`), namedNode(`${rdfs}label`), literal(`Unordered`), namedNode(qudt)),
        quad(namedNode(`${qudt}Unordered`), namedNode(`${qudt}literal`), literal(`unordered`), namedNode(qudt)),
        quad(namedNode(`${qudt}Unordered`), namedNode(`${qudt}plainTextDescription`), literal(`Unordered structure.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Unpublished`), namedNode(`${rdf}type`), namedNode(`${qudt}PubEnumeratedType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Unpublished`), namedNode(`${rdfs}label`), literal(`Pub unpublished type`), namedNode(qudt)),
        quad(namedNode(`${qudt}Unpublished`), namedNode(`${dtype}literal`), literal(`unpublished`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType-abbreviation`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType-abbreviation`), namedNode(`${sh}hasValue`), literal(`UI64`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType-abbreviation`), namedNode(`${sh}path`), namedNode(`${qudt}abbreviation`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType-maxInclusive`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType-maxInclusive`), namedNode(`${sh}hasValue`), literal(`2^{64}-1`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType-maxInclusive`), namedNode(`${sh}path`), namedNode(`${qudt}maxInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType-maxInclusive`), namedNode(`${sh}or`), namedNode(`${qudt}NumericUnionList`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType-minInclusive`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType-minInclusive`), namedNode(`${sh}hasValue`), literal(`0`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType-minInclusive`), namedNode(`${sh}path`), namedNode(`${qudt}minInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType-minInclusive`), namedNode(`${sh}or`), blankNodes[474], namedNode(qudt)),
        quad(blankNodes[474], namedNode(`${rdf}first`), blankNodes[475], namedNode(qudt)),
        quad(blankNodes[474], namedNode(`${rdf}rest`), blankNodes[476], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType`), namedNode(`${rdfs}label`), literal(`Unsigned Big Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType`), namedNode(`${dcterms}description`), literal(`An Unsgned Big Integer is an unsigned integer that can be represented in eight octets (64 bits) of machine memory.`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}BigIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}UnsignedIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[477], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[478], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[479], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}UnsignedBigIntegerType-abbreviation`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}UnsignedBigIntegerType-maxInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedBigIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}UnsignedBigIntegerType-minInclusive`), namedNode(qudt)),
        quad(blankNodes[477], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[477], namedNode(`${owl}onProperty`), namedNode(`${dtype}literal`), namedNode(qudt)),
        quad(blankNodes[477], namedNode(`${owl}hasValue`), literal(`UI64`), namedNode(qudt)),
        quad(blankNodes[478], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[478], namedNode(`${owl}onProperty`), namedNode(`${qudt}maxInclusive`), namedNode(qudt)),
        quad(blankNodes[478], namedNode(`${owl}hasValue`), literal(`2^{64}-1`), namedNode(qudt)),
        quad(blankNodes[479], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[479], namedNode(`${owl}onProperty`), namedNode(`${qudt}minInclusive`), namedNode(qudt)),
        quad(blankNodes[479], namedNode(`${owl}hasValue`), literal(`0`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedIntegerEncoding`), namedNode(`${rdf}type`), namedNode(`${qudt}IntegerEncodingType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedIntegerEncoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedIntegerEncoding`), namedNode(`${rdfs}label`), literal(`Unsigned Integer Encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedIntegerEncoding`), namedNode(`${qudt}bytes`), literal(`4`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[358], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(blankNodes[358], namedNode(`${owl}intersectionOf`), blankNodes[480], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType-maxInclusive`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType-maxInclusive`), namedNode(`${sh}hasValue`), literal(`2^{32}-1`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType-maxInclusive`), namedNode(`${sh}path`), namedNode(`${qudt}maxInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType-maxInclusive`), namedNode(`${sh}or`), namedNode(`${qudt}NumericUnionList`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType-minInclusive`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType-minInclusive`), namedNode(`${sh}hasValue`), literal(`0`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType-minInclusive`), namedNode(`${sh}path`), namedNode(`${qudt}minInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType-minInclusive`), namedNode(`${sh}or`), blankNodes[481], namedNode(qudt)),
        quad(blankNodes[481], namedNode(`${rdf}first`), blankNodes[482], namedNode(qudt)),
        quad(blankNodes[481], namedNode(`${rdf}rest`), blankNodes[483], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType`), namedNode(`${rdfs}label`), literal(`Unsigned Long Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType`), namedNode(`${dcterms}description`), literal(`An Unsigned Long Integer is an unsigned integer that can be represented in four octets (32 bits) of machine memory.`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}LongIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}UnsignedIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[484], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[485], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[486], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}UnsignedLongIntegerType-maxInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}UnsignedLongIntegerType-minInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedLongIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}UnsignedLongIntegerType-literal`), namedNode(qudt)),
        quad(blankNodes[484], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[484], namedNode(`${owl}onProperty`), namedNode(`${dtype}literal`), namedNode(qudt)),
        quad(blankNodes[484], namedNode(`${owl}hasValue`), literal(`UI32`), namedNode(qudt)),
        quad(blankNodes[485], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[485], namedNode(`${owl}onProperty`), namedNode(`${qudt}maxInclusive`), namedNode(qudt)),
        quad(blankNodes[485], namedNode(`${owl}hasValue`), literal(`2^{32}-1`), namedNode(qudt)),
        quad(blankNodes[486], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[486], namedNode(`${owl}onProperty`), namedNode(`${qudt}minInclusive`), namedNode(qudt)),
        quad(blankNodes[486], namedNode(`${owl}hasValue`), literal(`0`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedMediumIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedMediumIntegerType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedMediumIntegerType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedMediumIntegerType`), namedNode(`${rdfs}label`), literal(`Signed Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedMediumIntegerType`), namedNode(`${dcterms}description`), literal(`An "Unsigned Medium Integers" is an integer of 24 bits that only takes on both positive values.`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedMediumIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}UnsignedIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedMediumIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[487], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedMediumIntegerType`), namedNode(`${owl}equivalentClass`), blankNodes[488], namedNode(qudt)),
        quad(blankNodes[487], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[487], namedNode(`${owl}onProperty`), namedNode(`${qudt}bytes`), namedNode(qudt)),
        quad(blankNodes[487], namedNode(`${owl}hasValue`), literal(`3`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[488], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(blankNodes[488], namedNode(`${owl}intersectionOf`), blankNodes[489], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType-abbreviation`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType-abbreviation`), namedNode(`${sh}hasValue`), literal(`UI16`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType-abbreviation`), namedNode(`${sh}path`), namedNode(`${qudt}abbreviation`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType-maxInclusive`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType-maxInclusive`), namedNode(`${sh}hasValue`), literal(`2^{16}-1`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType-maxInclusive`), namedNode(`${sh}path`), namedNode(`${qudt}maxInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType-minInclusive`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType-minInclusive`), namedNode(`${sh}hasValue`), literal(`0`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType-minInclusive`), namedNode(`${sh}path`), namedNode(`${qudt}minInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType`), namedNode(`${rdfs}label`), literal(`Unsigned Short Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType`), namedNode(`${dcterms}description`), literal(`An Unsigned Short Integer is an unsigned integer that can be represented in four octets (32 bits) of machine memory.`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}UnsignedIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ShortIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[490], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[491], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType`), namedNode(`${rdfs}subClassOf`), blankNodes[492], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}UnsignedShortIntegerType-abbreviation`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}UnsignedShortIntegerType-maxInclusive`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedShortIntegerType`), namedNode(`${sh}property`), namedNode(`${qudt}UnsignedShortIntegerType-minInclusive`), namedNode(qudt)),
        quad(blankNodes[490], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[490], namedNode(`${owl}onProperty`), namedNode(`${qudt}minInclusive`), namedNode(qudt)),
        quad(blankNodes[490], namedNode(`${owl}hasValue`), literal(`0`), namedNode(qudt)),
        quad(blankNodes[491], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[491], namedNode(`${owl}onProperty`), namedNode(`${dtype}literal`), namedNode(qudt)),
        quad(blankNodes[491], namedNode(`${owl}hasValue`), literal(`UI16`), namedNode(qudt)),
        quad(blankNodes[492], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[492], namedNode(`${owl}onProperty`), namedNode(`${qudt}maxInclusive`), namedNode(qudt)),
        quad(blankNodes[492], namedNode(`${owl}hasValue`), literal(`2^{16}-1`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedType-signedness`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedType-signedness`), namedNode(`${sh}hasValue`), namedNode(`${qudt}UNSIGNED`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedType-signedness`), namedNode(`${sh}path`), namedNode(`${qudt}signedness`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedType-signedness`), namedNode(`${sh}class`), namedNode(`${qudt}SignednessType`), namedNode(qudt)),
        quad(blankNodes[374], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[374], namedNode(`${owl}onProperty`), namedNode(`${qudt}signedness`), namedNode(qudt)),
        quad(blankNodes[374], namedNode(`${owl}hasValue`), namedNode(`${ns24}Unsigned`), namedNode(qudt)),
        quad(blankNodes[375], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(blankNodes[375], namedNode(`${owl}intersectionOf`), blankNodes[493], namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedVariableLengthIntegerType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedVariableLengthIntegerType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedVariableLengthIntegerType`), namedNode(`${rdfs}label`), literal(`Unsigned Variable Length Integer Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedVariableLengthIntegerType`), namedNode(`${dcterms}description`), literal(`An Unsigned Variable Length Integer data type defines a data structure for representing unsigned integers that uses a variable number of bits depending on the magnitude of the integer. Typically, variable length integer data types are between one and 64 bits in length.`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedVariableLengthIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}UnsignedIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UnsignedVariableLengthIntegerType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}VariableLengthIntegerType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UserModifiableParameter`), namedNode(`${rdf}type`), namedNode(`${qudt}ParameterModifiabilityType`), namedNode(qudt)),
        quad(namedNode(`${qudt}UserModifiableParameter`), namedNode(`${rdfs}label`), literal(`User modifiable parameter`), namedNode(qudt)),
        quad(namedNode(`${qudt}UserModifiableParameter`), namedNode(`${rdfs}comment`), literal(`Parameter is modifiable by a user.`), namedNode(qudt)),
        quad(namedNode(`${qudt}UserModifiableParameter`), namedNode(`${qudt}literal`), literal(`user`), namedNode(qudt)),
        quad(namedNode(`${qudt}UserModifiableParameter`), namedNode(`${qudt}code`), literal(`2`), namedNode(qudt)),
        quad(namedNode(`${qudt}UserQuantityKind`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}UserQuantityKind`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}UserQuantityKind`), namedNode(`${rdfs}label`), literal(`User Quantity Kind`), namedNode(qudt)),
        quad(namedNode(`${qudt}UserQuantityKind`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}AbstractQuantityKind`), namedNode(qudt)),
        quad(namedNode(`${qudt}UserQuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[494], namedNode(qudt)),
        quad(namedNode(`${qudt}UserQuantityKind`), namedNode(`${rdfs}subClassOf`), blankNodes[495], namedNode(qudt)),
        quad(blankNodes[494], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[494], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}QuantityKind`), namedNode(qudt)),
        quad(blankNodes[494], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasQuantityKind`), namedNode(qudt)),
        quad(blankNodes[495], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[495], namedNode(`${owl}onProperty`), namedNode(`${qudt}hasQuantityKind`), namedNode(qudt)),
        quad(blankNodes[495], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(namedNode(`${qudt}VECTOR`), namedNode(`${rdf}type`), namedNode(`${qudt}VectorType`), namedNode(qudt)),
        quad(namedNode(`${qudt}VECTOR`), namedNode(`${rdfs}label`), literal(`VECTOR`), namedNode(qudt)),
        quad(namedNode(`${qudt}VECTOR`), namedNode(`${qudt}dimensionality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}VECTOR_3D`), namedNode(`${rdf}type`), namedNode(`${qudt}VectorType`), namedNode(qudt)),
        quad(namedNode(`${qudt}VECTOR_3D`), namedNode(`${rdfs}label`), literal(`VECTOR 3D`), namedNode(qudt)),
        quad(namedNode(`${qudt}VECTOR_3D`), namedNode(`${qudt}dimensionality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}VECTOR_3D`), namedNode(`${qudt}protocolBuffersName`), literal(`Vector3D`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableIntervalTimeSeriesArray`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableIntervalTimeSeriesArray`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableIntervalTimeSeriesArray`), namedNode(`${rdfs}label`), literal(`Variable Interval Time Series Array Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableIntervalTimeSeriesArray`), namedNode(`${dcterms}description`), literal(`A Variable Interval Time Series Array Type is a data type that specifies the properties of arrays that hold time series data that has been sampled over non-uniformly spaced time intervals. A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals. For variable interval time series, the successive time intervals may follow a repeating pattern, or may be completely random.`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableIntervalTimeSeriesArray`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TimeSeriesArray`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableIntervalTimeSeriesArrayType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableIntervalTimeSeriesArrayType`), namedNode(`${rdfs}label`), literal(`Variable Interval Time Series Array Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableIntervalTimeSeriesArrayType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}TimeSeriesArrayType`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableIntervalTimeSeriesArrayType`), namedNode(`${rdfs}comment`), literal(`A Variable Interval Time Series Array Type is a data type that specifies the properties of arrays that hold time series data that has been sampled over non-uniformly spaced time intervals. A time series is a sequence of data points, measured typically at successive times, spaced at uniform or non-uniform time intervals. For variable interval time series, the successive time intervals may follow a repeating pattern, or may be completely random.`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType-maxBits`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType-maxBits`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType-maxBits`), namedNode(`${sh}hasValue`), literal(`64`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType-maxBits`), namedNode(`${sh}path`), namedNode(`${qudt}maxBits`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxBits`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxBits`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxBits`), namedNode(`${rdfs}label`), literal(`maximum bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxBits`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType-minBits`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType-minBits`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType-minBits`), namedNode(`${sh}hasValue`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}VariableLengthIntegerType-minBits`), namedNode(`${sh}path`), namedNode(`${qudt}minBits`), namedNode(qudt)),
        quad(namedNode(`${qudt}minBits`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}minBits`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}minBits`), namedNode(`${rdfs}label`), literal(`minimum bits`), namedNode(qudt)),
        quad(namedNode(`${qudt}minBits`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(blankNodes[440], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[440], namedNode(`${owl}onProperty`), namedNode(`${qudt}maxBits`), namedNode(qudt)),
        quad(blankNodes[440], namedNode(`${owl}hasValue`), literal(`64`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[441], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[441], namedNode(`${owl}onProperty`), namedNode(`${qudt}minBits`), namedNode(qudt)),
        quad(blankNodes[441], namedNode(`${owl}hasValue`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector-dimension`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector-dimension`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector-dimension`), namedNode(`${sh}path`), namedNode(`${qudt}dimension`), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector-dimension`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector-dimension`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}dimension`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimension`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimension`), namedNode(`${rdfs}label`), literal(`dimension`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimension`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimension`), namedNode(`${dcterms}description`), literal(`The number of elements in a vector.`), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector-dimensionality`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector-dimensionality`), namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector-dimensionality`), namedNode(`${sh}path`), namedNode(`${qudt}dimensionality`), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector-dimensionality`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector-referenceFrame`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector-referenceFrame`), namedNode(`${sh}path`), namedNode(`${qudt}referenceFrame`), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector-referenceFrame`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}Vector-referenceFrame`), namedNode(`${sh}class`), namedNode(`${qudt}ReferenceFrame`), namedNode(qudt)),
        quad(blankNodes[36], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[36], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimension`), namedNode(qudt)),
        quad(blankNodes[36], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[37], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[37], namedNode(`${owl}onProperty`), namedNode(`${qudt}referenceFrame`), namedNode(qudt)),
        quad(blankNodes[37], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[38], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[38], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionality`), namedNode(qudt)),
        quad(blankNodes[38], namedNode(`${owl}hasValue`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[39], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[39], namedNode(`${owl}onProperty`), namedNode(`${qudt}dimensionality`), namedNode(qudt)),
        quad(blankNodes[39], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[40], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[40], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}ReferenceFrame`), namedNode(qudt)),
        quad(blankNodes[40], namedNode(`${owl}onProperty`), namedNode(`${qudt}referenceFrame`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorArray-vector`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorArray-vector`), namedNode(`${sh}path`), namedNode(`${qudt}vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorArray-vector`), namedNode(`${sh}class`), namedNode(`${qudt}StateSpaceVectorType`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorArray`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorArray`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorArray`), namedNode(`${rdfs}label`), literal(`Vector Array Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorArray`), namedNode(`${dcterms}description`), literal(`A vector array is an array whose elements are all state vectors. As a data type, a vector array type is used to describe the structure of vector array valued quantities by specifying the types of the array's elements.`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorArray`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}Array`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorArray`), namedNode(`${rdfs}subClassOf`), blankNodes[496], namedNode(qudt)),
        quad(blankNodes[496], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[496], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}StateSpaceVector`), namedNode(qudt)),
        quad(blankNodes[496], namedNode(`${owl}onProperty`), namedNode(`${ns26}vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorArrayType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorArrayType`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorArrayType`), namedNode(`${rdfs}label`), literal(`Vector Array Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorArrayType`), namedNode(`${dcterms}description`), literal(`A vector array is an array whose elements are all state vectors. As a data type, a vector array type is used to describe the structure of vector array valued quantities by specifying the types of the array's elements.`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorArrayType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}ArrayType`), namedNode(qudt)),
        quad(namedNode(`${qudt}VectorArrayType`), namedNode(`${sh}property`), namedNode(`${qudt}VectorArray-vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem-pitchRotationDefinition`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem-pitchRotationDefinition`), namedNode(`${sh}path`), namedNode(`${qudt}pitchRotationDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem-pitchRotationDefinition`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem-pitchRotationDefinition`), namedNode(`${sh}class`), namedNode(`${qudt}AxialOrientationType`), namedNode(qudt)),
        quad(namedNode(`${qudt}pitchRotationDefinition`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}pitchRotationDefinition`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}pitchRotationDefinition`), namedNode(`${rdfs}label`), literal(`pitch rotation definition`), namedNode(qudt)),
        quad(namedNode(`${qudt}pitchRotationDefinition`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}rotationDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem-rollRotationDefinition`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem-rollRotationDefinition`), namedNode(`${sh}path`), namedNode(`${qudt}rollRotationDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem-rollRotationDefinition`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem-rollRotationDefinition`), namedNode(`${sh}class`), namedNode(`${qudt}AxialOrientationType`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem-rollRotationDefinition`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}rollRotationDefinition`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}rollRotationDefinition`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}rollRotationDefinition`), namedNode(`${rdfs}label`), literal(`roll rotation definition`), namedNode(qudt)),
        quad(namedNode(`${qudt}rollRotationDefinition`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}rotationDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem-yawRotationDefinition`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem-yawRotationDefinition`), namedNode(`${sh}path`), namedNode(`${qudt}yawRotationDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem-yawRotationDefinition`), namedNode(`${sh}maxCount`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem-yawRotationDefinition`), namedNode(`${sh}class`), namedNode(`${qudt}AxialOrientationType`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem-yawRotationDefinition`), namedNode(`${sh}minCount`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}yawRotationDefinition`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}yawRotationDefinition`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}yawRotationDefinition`), namedNode(`${rdfs}label`), literal(`Yaw rotation definition`), namedNode(qudt)),
        quad(namedNode(`${qudt}yawRotationDefinition`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}rotationDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem`), namedNode(`${rdf}type`), namedNode(`${sh}NodeShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem`), namedNode(`${rdfs}label`), literal(`Vehicle coordinate system`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem`), namedNode(`${dcterms}description`), literal(`A sub-type of 'Aerospace coordinate system'. Detailed desciption to be provided in a future version.`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}AerospaceCoordinateSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[497], namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[498], namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[499], namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[500], namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[501], namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem`), namedNode(`${rdfs}subClassOf`), blankNodes[502], namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem`), namedNode(`${sh}property`), namedNode(`${qudt}VehicleCoordinateSystem-pitchRotationDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem`), namedNode(`${sh}property`), namedNode(`${qudt}VehicleCoordinateSystem-rollRotationDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}VehicleCoordinateSystem`), namedNode(`${sh}property`), namedNode(`${qudt}VehicleCoordinateSystem-yawRotationDefinition`), namedNode(qudt)),
        quad(blankNodes[497], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[497], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}AxialOrientationType`), namedNode(qudt)),
        quad(blankNodes[497], namedNode(`${owl}onProperty`), namedNode(`${qudt}yawRotationDefinition`), namedNode(qudt)),
        quad(blankNodes[498], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[498], namedNode(`${owl}onProperty`), namedNode(`${qudt}pitchRotationDefinition`), namedNode(qudt)),
        quad(blankNodes[498], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[499], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[499], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}AxialOrientationType`), namedNode(qudt)),
        quad(blankNodes[499], namedNode(`${owl}onProperty`), namedNode(`${qudt}pitchRotationDefinition`), namedNode(qudt)),
        quad(blankNodes[500], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[500], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}AxialOrientationType`), namedNode(qudt)),
        quad(blankNodes[500], namedNode(`${owl}onProperty`), namedNode(`${qudt}rollRotationDefinition`), namedNode(qudt)),
        quad(blankNodes[501], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[501], namedNode(`${owl}onProperty`), namedNode(`${qudt}rollRotationDefinition`), namedNode(qudt)),
        quad(blankNodes[501], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[502], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[502], namedNode(`${owl}onProperty`), namedNode(`${qudt}yawRotationDefinition`), namedNode(qudt)),
        quad(blankNodes[502], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[128], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[128], namedNode(`${owl}onProperty`), namedNode(`${qudt}dbpediaMatch`), namedNode(qudt)),
        quad(blankNodes[128], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[129], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[129], namedNode(`${owl}onProperty`), namedNode(`${qudt}informativeReference`), namedNode(qudt)),
        quad(blankNodes[129], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[130], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[130], namedNode(`${owl}onProperty`), namedNode(`${qudt}normativeReference`), namedNode(qudt)),
        quad(blankNodes[130], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[131], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[131], namedNode(`${owl}onProperty`), namedNode(`${qudt}normativeReference`), namedNode(qudt)),
        quad(blankNodes[131], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[132], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[132], namedNode(`${owl}onProperty`), namedNode(`${qudt}isoNormativeReference`), namedNode(qudt)),
        quad(blankNodes[132], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(blankNodes[133], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[133], namedNode(`${owl}onProperty`), namedNode(`${qudt}isoNormativeReference`), namedNode(qudt)),
        quad(blankNodes[133], namedNode(`${owl}minCardinality`), literal(`0`, namedNode(`${xsd}nonNegativeInteger`)), namedNode(qudt)),
        quad(namedNode(`${qudt}VisualCueEnumeration-defaultValue`), namedNode(`${rdf}type`), namedNode(`${sh}PropertyShape`), namedNode(qudt)),
        quad(namedNode(`${qudt}VisualCueEnumeration-defaultValue`), namedNode(`${sh}path`), namedNode(`${qudt}defaultValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}VisualCueEnumeration-defaultValue`), namedNode(`${sh}class`), namedNode(`${qudt}VisualCue`), namedNode(qudt)),
        quad(namedNode(`${qudt}WDST_DRY`), namedNode(`${rdf}type`), namedNode(`${qudt}WetDryStateType`), namedNode(qudt)),
        quad(namedNode(`${qudt}WDST_DRY`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}WDST_DRY`), namedNode(`${rdfs}label`), literal(`Dry`), namedNode(qudt)),
        quad(namedNode(`${qudt}WDST_DRY`), namedNode(`${dtype}literal`), literal(`dry`), namedNode(qudt)),
        quad(namedNode(`${qudt}WDST_DRY`), namedNode(`${qudt}code`), literal(`2`), namedNode(qudt)),
        quad(namedNode(`${qudt}WetDryStateType`), namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(namedNode(`${qudt}WetDryStateType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}WetDryStateType`), namedNode(`${rdfs}label`), literal(`Wet dry state type`), namedNode(qudt)),
        quad(namedNode(`${qudt}WetDryStateType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}EnumeratedValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}WetDryStateType`), namedNode(`${rdfs}subClassOf`), namedNode(`${qudt}DiscreteState`), namedNode(qudt)),
        quad(namedNode(`${qudt}WDST_WET`), namedNode(`${rdf}type`), namedNode(`${qudt}WetDryStateType`), namedNode(qudt)),
        quad(namedNode(`${qudt}WDST_WET`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}WDST_WET`), namedNode(`${rdfs}label`), literal(`Wet`), namedNode(qudt)),
        quad(namedNode(`${qudt}WDST_WET`), namedNode(`${dtype}literal`), literal(`wet`), namedNode(qudt)),
        quad(namedNode(`${qudt}WDST_WET`), namedNode(`${qudt}code`), literal(`1`), namedNode(qudt)),
        quad(namedNode(`${qudt}Wikipedia`), namedNode(`${rdf}type`), namedNode(`${qudt}Organization`), namedNode(qudt)),
        quad(namedNode(`${qudt}Wikipedia`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}Wikipedia`), namedNode(`${rdfs}label`), literal(`Wikipedia`), namedNode(qudt)),
        quad(namedNode(`${qudt}WordAligned`), namedNode(`${rdf}type`), namedNode(`${qudt}AlignmentType`), namedNode(qudt)),
        quad(namedNode(`${qudt}WordAligned`), namedNode(`${rdfs}label`), literal(`Word Aligned`), namedNode(qudt)),
        quad(namedNode(`${qudt}WordAligned`), namedNode(`${dtype}literal`), literal(`word`), namedNode(qudt)),
        quad(namedNode(`${qudt}YDT`), namedNode(`${rdf}type`), namedNode(`${qudt}DateStringType`), namedNode(qudt)),
        quad(namedNode(`${qudt}YDT`), namedNode(`${rdfs}label`), literal(`Year Day Time`), namedNode(qudt)),
        quad(namedNode(`${qudt}YDT`), namedNode(`${qudt}dimensionality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(namedNode(`${qudt}YDT`), namedNode(`${dtype}literal`), literal(`YDT`), namedNode(qudt)),
        quad(namedNode(`${qudt}YDT`), namedNode(`${qudt}rdfsDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}YDT`), namedNode(`${qudt}encodingDescription`), literal(`TBD`), namedNode(qudt)),
        quad(namedNode(`${qudt}Yes`), namedNode(`${rdf}type`), namedNode(`${qudt}YesNoType`), namedNode(qudt)),
        quad(namedNode(`${qudt}Yes`), namedNode(`${rdfs}label`), literal(`Yes`), namedNode(qudt)),
        quad(namedNode(`${qudt}Yes`), namedNode(`${qudt}literal`), literal(`Y`), namedNode(qudt)),
        quad(namedNode(`${qudt}acronym`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}acronym`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}acronym`), namedNode(`${rdfs}label`), literal(`acronym`), namedNode(qudt)),
        quad(namedNode(`${qudt}acronym`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}allowedUnitOfSystem`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}allowedUnitOfSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}allowedUnitOfSystem`), namedNode(`${rdfs}label`), literal(`allowed unit of system`), namedNode(qudt)),
        quad(namedNode(`${qudt}allowedUnitOfSystem`), namedNode(`${dcterms}description`), literal(`This property relates a unit of measure with a unit system that does not define the unit, but allows its use within the system. An allowed unit must be convertible to some dimensionally eqiuvalent unit that is defined by the system.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}allowedUnitOfSystem`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}unitOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}allowedUnitOfSystem`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}hasAllowedUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}unitOfSystem`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}unitOfSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}unitOfSystem`), namedNode(`${rdfs}label`), literal(`is unit of system`), namedNode(qudt)),
        quad(namedNode(`${qudt}unitOfSystem`), namedNode(`${rdfs}range`), namedNode(`${qudt}SystemOfUnits`), namedNode(qudt)),
        quad(namedNode(`${qudt}unitOfSystem`), namedNode(`${dcterms}description`), literal(`This property relates a unit of measure with a system of units that either a) defines the unit or b) allows the unit to be used within the system.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}unitOfSystem`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}hasUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}unitOfSystem`), namedNode(`${rdfs}domain`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasAllowedUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasAllowedUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasAllowedUnit`), namedNode(`${rdfs}label`), literal(`allowed unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasAllowedUnit`), namedNode(`${dcterms}description`), literal(`This property relates a unit system with a unit of measure that is not defined by or part of the system, but is allowed for use within the system. An allowed unit must be convertible to some dimensionally eqiuvalent unit that is defined by the system.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}hasAllowedUnit`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}hasUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableCGSUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableCGSUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableCGSUnit`), namedNode(`${rdfs}label`), literal(`applicable CGS unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableCGSUnit`), namedNode(`${rdfs}range`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableCGSUnit`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}applicableUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableUnit`), namedNode(`${rdfs}label`), literal(`applicable unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableUnit`), namedNode(`${rdfs}range`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableISOUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableISOUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableISOUnit`), namedNode(`${rdfs}label`), literal(`applicable ISO unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableISOUnit`), namedNode(`${rdfs}range`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableISOUnit`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}applicableUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableImperialUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableImperialUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableImperialUnit`), namedNode(`${rdfs}label`), literal(`applicable Imperial unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableImperialUnit`), namedNode(`${rdfs}range`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableImperialUnit`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}applicableUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicablePhysicalConstant`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicablePhysicalConstant`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicablePhysicalConstant`), namedNode(`${rdfs}label`), literal(`applicable physical constant`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicablePlanckUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicablePlanckUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicablePlanckUnit`), namedNode(`${rdfs}label`), literal(`applicable Planck unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicablePlanckUnit`), namedNode(`${rdfs}range`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicablePlanckUnit`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}applicableUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableSIUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableSIUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableSIUnit`), namedNode(`${rdfs}label`), literal(`applicable SI unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableSIUnit`), namedNode(`${rdfs}range`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableSIUnit`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}applicableUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableUSCustomaryUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableUSCustomaryUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableUSCustomaryUnit`), namedNode(`${rdfs}label`), literal(`applicable US Customary unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableUSCustomaryUnit`), namedNode(`${rdfs}range`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}applicableUSCustomaryUnit`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}applicableUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}arg1Type`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}arg1Type`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}arg1Type`), namedNode(`${rdfs}label`), literal(`arg1Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}arg1Type`), namedNode(`${dcterms}description`), literal(`This property relates a funciton data type with the type of its arg1.`), namedNode(qudt)),
        quad(namedNode(`${qudt}arg1Type`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}argType`), namedNode(qudt)),
        quad(namedNode(`${qudt}arg2Type`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}arg2Type`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}arg2Type`), namedNode(`${rdfs}label`), literal(`arg2Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}arg2Type`), namedNode(`${dcterms}description`), literal(`This property relates a funciton data type with the type of its arg2.`), namedNode(qudt)),
        quad(namedNode(`${qudt}arg2Type`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}argType`), namedNode(qudt)),
        quad(namedNode(`${qudt}arg3Type`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}arg3Type`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}arg3Type`), namedNode(`${rdfs}label`), literal(`arg3Type`), namedNode(qudt)),
        quad(namedNode(`${qudt}arg3Type`), namedNode(`${dcterms}description`), literal(`This property relates a funciton data type with the type of its arg3.`), namedNode(qudt)),
        quad(namedNode(`${qudt}arg3Type`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}argType`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseCGSUnitDimensions`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseCGSUnitDimensions`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseCGSUnitDimensions`), namedNode(`${rdfs}label`), literal(`base CGS unit dimensions`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseCGSUnitDimensions`), namedNode(`${dcterms}description`), literal(`<em>qudt:baseCGSUnitDimensions</em> is a string datatype property expressing the dimensions of a unit, or quantity, as a vector over the base units in the CGS System.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}baseCGSUnitDimensions`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}baseUnitDimensions`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseUnitDimensions`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseUnitDimensions`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseUnitDimensions`), namedNode(`${rdfs}label`), literal(`base unit dimensions`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseUnitDimensions`), namedNode(`${dcterms}description`), literal(`"qudt:baseUnitDimensions" is a string datatype property expressing the dimensions of a unit, or quantity, as a vector over the base units.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}baseDimensionEnumeration`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseDimensionEnumeration`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseDimensionEnumeration`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseDimensionEnumeration`), namedNode(`${rdfs}label`), literal(`base dimension enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseDimensionEnumeration`), namedNode(`${rdfs}range`), namedNode(`${qudt}Enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseDimensionEnumeration`), namedNode(`${dcterms}description`), literal(`This property associates a system of quantities with an enumeration that enumerates the base dimensions of the system in canonical order.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}baseISOUnitDimensions`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseISOUnitDimensions`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseISOUnitDimensions`), namedNode(`${rdfs}label`), literal(`base ISO unit dimensions`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseISOUnitDimensions`), namedNode(`${dcterms}description`), literal(`<strong>qudt:baseISOUnitDimensions</strong> is a string datatype property expressing the dimensions of a unit, or quantity, as a vector over the base units in the ISO System.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}baseISOUnitDimensions`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}baseUnitDimensions`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseImperialUnitDimensions`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseImperialUnitDimensions`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseImperialUnitDimensions`), namedNode(`${rdfs}label`), literal(`base Imperial unit dimensions`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseImperialUnitDimensions`), namedNode(`${dcterms}description`), literal(`<strong>qudt:baseImperialUnitDimensions</strong> is a string datatype property expressing the dimensions of a unit, or quantity, as a vector over the base units in the Imperial System.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}baseImperialUnitDimensions`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}baseUnitDimensions`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseSIUnitDimensions`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseSIUnitDimensions`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseSIUnitDimensions`), namedNode(`${rdfs}label`), literal(`base SI unit dimensions`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseSIUnitDimensions`), namedNode(`${dcterms}description`), literal(`<strong>qudt:baseSIUnitDimensions</strong> is a string datatype property expressing the dimensions of a unit, or quantity, as a vector over the base units. For example, in the SI system \\(capacitance\\) has the unit \\(Farad\\) and base unit dimensions of \\(C^2 \\cdot s^2 / (kg \\cdot m^2)\\).`, namedNode(`${qudt}LatexString`)), namedNode(qudt)),
        quad(namedNode(`${qudt}baseSIUnitDimensions`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}baseUnitDimensions`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseUSCustomaryUnitDimensions`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseUSCustomaryUnitDimensions`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseUSCustomaryUnitDimensions`), namedNode(`${rdfs}label`), literal(`base US Customary unit dimensions`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseUSCustomaryUnitDimensions`), namedNode(`${dcterms}description`), literal(`"qudt:baseUSCustomaryUnitDimensions" is a string datatype property expressing the dimensions of a unit, or quantity, as a vector over the base units in the US Customary System.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}baseUSCustomaryUnitDimensions`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}baseUnitDimensions`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseUnitOfSystem`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseUnitOfSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseUnitOfSystem`), namedNode(`${rdfs}label`), literal(`is base unit of system`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseUnitOfSystem`), namedNode(`${dcterms}description`), literal(`This property relates a unit of measure to the system of units in which it is defined as a base unit for the system. The base units of a system are used to define the derived units of the system by expressing the derived units as products of the base units raised to a rational power.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}baseUnitOfSystem`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}coherentUnitOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}baseUnitOfSystem`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}hasBaseUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}coherentUnitOfSystem`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}coherentUnitOfSystem`), namedNode(`${rdf}type`), namedNode(`${owl}DeprecatedProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}coherentUnitOfSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}coherentUnitOfSystem`), namedNode(`${rdfs}label`), literal(`is coherent unit of system`), namedNode(qudt)),
        quad(namedNode(`${qudt}coherentUnitOfSystem`), namedNode(`${rdfs}range`), namedNode(`${qudt}SystemOfUnits`), namedNode(qudt)),
        quad(namedNode(`${qudt}coherentUnitOfSystem`), namedNode(`${dcterms}description`), literal(`A coherent unit of measurement for a unit system is a defined unit that may be expressed as a product of powers of the system's base units with the proportionality factor of one. A system of units is coherent with respect to a system of quantities and equations if the system of units is chosen in such a way that the equations between numerical values have exactly the same form (including the numerical factors) as the corresponding equations between the quantities. For example, the 'newton' and the 'joule'. These two are, respectively, the force that causes one kilogram to be accelerated at 1 metre per second per  second, and the work done by 1 newton acting over 1 metre. Being coherent refers to this consistent use of 1. In the old c.g.s. system , with its base units the centimetre and the gram, the corresponding coherent units were the dyne and the erg, respectively the force that causes 1 gram to be accelerated at 1 centimetre per second per second, and the work done by 1 dyne acting over 1 centimetre. So \\(1 newton = 10^5\\,dyne\\), \\(1 joule = 10^7\\,erg\\), making each of the four compatible in a decimal sense within its respective other system, but not coherent therein.`, namedNode(`${qudt}LatexString`)), namedNode(qudt)),
        quad(namedNode(`${qudt}coherentUnitOfSystem`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}definedUnitOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}coherentUnitOfSystem`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}hasCoherentUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasBaseUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasBaseUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasBaseUnit`), namedNode(`${rdfs}label`), literal(`base unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasBaseUnit`), namedNode(`${dcterms}description`), literal(`This property relates a system of units to a base unit defined within the system. The base units of a system are used to define the derived units of the system by expressing the derived units as products of the base units raised to a rational power.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}hasBaseUnit`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}hasCoherentUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasBaseUnit`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}baseUnitOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}belongsToSystemOfQuantities`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}belongsToSystemOfQuantities`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}belongsToSystemOfQuantities`), namedNode(`${rdfs}label`), literal(`belongs to system of quantities`), namedNode(qudt)),
        quad(namedNode(`${qudt}belongsToSystemOfQuantities`), namedNode(`${rdfs}range`), namedNode(`${qudt}SystemOfQuantityKinds`), namedNode(qudt)),
        quad(namedNode(`${qudt}belongsToSystemOfQuantities`), namedNode(`${rdfs}domain`), namedNode(`${qudt}QuantityKind`), namedNode(qudt)),
        quad(namedNode(`${qudt}categorizedAs`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}categorizedAs`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}categorizedAs`), namedNode(`${rdfs}label`), literal(`categorized as`), namedNode(qudt)),
        quad(namedNode(`${qudt}citation`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}citation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}citation`), namedNode(`${rdfs}label`), literal(`citation`), namedNode(qudt)),
        quad(namedNode(`${qudt}citation`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}citation`), namedNode(`${qudt}plainTextDescription`), literal(`Used to provide an annotation for an informative reference.`), namedNode(qudt)),
        quad(namedNode(`${qudt}definedUnitOfSystem`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}definedUnitOfSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}definedUnitOfSystem`), namedNode(`${rdfs}label`), literal(`defined unit of system`), namedNode(qudt)),
        quad(namedNode(`${qudt}definedUnitOfSystem`), namedNode(`${dcterms}description`), literal(`This property relates a unit of measure with the unit system that defines the unit.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}definedUnitOfSystem`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}unitOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}definedUnitOfSystem`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}hasDefinedUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasCoherentUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasCoherentUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasCoherentUnit`), namedNode(`${rdfs}label`), literal(`coherent unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasCoherentUnit`), namedNode(`${dcterms}description`), literal(`A coherent unit of measurement for a unit system is a defined unit that may be expressed as a product of powers of the system's base units with the proportionality factor of one.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}hasCoherentUnit`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}hasDefinedUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasCoherentUnit`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}coherentUnitOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}coherentUnitSystem`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}coherentUnitSystem`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}coherentUnitSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}coherentUnitSystem`), namedNode(`${rdfs}label`), literal(`coherent unit system`), namedNode(qudt)),
        quad(namedNode(`${qudt}coherentUnitSystem`), namedNode(`${dcterms}description`), literal(`<p>A system of units is coherent with respect to a system of quantities and equations if the system of units is chosen in such a way that the equations between numerical values have exactly the same form (including the numerical factors) as the corresponding equations between the quantities. In such a coherent system, no numerical factor other than the number 1 ever occurs in the expressions for the derived units in terms of the base units. For example, the \\(newton\\) and the \\(joule\\). These two are, respectively, the force that causes one kilogram to be accelerated at 1 metre per (1) second per (1) second, and the work done by 1 newton acting over 1 metre. Being coherent refers to this consistent use of 1. In the old c.g.s. system , with its base units the centimetre and the gram, the corresponding coherent units were the dyne and the erg, respectively the force that causes 1 gram to be accelerated at 1 centimetre per (1) second per (1) second, and the work done by 1 dyne acting over 1 centimetre. So \\(1\\,newton = 10^5 dyne\\), \\(1 joule = 10^7 erg\\), making each of the four compatible in a decimal sense within its respective other system, but not coherent therein.</p>`, namedNode(`${qudt}LatexString`)), namedNode(qudt)),
        quad(namedNode(`${qudt}coherentUnitSystem`), namedNode(`${qudt}informativeReference`), literal(`https://en.wikipedia.org/wiki/Coherence_(units_of_measurement)`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}coherentUnitSystem`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}hasUnitSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasUnitSystem`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasUnitSystem`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasUnitSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasUnitSystem`), namedNode(`${rdfs}label`), literal(`has unit system`), namedNode(qudt)),
        quad(namedNode(`${qudt}conversionCoefficient`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}conversionCoefficient`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}conversionCoefficient`), namedNode(`${rdfs}label`), literal(`conversion coefficient`), namedNode(qudt)),
        quad(namedNode(`${qudt}conversionCoefficient`), namedNode(`${rdfs}range`), namedNode(`${xsd}double`), namedNode(qudt)),
        quad(namedNode(`${qudt}conversionMultiplier`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}conversionMultiplier`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}conversionMultiplier`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}conversionMultiplier`), namedNode(`${rdfs}label`), literal(`conversion multiplier`), namedNode(qudt)),
        quad(namedNode(`${qudt}conversionMultiplier`), namedNode(`${rdfs}range`), namedNode(`${dtype}numericUnion`), namedNode(qudt)),
        quad(namedNode(`${qudt}conversionOffset`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}conversionOffset`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}conversionOffset`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}conversionOffset`), namedNode(`${rdfs}label`), literal(`conversion offset`), namedNode(qudt)),
        quad(namedNode(`${qudt}conversionOffset`), namedNode(`${rdfs}range`), namedNode(`${dtype}numericUnion`), namedNode(qudt)),
        quad(namedNode(`${qudt}coordinateSystemFrame`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}coordinateSystemFrame`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}coordinateSystemFrame`), namedNode(`${rdfs}label`), literal(`coordinate system frame`), namedNode(qudt)),
        quad(namedNode(`${qudt}currencyExponent`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}currencyExponent`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}currencyExponent`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}currencyExponent`), namedNode(`${rdfs}label`), literal(`currency exponent`), namedNode(qudt)),
        quad(namedNode(`${qudt}currencyExponent`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}currencyExponent`), namedNode(`${dcterms}description`), literal(`The currency exponent indicates the number of decimal places between a major currency unit and its minor currency unit. For example, the US dollar is the major currency unit of the United States, and the US cent is the minor currency unit. Since one cent is 1/100 of a dollar, the US dollar has a currency exponent of 2. However, the Japanese Yen has no minor currency units, so the yen has a currency exponent of 0.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}dataEncoding`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dataEncoding`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}dataEncoding`), namedNode(`${rdfs}label`), literal(`data encoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}dataEncoding`), namedNode(`${rdfs}range`), namedNode(`${qudt}DataEncoding`), namedNode(qudt)),
        quad(namedNode(`${qudt}dataStructure`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dataStructure`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}dataStructure`), namedNode(`${rdfs}label`), literal(`data structure`), namedNode(qudt)),
        quad(namedNode(`${qudt}dataStructure`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}default`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}default`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}default`), namedNode(`${rdfs}label`), literal(`default`), namedNode(qudt)),
        quad(namedNode(`${qudt}default`), namedNode(`${dcterms}description`), literal(`The default element in an enumeration`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDefinedUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDefinedUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDefinedUnit`), namedNode(`${rdfs}label`), literal(`defined unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDefinedUnit`), namedNode(`${dcterms}description`), literal(`This property relates a unit system with a unit of measure that is defined by the system.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDefinedUnit`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}hasUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}denominatorDimensionVector`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}denominatorDimensionVector`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}denominatorDimensionVector`), namedNode(`${rdfs}label`), literal(`denominator dimension vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}denominatorDimensionVector`), namedNode(`${rdfs}range`), namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedCoherentUnitOfSystem`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedCoherentUnitOfSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedCoherentUnitOfSystem`), namedNode(`${rdfs}label`), literal(`is coherent derived unit of system`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedCoherentUnitOfSystem`), namedNode(`${dcterms}description`), literal(`This property relates a unit of measure to the unit system in which the unit is derived from the system's base units with a proportionality constant of one.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedCoherentUnitOfSystem`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}coherentUnitOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedCoherentUnitOfSystem`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}derivedUnitOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedCoherentUnitOfSystem`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}hasDerivedCoherentUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedUnitOfSystem`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedUnitOfSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedUnitOfSystem`), namedNode(`${rdfs}label`), literal(`is derived unit of system`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedUnitOfSystem`), namedNode(`${dcterms}description`), literal(`This property relates a unit of measure to the system of units in which it is defined as a derived unit. That is, the derived unit is defined as a product of the base units for the system raised to some rational power.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedUnitOfSystem`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}unitOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedUnitOfSystem`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}hasDerivedUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDerivedCoherentUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDerivedCoherentUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDerivedCoherentUnit`), namedNode(`${rdfs}label`), literal(`derived coherent unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDerivedCoherentUnit`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}hasCoherentUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDerivedCoherentUnit`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}hasDerivedUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDerivedCoherentUnit`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}derivedCoherentUnitOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedNonCoherentUnitOfSystem`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedNonCoherentUnitOfSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedNonCoherentUnitOfSystem`), namedNode(`${rdfs}label`), literal(`is non-coherent derived unit of system`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedNonCoherentUnitOfSystem`), namedNode(`${rdfs}range`), namedNode(`${qudt}SystemOfUnits`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedNonCoherentUnitOfSystem`), namedNode(`${dcterms}description`), literal(`This property relates a unit of measure to the unit system in which the unit is derived from the system's base units without proportionality constant of one.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedNonCoherentUnitOfSystem`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}derivedUnitOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedNonCoherentUnitOfSystem`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}hasDerivedNonCoherentUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDerivedNonCoherentUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDerivedNonCoherentUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDerivedNonCoherentUnit`), namedNode(`${rdfs}label`), literal(`has coherent derived unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDerivedNonCoherentUnit`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}hasDerivedUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDerivedNonCoherentUnit`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}derivedNonCoherentUnitOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedQuantityKindOfSystem`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedQuantityKindOfSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedQuantityKindOfSystem`), namedNode(`${rdfs}label`), literal(`derived quantity kind of system`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedQuantityKindOfSystem`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}isQuantityKindOf`), namedNode(qudt)),
        quad(namedNode(`${qudt}derivedQuantityKindOfSystem`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}systemDerivedQuantityKind`), namedNode(qudt)),
        quad(namedNode(`${qudt}isQuantityKindOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}isQuantityKindOf`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}isQuantityKindOf`), namedNode(`${rdfs}label`), literal(`is quantity kind of`), namedNode(qudt)),
        quad(namedNode(`${qudt}isQuantityKindOf`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}hasQuantityKind`), namedNode(qudt)),
        quad(namedNode(`${qudt}systemDerivedQuantityKind`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}systemDerivedQuantityKind`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}systemDerivedQuantityKind`), namedNode(`${rdfs}label`), literal(`system derived quantity kind`), namedNode(qudt)),
        quad(namedNode(`${qudt}systemDerivedQuantityKind`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}hasQuantityKind`), namedNode(qudt)),
        quad(namedNode(`${qudt}systemDerivedQuantityKind`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}derivedQuantityKindOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDerivedUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDerivedUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDerivedUnit`), namedNode(`${rdfs}label`), literal(`derived unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDerivedUnit`), namedNode(`${dcterms}description`), literal(`This property relates a system of units to a unit of measure that is defined within the system in terms of the base units for the system. That is, the derived unit is defined as a product of the base units for the system raised to some rational power.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDerivedUnit`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}derivedUnitOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponent`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponent`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponent`), namedNode(`${rdfs}label`), literal(`dimension exponent`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponent`), namedNode(`${rdfs}range`), namedNode(`${dtype}numericUnion`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForAmountOfSubstance`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForAmountOfSubstance`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForAmountOfSubstance`), namedNode(`${rdfs}label`), literal(`dimension exponent for amount of substance`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForAmountOfSubstance`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}dimensionExponent`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForElectricCurrent`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForElectricCurrent`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForElectricCurrent`), namedNode(`${rdfs}label`), literal(`dimension exponent for electric current`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForElectricCurrent`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForElectricCurrent`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}dimensionExponent`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForLength`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForLength`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForLength`), namedNode(`${rdfs}label`), literal(`dimension exponent for length`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForLength`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}dimensionExponent`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForLuminousIntensity`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForLuminousIntensity`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForLuminousIntensity`), namedNode(`${rdfs}label`), literal(`dimension exponent for luminous intensity`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForLuminousIntensity`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}dimensionExponent`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForMass`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForMass`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForMass`), namedNode(`${rdfs}label`), literal(`dimension exponent for mass`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForMass`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}dimensionExponent`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForThermodynamicTemperature`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForThermodynamicTemperature`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForThermodynamicTemperature`), namedNode(`${rdfs}label`), literal(`dimension exponent for thermodynamic temperature`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForThermodynamicTemperature`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}dimensionExponent`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForTime`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForTime`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForTime`), namedNode(`${rdfs}label`), literal(`dimension exponent for time`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionExponentForTime`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}dimensionExponent`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionInverse`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionInverse`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionInverse`), namedNode(`${rdf}type`), namedNode(`${owl}InverseFunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionInverse`), namedNode(`${rdf}type`), namedNode(`${owl}SymmetricProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionInverse`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionInverse`), namedNode(`${rdfs}label`), literal(`dimension inverse`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionInverse`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}dimensionInverse`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionVectorForSI`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionVectorForSI`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionVectorForSI`), namedNode(`${rdfs}label`), literal(`dimension vector for SI`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionVectorForSI`), namedNode(`${rdfs}range`), namedNode(`${qudt}QuantityKindDimensionVector_SI`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionlessExponent`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionlessExponent`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionlessExponent`), namedNode(`${rdfs}label`), literal(`dimensionless exponent`), namedNode(qudt)),
        quad(namedNode(`${qudt}dimensionlessExponent`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}dimensionExponent`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementKind`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementKind`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementKind`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementKind`), namedNode(`${rdfs}label`), literal(`element kind`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementKind`), namedNode(`${dcterms}description`), literal(`This property is used to describe the quantity kind for a dimensional data type.`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementKind`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}elementKind`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementTypeList`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementTypeList`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementTypeList`), namedNode(`${rdfs}label`), literal(`element type list`), namedNode(qudt)),
        quad(namedNode(`${qudt}elementTypeList`), namedNode(`${dcterms}description`), literal(`This property is used to relate a structured data type with a list of data types. The list members determine the types of structured type's elements. It is used for structured data types with elements that are of different types.`), namedNode(qudt)),
        quad(namedNode(`${qudt}enumeration`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}enumeration`), namedNode(`${rdfs}label`), literal(`enumeration`), namedNode(qudt)),
        quad(namedNode(`${qudt}exactConstant`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}exactConstant`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}exactConstant`), namedNode(`${rdfs}label`), literal(`exact constant`), namedNode(qudt)),
        quad(namedNode(`${qudt}exactConstant`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}exactMatch`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}exactMatch`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}exactMatch`), namedNode(`${rdfs}label`), literal(`exact match`), namedNode(qudt)),
        quad(namedNode(`${qudt}exactMatch`), namedNode(`${rdfs}range`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}example`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}example`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}example`), namedNode(`${rdfs}label`), literal(`example`), namedNode(qudt)),
        quad(namedNode(`${qudt}example`), namedNode(`${rdfs}comment`), literal(`The 'qudt:example' property is used to annotate an instance of a class with a reference to a concept that is an example. The type of this property is 'rdf:Property'. This allows both scalar and object ranges.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}exponent`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}exponent`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}exponent`), namedNode(`${rdfs}label`), literal(`exponent`), namedNode(qudt)),
        quad(namedNode(`${qudt}expression`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}expression`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}expression`), namedNode(`${rdfs}label`), literal(`expression`), namedNode(qudt)),
        quad(namedNode(`${qudt}expression`), namedNode(`${dcterms}description`), literal(`An 'expression' is a finite combination of symbols that are well-formed according to rules that apply to units of measure, quantity kinds and their dimensions.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}fieldCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}fieldCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}fieldCode`), namedNode(`${rdfs}label`), literal(`field code`), namedNode(qudt)),
        quad(namedNode(`${qudt}fieldCode`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}fieldCode`), namedNode(`${qudt}plainTextDescription`), literal(`A field code is a generic property for representing unique codes that make up other identifers. For example each QuantityKind class caries a domain code as its field code.`), namedNode(qudt)),
        quad(namedNode(`${qudt}fieldLabels`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}fieldLabels`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}fieldLabels`), namedNode(`${rdfs}label`), literal(`field labels`), namedNode(qudt)),
        quad(namedNode(`${qudt}fieldLabels`), namedNode(`${dcterms}description`), literal(`This property is used to list the field labels for a record type.`), namedNode(qudt)),
        quad(namedNode(`${qudt}fieldName`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}fieldName`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}fieldName`), namedNode(`${rdfs}label`), literal(`field name`), namedNode(qudt)),
        quad(namedNode(`${qudt}fieldName`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}figure`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}figure`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}figure`), namedNode(`${rdfs}label`), literal(`figure`), namedNode(qudt)),
        quad(namedNode(`${qudt}figure`), namedNode(`${rdfs}range`), namedNode(`${qudt}Figure`), namedNode(qudt)),
        quad(namedNode(`${qudt}figure`), namedNode(`${dcterms}description`), literal(`Provides a link to an image.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}figureCaption`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}figureCaption`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}figureCaption`), namedNode(`${rdfs}label`), literal(`figure caption`), namedNode(qudt)),
        quad(namedNode(`${qudt}figureCaption`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}figureLabel`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}figureLabel`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}figureLabel`), namedNode(`${rdfs}label`), literal(`figure label`), namedNode(qudt)),
        quad(namedNode(`${qudt}figureLabel`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}floatPercentage`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}floatPercentage`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}floatPercentage`), namedNode(`${rdfs}label`), literal(`float percentage`), namedNode(qudt)),
        quad(namedNode(`${qudt}floatPercentage`), namedNode(`${rdfs}subClassOf`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(namedNode(`${qudt}floatPercentage`), namedNode(`${owl}equivalentClass`), blankNodes[503], namedNode(qudt)),
        quad(blankNodes[503], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[503], namedNode(`${owl}onDatatype`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(blankNodes[503], namedNode(`${owl}withRestrictions`), blankNodes[504], namedNode(qudt)),
        quad(namedNode(`${qudt}generalization`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}generalization`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}generalization`), namedNode(`${rdfs}label`), literal(`generalization`), namedNode(qudt)),
        quad(namedNode(`${qudt}generalization`), namedNode(`${dcterms}description`), literal(`This property relates a quantity kind to its generalization. A quantity kind, PARENT, is a generalization of the quantity kind CHILD only if:

1. PARENT and CHILD have the same dimensions in every system of quantities;
2. Every unit that is a measure of quantities of kind CHILD is also a valid measure of quantities of kind PARENT.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}generalization`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}specialization`), namedNode(qudt)),
        quad(namedNode(`${qudt}specialization`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}specialization`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}specialization`), namedNode(`${rdfs}label`), literal(`specialization`), namedNode(qudt)),
        quad(namedNode(`${qudt}specialization`), namedNode(`${dcterms}description`), literal(`This property relates a quantity kind to its specialization(s). For example, linear velocity and angular velocity are both specializations of velocity.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}specialization`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}generalization`), namedNode(qudt)),
        quad(namedNode(`${qudt}guidance`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}guidance`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}guidance`), namedNode(`${rdfs}label`), literal(`guidance`), namedNode(qudt)),
        quad(namedNode(`${qudt}guidance`), namedNode(`${rdfs}range`), namedNode(`${rdf}HTML`), namedNode(qudt)),
        quad(namedNode(`${qudt}guidance`), namedNode(`${rdfs}domain`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasUnit`), namedNode(`${rdfs}label`), literal(`has unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasUnit`), namedNode(`${dcterms}description`), literal(`This property relates a system of units with a unit of measure that is either a) defined by the system, or b) accepted for use by the system and is convertible to a unit of equivalent dimension that is defined by the system. Systems of units may distinguish between base and derived units. Base units are the units which measure the base quantities for the corresponding system of quantities. The base units are used to define units for all other quantities as products of powers of the base units. Such units are called derived units for the system.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}hasUnit`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}unitOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasBaseQuantityKind`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasBaseQuantityKind`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasBaseQuantityKind`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasBaseQuantityKind`), namedNode(`${rdfs}label`), literal(`has base quantity kind`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasBaseQuantityKind`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}hasQuantityKind`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasBaseQuantityKind`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}isBaseQuantityKindOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}isBaseQuantityKindOfSystem`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}isBaseQuantityKindOfSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}isBaseQuantityKindOfSystem`), namedNode(`${rdfs}label`), literal(`is base quantity kind of system`), namedNode(qudt)),
        quad(namedNode(`${qudt}isBaseQuantityKindOfSystem`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}isQuantityKindOf`), namedNode(qudt)),
        quad(namedNode(`${qudt}isBaseQuantityKindOfSystem`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}hasBaseQuantityKind`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDenominatorPart`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDenominatorPart`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDenominatorPart`), namedNode(`${rdfs}label`), literal(`has quantity kind dimension vector denominator part`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDimension`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDimension`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDimension`), namedNode(`${rdfs}label`), literal(`has dimension`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDimensionExpression`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDimensionExpression`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDimensionExpression`), namedNode(`${rdfs}label`), literal(`dimension expression`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDimensionVector`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDimensionVector`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDimensionVector`), namedNode(`${rdfs}label`), literal(`has dimension vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasDimensionVector`), namedNode(`${rdfs}range`), namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasNonCoherentUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasNonCoherentUnit`), namedNode(`${rdf}type`), namedNode(`${owl}DeprecatedProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasNonCoherentUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasNonCoherentUnit`), namedNode(`${rdfs}label`), literal(`has non-coherent unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasNonCoherentUnit`), namedNode(`${dcterms}description`), literal(`A coherent unit of measurement for a unit system is a defined unit that may be expressed as a product of powers of the system's base units with the proportionality factor of one.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}hasNonCoherentUnit`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}hasDefinedUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasNonCoherentUnit`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}coherentUnitOfSystem`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasNumeratorPart`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasNumeratorPart`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasNumeratorPart`), namedNode(`${rdfs}label`), literal(`has quantity kind dimension vector numerator part`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasPrefixUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasPrefixUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasPrefixUnit`), namedNode(`${rdfs}label`), literal(`prefix unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasPrefixUnit`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}hasDefinedUnit`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasQuantity`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasQuantity`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasQuantity`), namedNode(`${rdfs}label`), literal(`has quantity`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasQuantity`), namedNode(`${rdfs}range`), namedNode(`${qudt}Quantity`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasReferenceQuantityKind`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasReferenceQuantityKind`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasReferenceQuantityKind`), namedNode(`${rdfs}label`), literal(`has reference quantity kind`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasRule`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasRule`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasRule`), namedNode(`${rdfs}label`), literal(`has rule`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasVocabulary`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasVocabulary`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasVocabulary`), namedNode(`${rdfs}label`), literal(`has vocabulary`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasVocabulary`), namedNode(`${rdfs}range`), namedNode(`${owl}Ontology`), namedNode(qudt)),
        quad(namedNode(`${qudt}hasVocabulary`), namedNode(`${qudt}plainTextDescription`), literal(`Used to relate a class to one or more graphs where vocabularies for the class are defined.`), namedNode(qudt)),
        quad(namedNode(`${qudt}height`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}height`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}height`), namedNode(`${rdfs}label`), literal(`height`), namedNode(qudt)),
        quad(namedNode(`${qudt}height`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[314], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[314], namedNode(`${owl}onDatatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[314], namedNode(`${owl}withRestrictions`), blankNodes[505], namedNode(qudt)),
        quad(namedNode(`${qudt}iec61360Code`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}iec61360Code`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}iec61360Code`), namedNode(`${rdfs}label`), literal(`iec-61360 code`), namedNode(qudt)),
        quad(namedNode(`${qudt}iec61360Code`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}imageLocation`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}imageLocation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}imageLocation`), namedNode(`${rdfs}label`), literal(`image location`), namedNode(qudt)),
        quad(namedNode(`${qudt}imageLocation`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(qudt)),
        quad(namedNode(`${qudt}integer1to12`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}integer1to12`), namedNode(`${rdf}type`), namedNode(`${owl}DataRange`), namedNode(qudt)),
        quad(namedNode(`${qudt}integer1to12`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}integer1to12`), namedNode(`${rdfs}label`), literal(`integer 1..12`), namedNode(qudt)),
        quad(namedNode(`${qudt}integer1to12`), namedNode(`${rdfs}subClassOf`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}integer1to12`), namedNode(`${owl}equivalentClass`), blankNodes[506], namedNode(qudt)),
        quad(blankNodes[506], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[506], namedNode(`${owl}onDatatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(blankNodes[506], namedNode(`${owl}withRestrictions`), blankNodes[507], namedNode(qudt)),
        quad(namedNode(`${qudt}integer1to31`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}integer1to31`), namedNode(`${rdf}type`), namedNode(`${owl}DataRange`), namedNode(qudt)),
        quad(namedNode(`${qudt}integer1to31`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}integer1to31`), namedNode(`${rdfs}label`), literal(`integer 1..31`), namedNode(qudt)),
        quad(namedNode(`${qudt}integer1to31`), namedNode(`${rdfs}subClassOf`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}integer1to31`), namedNode(`${owl}equivalentClass`), blankNodes[508], namedNode(qudt)),
        quad(blankNodes[508], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[508], namedNode(`${owl}onDatatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(blankNodes[508], namedNode(`${owl}withRestrictions`), blankNodes[509], namedNode(qudt)),
        quad(namedNode(`${qudt}integerPercentage`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}integerPercentage`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}integerPercentage`), namedNode(`${rdfs}label`), literal(`integer percentage`), namedNode(qudt)),
        quad(namedNode(`${qudt}integerPercentage`), namedNode(`${rdfs}subClassOf`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}integerPercentage`), namedNode(`${owl}equivalentClass`), blankNodes[510], namedNode(qudt)),
        quad(blankNodes[510], namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(blankNodes[510], namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(blankNodes[510], namedNode(`${owl}onDatatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(blankNodes[510], namedNode(`${owl}withRestrictions`), blankNodes[511], namedNode(qudt)),
        quad(namedNode(`${qudt}isComprisedOf`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}isDeltaQuantity`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}isDeltaQuantity`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}isDeltaQuantity`), namedNode(`${rdfs}label`), literal(`is Delta Quantity`), namedNode(qudt)),
        quad(namedNode(`${qudt}isDeltaQuantity`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}isDeltaQuantity`), namedNode(`${rdfs}comment`), literal(`This property is used to identify a Quantity instance that is a measure of a change, or interval, of some property, rather than a measure of its absolute value. This is important for measurements such as temperature differences where the conversion among units would be calculated differently because of offsets.`), namedNode(qudt)),
        quad(namedNode(`${qudt}isDimensionInSystem`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}isDimensionInSystem`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}isDimensionInSystem`), namedNode(`${rdfs}label`), literal(`is dimension in system`), namedNode(qudt)),
        quad(namedNode(`${qudt}isMetricUnit`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}isMetricUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}isMetricUnit`), namedNode(`${rdfs}label`), literal(`is metric unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}isMetricUnit`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}isScalingOf`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}isScalingOf`), namedNode(`${rdf}type`), namedNode(`${owl}TransitiveProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}isScalingOf`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}isScalingOf`), namedNode(`${rdfs}label`), literal(`is scaling of`), namedNode(qudt)),
        quad(namedNode(`${qudt}isoNormativeReference`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}isoNormativeReference`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}isoNormativeReference`), namedNode(`${rdfs}label`), literal(`normative reference (ISO)`), namedNode(qudt)),
        quad(namedNode(`${qudt}isoNormativeReference`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(qudt)),
        quad(namedNode(`${qudt}isoNormativeReference`), namedNode(`${dcterms}description`), literal(`Provides a way to reference the ISO unit definition.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}isoNormativeReference`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}normativeReference`), namedNode(qudt)),
        quad(namedNode(`${qudt}normativeReference`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}normativeReference`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}normativeReference`), namedNode(`${rdfs}label`), literal(`normative reference`), namedNode(qudt)),
        quad(namedNode(`${qudt}normativeReference`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(qudt)),
        quad(namedNode(`${qudt}normativeReference`), namedNode(`${dcterms}description`), literal(`Provides a way to reference information that is an authorative source providing a standard definition`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}landscape`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}landscape`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}landscape`), namedNode(`${rdfs}label`), literal(`landscape`), namedNode(qudt)),
        quad(namedNode(`${qudt}landscape`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}latexDefinition`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}latexDefinition`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}latexDefinition`), namedNode(`${rdfs}label`), literal(`latex definition`), namedNode(qudt)),
        quad(namedNode(`${qudt}latexDefinition`), namedNode(`${rdfs}range`), namedNode(`${qudt}LatexString`), namedNode(qudt)),
        quad(namedNode(`${qudt}latexSymbol`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}latexSymbol`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}latexSymbol`), namedNode(`${rdfs}label`), literal(`latex symbol`), namedNode(qudt)),
        quad(namedNode(`${qudt}latexSymbol`), namedNode(`${rdfs}range`), namedNode(`${qudt}LatexString`), namedNode(qudt)),
        quad(namedNode(`${qudt}latexSymbol`), namedNode(`${dcterms}description`), literal(`The symbol is a glyph that is used to represent some concept, typically a unit or a quantity, in a compact form. For example, the symbol for an Ohm is \\(ohm\\). This contrasts with 'unit:abbreviation', which gives a short alphanumeric abbreviation for the unit, 'ohm' for Ohm.`, namedNode(`${qudt}LatexString`)), namedNode(qudt)),
        quad(namedNode(`${qudt}lowerBound`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}lowerBound`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}lowerBound`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}lowerBound`), namedNode(`${rdfs}label`), literal(`lower bound`), namedNode(qudt)),
        quad(namedNode(`${qudt}mantissa`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}mantissa`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}mantissa`), namedNode(`${rdfs}label`), literal(`mantissa`), namedNode(qudt)),
        quad(namedNode(`${qudt}mantissa`), namedNode(`${rdfs}comment`), literal(`In scientific notation, the mantissa of a real number is the integer coefficient preceding the base raised to the exponent.`), namedNode(qudt)),
        quad(namedNode(`${qudt}mathDefinition`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}mathDefinition`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}mathDefinition`), namedNode(`${rdfs}label`), literal(`math definition`), namedNode(qudt)),
        quad(namedNode(`${qudt}mathDefinition`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}mathMLdefinition`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}mathMLdefinition`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}mathMLdefinition`), namedNode(`${rdfs}label`), literal(`mathML definition`), namedNode(qudt)),
        quad(namedNode(`${qudt}mathMLdefinition`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}mathMLdefinition`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}mathDefinition`), namedNode(qudt)),
        quad(namedNode(`${qudt}upperBound`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}upperBound`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}upperBound`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}upperBound`), namedNode(`${rdfs}label`), literal(`upper bound`), namedNode(qudt)),
        quad(namedNode(`${qudt}upperBound`), namedNode(`${rdfs}range`), namedNode(`${xsd}anySimpleType`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxMantissa`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxMantissa`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxMantissa`), namedNode(`${rdfs}label`), literal(`max mantissa`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxMantissa`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}maxMantissa`), namedNode(`${dcterms}description`), literal(`<p>The maximium mantissa is the largest integer that may appear as a coefficient in a finite precision representation of a real number.  For a given numeric data type, the value of <em>maxMantissa}</em> (<em>M</em>) and the values of <em>base</em> (<em>b</em>) and  <em>precision</em> (<em>p</em>) are related by the formula: <em>M = b<sup></sup> - 1</em> .</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}minMantissa`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}minMantissa`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}minMantissa`), namedNode(`${rdfs}label`), literal(`min mantissa`), namedNode(qudt)),
        quad(namedNode(`${qudt}minMantissa`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}minMantissa`), namedNode(`${dcterms}description`), literal(`<p>The minimium mantissa is the negative integer with the greatest magnitude that may appear as a coefficient in a finite precision representation of a real number.  For a given numeric data type, the value of <em>minMantissa</em> (<em>M</em>) and the values of <em>base</em> (<em>b</em>) and <em>precision</em> (<em>p</em>) are related by the formula: <em>M = -(b<sup>p</sup> - 1)</em>.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}minValue`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}minValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}minValue`), namedNode(`${rdfs}label`), literal(`minimum value`), namedNode(qudt)),
        quad(namedNode(`${qudt}modifiability`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}modifiability`), namedNode(`${rdfs}label`), literal(`modifiability`), namedNode(qudt)),
        quad(namedNode(`${qudt}modifiability`), namedNode(`${rdfs}comment`), literal(`Reference to one in a list of enumerated elements that indicates whether data (e.g. variable or parameter) can be changed.`), namedNode(qudt)),
        quad(namedNode(`${qudt}negative`), namedNode(`${rdf}type`), namedNode(`${qudt}Polarity`), namedNode(qudt)),
        quad(namedNode(`${qudt}negative`), namedNode(`${rdfs}label`), literal(`negative`), namedNode(qudt)),
        quad(namedNode(`${qudt}negative`), namedNode(`${qudt}literal`), literal(`negative`), namedNode(qudt)),
        quad(namedNode(`${qudt}negative`), namedNode(`${qudt}code`), literal(`1`), namedNode(qudt)),
        quad(namedNode(`${qudt}negativeDeltaLimit`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}negativeDeltaLimit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}negativeDeltaLimit`), namedNode(`${rdfs}label`), literal(`negative delta limit`), namedNode(qudt)),
        quad(namedNode(`${qudt}negativeDeltaLimit`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}negativeDeltaLimit`), namedNode(`${dcterms}description`), literal(`A negative change limit between consecutive sample values for a parameter. The Negative Delta may be the encoded value or engineering units value depending on whether or not a Calibrator is defined.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}numeratorDimensionVector`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}numeratorDimensionVector`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}numeratorDimensionVector`), namedNode(`${rdfs}label`), literal(`numerator dimension vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}numeratorDimensionVector`), namedNode(`${rdfs}range`), namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}numericValue`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}numericValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}numericValue`), namedNode(`${rdfs}label`), literal(`numeric value`), namedNode(qudt)),
        quad(namedNode(`${qudt}numericValue`), namedNode(`${rdfs}range`), namedNode(`${dtype}numericUnion`), namedNode(qudt)),
        quad(namedNode(`${qudt}omUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}omUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}omUnit`), namedNode(`${rdfs}label`), literal(`om unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}omUnit`), namedNode(`${rdfs}domain`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}onlineReference`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}onlineReference`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}onlineReference`), namedNode(`${rdfs}label`), literal(`online reference`), namedNode(qudt)),
        quad(namedNode(`${qudt}onlineReference`), namedNode(`${rdfs}range`), namedNode(`${xsd}anyURI`), namedNode(qudt)),
        quad(namedNode(`${qudt}orderedType`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${qudt}orderedType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}orderedType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}orderedType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}orderedType`), namedNode(`${rdfs}label`), literal(`ordered type`), namedNode(qudt)),
        quad(namedNode(`${qudt}outOfScope`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}outOfScope`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}outOfScope`), namedNode(`${rdfs}label`), literal(`out of scope`), namedNode(qudt)),
        quad(namedNode(`${qudt}outOfScope`), namedNode(`${rdfs}range`), namedNode(`${xsd}boolean`), namedNode(qudt)),
        quad(namedNode(`${qudt}permissibleMaths`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}permissibleMaths`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}permissibleMaths`), namedNode(`${rdfs}label`), literal(`permissible maths`), namedNode(qudt)),
        quad(namedNode(`${qudt}permissibleTransformation`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}permissibleTransformation`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}permissibleTransformation`), namedNode(`${rdfs}label`), literal(`permissible transformation`), namedNode(qudt)),
        quad(namedNode(`${qudt}rotationDefinition`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}rotationDefinition`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}rotationDefinition`), namedNode(`${rdfs}label`), literal(`rotation definition`), namedNode(qudt)),
        quad(namedNode(`${qudt}positive`), namedNode(`${rdf}type`), namedNode(`${qudt}Polarity`), namedNode(qudt)),
        quad(namedNode(`${qudt}positive`), namedNode(`${rdfs}label`), literal(`positive`), namedNode(qudt)),
        quad(namedNode(`${qudt}positive`), namedNode(`${qudt}literal`), literal(`positive`), namedNode(qudt)),
        quad(namedNode(`${qudt}positive`), namedNode(`${qudt}code`), literal(`2`), namedNode(qudt)),
        quad(namedNode(`${qudt}positiveDeltaLimit`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}positiveDeltaLimit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}positiveDeltaLimit`), namedNode(`${rdfs}label`), literal(`Positive delta limit`), namedNode(qudt)),
        quad(namedNode(`${qudt}positiveDeltaLimit`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}positiveDeltaLimit`), namedNode(`${dcterms}description`), literal(`A positive change limit between consecutive sample values for a parameter. The Positive Delta may be the encoded value or engineering units value depending on whether or not a Calibrator is defined.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}prefix`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}prefix`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}prefix`), namedNode(`${rdfs}label`), literal(`prefix`), namedNode(qudt)),
        quad(namedNode(`${qudt}prefix`), namedNode(`${rdfs}range`), namedNode(`${qudt}Prefix`), namedNode(qudt)),
        quad(namedNode(`${qudt}prefix`), namedNode(`${rdfs}comment`), literal(`Associates a unit with the appropriate prefix, if any.`), namedNode(qudt)),
        quad(namedNode(`${qudt}prefixMultiplier`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}prefixMultiplier`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}prefixMultiplier`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}prefixMultiplier`), namedNode(`${rdfs}label`), literal(`prefix multiplier`), namedNode(qudt)),
        quad(namedNode(`${qudt}prefixMultiplier`), namedNode(`${rdfs}range`), namedNode(`${xsd}double`), namedNode(qudt)),
        quad(namedNode(`${qudt}qkdvDenominator`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}qkdvDenominator`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}qkdvDenominator`), namedNode(`${rdfs}label`), literal(`denominator dimension vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}qkdvDenominator`), namedNode(`${rdfs}range`), namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}qkdvNumerator`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}qkdvNumerator`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}qkdvNumerator`), namedNode(`${rdfs}label`), literal(`numerator dimension vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}qkdvNumerator`), namedNode(`${rdfs}range`), namedNode(`${qudt}QuantityKindDimensionVector`), namedNode(qudt)),
        quad(namedNode(`${qudt}quantity`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}quantity`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}quantity`), namedNode(`${rdfs}label`), literal(`quantity`), namedNode(qudt)),
        quad(namedNode(`${qudt}quantity`), namedNode(`${dcterms}description`), literal(`a property to relate an observable thing with a quantity (qud:Quantity)`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}quantityValue`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}quantityValue`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}quantityValue`), namedNode(`${rdfs}label`), literal(`quantity value`), namedNode(qudt)),
        quad(namedNode(`${qudt}quantityValue`), namedNode(`${rdfs}range`), namedNode(`${qudt}QuantityValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}rationale`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}rationale`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}rationale`), namedNode(`${rdfs}label`), literal(`rationale`), namedNode(qudt)),
        quad(namedNode(`${qudt}rationale`), namedNode(`${rdfs}range`), namedNode(`${rdf}HTML`), namedNode(qudt)),
        quad(namedNode(`${qudt}reference`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}reference`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}reference`), namedNode(`${rdfs}label`), literal(`reference`), namedNode(qudt)),
        quad(namedNode(`${qudt}referenceFrameType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}referenceFrameType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}referenceFrameType`), namedNode(`${rdfs}label`), literal(`reference frame type`), namedNode(qudt)),
        quad(namedNode(`${qudt}referenceUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}referenceUnit`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}referenceUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}referenceUnit`), namedNode(`${rdfs}label`), literal(`reference unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}relativeStandardUncertainty`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}relativeStandardUncertainty`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}relativeStandardUncertainty`), namedNode(`${rdfs}label`), literal(`relative standard uncertainty`), namedNode(qudt)),
        quad(namedNode(`${qudt}relativeStandardUncertainty`), namedNode(`${rdfs}range`), namedNode(`${xsd}double`), namedNode(qudt)),
        quad(namedNode(`${qudt}relativeStandardUncertainty`), namedNode(`${dcterms}description`), literal(`The relative standard uncertainty of a measurement is the (absolute) standard uncertainty divided by the magnitude of the exact value.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}relevantQuantityKind`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}relevantQuantityKind`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}relevantQuantityKind`), namedNode(`${rdfs}label`), literal(`relevant quantity kind`), namedNode(qudt)),
        quad(namedNode(`${qudt}relevantQuantityKind`), namedNode(`${rdfs}range`), namedNode(`${qudt}QuantityKind`), namedNode(qudt)),
        quad(namedNode(`${qudt}relevantUnit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}relevantUnit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}relevantUnit`), namedNode(`${rdfs}label`), literal(`Relevant Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}relevantUnit`), namedNode(`${rdfs}range`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}relevantUnit`), namedNode(`${rdfs}comment`), literal(`This property is used for qudt:Discipline instances to identify the Unit instances that are used within a given discipline.`), namedNode(qudt)),
        quad(namedNode(`${qudt}ruleType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}ruleType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}ruleType`), namedNode(`${rdfs}label`), literal(`rule type`), namedNode(qudt)),
        quad(namedNode(`${qudt}scaleType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}scaleType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}scaleType`), namedNode(`${rdfs}label`), literal(`scale type`), namedNode(qudt)),
        quad(namedNode(`${qudt}siUnitsExpression`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}siUnitsExpression`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}siUnitsExpression`), namedNode(`${rdfs}label`), literal(`si units expression`), namedNode(qudt)),
        quad(namedNode(`${qudt}siUnitsExpression`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}significantDigits`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}significantDigits`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}significantDigits`), namedNode(`${rdfs}label`), literal(`significant digits`), namedNode(qudt)),
        quad(namedNode(`${qudt}significantDigits`), namedNode(`${rdfs}range`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(namedNode(`${qudt}standardUncertainty`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}standardUncertainty`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}standardUncertainty`), namedNode(`${rdfs}label`), literal(`standard uncertainty`), namedNode(qudt)),
        quad(namedNode(`${qudt}standardUncertainty`), namedNode(`${rdfs}range`), namedNode(`${xsd}double`), namedNode(qudt)),
        quad(namedNode(`${qudt}standardUncertainty`), namedNode(`${dcterms}description`), literal(`The standard uncertainty of a quantity is the estimated standard deviation of the mean taken from a series of measurements.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}stringValue`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}stringValue`), namedNode(`${rdfs}label`), literal(`string value`), namedNode(qudt)),
        quad(namedNode(`${qudt}stringValue`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}scalarValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}symbol`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}symbol`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}symbol`), namedNode(`${rdfs}label`), literal(`symbol`), namedNode(qudt)),
        quad(namedNode(`${qudt}symbol`), namedNode(`${dcterms}description`), literal(`The symbol is a glyph that is used to represent some concept, typically a unit or a quantity, in a compact form. For example, the symbol for an Ohm is \\(ohm\\). This contrasts with 'unit:abbreviation', which gives a short alphanumeric abbreviation for the unit, 'ohm' for Ohm.`, namedNode(`${qudt}LatexString`)), namedNode(qudt)),
        quad(namedNode(`${qudt}symbol`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}literal`), namedNode(qudt)),
        quad(namedNode(`${qudt}systemDefinition`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}systemDefinition`), namedNode(`${rdf}type`), namedNode(`${owl}TransitiveProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}systemDefinition`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}systemDefinition`), namedNode(`${rdfs}label`), literal(`system definition`), namedNode(qudt)),
        quad(namedNode(`${qudt}systemDimension`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}systemDimension`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}systemDimension`), namedNode(`${rdfs}label`), literal(`system dimension`), namedNode(qudt)),
        quad(namedNode(`${qudt}timeDatatype`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}timeDatatype`), namedNode(`${rdfs}label`), literal(`time datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}timeDatatype`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}type`), namedNode(qudt)),
        quad(namedNode(`${qudt}totalDigits`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}totalDigits`), namedNode(`${rdfs}label`), literal(`total digits`), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCaseInsensitiveCode`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCaseInsensitiveCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCaseInsensitiveCode`), namedNode(`${rdfs}label`), literal(`ucum case-insensitive code`), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCaseInsensitiveCode`), namedNode(`${dcterms}description`), literal(`<em>ucumCode</em> associates a QUDT unit with a UCUM case-insensitive code.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCaseInsensitiveCode`), namedNode(`${owl}deprecated`), literal(`true`, namedNode(`${xsd}boolean`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCaseInsensitiveCode`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}ucumCode`), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCode`), namedNode(`${rdfs}label`), literal(`ucum code`), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCode`), namedNode(`${rdfs}range`), blankNodes[512], namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCode`), namedNode(`${dcterms}description`), literal(`<p><em>ucumCode</em> associates a QUDT unit with its UCUM code (case-sensitive). </p><p>In SHACL the values are derived from specific ucum properties using 'sh:values'.</p>`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCode`), namedNode(`${dcterms}source`), literal(`https://ucum.org/ucum.html`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCode`), namedNode(`${rdfs}seeAlso`), namedNode(`${ns30}ucum.html`), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCode`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${skos}notation`), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCaseSensitiveCode`), namedNode(`${rdf}type`), namedNode(`${owl}AnnotationProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCaseSensitiveCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCaseSensitiveCode`), namedNode(`${rdfs}label`), literal(`ucum case-sensitive code`), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCaseSensitiveCode`), namedNode(`${dcterms}description`), literal(`<em>ucumCode</em> associates a QUDT unit with with a UCUM case-sensitive code.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCaseSensitiveCode`), namedNode(`${owl}deprecated`), literal(`true`, namedNode(`${xsd}boolean`)), namedNode(qudt)),
        quad(namedNode(`${qudt}ucumCaseSensitiveCode`), namedNode(`${rdfs}subPropertyOf`), namedNode(`${qudt}ucumCode`), namedNode(qudt)),
        quad(blankNodes[512], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(blankNodes[512], namedNode(`${owl}unionOf`), blankNodes[513], namedNode(qudt)),
        quad(namedNode(`${qudt}udunitsCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}udunitsCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}udunitsCode`), namedNode(`${rdfs}label`), literal(`udunits code`), namedNode(qudt)),
        quad(namedNode(`${qudt}udunitsCode`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}udunitsCode`), namedNode(`${dcterms}description`), literal(`The UDUNITS package supports units of physical quantities. Its C library provides for arithmetic manipulation of units and for conversion of numeric values between compatible units. The package contains an extensive unit database, which is in XML format and user-extendable. The package also contains a command-line utility for investigating units and converting values.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}udunitsCode`), namedNode(`${dcterms}source`), literal(`https://www.unidata.ucar.edu/software/udunits/`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}uneceCommonCode`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}uneceCommonCode`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}uneceCommonCode`), namedNode(`${rdfs}label`), literal(`unece common code`), namedNode(qudt)),
        quad(namedNode(`${qudt}uneceCommonCode`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${qudt}uneceCommonCode`), namedNode(`${dcterms}description`), literal(`The UN/CEFACT Recommendation 20 provides three character alphabetic and alphanumeric codes for representing units of measurement for length, area, volume/capacity, mass (weight), time, and other quantities used in international trade. The codes are intended for use in manual and/or automated systems for the exchange of information between participants in international trade.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}uneceCommonCode`), namedNode(`${dcterms}source`), literal(`https://service.unece.org/trade/uncefact/vocabulary/rec20/`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}uneceCommonCode`), namedNode(`${dcterms}source`), literal(`https://unece.org/trade/documents/2021/06/uncefact-rec20-0`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${qudt}unit`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}unit`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}unit`), namedNode(`${rdfs}label`), literal(`unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}unit`), namedNode(`${rdfs}range`), namedNode(`${qudt}Unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}unit`), namedNode(`${dcterms}description`), literal(`A reference to the unit of measure of a quantity (variable or constant) of interest.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${qudt}unit`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}unitFor`), namedNode(qudt)),
        quad(namedNode(`${qudt}unitFor`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}unitFor`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}unitFor`), namedNode(`${rdfs}label`), literal(`unit for`), namedNode(qudt)),
        quad(namedNode(`${qudt}unitFor`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}unit`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueQuantity`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueQuantity`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueQuantity`), namedNode(`${rdfs}label`), literal(`value for quantity`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueQuantity`), namedNode(`${owl}inverseOf`), namedNode(`${qudt}quantityValue`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueRange`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueRange`), namedNode(`${rdfs}label`), literal(`value range`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueType`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueType`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueType`), namedNode(`${rdfs}label`), literal(`value type`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueUnion`), namedNode(`${rdf}type`), namedNode(`${rdfs}Datatype`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueUnion`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueUnion`), namedNode(`${rdfs}label`), literal(`value union`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueUnion`), namedNode(`${dcterms}description`), literal(`A datatype that is the union of numeric xsd data types. "numericUnion" is equivalent to the xsd specification that uses an xsd:union of memberTypes="xsd:decimal xsd:double xsd:float xsd:integer".`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueUnion`), namedNode(`${rdfs}subClassOf`), namedNode(`${rdfs}Resource`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueUnion`), namedNode(`${owl}equivalentClass`), blankNodes[514], namedNode(qudt)),
        quad(blankNodes[514], namedNode(`${rdf}type`), namedNode(`${owl}Class`), namedNode(qudt)),
        quad(blankNodes[514], namedNode(`${owl}unionOf`), blankNodes[515], namedNode(qudt)),
        quad(namedNode(`${qudt}valueVector`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueVector`), namedNode(`${rdfs}label`), literal(`value vector`), namedNode(qudt)),
        quad(namedNode(`${qudt}valueVector`), namedNode(`${rdfs}comment`), literal(`A list of the values of elements in a Partial Array.`), namedNode(qudt)),
        quad(namedNode(`${qudt}vectorMagnitude`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}vectorMagnitude`), namedNode(`${rdf}type`), namedNode(`${owl}FunctionalProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}vectorMagnitude`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}vectorMagnitude`), namedNode(`${rdfs}label`), literal(`vector magnitude`), namedNode(qudt)),
        quad(namedNode(`${qudt}vectorMagnitude`), namedNode(`${rdfs}range`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(namedNode(`${qudt}width`), namedNode(`${rdf}type`), namedNode(`${owl}DatatypeProperty`), namedNode(qudt)),
        quad(namedNode(`${qudt}width`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${qudt}width`), namedNode(`${rdfs}label`), literal(`width`), namedNode(qudt)),
        quad(namedNode(`${qudt}width`), namedNode(`${rdfs}range`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(namedNode(`${ns9}supersededBy`), namedNode(`${rdf}type`), namedNode(`${owl}ObjectProperty`), namedNode(qudt)),
        quad(namedNode(`${ns9}supersededBy`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns31}voag`), namedNode(qudt)),
        quad(namedNode(`${ns9}supersededBy`), namedNode(`${rdfs}label`), literal(`superseded by`), namedNode(qudt)),
        quad(namedNode(`${dtype}GMD_DTYPE`), namedNode(`${dcterms}description`), literal(`The ontology "dtype" provides a specification of simple data types such as enumerations and codelists. These are needed in support of the conversion of XML Schemas and UML Models to OWL. The purpose of "dtype" is to provide a foundation for expressing rich data types. These data types are typically needed when dealing with OWL representations of data structures derived from XML Schema.`), namedNode(qudt)),
        quad(namedNode(`${vaem}CollectionGraph`), namedNode(`${dcterms}description`), literal(`A "vaem:CollectionGraph" is a graph that aggregates other graphs using "owl:imports" statements.`), namedNode(qudt)),
        quad(namedNode(`${vaem}ConfigurationGraph`), namedNode(`${dcterms}description`), literal(`A graph that serves as a registy or provides other parameter settings.`), namedNode(qudt)),
        quad(namedNode(`${vaem}ConnectSetGraph`), namedNode(`${dcterms}description`), literal(`A graph that specifies mapings between external data sources and a neutral model.`), namedNode(qudt)),
        quad(namedNode(`${vaem}ConstraintsGraph`), namedNode(`${dcterms}description`), literal(`A graph that is for defining constraints using SPIN.`), namedNode(qudt)),
        quad(namedNode(`${vaem}ControllersGraph`), namedNode(`${dcterms}description`), literal(`A graph that acts as a controller in an MVC-like framework.`), namedNode(qudt)),
        quad(namedNode(`${vaem}CurationGraph`), namedNode(`${dcterms}description`), literal(`A graph to hold metadata that is needed to describe, govern and provision another graph. A curation graph will likely use VOAG and VAEM for this purpose. The property "vaem:curationGraph" is used to link to the graph (or graphs) being curated`), namedNode(qudt)),
        quad(namedNode(`${vaem}DataGraph`), namedNode(`${dcterms}description`), literal(`A graph that holds data instances.`), namedNode(qudt)),
        quad(namedNode(`${vaem}DocumentationGraph`), namedNode(`${dcterms}description`), literal(`A graph that is soley for the purpose of generating documentation.`), namedNode(qudt)),
        quad(namedNode(`${vaem}FunctionsGraph`), namedNode(`${dcterms}description`), literal(`A graph that defines SPIN functions.`), namedNode(qudt)),
        quad(namedNode(`${vaem}QUDT`), namedNode(`${rdf}type`), namedNode(`${vaem}Party`), namedNode(qudt)),
        quad(namedNode(`${vaem}QUDT`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns7}qudt`), namedNode(qudt)),
        quad(namedNode(`${vaem}QUDT`), namedNode(`${rdfs}label`), literal(`QUDT`), namedNode(qudt)),
        quad(namedNode(`${vaem}QUDT`), namedNode(`${dcterms}description`), literal(`QUDT is a non-profit organization that governs the QUDT ontologies.`, namedNode(`${rdf}HTML`)), namedNode(qudt)),
        quad(namedNode(`${vaem}QUDT`), namedNode(`${vaem}graphName`), literal(`qudt.org`), namedNode(qudt)),
        quad(namedNode(`${vaem}QUDT`), namedNode(`${vaem}website`), literal(`http://www.qudt.org`, namedNode(`${xsd}anyURI`)), namedNode(qudt)),
        quad(namedNode(`${vaem}GMD_VAEM`), namedNode(`${dcterms}description`), literal(`VAEM stands for "Vocabulary for Attaching Essential Metadata". What VAEM regards as essential metadata is data about dates and times, confidentiality, and other characterisitic qualifiers of the ontology, but also references to where a ontology is documented and where to find ontology registration for governance, attribution and provenance. VAEM makes use of some properties from the DC terms vocabulary using the namespace prefix "dct".`), namedNode(qudt)),
        quad(namedNode(`${vaem}LinkSetGraph`), namedNode(`${dcterms}description`), literal(`A graph that holds statements that specify links between resources.`), namedNode(qudt)),
        quad(namedNode(`${vaem}MappingGraph`), namedNode(`${dcterms}description`), literal(`A graph that specifies a transformation of a graph into another graph or graphs. Invariably this is a SPINMap graph using SPARQL Rules (SPIN) to express the transforms.`), namedNode(qudt)),
        quad(namedNode(`${vaem}ProxyGraph`), namedNode(`${dcterms}description`), literal(`A graph that represents an external data source, or schema, as an ontology model.`), namedNode(qudt)),
        quad(namedNode(`${vaem}ReferenceDataGraph`), namedNode(`${dcterms}description`), literal(`A graph that holds reference data.`), namedNode(qudt)),
        quad(namedNode(`${vaem}RulesGraph`), namedNode(`${dcterms}description`), literal(`A graph that holds SPIN rules.`), namedNode(qudt)),
        quad(namedNode(`${vaem}ScriptGraph`), namedNode(`${dcterms}description`), literal(`A graph that defines SWP templates that are of a general scripting nature.`), namedNode(qudt)),
        quad(namedNode(`${vaem}ServicesGraph`), namedNode(`${dcterms}description`), literal(`A graph that implements SWP services.`), namedNode(qudt)),
        quad(namedNode(`${vaem}TransformsGraph`), namedNode(`${dcterms}description`), literal(`A graph that uses SPIN to define transforms.`), namedNode(qudt)),
        quad(namedNode(`${vaem}ViewGraph`), namedNode(`${dcterms}description`), literal(`A graph that provides the access to services in an MVC-like framework.`), namedNode(qudt)),
        quad(namedNode(`${vaem}VocabularyGraph`), namedNode(`${dcterms}description`), literal(`A graph that is a controlled set of instances that define a terminology. Typically this is based on SKOS.`), namedNode(qudt)),
        quad(namedNode(`${prov}wasDerivedFrom`), namedNode(`${rdf}type`), namedNode(`${rdf}Property`), namedNode(qudt)),
        quad(namedNode(`${prov}wasDerivedFrom`), namedNode(`${rdfs}isDefinedBy`), namedNode(`${ns32}prov`), namedNode(qudt)),
        quad(namedNode(`${prov}wasDerivedFrom`), namedNode(`${rdfs}label`), literal(`was derived from`), namedNode(qudt)),
        quad(namedNode(`${prov}wasDerivedFrom`), namedNode(`${rdfs}range`), namedNode(`${qudt}Concept`), namedNode(qudt)),
        quad(blankNodes[516], namedNode(`${xsd}length`), literal(`4`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[517], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[517], namedNode(`${owl}onProperty`), namedNode(`${qudt}zCoordinateDefinition`), namedNode(qudt)),
        quad(blankNodes[517], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[518], namedNode(`${rdf}first`), namedNode(`${qudt}Booklet`), namedNode(qudt)),
        quad(blankNodes[518], namedNode(`${rdf}rest`), blankNodes[519], namedNode(qudt)),
        quad(blankNodes[519], namedNode(`${rdf}first`), namedNode(`${qudt}Misc`), namedNode(qudt)),
        quad(blankNodes[519], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[520], namedNode(`${xsd}maxInclusive`), literal(`12`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[521], namedNode(`${rdf}first`), namedNode(`${qudt}UCUMcs-term`), namedNode(qudt)),
        quad(blankNodes[521], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[475], namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[476], namedNode(`${rdf}first`), blankNodes[522], namedNode(qudt)),
        quad(blankNodes[476], namedNode(`${rdf}rest`), blankNodes[523], namedNode(qudt)),
        quad(blankNodes[377], namedNode(`${rdf}first`), namedNode(`${qudt}IntegerDatatype`), namedNode(qudt)),
        quad(blankNodes[377], namedNode(`${rdf}rest`), blankNodes[524], namedNode(qudt)),
        quad(blankNodes[356], namedNode(`${sh}datatype`), namedNode(`${xsd}positiveInteger`), namedNode(qudt)),
        quad(blankNodes[525], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[525], namedNode(`${owl}onProperty`), namedNode(`${qudt}byteOrder`), namedNode(qudt)),
        quad(blankNodes[525], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[526], namedNode(`${rdf}first`), namedNode(`${ns24}WordAligned`), namedNode(qudt)),
        quad(blankNodes[526], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[271], namedNode(`${rdf}first`), namedNode(`${ns24}BigEndian`), namedNode(qudt)),
        quad(blankNodes[271], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[527], namedNode(`${rdf}first`), namedNode(`${qudt}TotallyOrdered`), namedNode(qudt)),
        quad(blankNodes[527], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[528], namedNode(`${rdf}first`), namedNode(`${ns24}PositiveX`), namedNode(qudt)),
        quad(blankNodes[528], namedNode(`${rdf}rest`), blankNodes[529], namedNode(qudt)),
        quad(blankNodes[529], namedNode(`${rdf}first`), namedNode(`${ns24}NegativeX`), namedNode(qudt)),
        quad(blankNodes[529], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[117], namedNode(`${rdf}first`), blankNodes[530], namedNode(qudt)),
        quad(blankNodes[117], namedNode(`${rdf}rest`), blankNodes[531], namedNode(qudt)),
        quad(blankNodes[278], namedNode(`${rdf}first`), namedNode(`${qudt}TupleMemberType`), namedNode(qudt)),
        quad(blankNodes[278], namedNode(`${rdf}rest`), blankNodes[532], namedNode(qudt)),
        quad(blankNodes[308], namedNode(`${rdf}first`), namedNode(`${qudt}IEEE754_1985RealEncoding`), namedNode(qudt)),
        quad(blankNodes[308], namedNode(`${rdf}rest`), blankNodes[533], namedNode(qudt)),
        quad(blankNodes[533], namedNode(`${rdf}first`), namedNode(`${qudt}SinglePrecisionRealEncoding`), namedNode(qudt)),
        quad(blankNodes[533], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[465], namedNode(`${xsd}pattern`), literal(`[\\x21,\\x23-\\x27,\\x2a,\\x2c,\\x30-\\x3c,\\x3e-\\x5a,\\x5c,\\x5e-\\x60,\\x7c,\\x7e]+`), namedNode(qudt)),
        quad(blankNodes[534], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[534], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}ScalarDatatype`), namedNode(qudt)),
        quad(blankNodes[534], namedNode(`${owl}onProperty`), namedNode(`${qudt}encoding`), namedNode(qudt)),
        quad(blankNodes[326], namedNode(`${sh}datatype`), namedNode(`${xsd}positiveInteger`), namedNode(qudt)),
        quad(blankNodes[327], namedNode(`${rdf}first`), blankNodes[535], namedNode(qudt)),
        quad(blankNodes[327], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[536], namedNode(`${xsd}length`), literal(`22`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[537], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[537], namedNode(`${owl}onProperty`), namedNode(`${qudt}yCoordinateDefinition`), namedNode(qudt)),
        quad(blankNodes[537], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[538], namedNode(`${rdf}first`), namedNode(`${qudt}SignedIntegerEncoding`), namedNode(qudt)),
        quad(blankNodes[538], namedNode(`${rdf}rest`), blankNodes[539], namedNode(qudt)),
        quad(blankNodes[539], namedNode(`${rdf}first`), namedNode(`${qudt}UnsignedIntegerEncoding`), namedNode(qudt)),
        quad(blankNodes[539], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[540], namedNode(`${xsd}pattern`), literal(`[0-1]{8}`), namedNode(qudt)),
        quad(blankNodes[541], namedNode(`${xsd}length`), literal(`7`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[439], namedNode(`${rdf}first`), namedNode(`${qudt}NumericType`), namedNode(qudt)),
        quad(blankNodes[439], namedNode(`${rdf}rest`), blankNodes[542], namedNode(qudt)),
        quad(blankNodes[507], namedNode(`${rdf}first`), blankNodes[543], namedNode(qudt)),
        quad(blankNodes[507], namedNode(`${rdf}rest`), blankNodes[544], namedNode(qudt)),
        quad(blankNodes[545], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[545], namedNode(`${owl}onProperty`), namedNode(`${qudt}realization`), namedNode(qudt)),
        quad(blankNodes[545], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[467], namedNode(`${xsd}pattern`), literal(`[\\x21-\\x60,\\x7b-\\x7e]+`), namedNode(qudt)),
        quad(blankNodes[546], namedNode(`${xsd}pattern`), literal(`[0-1]{12}`), namedNode(qudt)),
        quad(blankNodes[482], namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[483], namedNode(`${rdf}first`), blankNodes[547], namedNode(qudt)),
        quad(blankNodes[483], namedNode(`${rdf}rest`), blankNodes[548], namedNode(qudt)),
        quad(blankNodes[323], namedNode(`${rdf}first`), namedNode(`${qudt}ShortUnsignedIntegerEncoding`), namedNode(qudt)),
        quad(blankNodes[323], namedNode(`${rdf}rest`), blankNodes[549], namedNode(qudt)),
        quad(blankNodes[550], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[550], namedNode(`${owl}onProperty`), namedNode(`${dtype}code`), namedNode(qudt)),
        quad(blankNodes[550], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[378], namedNode(`${rdf}first`), namedNode(`${qudt}Book`), namedNode(qudt)),
        quad(blankNodes[378], namedNode(`${rdf}rest`), blankNodes[551], namedNode(qudt)),
        quad(blankNodes[552], namedNode(`${xsd}pattern`), literal(`[0-1]{10}`), namedNode(qudt)),
        quad(blankNodes[72], namedNode(`${rdf}first`), blankNodes[553], namedNode(qudt)),
        quad(blankNodes[72], namedNode(`${rdf}rest`), blankNodes[554], namedNode(qudt)),
        quad(blankNodes[555], namedNode(`${xsd}pattern`), literal(`[0-1]{4}`), namedNode(qudt)),
        quad(blankNodes[20], namedNode(`${rdf}first`), namedNode(`${ns24}ByteAligned`), namedNode(qudt)),
        quad(blankNodes[20], namedNode(`${rdf}rest`), blankNodes[526], namedNode(qudt)),
        quad(blankNodes[513], namedNode(`${rdf}first`), namedNode(`${qudt}UCUMcs`), namedNode(qudt)),
        quad(blankNodes[513], namedNode(`${rdf}rest`), blankNodes[521], namedNode(qudt)),
        quad(blankNodes[429], namedNode(`${rdf}first`), namedNode(`${qudt}IntegerDatatype`), namedNode(qudt)),
        quad(blankNodes[429], namedNode(`${rdf}rest`), blankNodes[556], namedNode(qudt)),
        quad(blankNodes[557], namedNode(`${rdf}first`), namedNode(`${qudt}FT_INERTIAL`), namedNode(qudt)),
        quad(blankNodes[557], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[558], namedNode(`${xsd}pattern`), literal(`[0-1]{5}`), namedNode(qudt)),
        quad(blankNodes[504], namedNode(`${rdf}first`), blankNodes[559], namedNode(qudt)),
        quad(blankNodes[504], namedNode(`${rdf}rest`), blankNodes[560], namedNode(qudt)),
        quad(blankNodes[561], namedNode(`${xsd}pattern`), literal(`[0-1]{6}`), namedNode(qudt)),
        quad(blankNodes[84], namedNode(`${rdf}first`), blankNodes[562], namedNode(qudt)),
        quad(blankNodes[84], namedNode(`${rdf}rest`), blankNodes[563], namedNode(qudt)),
        quad(blankNodes[114], namedNode(`${rdf}first`), namedNode(`${qudt}BitEncoding`), namedNode(qudt)),
        quad(blankNodes[114], namedNode(`${rdf}rest`), blankNodes[564], namedNode(qudt)),
        quad(blankNodes[565], namedNode(`${xsd}pattern`), literal(`[0-9]{4}\\-[0-9]{3}T[0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]{2}Z?`), namedNode(qudt)),
        quad(blankNodes[68], namedNode(`${rdf}first`), blankNodes[566], namedNode(qudt)),
        quad(blankNodes[68], namedNode(`${rdf}rest`), blankNodes[567], namedNode(qudt)),
        quad(blankNodes[431], namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[432], namedNode(`${rdf}first`), blankNodes[568], namedNode(qudt)),
        quad(blankNodes[432], namedNode(`${rdf}rest`), blankNodes[569], namedNode(qudt)),
        quad(blankNodes[515], namedNode(`${rdf}first`), namedNode(`${xsd}anySimpleType`), namedNode(qudt)),
        quad(blankNodes[515], namedNode(`${rdf}rest`), blankNodes[570], namedNode(qudt)),
        quad(blankNodes[571], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[571], namedNode(`${owl}onProperty`), namedNode(`${qudt}bitOrder`), namedNode(qudt)),
        quad(blankNodes[571], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[572], namedNode(`${rdf}first`), namedNode(`${qudt}DoublePrecisionType`), namedNode(qudt)),
        quad(blankNodes[572], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[551], namedNode(`${rdf}first`), namedNode(`${qudt}InBook`), namedNode(qudt)),
        quad(blankNodes[551], namedNode(`${rdf}rest`), blankNodes[573], namedNode(qudt)),
        quad(blankNodes[573], namedNode(`${rdf}first`), namedNode(`${qudt}InProceedings`), namedNode(qudt)),
        quad(blankNodes[573], namedNode(`${rdf}rest`), blankNodes[574], namedNode(qudt)),
        quad(blankNodes[404], namedNode(`${rdf}first`), namedNode(`${qudt}TupleMember`), namedNode(qudt)),
        quad(blankNodes[404], namedNode(`${rdf}rest`), blankNodes[575], namedNode(qudt)),
        quad(blankNodes[575], namedNode(`${rdf}first`), blankNodes[576], namedNode(qudt)),
        quad(blankNodes[575], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[163], namedNode(`${rdf}first`), namedNode(`${ns24}CC_EarthCentered`), namedNode(qudt)),
        quad(blankNodes[163], namedNode(`${rdf}rest`), blankNodes[577], namedNode(qudt)),
        quad(blankNodes[577], namedNode(`${rdf}first`), namedNode(`${ns24}CC_MoonCentered`), namedNode(qudt)),
        quad(blankNodes[577], namedNode(`${rdf}rest`), blankNodes[578], namedNode(qudt)),
        quad(blankNodes[309], namedNode(`${rdf}first`), namedNode(`${qudt}FT_NON-ROTATING`), namedNode(qudt)),
        quad(blankNodes[309], namedNode(`${rdf}rest`), blankNodes[557], namedNode(qudt)),
        quad(blankNodes[410], namedNode(`${rdf}first`), namedNode(`${qudt}RealDatatype`), namedNode(qudt)),
        quad(blankNodes[410], namedNode(`${rdf}rest`), blankNodes[572], namedNode(qudt)),
        quad(blankNodes[579], namedNode(`${xsd}pattern`), literal(`[0-1]{3}`), namedNode(qudt)),
        quad(blankNodes[580], namedNode(`${rdf}first`), namedNode(`${qudt}InCollection`), namedNode(qudt)),
        quad(blankNodes[580], namedNode(`${rdf}rest`), blankNodes[581], namedNode(qudt)),
        quad(blankNodes[581], namedNode(`${rdf}first`), namedNode(`${qudt}Conference`), namedNode(qudt)),
        quad(blankNodes[581], namedNode(`${rdf}rest`), blankNodes[518], namedNode(qudt)),
        quad(blankNodes[582], namedNode(`${xsd}length`), literal(`2`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[583], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[583], namedNode(`${owl}onProperty`), namedNode(`${qudt}signedness`), namedNode(qudt)),
        quad(blankNodes[583], namedNode(`${owl}hasValue`), namedNode(`${ns24}Signed`), namedNode(qudt)),
        quad(blankNodes[422], namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[423], namedNode(`${rdf}first`), blankNodes[584], namedNode(qudt)),
        quad(blankNodes[423], namedNode(`${rdf}rest`), blankNodes[585], namedNode(qudt)),
        quad(blankNodes[480], namedNode(`${rdf}first`), namedNode(`${qudt}IntegerDatatype`), namedNode(qudt)),
        quad(blankNodes[480], namedNode(`${rdf}rest`), blankNodes[586], namedNode(qudt)),
        quad(blankNodes[86], namedNode(`${rdf}first`), blankNodes[587], namedNode(qudt)),
        quad(blankNodes[86], namedNode(`${rdf}rest`), blankNodes[588], namedNode(qudt)),
        quad(blankNodes[90], namedNode(`${rdf}first`), blankNodes[589], namedNode(qudt)),
        quad(blankNodes[90], namedNode(`${rdf}rest`), blankNodes[590], namedNode(qudt)),
        quad(blankNodes[591], namedNode(`${xsd}maxInclusive`), literal(`31`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[365], namedNode(`${rdf}first`), namedNode(`${ns24}PadWithZeros`), namedNode(qudt)),
        quad(blankNodes[365], namedNode(`${rdf}rest`), blankNodes[592], namedNode(qudt)),
        quad(blankNodes[438], namedNode(`${rdf}first`), namedNode(`${qudt}IntegerDatatype`), namedNode(qudt)),
        quad(blankNodes[438], namedNode(`${rdf}rest`), blankNodes[593], namedNode(qudt)),
        quad(blankNodes[594], namedNode(`${xsd}length`), literal(`5`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[509], namedNode(`${rdf}first`), blankNodes[595], namedNode(qudt)),
        quad(blankNodes[509], namedNode(`${rdf}rest`), blankNodes[596], namedNode(qudt)),
        quad(blankNodes[597], namedNode(`${xsd}pattern`), literal(`[0-1]{7}`), namedNode(qudt)),
        quad(blankNodes[598], namedNode(`${rdf}first`), namedNode(`${qudt}Unpublished`), namedNode(qudt)),
        quad(blankNodes[598], namedNode(`${rdf}rest`), blankNodes[599], namedNode(qudt)),
        quad(blankNodes[599], namedNode(`${rdf}first`), namedNode(`${qudt}TechReport`), namedNode(qudt)),
        quad(blankNodes[599], namedNode(`${rdf}rest`), blankNodes[600], namedNode(qudt)),
        quad(blankNodes[601], namedNode(`${xsd}length`), literal(`11`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[74], namedNode(`${rdf}first`), blankNodes[516], namedNode(qudt)),
        quad(blankNodes[74], namedNode(`${rdf}rest`), blankNodes[602], namedNode(qudt)),
        quad(blankNodes[578], namedNode(`${rdf}first`), namedNode(`${ns24}CC_VehicleCentered`), namedNode(qudt)),
        quad(blankNodes[578], namedNode(`${rdf}rest`), blankNodes[603], namedNode(qudt)),
        quad(blankNodes[559], namedNode(`${xsd}minInclusive`), literal(`0.00`, namedNode(`${xsd}float`)), namedNode(qudt)),
        quad(blankNodes[593], namedNode(`${rdf}first`), namedNode(`${qudt}SignedType`), namedNode(qudt)),
        quad(blankNodes[593], namedNode(`${rdf}rest`), blankNodes[604], namedNode(qudt)),
        quad(blankNodes[604], namedNode(`${rdf}first`), blankNodes[605], namedNode(qudt)),
        quad(blankNodes[604], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[242], namedNode(`${sh}datatype`), namedNode(`${xsd}string`), namedNode(qudt)),
        quad(blankNodes[34], namedNode(`${rdf}first`), namedNode(`${qudt}ByRow`), namedNode(qudt)),
        quad(blankNodes[34], namedNode(`${rdf}rest`), blankNodes[606], namedNode(qudt)),
        quad(blankNodes[553], namedNode(`${xsd}length`), literal(`3`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[589], namedNode(`${xsd}length`), literal(`12`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[80], namedNode(`${rdf}first`), blankNodes[541], namedNode(qudt)),
        quad(blankNodes[80], namedNode(`${rdf}rest`), blankNodes[607], namedNode(qudt)),
        quad(blankNodes[592], namedNode(`${rdf}first`), namedNode(`${ns24}PadWithAny`), namedNode(qudt)),
        quad(blankNodes[592], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[511], namedNode(`${rdf}first`), blankNodes[608], namedNode(qudt)),
        quad(blankNodes[511], namedNode(`${rdf}rest`), blankNodes[609], namedNode(qudt)),
        quad(blankNodes[76], namedNode(`${rdf}first`), blankNodes[594], namedNode(qudt)),
        quad(blankNodes[76], namedNode(`${rdf}rest`), blankNodes[610], namedNode(qudt)),
        quad(blankNodes[462], namedNode(`${rdf}first`), namedNode(`${qudt}Enumeration`), namedNode(qudt)),
        quad(blankNodes[462], namedNode(`${rdf}rest`), blankNodes[611], namedNode(qudt)),
        quad(blankNodes[611], namedNode(`${rdf}first`), blankNodes[550], namedNode(qudt)),
        quad(blankNodes[611], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[570], namedNode(`${rdf}first`), namedNode(`${dtype}EnumeratedValue`), namedNode(qudt)),
        quad(blankNodes[570], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[600], namedNode(`${rdf}first`), namedNode(`${qudt}Manual`), namedNode(qudt)),
        quad(blankNodes[600], namedNode(`${rdf}rest`), blankNodes[580], namedNode(qudt)),
        quad(blankNodes[489], namedNode(`${rdf}first`), namedNode(`${qudt}IntegerDatatype`), namedNode(qudt)),
        quad(blankNodes[489], namedNode(`${rdf}rest`), blankNodes[612], namedNode(qudt)),
        quad(blankNodes[493], namedNode(`${rdf}first`), namedNode(`${qudt}NumericType`), namedNode(qudt)),
        quad(blankNodes[493], namedNode(`${rdf}rest`), blankNodes[613], namedNode(qudt)),
        quad(blankNodes[603], namedNode(`${rdf}first`), namedNode(`${ns24}CC_SunCentered`), namedNode(qudt)),
        quad(blankNodes[603], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[614], namedNode(`${xsd}pattern`), literal(`[0-1]{9}`), namedNode(qudt)),
        quad(blankNodes[574], namedNode(`${rdf}first`), namedNode(`${qudt}Proceedings`), namedNode(qudt)),
        quad(blankNodes[574], namedNode(`${rdf}rest`), blankNodes[598], namedNode(qudt)),
        quad(blankNodes[615], namedNode(`${xsd}maxInclusive`), literal(`100`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[616], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[616], namedNode(`${owl}onProperty`), namedNode(`${qudt}signedness`), namedNode(qudt)),
        quad(blankNodes[616], namedNode(`${owl}hasValue`), namedNode(`${ns24}Unsigned`), namedNode(qudt)),
        quad(blankNodes[617], namedNode(`${rdf}first`), namedNode(`${ns24}NegativeY`), namedNode(qudt)),
        quad(blankNodes[617], namedNode(`${rdf}rest`), blankNodes[618], namedNode(qudt)),
        quad(blankNodes[618], namedNode(`${rdf}first`), namedNode(`${ns24}NegativeZ`), namedNode(qudt)),
        quad(blankNodes[618], namedNode(`${rdf}rest`), blankNodes[528], namedNode(qudt)),
        quad(blankNodes[339], namedNode(`${rdf}first`), namedNode(`${ns24}LowToHigh`), namedNode(qudt)),
        quad(blankNodes[339], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[505], namedNode(`${rdf}first`), blankNodes[619], namedNode(qudt)),
        quad(blankNodes[505], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[619], namedNode(`${xsd}pattern`), literal(`[0-9A-F]*`), namedNode(qudt)),
        quad(blankNodes[363], namedNode(`${rdf}first`), namedNode(`${qudt}PartiallyOrdered`), namedNode(qudt)),
        quad(blankNodes[363], namedNode(`${rdf}rest`), blankNodes[527], namedNode(qudt)),
        quad(blankNodes[620], namedNode(`${xsd}maxInclusive`), literal(`4294967295`, namedNode(`${xsd}unsignedInt`)), namedNode(qudt)),
        quad(blankNodes[43], namedNode(`${rdf}first`), namedNode(`${ns24}PositiveY`), namedNode(qudt)),
        quad(blankNodes[43], namedNode(`${rdf}rest`), blankNodes[617], namedNode(qudt)),
        quad(blankNodes[471], namedNode(`${xsd}pattern`), literal(`[\\x21-\\x7e]+`), namedNode(qudt)),
        quad(blankNodes[564], namedNode(`${rdf}first`), namedNode(`${qudt}OctetEncoding`), namedNode(qudt)),
        quad(blankNodes[564], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[621], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[621], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}RealSinglePrecisionType`), namedNode(qudt)),
        quad(blankNodes[621], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[411], namedNode(`${rdf}first`), namedNode(`${qudt}RealDatatype`), namedNode(qudt)),
        quad(blankNodes[411], namedNode(`${rdf}rest`), blankNodes[622], namedNode(qudt)),
        quad(blankNodes[566], namedNode(`${xsd}length`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[442], namedNode(`${rdf}first`), namedNode(`${qudt}UNSIGNED`), namedNode(qudt)),
        quad(blankNodes[442], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[469], namedNode(`${xsd}pattern`), literal(`[\\x21,\\x23-\\x27,\\x2a,\\x2c,\\x30-\\x3c,\\x3e-\\x5a,\\x5c,\\x5e-\\x7a,\\x7c,\\x7e]+`), namedNode(qudt)),
        quad(blankNodes[623], namedNode(`${xsd}pattern`), literal(`[0-1]`), namedNode(qudt)),
        quad(blankNodes[587], namedNode(`${xsd}length`), literal(`10`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[605], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[605], namedNode(`${owl}onProperty`), namedNode(`${qudt}bytes`), namedNode(qudt)),
        quad(blankNodes[605], namedNode(`${owl}hasValue`), literal(`3`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[562], namedNode(`${xsd}length`), literal(`9`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[78], namedNode(`${rdf}first`), blankNodes[624], namedNode(qudt)),
        quad(blankNodes[78], namedNode(`${rdf}rest`), blankNodes[625], namedNode(qudt)),
        quad(blankNodes[473], namedNode(`${rdf}first`), blankNodes[536], namedNode(qudt)),
        quad(blankNodes[473], namedNode(`${rdf}rest`), blankNodes[626], namedNode(qudt)),
        quad(blankNodes[606], namedNode(`${rdf}first`), namedNode(`${qudt}ByLeftMostIndex`), namedNode(qudt)),
        quad(blankNodes[606], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[627], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[627], namedNode(`${owl}onProperty`), namedNode(`${qudt}xCoordinateDefinition`), namedNode(qudt)),
        quad(blankNodes[627], namedNode(`${owl}maxCardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[628], namedNode(`${xsd}pattern`), literal(`[0-1]{2}`), namedNode(qudt)),
        quad(blankNodes[337], namedNode(`${rdf}first`), namedNode(`${ns24}Major`), namedNode(qudt)),
        quad(blankNodes[337], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[629], namedNode(`${xsd}maxInclusive`), literal(`100.00`, namedNode(`${xsd}float`)), namedNode(qudt)),
        quad(blankNodes[88], namedNode(`${rdf}first`), blankNodes[601], namedNode(qudt)),
        quad(blankNodes[88], namedNode(`${rdf}rest`), blankNodes[630], namedNode(qudt)),
        quad(blankNodes[631], namedNode(`${xsd}pattern`), literal(`[0-1]{11}`), namedNode(qudt)),
        quad(blankNodes[524], namedNode(`${rdf}first`), namedNode(`${qudt}UnsignedType`), namedNode(qudt)),
        quad(blankNodes[524], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[586], namedNode(`${rdf}first`), namedNode(`${qudt}UnsignedType`), namedNode(qudt)),
        quad(blankNodes[586], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[612], namedNode(`${rdf}first`), namedNode(`${qudt}SignedType`), namedNode(qudt)),
        quad(blankNodes[612], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[556], namedNode(`${rdf}first`), namedNode(`${qudt}SignedType`), namedNode(qudt)),
        quad(blankNodes[556], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[547], namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(blankNodes[548], namedNode(`${rdf}first`), blankNodes[632], namedNode(qudt)),
        quad(blankNodes[548], namedNode(`${rdf}rest`), blankNodes[633], namedNode(qudt)),
        quad(blankNodes[632], namedNode(`${sh}datatype`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(blankNodes[633], namedNode(`${rdf}first`), blankNodes[634], namedNode(qudt)),
        quad(blankNodes[633], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[634], namedNode(`${sh}datatype`), namedNode(`${xsd}decimal`), namedNode(qudt)),
        quad(blankNodes[584], namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(blankNodes[585], namedNode(`${rdf}first`), blankNodes[635], namedNode(qudt)),
        quad(blankNodes[585], namedNode(`${rdf}rest`), blankNodes[636], namedNode(qudt)),
        quad(blankNodes[635], namedNode(`${sh}datatype`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(blankNodes[636], namedNode(`${rdf}first`), blankNodes[637], namedNode(qudt)),
        quad(blankNodes[636], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[637], namedNode(`${sh}datatype`), namedNode(`${xsd}decimal`), namedNode(qudt)),
        quad(blankNodes[569], namedNode(`${rdf}first`), blankNodes[638], namedNode(qudt)),
        quad(blankNodes[569], namedNode(`${rdf}rest`), blankNodes[639], namedNode(qudt)),
        quad(blankNodes[638], namedNode(`${sh}datatype`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(blankNodes[639], namedNode(`${rdf}first`), blankNodes[640], namedNode(qudt)),
        quad(blankNodes[639], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[568], namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(blankNodes[640], namedNode(`${sh}datatype`), namedNode(`${xsd}decimal`), namedNode(qudt)),
        quad(blankNodes[523], namedNode(`${rdf}first`), blankNodes[641], namedNode(qudt)),
        quad(blankNodes[523], namedNode(`${rdf}rest`), blankNodes[642], namedNode(qudt)),
        quad(blankNodes[641], namedNode(`${sh}datatype`), namedNode(`${xsd}float`), namedNode(qudt)),
        quad(blankNodes[642], namedNode(`${rdf}first`), blankNodes[643], namedNode(qudt)),
        quad(blankNodes[642], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[522], namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(blankNodes[643], namedNode(`${sh}datatype`), namedNode(`${xsd}decimal`), namedNode(qudt)),
        quad(blankNodes[535], namedNode(`${sh}datatype`), namedNode(`${xsd}integer`), namedNode(qudt)),
        quad(blankNodes[542], namedNode(`${rdf}first`), blankNodes[583], namedNode(qudt)),
        quad(blankNodes[542], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[567], namedNode(`${rdf}first`), blankNodes[623], namedNode(qudt)),
        quad(blankNodes[567], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[644], namedNode(`${rdf}first`), blankNodes[628], namedNode(qudt)),
        quad(blankNodes[644], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[70], namedNode(`${rdf}first`), blankNodes[582], namedNode(qudt)),
        quad(blankNodes[70], namedNode(`${rdf}rest`), blankNodes[644], namedNode(qudt)),
        quad(blankNodes[630], namedNode(`${rdf}first`), blankNodes[631], namedNode(qudt)),
        quad(blankNodes[630], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[626], namedNode(`${rdf}first`), blankNodes[565], namedNode(qudt)),
        quad(blankNodes[626], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[645], namedNode(`${rdf}first`), blankNodes[540], namedNode(qudt)),
        quad(blankNodes[645], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[82], namedNode(`${rdf}first`), blankNodes[646], namedNode(qudt)),
        quad(blankNodes[82], namedNode(`${rdf}rest`), blankNodes[645], namedNode(qudt)),
        quad(blankNodes[646], namedNode(`${xsd}length`), literal(`8`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[602], namedNode(`${rdf}first`), blankNodes[555], namedNode(qudt)),
        quad(blankNodes[602], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[625], namedNode(`${rdf}first`), blankNodes[561], namedNode(qudt)),
        quad(blankNodes[625], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[624], namedNode(`${xsd}length`), literal(`6`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[554], namedNode(`${rdf}first`), blankNodes[579], namedNode(qudt)),
        quad(blankNodes[554], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[544], namedNode(`${rdf}first`), blankNodes[520], namedNode(qudt)),
        quad(blankNodes[544], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[543], namedNode(`${xsd}minInclusive`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[647], namedNode(`${rdf}first`), blankNodes[648], namedNode(qudt)),
        quad(blankNodes[647], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[648], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[648], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}UnsignedIntegerType`), namedNode(qudt)),
        quad(blankNodes[648], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[405], namedNode(`${rdf}first`), namedNode(`${qudt}TupleMemberType`), namedNode(qudt)),
        quad(blankNodes[405], namedNode(`${rdf}rest`), blankNodes[647], namedNode(qudt)),
        quad(blankNodes[596], namedNode(`${rdf}first`), blankNodes[591], namedNode(qudt)),
        quad(blankNodes[596], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[595], namedNode(`${xsd}minInclusive`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[613], namedNode(`${rdf}first`), blankNodes[616], namedNode(qudt)),
        quad(blankNodes[613], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[610], namedNode(`${rdf}first`), blankNodes[558], namedNode(qudt)),
        quad(blankNodes[610], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[563], namedNode(`${rdf}first`), blankNodes[614], namedNode(qudt)),
        quad(blankNodes[563], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[531], namedNode(`${rdf}first`), blankNodes[620], namedNode(qudt)),
        quad(blankNodes[531], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[530], namedNode(`${xsd}minInclusive`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[590], namedNode(`${rdf}first`), blankNodes[546], namedNode(qudt)),
        quad(blankNodes[590], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[560], namedNode(`${rdf}first`), blankNodes[629], namedNode(qudt)),
        quad(blankNodes[560], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[588], namedNode(`${rdf}first`), blankNodes[552], namedNode(qudt)),
        quad(blankNodes[588], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[576], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[576], namedNode(`${owl}allValuesFrom`), namedNode(`${qudt}UnsignedIntegerType`), namedNode(qudt)),
        quad(blankNodes[576], namedNode(`${owl}onProperty`), namedNode(`${qudt}elementType`), namedNode(qudt)),
        quad(blankNodes[609], namedNode(`${rdf}first`), blankNodes[615], namedNode(qudt)),
        quad(blankNodes[609], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[608], namedNode(`${xsd}minInclusive`), literal(`0`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[607], namedNode(`${rdf}first`), blankNodes[597], namedNode(qudt)),
        quad(blankNodes[607], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[532], namedNode(`${rdf}first`), blankNodes[621], namedNode(qudt)),
        quad(blankNodes[532], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[649], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[649], namedNode(`${owl}onProperty`), namedNode(`${qudt}zAxisDefinition`), namedNode(qudt)),
        quad(blankNodes[649], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[650], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[650], namedNode(`${owl}onProperty`), namedNode(`${qudt}zAxisDefinition`), namedNode(qudt)),
        quad(blankNodes[650], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[120], namedNode(`${rdf}first`), namedNode(`${qudt}CT_FINITE`), namedNode(qudt)),
        quad(blankNodes[120], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[121], namedNode(`${rdf}first`), namedNode(`${qudt}CT_FINITE`), namedNode(qudt)),
        quad(blankNodes[121], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[651], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[651], namedNode(`${owl}onProperty`), namedNode(`${qudt}xAxisDefinition`), namedNode(qudt)),
        quad(blankNodes[651], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[652], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[652], namedNode(`${owl}onProperty`), namedNode(`${qudt}xAxisDefinition`), namedNode(qudt)),
        quad(blankNodes[652], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[622], namedNode(`${rdf}first`), namedNode(`${qudt}SinglePrecisionType`), namedNode(qudt)),
        quad(blankNodes[622], namedNode(`${rdf}rest`), namedNode(`${rdf}nil`), namedNode(qudt)),
        quad(blankNodes[653], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[653], namedNode(`${owl}onProperty`), namedNode(`${qudt}yAxisDefinition`), namedNode(qudt)),
        quad(blankNodes[653], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[654], namedNode(`${rdf}type`), namedNode(`${owl}Restriction`), namedNode(qudt)),
        quad(blankNodes[654], namedNode(`${owl}onProperty`), namedNode(`${qudt}yAxisDefinition`), namedNode(qudt)),
        quad(blankNodes[654], namedNode(`${owl}cardinality`), literal(`1`, namedNode(`${xsd}integer`)), namedNode(qudt)),
        quad(blankNodes[549], namedNode(`${rdf}first`), namedNode(`${qudt}ShortUnsignedIntegerEncoding`), namedNode(qudt)),
        quad(blankNodes[549], namedNode(`${rdf}rest`), blankNodes[538], namedNode(qudt)),
    ];
};
